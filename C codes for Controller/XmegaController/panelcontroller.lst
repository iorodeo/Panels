
panelcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ba16  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004e0  00802000  0000ba16  0000baca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000071d  008024e0  008024e0  0000bfaa  2**0
                  ALLOC
  3 .eeprom       00000082  00810000  00810000  0000bfaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000d08  00000000  00000000  0000c02c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000072  00000000  00000000  0000cd34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000140  00000000  00000000  0000cda6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000d7c  00000000  00000000  0000cee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000950d  00000000  00000000  0000dc62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000015d4  00000000  00000000  0001716f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006697  00000000  00000000  00018743  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000a30  00000000  00000000  0001eddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000205c  00000000  00000000  0001f80c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000078b4  00000000  00000000  00021868  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000258  00000000  00000000  0002911c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__ctors_end>
       4:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
       8:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
       c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      10:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      14:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      18:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      1c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      20:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      24:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      28:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      2c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      30:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      34:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__vector_13>
      38:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      3c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      40:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      44:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      48:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      4c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      50:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      54:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      58:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      5c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      60:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      64:	0c 94 8e 2d 	jmp	0x5b1c	; 0x5b1c <__vector_25>
      68:	0c 94 de 2d 	jmp	0x5bbc	; 0x5bbc <__vector_26>
      6c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      70:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      74:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      78:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      7c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      80:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      84:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      88:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      8c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      90:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      94:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      98:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      9c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      a0:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      a4:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      a8:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      ac:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      b0:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      b4:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      b8:	0c 94 af 1f 	jmp	0x3f5e	; 0x3f5e <__vector_46>
      bc:	0c 94 53 2e 	jmp	0x5ca6	; 0x5ca6 <__vector_47>
      c0:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      c4:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      c8:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      cc:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      d0:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      d4:	0c 94 4e 53 	jmp	0xa69c	; 0xa69c <__vector_53>
      d8:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      dc:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      e0:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      e4:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      e8:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      ec:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      f0:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      f4:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      f8:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
      fc:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     100:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     104:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     108:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     10c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     110:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     114:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     118:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     11c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     120:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     124:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     128:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     12c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     130:	0c 94 e4 1f 	jmp	0x3fc8	; 0x3fc8 <__vector_76>
     134:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     138:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     13c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     140:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     144:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     148:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     14c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     150:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     154:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     158:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     15c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     160:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     164:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     168:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     16c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     170:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     174:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     178:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     17c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     180:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     184:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     188:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     18c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     190:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     194:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     198:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     19c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1a0:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1a4:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1a8:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1ac:	0c 94 7a 1f 	jmp	0x3ef4	; 0x3ef4 <__vector_107>
     1b0:	0c 94 84 54 	jmp	0xa908	; 0xa908 <__vector_108>
     1b4:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1b8:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1bc:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1c0:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1c4:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1c8:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1cc:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1d0:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1d4:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1d8:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1dc:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1e0:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1e4:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1e8:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1ec:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1f0:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__bad_interrupt>
     1f4:	bc 1a       	sub	r11, r28
     1f6:	c1 1a       	sub	r12, r17
     1f8:	c6 1a       	sub	r12, r22
     1fa:	ca 1a       	sub	r12, r26
     1fc:	ce 1a       	sub	r12, r30
     1fe:	d2 1a       	sub	r13, r18
     200:	db 1a       	sub	r13, r27
     202:	df 1a       	sub	r13, r31
     204:	e3 1a       	sub	r14, r19
     206:	b2 51       	subi	r27, 0x12	; 18
     208:	be 51       	subi	r27, 0x1E	; 30
     20a:	1f 52       	subi	r17, 0x2F	; 47
     20c:	25 52       	subi	r18, 0x25	; 37
     20e:	af 51       	subi	r26, 0x1F	; 31
     210:	af 51       	subi	r26, 0x1F	; 31
     212:	af 51       	subi	r26, 0x1F	; 31
     214:	af 51       	subi	r26, 0x1F	; 31
     216:	af 51       	subi	r26, 0x1F	; 31
     218:	af 51       	subi	r26, 0x1F	; 31
     21a:	c0 52       	subi	r28, 0x20	; 32
     21c:	c5 52       	subi	r28, 0x25	; 37
     21e:	c7 52       	subi	r28, 0x27	; 39
     220:	d5 52       	subi	r29, 0x25	; 37
     222:	f4 52       	subi	r31, 0x24	; 36

00000224 <__c.5504>:
     224:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     234:	53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00              SDInfo.mat...

00000241 <__c.5502>:
     241:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     251:	20 72 65 6d 61 69 6e 65 64 20 64 61 74 61 2e 0a      remained data..
	...

00000262 <__c.5497>:
     262:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     272:	20 53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00            SDInfo.mat...

00000280 <__c.5445>:
     280:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     290:	20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e 63 43      in update_funcC
     2a0:	6e 74 5f 79 20 6c 6f 61 64 20 6e 65 78 74 20 62     nt_y load next b
     2b0:	75 66 66 65 72 0a 00                                uffer..

000002b7 <__c.5443>:
     2b7:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

000002c2 <__c.5441>:
     2c2:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     2d2:	69 6e 20 75 70 64 61 74 65 5f 66 75 6e 63 43 6e     in update_funcCn
     2e2:	74 5f 79 0a 00                                      t_y..

000002e7 <__c.5439>:
     2e7:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

000002f2 <__c.5384>:
     2f2:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     302:	20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e 63 43      in update_funcC
     312:	6e 74 5f 78 0a 00                                   nt_x..

00000318 <__c.5382>:
     318:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

00000323 <__c.5380>:
     323:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     333:	69 6e 20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e     in in update_fun
     343:	63 43 6e 74 5f 78 0a 00                             cCnt_x..

0000034b <__c.5378>:
     34b:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

00000356 <__c.5328>:
     356:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     366:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     376:	2e 0a 00                                            ...

00000379 <__c.5325>:
     379:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     389:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 59 2e 0a     set_vel_func Y..
	...

0000039a <__c.5323>:
     39a:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 69 6e 20     Error f_read in 
     3aa:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 59 2e 0a     set_vel_func Y..
	...

000003bb <__c.5321>:
     3bb:	53 65 74 74 69 6e 67 20 76 65 6c 6f 63 69 74 79     Setting velocity
     3cb:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     3db:	20 59 0a 00                                          Y..

000003df <__c.5317>:
     3df:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     3ef:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 58 2e 0a     set_vel_func X..
	...

00000400 <__c.5315>:
     400:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 69 6e 20     Error f_read in 
     410:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 58 2e 0a     set_vel_func X..
	...

00000421 <__c.5313>:
     421:	53 65 74 74 69 6e 67 20 76 65 6c 6f 63 69 74 79     Setting velocity
     431:	20 66 75 6e 63 74 69 6f 6e 20 20 25 75 20 66 6f      function  %u fo
     441:	72 20 58 0a 00                                      r X..

00000446 <__c.5263>:
     446:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     456:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     466:	2e 0a 00                                            ...

00000469 <__c.5260>:
     469:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     479:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a     set_pos_func Y..
	...

0000048a <__c.5258>:
     48a:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     49a:	5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a 00           _pos_func Y...

000004a8 <__c.5256>:
     4a8:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     4b8:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     4c8:	20 59 0a 00                                          Y..

000004cc <__c.5252>:
     4cc:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     4dc:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 58 2e 0a     set_pos_func X..
	...

000004ed <__c.5250>:
     4ed:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     4fd:	5f 70 6f 73 5f 66 75 6e 63 20 58 0a 00              _pos_func X..

0000050a <__c.5248>:
     50a:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     51a:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     52a:	20 58 0a 00                                          X..

0000052e <__c.5226>:
     52e:	57 72 6f 6e 67 20 66 75 6e 63 74 69 6f 6e 20 63     Wrong function c
     53e:	68 61 6e 6e 65 6c 20 6e 75 6d 62 65 72 2e 0a 00     hannel number...

0000054e <__c.5220>:
     54e:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     55e:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 59 2e 0a     function for Y..
	...

0000056f <__c.5213>:
     56f:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     57f:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 58 2e 0a     function for X..
	...

00000590 <__c.5164>:
     590:	20 62 65 6e 63 68 5f 74 69 6d 65 20 3d 20 25 6c      bench_time = %l
     5a0:	75 20 6d 73 2c 20 66 72 61 6d 65 5f 72 61 74 65     u ms, frame_rate
     5b0:	20 3d 20 25 75 0a 00                                 = %u..

000005b7 <__c.5140>:
     5b7:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     5c7:	68 61 72 64 77 61 72 65 20 63 6f 6e 66 69 67 20     hardware config 
     5d7:	66 69 6c 65 20 6f 6e 20 74 68 65 20 53 44 20 63     file on the SD c
     5e7:	61 72 64 2e 0a 00                                   ard...

000005ed <__c.5138>:
     5ed:	53 75 63 63 65 73 73 66 75 6c 6c 79 20 6c 6f 61     Successfully loa
     5fd:	64 20 74 68 65 20 68 61 72 64 77 61 72 65 20 63     d the hardware c
     60d:	6f 6e 66 69 67 20 66 69 6c 65 20 74 6f 20 45 45     onfig file to EE
     61d:	50 52 4f 4d 0a 00                                   PROM..

00000623 <__c.5083>:
     623:	45 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 70 61     Error opening pa
     633:	74 74 65 72 6e 20 66 69 6c 65 0a 00                 ttern file..

0000063f <__c.5081>:
     63f:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 69 6e     Error reading in
     64f:	20 70 61 74 74 65 72 6e 20 66 69 6c 65 0a 00         pattern file..

0000065e <__c.5079>:
     65e:	20 20 78 5f 6e 75 6d 20 3d 20 25 75 0a 20 20 79       x_num = %u.  y
     66e:	5f 6e 75 6d 20 3d 20 25 75 0a 20 20 6e 75 6d 5f     _num = %u.  num_
     67e:	70 61 6e 65 6c 73 20 3d 20 25 75 0a 20 20 67 73     panels = %u.  gs
     68e:	5f 76 61 6c 75 65 20 3d 20 25 75 0a 20 72 6f 77     _value = %u. row
     69e:	5f 63 6f 6d 70 72 65 73 73 69 6f 6e 20 3d 20 25     _compression = %
     6ae:	75 0a 00                                            u..

000006b1 <__c.5077>:
     6b1:	53 65 74 74 69 6e 67 20 70 61 74 74 65 72 6e 20     Setting pattern 
     6c1:	25 75 3a 0a 00                                      %u:..

000006c6 <__c.4764>:
     6c6:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     6d6:	20 25 75 2c 20 6f 66 66 73 65 74 20 3d 20 25 6c      %u, offset = %l
     6e6:	75 0a 00                                            u..

000006e9 <__c.4762>:
     6e9:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     6f9:	20 69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61      in fetch_displa
     709:	79 5f 66 72 61 6d 65 21 0a 00                       y_frame!..

00000713 <__c.4760>:
     713:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     723:	20 25 75 2c 20 63 6e 74 3d 20 25 75 0a 00            %u, cnt= %u..

00000731 <__c.4758>:
     731:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     741:	69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61 79     in fetch_display
     751:	5f 66 72 61 6d 65 21 0a 00                          _frame!..

0000075a <__c.4681>:
     75a:	53 75 63 63 65 73 73 20 73 65 74 20 74 68 65 20     Success set the 
     76a:	6e 65 77 20 6c 61 73 65 72 20 70 61 74 74 65 72     new laser patter
     77a:	6e 2e 0a 00                                         n...

0000077e <__c.4625>:
     77e:	73 65 74 5f 70 6f 73 69 74 69 6f 6e 3a 20 69 6e     set_position: in
     78e:	64 65 78 5f 78 3d 20 25 75 2c 20 20 69 6e 64 65     dex_x= %u,  inde
     79e:	78 5f 79 3d 20 25 75 2c 20 61 6e 64 20 66 72 61     x_y= %u, and fra
     7ae:	6d 65 5f 6e 75 6d 3d 20 25 75 0a 00                 me_num= %u..

000007ba <__c.4588>:
     7ba:	66 75 6e 63 74 69 6f 6e 20 59 20 75 70 64 61 74     function Y updat
     7ca:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     7da:	2e 0a 00                                            ...

000007dd <__c.4585>:
     7dd:	66 75 6e 63 74 69 6f 6e 20 58 20 75 70 64 61 74     function X updat
     7ed:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     7fd:	2e 0a 00                                            ...

00000800 <__c.4487>:
     800:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     810:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     820:	50 43 20 64 75 6d 70 69 6e 67 20 6d 6f 64 65 21     PC dumping mode!
     830:	0a 00                                               ..

00000832 <__c.4484>:
     832:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     842:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     852:	63 6f 6e 74 72 6f 6c 6c 65 72 20 6d 6f 64 65 21     controller mode!
     862:	0a 00                                               ..

00000864 <__c.4481>:
     864:	41 44 43 5f 76 61 6c 75 65 20 3d 20 20 25 64 3a     ADC_value =  %d:
     874:	0a 00                                               ..

00000876 <__c.4472>:
     876:	43 75 72 72 65 6e 74 20 76 65 72 73 69 6f 6e 20     Current version 
     886:	6e 75 6d 62 65 72 20 69 73 20 25 73 2e 0a 00        number is %s...

00000895 <__c.4377>:
     895:	6d 65 73 73 61 67 65 5f 6c 65 6e 67 74 68 20 3d     message_length =
     8a5:	20 25 75 0a 00                                       %u..

000008aa <__c.4371>:
     8aa:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
     8ba:	6d 6f 64 65 20 69 73 20 74 68 65 20 50 43 20 64     mode is the PC d
     8ca:	75 6d 70 69 6e 67 20 6d 6f 64 65 21 0a 00           umping mode!..

000008d8 <__c.4360>:
     8d8:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
     8e8:	6d 6f 64 65 20 69 73 20 74 68 65 20 43 6f 6e 74     mode is the Cont
     8f8:	72 6f 6c 6c 65 72 20 6d 6f 64 65 21 0a 00           roller mode!..

00000906 <__c.4357>:
     906:	3f 3f 3f 0a 00                                      ???..

0000090b <__c.4354>:
     90b:	20 4e 4f 54 20 52 45 41 44 59 21 0a 00               NOT READY!..

00000918 <__c.4351>:
     918:	20 57 52 49 54 45 20 50 52 4f 54 45 43 54 45 44      WRITE PROTECTED
     928:	21 0a 00                                            !..

0000092b <__c.4348>:
     92b:	20 45 52 52 4f 52 21 0a 00                           ERROR!..

00000934 <__c.4344>:
     934:	20 46 41 54 20 4f 4b 21 0a 00                        FAT OK!..

0000093e <__c.4341>:
     93e:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 46 41 54     Initializing FAT
     94e:	20 44 69 73 6b 2e 2e 2e 00                           Disk....

00000957 <__c.4339>:
     957:	3f 3f 3f 0a 00                                      ???..

0000095c <__c.4336>:
     95c:	53 44 48 43 0a 00                                   SDHC..

00000962 <__c.4333>:
     962:	42 4c 4b 0a 00                                      BLK..

00000967 <__c.4330>:
     967:	53 44 43 0a 00                                      SDC..

0000096c <__c.4327>:
     96c:	53 44 32 0a 00                                      SD2..

00000971 <__c.4324>:
     971:	53 44 0a 00                                         SD..

00000975 <__c.4320>:
     975:	4d 4d 43 0a 00                                      MMC..

0000097a <__c.4317>:
     97a:	43 61 72 64 20 74 79 70 65 3a 20 00                 Card type: .

00000986 <__c.4315>:
     986:	53 44 20 63 61 72 64 20 69 73 20 69 6e 69 74 69     SD card is initi
     996:	61 6c 69 7a 65 64 0a 00                             alized..

0000099e <__c.4307>:
     99e:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 66     Initialization f
     9ae:	61 69 6c 65 64 21 21 21 0a 00                       ailed!!!..

000009b8 <__c.4302>:
     9b8:	53 44 20 63 61 72 64 20 69 73 20 57 72 69 74 65     SD card is Write
     9c8:	20 50 72 6f 74 65 63 74 65 64 21 0a 00               Protected!..

000009d5 <__c.4297>:
     9d5:	49 6e 73 65 72 74 20 53 44 20 63 61 72 64 00        Insert SD card.

000009e4 <__c.4295>:
     9e4:	0a 4d 61 69 6e 20 43 6f 6e 74 72 6f 6c 6c 65 72     .Main Controller
     9f4:	20 57 6f 72 6b 73 0a 00                              Works..

000009fc <__c.4519>:
     9fc:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     a0c:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

00000a17 <__c.4517>:
     a17:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
     a27:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

00000a32 <__c.4511>:
     a32:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     a42:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     a52:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     a62:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 0a     d of eeprom.hex.
	...

00000a73 <__c.4509>:
     a73:	0a 00                                               ..

00000a75 <__c.4507>:
     a75:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     a85:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000a92 <__c.4502>:
     a92:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     aa2:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000aaf <__c.4500>:
     aaf:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     abf:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     acf:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000ada <__c.4498>:
     ada:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     aea:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     afa:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
     b0a:	78 0a 00                                            x..

00000b0d <__c.4492>:
     b0d:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

00000b1a <__c.4490>:
     b1a:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     b2a:	20 65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00            eeprom.hex...

00000b38 <__c.4487>:
     b38:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     b48:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     b58:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     b68:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 2e     d of eeprom.hex.
     b78:	0a 00                                               ..

00000b7a <__c.4482>:
     b7a:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     b8a:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     b9a:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000ba5 <__c.4480>:
     ba5:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     bb5:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     bc5:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
     bd5:	78 2e 0a 00                                         x...

00000bd9 <__c.4474>:
     bd9:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

00000be6 <__c.4472>:
     be6:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
     bf6:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

00000c04 <__c.4467>:
     c04:	65 65 70 72 6f 6d 20 70 61 6e 65 6c 20 25 75 2e     eeprom panel %u.
     c14:	0a 00                                               ..

00000c16 <__c.4465>:
     c16:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     c26:	65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00              eeprom.hex...

00000c33 <__c.4588>:
     c33:	25 53 0a 00                                         %S..

00000c37 <str.4574>:
     c37:	4f 4b 00 44 49 53 4b 5f 45 52 52 00 49 4e 54 5f     OK.DISK_ERR.INT_
     c47:	45 52 52 00 4e 4f 54 5f 52 45 41 44 59 00 4e 4f     ERR.NOT_READY.NO
     c57:	5f 46 49 4c 45 00 4e 4f 5f 50 41 54 48 00 49 4e     _FILE.NO_PATH.IN
     c67:	56 41 4c 49 44 5f 4e 41 4d 45 00 44 45 4e 49 45     VALID_NAME.DENIE
     c77:	44 00 45 58 49 53 54 00 49 4e 56 41 4c 49 44 5f     D.EXIST.INVALID_
     c87:	4f 42 4a 45 43 54 00 57 52 49 54 45 5f 50 52 4f     OBJECT.WRITE_PRO
     c97:	54 45 43 54 45 44 00 49 4e 56 41 4c 49 44 5f 44     TECTED.INVALID_D
     ca7:	52 49 56 45 00 4e 4f 54 5f 45 4e 41 42 4c 45 44     RIVE.NOT_ENABLED
     cb7:	00 4e 4f 5f 46 49 4c 45 5f 53 59 53 54 45 4d 00     .NO_FILE_SYSTEM.
     cc7:	4d 4b 46 53 5f 41 42 4f 52 54 45 44 00 54 49 4d     MKFS_ABORTED.TIM
     cd7:	45 4f 55 54 00 00                                   EOUT..

00000cdd <__c.4387>:
     cdd:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     ced:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

00000cf8 <__c.4385>:
     cf8:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
     d08:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

00000d13 <__c.4379>:
     d13:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     d23:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     d33:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     d43:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

00000d53 <__c.4377>:
     d53:	0a 00                                               ..

00000d55 <__c.4375>:
     d55:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     d65:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000d72 <__c.4370>:
     d72:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     d82:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000d8f <__c.4368>:
     d8f:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     d9f:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     daf:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000dba <__c.4366>:
     dba:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     dca:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     dda:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
     dea:	0a 00                                               ..

00000dec <__c.4360>:
     dec:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

00000df9 <__c.4358>:
     df9:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     e09:	20 70 61 6e 65 6c 2e 68 65 78 2e 0a 00               panel.hex...

00000e16 <__c.4355>:
     e16:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     e26:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     e36:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     e46:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

00000e56 <__c.4350>:
     e56:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     e66:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     e76:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000e81 <__c.4348>:
     e81:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     e91:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     ea1:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
     eb1:	2e 0a 00                                            ...

00000eb4 <__c.4342>:
     eb4:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

00000ec1 <__c.4340>:
     ec1:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
     ed1:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

00000edf <__c.4335>:
     edf:	66 6c 61 73 68 20 70 61 6e 65 6c 20 25 75 2e 0a     flash panel %u..
	...

00000ef0 <__c.4333>:
     ef0:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     f00:	70 61 6e 65 6c 2e 68 65 78 2e 0a 00                 panel.hex...

00000f0c <__c.4283>:
     f0c:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
     f1c:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00000f29 <__c.4278>:
     f29:	23 00                                               #.

00000f2b <__c.4248>:
     f2b:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
     f3b:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00000f48 <__c.4243>:
     f48:	23 00                                               #.

00000f4a <__c.4222>:
     f4a:	42 61 64 20 65 65 70 72 6f 6d 20 77 72 69 74 65     Bad eeprom write
     f5a:	2c 20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00        , result = %u..

00000f69 <__c.4217>:
     f69:	23 00                                               #.

00000f6b <__c.4186>:
     f6b:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
     f7b:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00000f88 <__c.4181>:
     f88:	23 00                                               #.

00000f8a <__c.4150>:
     f8a:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
     f9a:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00000fa7 <__c.4145>:
     fa7:	23 00                                               #.

00000fa9 <__c.4123>:
     fa9:	42 61 64 20 66 6c 61 73 68 20 77 72 69 74 65 2c     Bad flash write,
     fb9:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

00000fc7 <__c.4118>:
     fc7:	23 00 00                                            #..

00000fca <__ctors_end>:
     fca:	11 24       	eor	r1, r1
     fcc:	1f be       	out	0x3f, r1	; 63
     fce:	cf ef       	ldi	r28, 0xFF	; 255
     fd0:	df e3       	ldi	r29, 0x3F	; 63
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	00 e0       	ldi	r16, 0x00	; 0
     fd8:	0c bf       	out	0x3c, r16	; 60
     fda:	18 be       	out	0x38, r1	; 56
     fdc:	19 be       	out	0x39, r1	; 57
     fde:	1a be       	out	0x3a, r1	; 58
     fe0:	1b be       	out	0x3b, r1	; 59

00000fe2 <__do_copy_data>:
     fe2:	14 e2       	ldi	r17, 0x24	; 36
     fe4:	a0 e0       	ldi	r26, 0x00	; 0
     fe6:	b0 e2       	ldi	r27, 0x20	; 32
     fe8:	e6 e1       	ldi	r30, 0x16	; 22
     fea:	fa eb       	ldi	r31, 0xBA	; 186
     fec:	00 e0       	ldi	r16, 0x00	; 0
     fee:	0b bf       	out	0x3b, r16	; 59
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <__do_copy_data+0x14>
     ff2:	07 90       	elpm	r0, Z+
     ff4:	0d 92       	st	X+, r0
     ff6:	a0 3e       	cpi	r26, 0xE0	; 224
     ff8:	b1 07       	cpc	r27, r17
     ffa:	d9 f7       	brne	.-10     	; 0xff2 <__do_copy_data+0x10>
     ffc:	1b be       	out	0x3b, r1	; 59

00000ffe <__do_clear_bss>:
     ffe:	1b e2       	ldi	r17, 0x2B	; 43
    1000:	a0 ee       	ldi	r26, 0xE0	; 224
    1002:	b4 e2       	ldi	r27, 0x24	; 36
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <.do_clear_bss_start>

00001006 <.do_clear_bss_loop>:
    1006:	1d 92       	st	X+, r1

00001008 <.do_clear_bss_start>:
    1008:	ad 3f       	cpi	r26, 0xFD	; 253
    100a:	b1 07       	cpc	r27, r17
    100c:	e1 f7       	brne	.-8      	; 0x1006 <.do_clear_bss_loop>
    100e:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <main>
    1012:	0c 94 09 5d 	jmp	0xba12	; 0xba12 <_exit>

00001016 <__bad_interrupt>:
    1016:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000101a <increment_index_x>:
}


void increment_index_x(void) {
    
    index_x++;
    101a:	80 91 9b 27 	lds	r24, 0x279B
    101e:	90 91 9c 27 	lds	r25, 0x279C
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	80 93 9b 27 	sts	0x279B, r24
    1028:	90 93 9c 27 	sts	0x279C, r25
    if (index_x >= x_num)
    102c:	80 91 9b 27 	lds	r24, 0x279B
    1030:	90 91 9c 27 	lds	r25, 0x279C
    1034:	40 91 05 28 	lds	r20, 0x2805
    1038:	50 91 06 28 	lds	r21, 0x2806
    103c:	84 17       	cp	r24, r20
    103e:	95 07       	cpc	r25, r21
    1040:	20 f0       	brcs	.+8      	; 0x104a <increment_index_x+0x30>
    {index_x = 0;}
    1042:	10 92 9b 27 	sts	0x279B, r1
    1046:	10 92 9c 27 	sts	0x279C, r1
    
    
    frame_num = index_y*x_num + index_x;
    104a:	80 91 50 29 	lds	r24, 0x2950
    104e:	90 91 51 29 	lds	r25, 0x2951
    1052:	20 91 9b 27 	lds	r18, 0x279B
    1056:	30 91 9c 27 	lds	r19, 0x279C
    105a:	bc 01       	movw	r22, r24
    105c:	64 9f       	mul	r22, r20
    105e:	c0 01       	movw	r24, r0
    1060:	65 9f       	mul	r22, r21
    1062:	90 0d       	add	r25, r0
    1064:	74 9f       	mul	r23, r20
    1066:	90 0d       	add	r25, r0
    1068:	11 24       	eor	r1, r1
    106a:	82 0f       	add	r24, r18
    106c:	93 1f       	adc	r25, r19
    106e:	80 93 e5 24 	sts	0x24E5, r24
    1072:	90 93 e6 24 	sts	0x24E6, r25
	
    if (x_gt_y) display_flag++;
    1076:	80 91 e1 24 	lds	r24, 0x24E1
    107a:	88 23       	and	r24, r24
    107c:	29 f0       	breq	.+10     	; 0x1088 <increment_index_x+0x6e>
    107e:	80 91 e0 24 	lds	r24, 0x24E0
    1082:	8f 5f       	subi	r24, 0xFF	; 255
    1084:	80 93 e0 24 	sts	0x24E0, r24
    1088:	08 95       	ret

0000108a <increment_index_y>:
}


void increment_index_y(void) {
    index_y++;
    108a:	80 91 50 29 	lds	r24, 0x2950
    108e:	90 91 51 29 	lds	r25, 0x2951
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	80 93 50 29 	sts	0x2950, r24
    1098:	90 93 51 29 	sts	0x2951, r25
    if (index_y >= y_num)
    109c:	20 91 50 29 	lds	r18, 0x2950
    10a0:	30 91 51 29 	lds	r19, 0x2951
    10a4:	80 91 a6 25 	lds	r24, 0x25A6
    10a8:	90 91 a7 25 	lds	r25, 0x25A7
    10ac:	28 17       	cp	r18, r24
    10ae:	39 07       	cpc	r19, r25
    10b0:	20 f0       	brcs	.+8      	; 0x10ba <increment_index_y+0x30>
    {index_y = 0;}
    10b2:	10 92 50 29 	sts	0x2950, r1
    10b6:	10 92 51 29 	sts	0x2951, r1
    
    frame_num = index_y*x_num + index_x;
    10ba:	20 91 50 29 	lds	r18, 0x2950
    10be:	30 91 51 29 	lds	r19, 0x2951
    10c2:	40 91 9b 27 	lds	r20, 0x279B
    10c6:	50 91 9c 27 	lds	r21, 0x279C
    10ca:	80 91 05 28 	lds	r24, 0x2805
    10ce:	90 91 06 28 	lds	r25, 0x2806
    10d2:	bc 01       	movw	r22, r24
    10d4:	26 9f       	mul	r18, r22
    10d6:	c0 01       	movw	r24, r0
    10d8:	27 9f       	mul	r18, r23
    10da:	90 0d       	add	r25, r0
    10dc:	36 9f       	mul	r19, r22
    10de:	90 0d       	add	r25, r0
    10e0:	11 24       	eor	r1, r1
    10e2:	84 0f       	add	r24, r20
    10e4:	95 1f       	adc	r25, r21
    10e6:	80 93 e5 24 	sts	0x24E5, r24
    10ea:	90 93 e6 24 	sts	0x24E6, r25
	
    if (x_gt_y == 0) display_flag++;
    10ee:	80 91 e1 24 	lds	r24, 0x24E1
    10f2:	88 23       	and	r24, r24
    10f4:	29 f4       	brne	.+10     	; 0x1100 <increment_index_y+0x76>
    10f6:	80 91 e0 24 	lds	r24, 0x24E0
    10fa:	8f 5f       	subi	r24, 0xFF	; 255
    10fc:	80 93 e0 24 	sts	0x24E0, r24
    1100:	08 95       	ret

00001102 <decrement_index_x>:
}


void decrement_index_x(void) {
    
    if (index_x <= 0)    //just to be safe, use less than
    1102:	80 91 9b 27 	lds	r24, 0x279B
    1106:	90 91 9c 27 	lds	r25, 0x279C
    110a:	89 2b       	or	r24, r25
    110c:	29 f4       	brne	.+10     	; 0x1118 <decrement_index_x+0x16>
    {index_x = x_num - 1;}    //but these are unsigned
    110e:	80 91 05 28 	lds	r24, 0x2805
    1112:	90 91 06 28 	lds	r25, 0x2806
    1116:	04 c0       	rjmp	.+8      	; 0x1120 <decrement_index_x+0x1e>
    else
    {index_x--;}
    1118:	80 91 9b 27 	lds	r24, 0x279B
    111c:	90 91 9c 27 	lds	r25, 0x279C
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	80 93 9b 27 	sts	0x279B, r24
    1126:	90 93 9c 27 	sts	0x279C, r25
    
    frame_num = index_y*x_num + index_x;
    112a:	20 91 50 29 	lds	r18, 0x2950
    112e:	30 91 51 29 	lds	r19, 0x2951
    1132:	40 91 9b 27 	lds	r20, 0x279B
    1136:	50 91 9c 27 	lds	r21, 0x279C
    113a:	80 91 05 28 	lds	r24, 0x2805
    113e:	90 91 06 28 	lds	r25, 0x2806
    1142:	bc 01       	movw	r22, r24
    1144:	26 9f       	mul	r18, r22
    1146:	c0 01       	movw	r24, r0
    1148:	27 9f       	mul	r18, r23
    114a:	90 0d       	add	r25, r0
    114c:	36 9f       	mul	r19, r22
    114e:	90 0d       	add	r25, r0
    1150:	11 24       	eor	r1, r1
    1152:	84 0f       	add	r24, r20
    1154:	95 1f       	adc	r25, r21
    1156:	80 93 e5 24 	sts	0x24E5, r24
    115a:	90 93 e6 24 	sts	0x24E6, r25
    if (x_gt_y) display_flag++;
    115e:	80 91 e1 24 	lds	r24, 0x24E1
    1162:	88 23       	and	r24, r24
    1164:	29 f0       	breq	.+10     	; 0x1170 <decrement_index_x+0x6e>
    1166:	80 91 e0 24 	lds	r24, 0x24E0
    116a:	8f 5f       	subi	r24, 0xFF	; 255
    116c:	80 93 e0 24 	sts	0x24E0, r24
    1170:	08 95       	ret

00001172 <decrement_index_y>:
}


void decrement_index_y(void) {
    if (index_y <= 0)    //just to be safe, use less than
    1172:	80 91 50 29 	lds	r24, 0x2950
    1176:	90 91 51 29 	lds	r25, 0x2951
    117a:	89 2b       	or	r24, r25
    117c:	29 f4       	brne	.+10     	; 0x1188 <decrement_index_y+0x16>
    {index_y = y_num - 1;}    //but these are unsigned
    117e:	80 91 a6 25 	lds	r24, 0x25A6
    1182:	90 91 a7 25 	lds	r25, 0x25A7
    1186:	04 c0       	rjmp	.+8      	; 0x1190 <decrement_index_y+0x1e>
    else
    {index_y--;}
    1188:	80 91 50 29 	lds	r24, 0x2950
    118c:	90 91 51 29 	lds	r25, 0x2951
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	80 93 50 29 	sts	0x2950, r24
    1196:	90 93 51 29 	sts	0x2951, r25
    
    frame_num = index_y*x_num + index_x;
    119a:	20 91 50 29 	lds	r18, 0x2950
    119e:	30 91 51 29 	lds	r19, 0x2951
    11a2:	40 91 9b 27 	lds	r20, 0x279B
    11a6:	50 91 9c 27 	lds	r21, 0x279C
    11aa:	80 91 05 28 	lds	r24, 0x2805
    11ae:	90 91 06 28 	lds	r25, 0x2806
    11b2:	bc 01       	movw	r22, r24
    11b4:	26 9f       	mul	r18, r22
    11b6:	c0 01       	movw	r24, r0
    11b8:	27 9f       	mul	r18, r23
    11ba:	90 0d       	add	r25, r0
    11bc:	36 9f       	mul	r19, r22
    11be:	90 0d       	add	r25, r0
    11c0:	11 24       	eor	r1, r1
    11c2:	84 0f       	add	r24, r20
    11c4:	95 1f       	adc	r25, r21
    11c6:	80 93 e5 24 	sts	0x24E5, r24
    11ca:	90 93 e6 24 	sts	0x24E6, r25
    if (x_gt_y == 0) display_flag++;
    11ce:	80 91 e1 24 	lds	r24, 0x24E1
    11d2:	88 23       	and	r24, r24
    11d4:	29 f4       	brne	.+10     	; 0x11e0 <decrement_index_y+0x6e>
    11d6:	80 91 e0 24 	lds	r24, 0x24E0
    11da:	8f 5f       	subi	r24, 0xFF	; 255
    11dc:	80 93 e0 24 	sts	0x24E0, r24
    11e0:	08 95       	ret

000011e2 <handle_message_length_12>:
//load laser trigger pattern. Laer patter has 96 bytes, but since
//the value is either 0 or 1, we can combined them in 12 bytes to 
//save serial communicaiton time

void handle_message_length_12(uint8_t *msg_buffer)
{   
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	ec 01       	movw	r28, r24
    11ea:	40 e0       	ldi	r20, 0x00	; 0
    11ec:	50 e0       	ldi	r21, 0x00	; 0
	   for (j=0; j<8; j++)
	   {
		if ((tempVal & (1<<(7-j))) == 0)
			laserPattern[i*8+j] = 0;
		else
			laserPattern[i*8+j] = 1;
    11ee:	11 e0       	ldi	r17, 0x01	; 1
{   
	uint8_t i,j, tempVal;
	
	for (i=0; i<12; i++)
	{ 
	   tempVal = msg_buffer[i];
    11f0:	88 81       	ld	r24, Y
    11f2:	fa 01       	movw	r30, r20
    11f4:	ea 57       	subi	r30, 0x7A	; 122
    11f6:	f9 4d       	sbci	r31, 0xD9	; 217
    11f8:	df 01       	movw	r26, r30
    11fa:	27 e0       	ldi	r18, 0x07	; 7
    11fc:	30 e0       	ldi	r19, 0x00	; 0
	   for (j=0; j<8; j++)
	   {
		if ((tempVal & (1<<(7-j))) == 0)
    11fe:	68 2f       	mov	r22, r24
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	cb 01       	movw	r24, r22
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <handle_message_length_12+0x2a>
    1208:	95 95       	asr	r25
    120a:	87 95       	ror	r24
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <handle_message_length_12+0x26>
    1210:	80 fd       	sbrc	r24, 0
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <handle_message_length_12+0x36>
			laserPattern[i*8+j] = 0;
    1214:	10 82       	st	Z, r1
    1216:	01 c0       	rjmp	.+2      	; 0x121a <handle_message_length_12+0x38>
		else
			laserPattern[i*8+j] = 1;
    1218:	1c 93       	st	X, r17
    121a:	21 50       	subi	r18, 0x01	; 1
    121c:	30 40       	sbci	r19, 0x00	; 0
    121e:	31 96       	adiw	r30, 0x01	; 1
    1220:	11 96       	adiw	r26, 0x01	; 1
	uint8_t i,j, tempVal;
	
	for (i=0; i<12; i++)
	{ 
	   tempVal = msg_buffer[i];
	   for (j=0; j<8; j++)
    1222:	8f ef       	ldi	r24, 0xFF	; 255
    1224:	2f 3f       	cpi	r18, 0xFF	; 255
    1226:	38 07       	cpc	r19, r24
    1228:	61 f7       	brne	.-40     	; 0x1202 <handle_message_length_12+0x20>
    122a:	21 96       	adiw	r28, 0x01	; 1
    122c:	48 5f       	subi	r20, 0xF8	; 248
    122e:	5f 4f       	sbci	r21, 0xFF	; 255

void handle_message_length_12(uint8_t *msg_buffer)
{   
	uint8_t i,j, tempVal;
	
	for (i=0; i<12; i++)
    1230:	40 36       	cpi	r20, 0x60	; 96
    1232:	51 05       	cpc	r21, r1
    1234:	e9 f6       	brne	.-70     	; 0x11f0 <handle_message_length_12+0xe>
		else
			laserPattern[i*8+j] = 1;
	   }
	}
	
	if (quiet_mode_on == 0)
    1236:	80 91 f3 24 	lds	r24, 0x24F3
    123a:	88 23       	and	r24, r24
    123c:	21 f4       	brne	.+8      	; 0x1246 <handle_message_length_12+0x64>
        xputs(PSTR("Success set the new laser pattern.\n"));
    123e:	8a e5       	ldi	r24, 0x5A	; 90
    1240:	97 e0       	ldi	r25, 0x07	; 7
    1242:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>

}
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	1f 91       	pop	r17
    124c:	08 95       	ret

0000124e <dump_mat>:
    
}


//synchronize the SD.mat from SD card to PC
void dump_mat(void) {
    124e:	a4 e3       	ldi	r26, 0x34	; 52
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ed e2       	ldi	r30, 0x2D	; 45
    1254:	f9 e0       	ldi	r31, 0x09	; 9
    1256:	0c 94 a9 57 	jmp	0xaf52	; 0xaf52 <__prologue_saves__+0x2>
    uint8_t res;
    uint16_t cnt;
    uint8_t matBuff[50];
    
    // try to read in the SD.mat filfil
    res = f_open(&file4, SDInfo, FA_OPEN_EXISTING | FA_READ);
    125a:	85 ee       	ldi	r24, 0xE5	; 229
    125c:	97 e2       	ldi	r25, 0x27	; 39
    125e:	61 eb       	ldi	r22, 0xB1	; 177
    1260:	70 e2       	ldi	r23, 0x20	; 32
    1262:	41 e0       	ldi	r20, 0x01	; 1
    1264:	0e 94 17 4c 	call	0x982e	; 0x982e <f_open>
    if (res == FR_OK) {
    1268:	88 23       	and	r24, r24
    126a:	09 f0       	breq	.+2      	; 0x126e <dump_mat+0x20>
    126c:	b5 c0       	rjmp	.+362    	; 0x13d8 <dump_mat+0x18a>
        // looks good
        iteration = file4.fsize/50;
    126e:	80 90 ef 27 	lds	r8, 0x27EF
    1272:	70 91 f0 27 	lds	r23, 0x27F0
    1276:	68 2d       	mov	r22, r8
    1278:	80 91 f1 27 	lds	r24, 0x27F1
    127c:	90 91 f2 27 	lds	r25, 0x27F2
    1280:	22 e3       	ldi	r18, 0x32	; 50
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    128c:	79 01       	movw	r14, r18
    128e:	8a 01       	movw	r16, r20
    1290:	99 24       	eor	r9, r9
    1292:	93 94       	inc	r9
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
            offset = (b1 -1)*50;
    1294:	22 e3       	ldi	r18, 0x32	; 50
    1296:	32 2e       	mov	r3, r18
            
            res = f_lseek(&file4, offset);
            if ((res == FR_OK) && (file4.fptr == offset)) {
                res = f_read(&file4, matBuff, 50, &cnt);
    1298:	93 e0       	ldi	r25, 0x03	; 3
    129a:	69 2e       	mov	r6, r25
    129c:	71 2c       	mov	r7, r1
    129e:	6c 0e       	add	r6, r28
    12a0:	7d 1e       	adc	r7, r29
    12a2:	2e 01       	movw	r4, r28
    12a4:	08 94       	sec
    12a6:	41 1c       	adc	r4, r1
    12a8:	51 1c       	adc	r5, r1
    12aa:	3a c0       	rjmp	.+116    	; 0x1320 <dump_mat+0xd2>
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
            offset = (b1 -1)*50;
    12ac:	93 9c       	mul	r9, r3
    12ae:	c0 01       	movw	r24, r0
    12b0:	11 24       	eor	r1, r1
    12b2:	c2 97       	sbiw	r24, 0x32	; 50
    12b4:	5c 01       	movw	r10, r24
    12b6:	cc 24       	eor	r12, r12
    12b8:	b7 fc       	sbrc	r11, 7
    12ba:	c0 94       	com	r12
    12bc:	dc 2c       	mov	r13, r12
            
            res = f_lseek(&file4, offset);
    12be:	85 ee       	ldi	r24, 0xE5	; 229
    12c0:	97 e2       	ldi	r25, 0x27	; 39
    12c2:	b6 01       	movw	r22, r12
    12c4:	a5 01       	movw	r20, r10
    12c6:	0e 94 c1 3b 	call	0x7782	; 0x7782 <f_lseek>
            if ((res == FR_OK) && (file4.fptr == offset)) {
    12ca:	88 23       	and	r24, r24
    12cc:	01 f5       	brne	.+64     	; 0x130e <dump_mat+0xc0>
    12ce:	80 91 eb 27 	lds	r24, 0x27EB
    12d2:	90 91 ec 27 	lds	r25, 0x27EC
    12d6:	a0 91 ed 27 	lds	r26, 0x27ED
    12da:	b0 91 ee 27 	lds	r27, 0x27EE
    12de:	8a 15       	cp	r24, r10
    12e0:	9b 05       	cpc	r25, r11
    12e2:	ac 05       	cpc	r26, r12
    12e4:	bd 05       	cpc	r27, r13
    12e6:	99 f4       	brne	.+38     	; 0x130e <dump_mat+0xc0>
                res = f_read(&file4, matBuff, 50, &cnt);
    12e8:	85 ee       	ldi	r24, 0xE5	; 229
    12ea:	97 e2       	ldi	r25, 0x27	; 39
    12ec:	b3 01       	movw	r22, r6
    12ee:	42 e3       	ldi	r20, 0x32	; 50
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	92 01       	movw	r18, r4
    12f4:	0e 94 2e 4d 	call	0x9a5c	; 0x9a5c <f_read>
                if ((res == FR_OK) && (cnt == 50)) {
    12f8:	88 23       	and	r24, r24
    12fa:	89 f4       	brne	.+34     	; 0x131e <dump_mat+0xd0>
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	c2 97       	sbiw	r24, 0x32	; 50
    1302:	69 f4       	brne	.+26     	; 0x131e <dump_mat+0xd0>
                    send_Tx_buffer(matBuff, 50);
    1304:	c3 01       	movw	r24, r6
    1306:	62 e3       	ldi	r22, 0x32	; 50
    1308:	0e 94 72 2d 	call	0x5ae4	; 0x5ae4 <send_Tx_buffer>
    130c:	08 c0       	rjmp	.+16     	; 0x131e <dump_mat+0xd0>
                }
            }else {
                if (quiet_mode_on == 0)
    130e:	80 91 f3 24 	lds	r24, 0x24F3
    1312:	88 23       	and	r24, r24
    1314:	21 f4       	brne	.+8      	; 0x131e <dump_mat+0xd0>
                    xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
    1316:	82 e6       	ldi	r24, 0x62	; 98
    1318:	92 e0       	ldi	r25, 0x02	; 2
    131a:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
        iteration = file4.fsize/50;
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
    131e:	93 94       	inc	r9
    1320:	89 2d       	mov	r24, r9
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a0 e0       	ldi	r26, 0x00	; 0
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e8 16       	cp	r14, r24
    132a:	f9 06       	cpc	r15, r25
    132c:	0a 07       	cpc	r16, r26
    132e:	1b 07       	cpc	r17, r27
    1330:	08 f0       	brcs	.+2      	; 0x1334 <dump_mat+0xe6>
    1332:	bc cf       	rjmp	.-136    	; 0x12ac <dump_mat+0x5e>
                if (quiet_mode_on == 0)
                    xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
            }
        }
        //send the remained data
        offset = (b1-1)*50;
    1334:	82 e3       	ldi	r24, 0x32	; 50
    1336:	98 9e       	mul	r9, r24
    1338:	c0 01       	movw	r24, r0
    133a:	11 24       	eor	r1, r1
    133c:	c2 97       	sbiw	r24, 0x32	; 50
    133e:	5c 01       	movw	r10, r24
    1340:	cc 24       	eor	r12, r12
    1342:	b7 fc       	sbrc	r11, 7
    1344:	c0 94       	com	r12
    1346:	dc 2c       	mov	r13, r12
        res=f_lseek(&file4, offset);
    1348:	85 ee       	ldi	r24, 0xE5	; 229
    134a:	97 e2       	ldi	r25, 0x27	; 39
    134c:	b6 01       	movw	r22, r12
    134e:	a5 01       	movw	r20, r10
    1350:	0e 94 c1 3b 	call	0x7782	; 0x7782 <f_lseek>
        if ((res == FR_OK) && (file4.fptr == offset)) {
    1354:	88 23       	and	r24, r24
    1356:	99 f5       	brne	.+102    	; 0x13be <dump_mat+0x170>
    1358:	80 91 eb 27 	lds	r24, 0x27EB
    135c:	90 91 ec 27 	lds	r25, 0x27EC
    1360:	a0 91 ed 27 	lds	r26, 0x27ED
    1364:	b0 91 ee 27 	lds	r27, 0x27EE
    1368:	8a 15       	cp	r24, r10
    136a:	9b 05       	cpc	r25, r11
    136c:	ac 05       	cpc	r26, r12
    136e:	bd 05       	cpc	r27, r13
    1370:	31 f5       	brne	.+76     	; 0x13be <dump_mat+0x170>
    // try to read in the SD.mat filfil
    res = f_open(&file4, SDInfo, FA_OPEN_EXISTING | FA_READ);
    if (res == FR_OK) {
        // looks good
        iteration = file4.fsize/50;
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
    1372:	c8 01       	movw	r24, r16
    1374:	b7 01       	movw	r22, r14
    1376:	22 e3       	ldi	r18, 0x32	; 50
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	0e 94 25 57 	call	0xae4a	; 0xae4a <__mulsi3>
    1382:	d8 2c       	mov	r13, r8
    1384:	d6 1a       	sub	r13, r22
        }
        //send the remained data
        offset = (b1-1)*50;
        res=f_lseek(&file4, offset);
        if ((res == FR_OK) && (file4.fptr == offset)) {
            res = f_read(&file4, matBuff, fileRemain, &cnt);
    1386:	0d 2d       	mov	r16, r13
    1388:	10 e0       	ldi	r17, 0x00	; 0
    138a:	83 e0       	ldi	r24, 0x03	; 3
    138c:	e8 2e       	mov	r14, r24
    138e:	f1 2c       	mov	r15, r1
    1390:	ec 0e       	add	r14, r28
    1392:	fd 1e       	adc	r15, r29
    1394:	85 ee       	ldi	r24, 0xE5	; 229
    1396:	97 e2       	ldi	r25, 0x27	; 39
    1398:	b7 01       	movw	r22, r14
    139a:	a8 01       	movw	r20, r16
    139c:	9e 01       	movw	r18, r28
    139e:	2f 5f       	subi	r18, 0xFF	; 255
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
    13a2:	0e 94 2e 4d 	call	0x9a5c	; 0x9a5c <f_read>
            if ((res == FR_OK) && (cnt == fileRemain)) {
    13a6:	88 23       	and	r24, r24
    13a8:	91 f4       	brne	.+36     	; 0x13ce <dump_mat+0x180>
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	9a 81       	ldd	r25, Y+2	; 0x02
    13ae:	80 17       	cp	r24, r16
    13b0:	91 07       	cpc	r25, r17
    13b2:	69 f4       	brne	.+26     	; 0x13ce <dump_mat+0x180>
                send_Tx_buffer(matBuff, fileRemain);
    13b4:	c7 01       	movw	r24, r14
    13b6:	6d 2d       	mov	r22, r13
    13b8:	0e 94 72 2d 	call	0x5ae4	; 0x5ae4 <send_Tx_buffer>
    13bc:	08 c0       	rjmp	.+16     	; 0x13ce <dump_mat+0x180>
            }
        }else {
            if (quiet_mode_on == 0)
    13be:	80 91 f3 24 	lds	r24, 0x24F3
    13c2:	88 23       	and	r24, r24
    13c4:	21 f4       	brne	.+8      	; 0x13ce <dump_mat+0x180>
                xputs(PSTR("Error f_lseek in remained data.\n"));
    13c6:	81 e4       	ldi	r24, 0x41	; 65
    13c8:	92 e0       	ldi	r25, 0x02	; 2
    13ca:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
        }
        
        f_close(&file4);
    13ce:	85 ee       	ldi	r24, 0xE5	; 229
    13d0:	97 e2       	ldi	r25, 0x27	; 39
    13d2:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <f_close>
    13d6:	08 c0       	rjmp	.+16     	; 0x13e8 <dump_mat+0x19a>
    } else {
        if (quiet_mode_on == 0)
    13d8:	80 91 f3 24 	lds	r24, 0x24F3
    13dc:	88 23       	and	r24, r24
    13de:	21 f4       	brne	.+8      	; 0x13e8 <dump_mat+0x19a>
            xputs(PSTR("Error f_open in SDInfo.mat.\n"));//end if (res == FR_OK)
    13e0:	84 e2       	ldi	r24, 0x24	; 36
    13e2:	92 e0       	ldi	r25, 0x02	; 2
    13e4:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    }
    
}
    13e8:	e4 96       	adiw	r28, 0x34	; 52
    13ea:	e1 e1       	ldi	r30, 0x11	; 17
    13ec:	0c 94 c5 57 	jmp	0xaf8a	; 0xaf8a <__epilogue_restores__+0x2>

000013f0 <update_funcCnt_y>:
        X_dac_val = (65535/2) + 328*function_X[function_counter_x];   //328 should convert 1V (=20) to 0.5 V
        analogWrite(0, X_dac_val>>5); // make it a value in the range 0 - 2047 (0 - 5V)
    }
}

void update_funcCnt_y(void) {
    13f0:	ac ec       	ldi	r26, 0xCC	; 204
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ee ef       	ldi	r30, 0xFE	; 254
    13f6:	f9 e0       	ldi	r31, 0x09	; 9
    13f8:	0c 94 b4 57 	jmp	0xaf68	; 0xaf68 <__prologue_saves__+0x18>
    uint16_t cnt, j, offset;
    uint8_t res;
    int16_t tempVal;
    uint8_t funcYBuff[2*FUNCTION_LENGTH];
    
    if (func_ID_Y != 0){
    13fc:	80 91 f6 24 	lds	r24, 0x24F6
    1400:	90 91 f7 24 	lds	r25, 0x24F7
    1404:	20 91 e9 24 	lds	r18, 0x24E9
    1408:	30 91 ea 24 	lds	r19, 0x24EA
    140c:	89 2b       	or	r24, r25
    140e:	09 f4       	brne	.+2      	; 0x1412 <update_funcCnt_y+0x22>
    1410:	04 c1       	rjmp	.+520    	; 0x161a <update_funcCnt_y+0x22a>
        function_counter_y ++;
    1412:	2f 5f       	subi	r18, 0xFF	; 255
    1414:	3f 4f       	sbci	r19, 0xFF	; 255
    1416:	20 93 e9 24 	sts	0x24E9, r18
    141a:	30 93 ea 24 	sts	0x24EA, r19
        func_global_counter_y = func_global_counter_y + 2;
    141e:	40 91 ef 24 	lds	r20, 0x24EF
    1422:	50 91 f0 24 	lds	r21, 0x24F0
    1426:	60 91 f1 24 	lds	r22, 0x24F1
    142a:	70 91 f2 24 	lds	r23, 0x24F2
    142e:	4e 5f       	subi	r20, 0xFE	; 254
    1430:	5f 4f       	sbci	r21, 0xFF	; 255
    1432:	6f 4f       	sbci	r22, 0xFF	; 255
    1434:	7f 4f       	sbci	r23, 0xFF	; 255
    1436:	40 93 ef 24 	sts	0x24EF, r20
    143a:	50 93 f0 24 	sts	0x24F0, r21
    143e:	60 93 f1 24 	sts	0x24F1, r22
    1442:	70 93 f2 24 	sts	0x24F2, r23
        
        
        if ((function_counter_y >= loadYBuffer/2) || (func_global_counter_y >= funcSize_y)) {
    1446:	80 91 af 20 	lds	r24, 0x20AF
    144a:	90 91 b0 20 	lds	r25, 0x20B0
    144e:	96 95       	lsr	r25
    1450:	87 95       	ror	r24
    1452:	28 17       	cp	r18, r24
    1454:	39 07       	cpc	r19, r25
    1456:	70 f4       	brcc	.+28     	; 0x1474 <update_funcCnt_y+0x84>
    1458:	80 91 a9 20 	lds	r24, 0x20A9
    145c:	90 91 aa 20 	lds	r25, 0x20AA
    1460:	a0 91 ab 20 	lds	r26, 0x20AB
    1464:	b0 91 ac 20 	lds	r27, 0x20AC
    1468:	48 17       	cp	r20, r24
    146a:	59 07       	cpc	r21, r25
    146c:	6a 07       	cpc	r22, r26
    146e:	7b 07       	cpc	r23, r27
    1470:	08 f4       	brcc	.+2      	; 0x1474 <update_funcCnt_y+0x84>
    1472:	dd c0       	rjmp	.+442    	; 0x162e <update_funcCnt_y+0x23e>
            // need to update function_Y[FUNCITION_LENGTH]
            if (func_global_counter_y >= funcSize_y){
    1474:	80 91 a9 20 	lds	r24, 0x20A9
    1478:	90 91 aa 20 	lds	r25, 0x20AA
    147c:	a0 91 ab 20 	lds	r26, 0x20AB
    1480:	b0 91 ac 20 	lds	r27, 0x20AC
    1484:	48 17       	cp	r20, r24
    1486:	59 07       	cpc	r21, r25
    1488:	6a 07       	cpc	r22, r26
    148a:	7b 07       	cpc	r23, r27
    148c:	78 f0       	brcs	.+30     	; 0x14ac <update_funcCnt_y+0xbc>
                //read from the start
                offset = 512;
                func_global_counter_y =0;
    148e:	10 92 ef 24 	sts	0x24EF, r1
    1492:	10 92 f0 24 	sts	0x24F0, r1
    1496:	10 92 f1 24 	sts	0x24F1, r1
    149a:	10 92 f2 24 	sts	0x24F2, r1
                function_counter_y = 0;
    149e:	10 92 e9 24 	sts	0x24E9, r1
    14a2:	10 92 ea 24 	sts	0x24EA, r1
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	52 e0       	ldi	r21, 0x02	; 2
    14aa:	06 c0       	rjmp	.+12     	; 0x14b8 <update_funcCnt_y+0xc8>
            }
            else{
                offset = 512 + func_global_counter_y;
    14ac:	40 50       	subi	r20, 0x00	; 0
    14ae:	5e 4f       	sbci	r21, 0xFE	; 254
                function_counter_y = 0;
    14b0:	10 92 e9 24 	sts	0x24E9, r1
    14b4:	10 92 ea 24 	sts	0x24EA, r1
            }
            
            res = f_lseek(&file3, offset);
    14b8:	7a 01       	movw	r14, r20
    14ba:	00 e0       	ldi	r16, 0x00	; 0
    14bc:	10 e0       	ldi	r17, 0x00	; 0
    14be:	88 ee       	ldi	r24, 0xE8	; 232
    14c0:	96 e2       	ldi	r25, 0x26	; 38
    14c2:	b8 01       	movw	r22, r16
    14c4:	a7 01       	movw	r20, r14
    14c6:	0e 94 c1 3b 	call	0x7782	; 0x7782 <f_lseek>
    14ca:	28 2f       	mov	r18, r24
            if ((res == FR_OK) && (file3.fptr == offset)) {
    14cc:	88 23       	and	r24, r24
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <update_funcCnt_y+0xe2>
    14d0:	86 c0       	rjmp	.+268    	; 0x15de <update_funcCnt_y+0x1ee>
    14d2:	80 91 ee 26 	lds	r24, 0x26EE
    14d6:	90 91 ef 26 	lds	r25, 0x26EF
    14da:	a0 91 f0 26 	lds	r26, 0x26F0
    14de:	b0 91 f1 26 	lds	r27, 0x26F1
    14e2:	8e 15       	cp	r24, r14
    14e4:	9f 05       	cpc	r25, r15
    14e6:	a0 07       	cpc	r26, r16
    14e8:	b1 07       	cpc	r27, r17
    14ea:	09 f0       	breq	.+2      	; 0x14ee <update_funcCnt_y+0xfe>
    14ec:	78 c0       	rjmp	.+240    	; 0x15de <update_funcCnt_y+0x1ee>
                
                if (funcSize_y - func_global_counter_y >= 2*FUNCTION_LENGTH) {
    14ee:	e0 90 a9 20 	lds	r14, 0x20A9
    14f2:	f0 90 aa 20 	lds	r15, 0x20AA
    14f6:	00 91 ab 20 	lds	r16, 0x20AB
    14fa:	10 91 ac 20 	lds	r17, 0x20AC
    14fe:	20 91 ef 24 	lds	r18, 0x24EF
    1502:	30 91 f0 24 	lds	r19, 0x24F0
    1506:	40 91 f1 24 	lds	r20, 0x24F1
    150a:	50 91 f2 24 	lds	r21, 0x24F2
    150e:	d8 01       	movw	r26, r16
    1510:	c7 01       	movw	r24, r14
    1512:	82 1b       	sub	r24, r18
    1514:	93 0b       	sbc	r25, r19
    1516:	a4 0b       	sbc	r26, r20
    1518:	b5 0b       	sbc	r27, r21
    151a:	88 3c       	cpi	r24, 0xC8	; 200
    151c:	91 05       	cpc	r25, r1
    151e:	a1 05       	cpc	r26, r1
    1520:	b1 05       	cpc	r27, r1
    1522:	18 f0       	brcs	.+6      	; 0x152a <update_funcCnt_y+0x13a>
                    loadYBuffer = 2*FUNCTION_LENGTH;
    1524:	88 ec       	ldi	r24, 0xC8	; 200
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	03 c0       	rjmp	.+6      	; 0x1530 <update_funcCnt_y+0x140>
                }
                else {
                    loadYBuffer = funcSize_y - func_global_counter_y;
    152a:	c7 01       	movw	r24, r14
    152c:	82 1b       	sub	r24, r18
    152e:	93 0b       	sbc	r25, r19
    1530:	80 93 af 20 	sts	0x20AF, r24
    1534:	90 93 b0 20 	sts	0x20B0, r25
                }
                
                res = f_read(&file3, funcYBuff, loadYBuffer, &cnt);
    1538:	8e 01       	movw	r16, r28
    153a:	0b 5f       	subi	r16, 0xFB	; 251
    153c:	1f 4f       	sbci	r17, 0xFF	; 255
    153e:	40 91 af 20 	lds	r20, 0x20AF
    1542:	50 91 b0 20 	lds	r21, 0x20B0
    1546:	88 ee       	ldi	r24, 0xE8	; 232
    1548:	96 e2       	ldi	r25, 0x26	; 38
    154a:	b8 01       	movw	r22, r16
    154c:	9e 01       	movw	r18, r28
    154e:	2f 5f       	subi	r18, 0xFF	; 255
    1550:	3f 4f       	sbci	r19, 0xFF	; 255
    1552:	0e 94 2e 4d 	call	0x9a5c	; 0x9a5c <f_read>
    1556:	48 2f       	mov	r20, r24
                if ((res == FR_OK) && (cnt == loadYBuffer)) {
    1558:	88 23       	and	r24, r24
    155a:	21 f5       	brne	.+72     	; 0x15a4 <update_funcCnt_y+0x1b4>
    155c:	29 81       	ldd	r18, Y+1	; 0x01
    155e:	3a 81       	ldd	r19, Y+2	; 0x02
    1560:	80 91 af 20 	lds	r24, 0x20AF
    1564:	90 91 b0 20 	lds	r25, 0x20B0
    1568:	28 17       	cp	r18, r24
    156a:	39 07       	cpc	r19, r25
    156c:	d9 f4       	brne	.+54     	; 0x15a4 <update_funcCnt_y+0x1b4>
                    
                    for (j = 0; j < loadYBuffer/2; j++)
    156e:	f8 01       	movw	r30, r16
    1570:	6b ea       	ldi	r22, 0xAB	; 171
    1572:	75 e2       	ldi	r23, 0x25	; 37
    1574:	2e 7f       	andi	r18, 0xFE	; 254
    1576:	20 0f       	add	r18, r16
    1578:	31 1f       	adc	r19, r17
                    {   ((uint8_t*)&tempVal)[0] = funcYBuff[2*j];
    157a:	ae 01       	movw	r20, r28
    157c:	4d 5f       	subi	r20, 0xFD	; 253
    157e:	5f 4f       	sbci	r21, 0xFF	; 255
    1580:	0d c0       	rjmp	.+26     	; 0x159c <update_funcCnt_y+0x1ac>
    1582:	80 81       	ld	r24, Z
    1584:	da 01       	movw	r26, r20
    1586:	8c 93       	st	X, r24
                        ((uint8_t*)&tempVal)[1] = funcYBuff[2*j+1];
    1588:	81 81       	ldd	r24, Z+1	; 0x01
    158a:	11 96       	adiw	r26, 0x01	; 1
    158c:	8c 93       	st	X, r24
                        function_Y [j] = tempVal;
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	db 01       	movw	r26, r22
    1594:	8d 93       	st	X+, r24
    1596:	9d 93       	st	X+, r25
    1598:	bd 01       	movw	r22, r26
    159a:	32 96       	adiw	r30, 0x02	; 2
                }
                
                res = f_read(&file3, funcYBuff, loadYBuffer, &cnt);
                if ((res == FR_OK) && (cnt == loadYBuffer)) {
                    
                    for (j = 0; j < loadYBuffer/2; j++)
    159c:	e2 17       	cp	r30, r18
    159e:	f3 07       	cpc	r31, r19
    15a0:	81 f7       	brne	.-32     	; 0x1582 <update_funcCnt_y+0x192>
    15a2:	45 c0       	rjmp	.+138    	; 0x162e <update_funcCnt_y+0x23e>
                        ((uint8_t*)&tempVal)[1] = funcYBuff[2*j+1];
                        function_Y [j] = tempVal;
                    }
                    
                } else {
                    if (quiet_mode_on == 0){
    15a4:	80 91 f3 24 	lds	r24, 0x24F3
    15a8:	88 23       	and	r24, r24
    15aa:	09 f0       	breq	.+2      	; 0x15ae <update_funcCnt_y+0x1be>
    15ac:	40 c0       	rjmp	.+128    	; 0x162e <update_funcCnt_y+0x23e>
                        xprintf(PSTR("res =  %u\n"), res);
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <update_funcCnt_y+0x1c0>
    15b0:	0f 92       	push	r0
    15b2:	ed b7       	in	r30, 0x3d	; 61
    15b4:	fe b7       	in	r31, 0x3e	; 62
    15b6:	31 96       	adiw	r30, 0x01	; 1
    15b8:	87 ee       	ldi	r24, 0xE7	; 231
    15ba:	92 e0       	ldi	r25, 0x02	; 2
    15bc:	ad b7       	in	r26, 0x3d	; 61
    15be:	be b7       	in	r27, 0x3e	; 62
    15c0:	11 96       	adiw	r26, 0x01	; 1
    15c2:	8d 93       	st	X+, r24
    15c4:	9c 93       	st	X, r25
    15c6:	12 97       	sbiw	r26, 0x02	; 2
    15c8:	42 83       	std	Z+2, r20	; 0x02
    15ca:	13 82       	std	Z+3, r1	; 0x03
    15cc:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
                        xputs(PSTR("Error in f_read in update_funcCnt_y\n"));
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	82 ec       	ldi	r24, 0xC2	; 194
    15da:	92 e0       	ldi	r25, 0x02	; 2
    15dc:	1b c0       	rjmp	.+54     	; 0x1614 <update_funcCnt_y+0x224>
                    }
                }
            } else {
                if (quiet_mode_on == 0){
    15de:	80 91 f3 24 	lds	r24, 0x24F3
    15e2:	88 23       	and	r24, r24
    15e4:	21 f5       	brne	.+72     	; 0x162e <update_funcCnt_y+0x23e>
                    xprintf(PSTR("res =  %u\n"), res);
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <update_funcCnt_y+0x1f8>
    15e8:	0f 92       	push	r0
    15ea:	ed b7       	in	r30, 0x3d	; 61
    15ec:	fe b7       	in	r31, 0x3e	; 62
    15ee:	31 96       	adiw	r30, 0x01	; 1
    15f0:	87 eb       	ldi	r24, 0xB7	; 183
    15f2:	92 e0       	ldi	r25, 0x02	; 2
    15f4:	ad b7       	in	r26, 0x3d	; 61
    15f6:	be b7       	in	r27, 0x3e	; 62
    15f8:	11 96       	adiw	r26, 0x01	; 1
    15fa:	8d 93       	st	X+, r24
    15fc:	9c 93       	st	X, r25
    15fe:	12 97       	sbiw	r26, 0x02	; 2
    1600:	22 83       	std	Z+2, r18	; 0x02
    1602:	13 82       	std	Z+3, r1	; 0x03
    1604:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
                    xputs(PSTR("Error in f_lseek in update_funcCnt_y load next buffer\n"));
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	80 e8       	ldi	r24, 0x80	; 128
    1612:	92 e0       	ldi	r25, 0x02	; 2
    1614:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    1618:	0a c0       	rjmp	.+20     	; 0x162e <update_funcCnt_y+0x23e>
                }
            }
        } //end if (function_counter >= 1000) && (func_global_counter <= funcSize)
    }
    else{
        function_counter_y = (function_counter_y + 1)%FUNCTION_LENGTH;
    161a:	c9 01       	movw	r24, r18
    161c:	01 96       	adiw	r24, 0x01	; 1
    161e:	64 e6       	ldi	r22, 0x64	; 100
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	0e 94 44 57 	call	0xae88	; 0xae88 <__udivmodhi4>
    1626:	80 93 e9 24 	sts	0x24E9, r24
    162a:	90 93 ea 24 	sts	0x24EA, r25
    }
    
//update analog output
    if (y_mode == 5){
    162e:	80 91 e3 27 	lds	r24, 0x27E3
    1632:	85 30       	cpi	r24, 0x05	; 5
    1634:	e9 f4       	brne	.+58     	; 0x1670 <update_funcCnt_y+0x280>
        Y_dac_val = (65535/2) + 328*function_Y[function_counter_y];   //328 should convert 1V (=20) to 0.5 V
        analogWrite(1, Y_dac_val>>5); // make it a value in the range 0 - 2047 (0 - 5V)
    1636:	e0 91 e9 24 	lds	r30, 0x24E9
    163a:	f0 91 ea 24 	lds	r31, 0x24EA
    163e:	ee 0f       	add	r30, r30
    1640:	ff 1f       	adc	r31, r31
    1642:	e5 55       	subi	r30, 0x55	; 85
    1644:	fa 4d       	sbci	r31, 0xDA	; 218
    1646:	20 81       	ld	r18, Z
    1648:	31 81       	ldd	r19, Z+1	; 0x01
    164a:	88 e4       	ldi	r24, 0x48	; 72
    164c:	91 e0       	ldi	r25, 0x01	; 1
    164e:	28 9f       	mul	r18, r24
    1650:	b0 01       	movw	r22, r0
    1652:	29 9f       	mul	r18, r25
    1654:	70 0d       	add	r23, r0
    1656:	38 9f       	mul	r19, r24
    1658:	70 0d       	add	r23, r0
    165a:	11 24       	eor	r1, r1
    165c:	61 50       	subi	r22, 0x01	; 1
    165e:	70 48       	sbci	r23, 0x80	; 128
    1660:	35 e0       	ldi	r19, 0x05	; 5
    1662:	76 95       	lsr	r23
    1664:	67 95       	ror	r22
    1666:	3a 95       	dec	r19
    1668:	e1 f7       	brne	.-8      	; 0x1662 <update_funcCnt_y+0x272>
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	0e 94 87 21 	call	0x430e	; 0x430e <analogWrite>
    }
    
}
    1670:	c4 53       	subi	r28, 0x34	; 52
    1672:	df 4f       	sbci	r29, 0xFF	; 255
    1674:	e6 e0       	ldi	r30, 0x06	; 6
    1676:	0c 94 d0 57 	jmp	0xafa0	; 0xafa0 <__epilogue_restores__+0x18>

0000167a <update_funcCnt_x>:
                xputs(PSTR("Error input for function channel.\n"));
            break;
    }
}

void update_funcCnt_x(void) {
    167a:	ac ec       	ldi	r26, 0xCC	; 204
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e3 e4       	ldi	r30, 0x43	; 67
    1680:	fb e0       	ldi	r31, 0x0B	; 11
    1682:	0c 94 b4 57 	jmp	0xaf68	; 0xaf68 <__prologue_saves__+0x18>
    uint16_t cnt, j, offset;
    uint8_t res;
    int16_t tempVal;
    uint8_t funcXBuff[2*FUNCTION_LENGTH];
    
    if (func_ID_X != 0){
    1686:	80 91 f4 24 	lds	r24, 0x24F4
    168a:	90 91 f5 24 	lds	r25, 0x24F5
    168e:	20 91 e7 24 	lds	r18, 0x24E7
    1692:	30 91 e8 24 	lds	r19, 0x24E8
    1696:	89 2b       	or	r24, r25
    1698:	09 f4       	brne	.+2      	; 0x169c <update_funcCnt_x+0x22>
    169a:	04 c1       	rjmp	.+520    	; 0x18a4 <update_funcCnt_x+0x22a>
        
        function_counter_x++;  //min:0, max:FUNCTION_LENGTH
    169c:	2f 5f       	subi	r18, 0xFF	; 255
    169e:	3f 4f       	sbci	r19, 0xFF	; 255
    16a0:	20 93 e7 24 	sts	0x24E7, r18
    16a4:	30 93 e8 24 	sts	0x24E8, r19
        func_global_counter_x = func_global_counter_x + 2; //min:0, max:funcSize_x Note:size of each function datum is 2 bytes.
    16a8:	40 91 eb 24 	lds	r20, 0x24EB
    16ac:	50 91 ec 24 	lds	r21, 0x24EC
    16b0:	60 91 ed 24 	lds	r22, 0x24ED
    16b4:	70 91 ee 24 	lds	r23, 0x24EE
    16b8:	4e 5f       	subi	r20, 0xFE	; 254
    16ba:	5f 4f       	sbci	r21, 0xFF	; 255
    16bc:	6f 4f       	sbci	r22, 0xFF	; 255
    16be:	7f 4f       	sbci	r23, 0xFF	; 255
    16c0:	40 93 eb 24 	sts	0x24EB, r20
    16c4:	50 93 ec 24 	sts	0x24EC, r21
    16c8:	60 93 ed 24 	sts	0x24ED, r22
    16cc:	70 93 ee 24 	sts	0x24EE, r23
        
        if ((function_counter_x >= loadXBuffer/2) || (func_global_counter_x >= funcSize_x)) {
    16d0:	80 91 ad 20 	lds	r24, 0x20AD
    16d4:	90 91 ae 20 	lds	r25, 0x20AE
    16d8:	96 95       	lsr	r25
    16da:	87 95       	ror	r24
    16dc:	28 17       	cp	r18, r24
    16de:	39 07       	cpc	r19, r25
    16e0:	70 f4       	brcc	.+28     	; 0x16fe <update_funcCnt_x+0x84>
    16e2:	80 91 a5 20 	lds	r24, 0x20A5
    16e6:	90 91 a6 20 	lds	r25, 0x20A6
    16ea:	a0 91 a7 20 	lds	r26, 0x20A7
    16ee:	b0 91 a8 20 	lds	r27, 0x20A8
    16f2:	48 17       	cp	r20, r24
    16f4:	59 07       	cpc	r21, r25
    16f6:	6a 07       	cpc	r22, r26
    16f8:	7b 07       	cpc	r23, r27
    16fa:	08 f4       	brcc	.+2      	; 0x16fe <update_funcCnt_x+0x84>
    16fc:	dd c0       	rjmp	.+442    	; 0x18b8 <update_funcCnt_x+0x23e>
            // need to update function_X[FUNCITION_LENGTH]
            if (func_global_counter_x >= funcSize_x){
    16fe:	80 91 a5 20 	lds	r24, 0x20A5
    1702:	90 91 a6 20 	lds	r25, 0x20A6
    1706:	a0 91 a7 20 	lds	r26, 0x20A7
    170a:	b0 91 a8 20 	lds	r27, 0x20A8
    170e:	48 17       	cp	r20, r24
    1710:	59 07       	cpc	r21, r25
    1712:	6a 07       	cpc	r22, r26
    1714:	7b 07       	cpc	r23, r27
    1716:	78 f0       	brcs	.+30     	; 0x1736 <update_funcCnt_x+0xbc>
                
                offset = 512;
                func_global_counter_x =0;
    1718:	10 92 eb 24 	sts	0x24EB, r1
    171c:	10 92 ec 24 	sts	0x24EC, r1
    1720:	10 92 ed 24 	sts	0x24ED, r1
    1724:	10 92 ee 24 	sts	0x24EE, r1
                function_counter_x = 0;
    1728:	10 92 e7 24 	sts	0x24E7, r1
    172c:	10 92 e8 24 	sts	0x24E8, r1
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	52 e0       	ldi	r21, 0x02	; 2
    1734:	06 c0       	rjmp	.+12     	; 0x1742 <update_funcCnt_x+0xc8>
            }
            else{
                
                //read the next loadBuffer bytes
                offset = 512 + func_global_counter_x;
    1736:	40 50       	subi	r20, 0x00	; 0
    1738:	5e 4f       	sbci	r21, 0xFE	; 254
                function_counter_x = 0;
    173a:	10 92 e7 24 	sts	0x24E7, r1
    173e:	10 92 e8 24 	sts	0x24E8, r1
            }
            
            res = f_lseek(&file2, offset);
    1742:	7a 01       	movw	r14, r20
    1744:	00 e0       	ldi	r16, 0x00	; 0
    1746:	10 e0       	ldi	r17, 0x00	; 0
    1748:	86 e7       	ldi	r24, 0x76	; 118
    174a:	95 e2       	ldi	r25, 0x25	; 37
    174c:	b8 01       	movw	r22, r16
    174e:	a7 01       	movw	r20, r14
    1750:	0e 94 c1 3b 	call	0x7782	; 0x7782 <f_lseek>
    1754:	28 2f       	mov	r18, r24
            if ((res == FR_OK) && (file2.fptr == offset)) {
    1756:	88 23       	and	r24, r24
    1758:	09 f0       	breq	.+2      	; 0x175c <update_funcCnt_x+0xe2>
    175a:	86 c0       	rjmp	.+268    	; 0x1868 <update_funcCnt_x+0x1ee>
    175c:	80 91 7c 25 	lds	r24, 0x257C
    1760:	90 91 7d 25 	lds	r25, 0x257D
    1764:	a0 91 7e 25 	lds	r26, 0x257E
    1768:	b0 91 7f 25 	lds	r27, 0x257F
    176c:	8e 15       	cp	r24, r14
    176e:	9f 05       	cpc	r25, r15
    1770:	a0 07       	cpc	r26, r16
    1772:	b1 07       	cpc	r27, r17
    1774:	09 f0       	breq	.+2      	; 0x1778 <update_funcCnt_x+0xfe>
    1776:	78 c0       	rjmp	.+240    	; 0x1868 <update_funcCnt_x+0x1ee>
                
                if (funcSize_x - func_global_counter_x >= 2*FUNCTION_LENGTH) {
    1778:	e0 90 a5 20 	lds	r14, 0x20A5
    177c:	f0 90 a6 20 	lds	r15, 0x20A6
    1780:	00 91 a7 20 	lds	r16, 0x20A7
    1784:	10 91 a8 20 	lds	r17, 0x20A8
    1788:	20 91 eb 24 	lds	r18, 0x24EB
    178c:	30 91 ec 24 	lds	r19, 0x24EC
    1790:	40 91 ed 24 	lds	r20, 0x24ED
    1794:	50 91 ee 24 	lds	r21, 0x24EE
    1798:	d8 01       	movw	r26, r16
    179a:	c7 01       	movw	r24, r14
    179c:	82 1b       	sub	r24, r18
    179e:	93 0b       	sbc	r25, r19
    17a0:	a4 0b       	sbc	r26, r20
    17a2:	b5 0b       	sbc	r27, r21
    17a4:	88 3c       	cpi	r24, 0xC8	; 200
    17a6:	91 05       	cpc	r25, r1
    17a8:	a1 05       	cpc	r26, r1
    17aa:	b1 05       	cpc	r27, r1
    17ac:	18 f0       	brcs	.+6      	; 0x17b4 <update_funcCnt_x+0x13a>
                    loadXBuffer = 2*FUNCTION_LENGTH;
    17ae:	88 ec       	ldi	r24, 0xC8	; 200
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	03 c0       	rjmp	.+6      	; 0x17ba <update_funcCnt_x+0x140>
                }
                else {
                    loadXBuffer = funcSize_x - func_global_counter_x;
    17b4:	c7 01       	movw	r24, r14
    17b6:	82 1b       	sub	r24, r18
    17b8:	93 0b       	sbc	r25, r19
    17ba:	80 93 ad 20 	sts	0x20AD, r24
    17be:	90 93 ae 20 	sts	0x20AE, r25
                }
                
                res = f_read(&file2, funcXBuff, loadXBuffer, &cnt);
    17c2:	8e 01       	movw	r16, r28
    17c4:	0b 5f       	subi	r16, 0xFB	; 251
    17c6:	1f 4f       	sbci	r17, 0xFF	; 255
    17c8:	40 91 ad 20 	lds	r20, 0x20AD
    17cc:	50 91 ae 20 	lds	r21, 0x20AE
    17d0:	86 e7       	ldi	r24, 0x76	; 118
    17d2:	95 e2       	ldi	r25, 0x25	; 37
    17d4:	b8 01       	movw	r22, r16
    17d6:	9e 01       	movw	r18, r28
    17d8:	2f 5f       	subi	r18, 0xFF	; 255
    17da:	3f 4f       	sbci	r19, 0xFF	; 255
    17dc:	0e 94 2e 4d 	call	0x9a5c	; 0x9a5c <f_read>
    17e0:	48 2f       	mov	r20, r24
                if ((res == FR_OK) && (cnt == loadXBuffer)) {
    17e2:	88 23       	and	r24, r24
    17e4:	21 f5       	brne	.+72     	; 0x182e <update_funcCnt_x+0x1b4>
    17e6:	29 81       	ldd	r18, Y+1	; 0x01
    17e8:	3a 81       	ldd	r19, Y+2	; 0x02
    17ea:	80 91 ad 20 	lds	r24, 0x20AD
    17ee:	90 91 ae 20 	lds	r25, 0x20AE
    17f2:	28 17       	cp	r18, r24
    17f4:	39 07       	cpc	r19, r25
    17f6:	d9 f4       	brne	.+54     	; 0x182e <update_funcCnt_x+0x1b4>
                    
                    for (j = 0; j < loadXBuffer/2; j++)
    17f8:	f8 01       	movw	r30, r16
    17fa:	67 e0       	ldi	r22, 0x07	; 7
    17fc:	78 e2       	ldi	r23, 0x28	; 40
    17fe:	2e 7f       	andi	r18, 0xFE	; 254
    1800:	20 0f       	add	r18, r16
    1802:	31 1f       	adc	r19, r17
                    {   ((uint8_t*)&tempVal)[0] = funcXBuff[2*j];
    1804:	ae 01       	movw	r20, r28
    1806:	4d 5f       	subi	r20, 0xFD	; 253
    1808:	5f 4f       	sbci	r21, 0xFF	; 255
    180a:	0d c0       	rjmp	.+26     	; 0x1826 <update_funcCnt_x+0x1ac>
    180c:	80 81       	ld	r24, Z
    180e:	da 01       	movw	r26, r20
    1810:	8c 93       	st	X, r24
                        ((uint8_t*)&tempVal)[1] = funcXBuff[2*j+1];
    1812:	81 81       	ldd	r24, Z+1	; 0x01
    1814:	11 96       	adiw	r26, 0x01	; 1
    1816:	8c 93       	st	X, r24
                        function_X [j] = tempVal;
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	db 01       	movw	r26, r22
    181e:	8d 93       	st	X+, r24
    1820:	9d 93       	st	X+, r25
    1822:	bd 01       	movw	r22, r26
    1824:	32 96       	adiw	r30, 0x02	; 2
                }
                
                res = f_read(&file2, funcXBuff, loadXBuffer, &cnt);
                if ((res == FR_OK) && (cnt == loadXBuffer)) {
                    
                    for (j = 0; j < loadXBuffer/2; j++)
    1826:	e2 17       	cp	r30, r18
    1828:	f3 07       	cpc	r31, r19
    182a:	81 f7       	brne	.-32     	; 0x180c <update_funcCnt_x+0x192>
    182c:	45 c0       	rjmp	.+138    	; 0x18b8 <update_funcCnt_x+0x23e>
                        ((uint8_t*)&tempVal)[1] = funcXBuff[2*j+1];
                        function_X [j] = tempVal;
                    }
                    
                } else {
                    if (quiet_mode_on == 0){
    182e:	80 91 f3 24 	lds	r24, 0x24F3
    1832:	88 23       	and	r24, r24
    1834:	09 f0       	breq	.+2      	; 0x1838 <update_funcCnt_x+0x1be>
    1836:	40 c0       	rjmp	.+128    	; 0x18b8 <update_funcCnt_x+0x23e>
                        xprintf(PSTR("res =  %u\n"), res);
    1838:	00 d0       	rcall	.+0      	; 0x183a <update_funcCnt_x+0x1c0>
    183a:	0f 92       	push	r0
    183c:	ed b7       	in	r30, 0x3d	; 61
    183e:	fe b7       	in	r31, 0x3e	; 62
    1840:	31 96       	adiw	r30, 0x01	; 1
    1842:	8b e4       	ldi	r24, 0x4B	; 75
    1844:	93 e0       	ldi	r25, 0x03	; 3
    1846:	ad b7       	in	r26, 0x3d	; 61
    1848:	be b7       	in	r27, 0x3e	; 62
    184a:	11 96       	adiw	r26, 0x01	; 1
    184c:	8d 93       	st	X+, r24
    184e:	9c 93       	st	X, r25
    1850:	12 97       	sbiw	r26, 0x02	; 2
    1852:	42 83       	std	Z+2, r20	; 0x02
    1854:	13 82       	std	Z+3, r1	; 0x03
    1856:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
                        xputs(PSTR("Error in f_read in in update_funcCnt_x\n"));
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	83 e2       	ldi	r24, 0x23	; 35
    1864:	93 e0       	ldi	r25, 0x03	; 3
    1866:	1b c0       	rjmp	.+54     	; 0x189e <update_funcCnt_x+0x224>
                    }
                }
            } else {
                if (quiet_mode_on == 0){
    1868:	80 91 f3 24 	lds	r24, 0x24F3
    186c:	88 23       	and	r24, r24
    186e:	21 f5       	brne	.+72     	; 0x18b8 <update_funcCnt_x+0x23e>
                    xprintf(PSTR("res =  %u\n"), res);
    1870:	00 d0       	rcall	.+0      	; 0x1872 <update_funcCnt_x+0x1f8>
    1872:	0f 92       	push	r0
    1874:	ed b7       	in	r30, 0x3d	; 61
    1876:	fe b7       	in	r31, 0x3e	; 62
    1878:	31 96       	adiw	r30, 0x01	; 1
    187a:	88 e1       	ldi	r24, 0x18	; 24
    187c:	93 e0       	ldi	r25, 0x03	; 3
    187e:	ad b7       	in	r26, 0x3d	; 61
    1880:	be b7       	in	r27, 0x3e	; 62
    1882:	11 96       	adiw	r26, 0x01	; 1
    1884:	8d 93       	st	X+, r24
    1886:	9c 93       	st	X, r25
    1888:	12 97       	sbiw	r26, 0x02	; 2
    188a:	22 83       	std	Z+2, r18	; 0x02
    188c:	13 82       	std	Z+3, r1	; 0x03
    188e:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
                    xputs(PSTR("Error in f_lseek in update_funcCnt_x\n"));
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	82 ef       	ldi	r24, 0xF2	; 242
    189c:	92 e0       	ldi	r25, 0x02	; 2
    189e:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    18a2:	0a c0       	rjmp	.+20     	; 0x18b8 <update_funcCnt_x+0x23e>
            }
        } //end if ((function_counter_x >= loadBuffer/2) || (func_global_counter_x >= funcSize_x))
        
    }
    else{
        function_counter_x = (function_counter_x + 1)%FUNCTION_LENGTH;
    18a4:	c9 01       	movw	r24, r18
    18a6:	01 96       	adiw	r24, 0x01	; 1
    18a8:	64 e6       	ldi	r22, 0x64	; 100
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	0e 94 44 57 	call	0xae88	; 0xae88 <__udivmodhi4>
    18b0:	80 93 e7 24 	sts	0x24E7, r24
    18b4:	90 93 e8 24 	sts	0x24E8, r25
    }
    
    if (x_mode == 5)   // in function DBG mode - show the function gen
    18b8:	80 91 99 27 	lds	r24, 0x2799
    18bc:	85 30       	cpi	r24, 0x05	; 5
    18be:	e9 f4       	brne	.+58     	; 0x18fa <update_funcCnt_x+0x280>
    {
        X_dac_val = (65535/2) + 328*function_X[function_counter_x];   //328 should convert 1V (=20) to 0.5 V
        analogWrite(0, X_dac_val>>5); // make it a value in the range 0 - 2047 (0 - 5V)
    18c0:	e0 91 e7 24 	lds	r30, 0x24E7
    18c4:	f0 91 e8 24 	lds	r31, 0x24E8
    18c8:	ee 0f       	add	r30, r30
    18ca:	ff 1f       	adc	r31, r31
    18cc:	e9 5f       	subi	r30, 0xF9	; 249
    18ce:	f7 4d       	sbci	r31, 0xD7	; 215
    18d0:	20 81       	ld	r18, Z
    18d2:	31 81       	ldd	r19, Z+1	; 0x01
    18d4:	88 e4       	ldi	r24, 0x48	; 72
    18d6:	91 e0       	ldi	r25, 0x01	; 1
    18d8:	28 9f       	mul	r18, r24
    18da:	b0 01       	movw	r22, r0
    18dc:	29 9f       	mul	r18, r25
    18de:	70 0d       	add	r23, r0
    18e0:	38 9f       	mul	r19, r24
    18e2:	70 0d       	add	r23, r0
    18e4:	11 24       	eor	r1, r1
    18e6:	61 50       	subi	r22, 0x01	; 1
    18e8:	70 48       	sbci	r23, 0x80	; 128
    18ea:	f5 e0       	ldi	r31, 0x05	; 5
    18ec:	76 95       	lsr	r23
    18ee:	67 95       	ror	r22
    18f0:	fa 95       	dec	r31
    18f2:	e1 f7       	brne	.-8      	; 0x18ec <update_funcCnt_x+0x272>
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	0e 94 87 21 	call	0x430e	; 0x430e <analogWrite>
    }
}
    18fa:	c4 53       	subi	r28, 0x34	; 52
    18fc:	df 4f       	sbci	r29, 0xFF	; 255
    18fe:	e6 e0       	ldi	r30, 0x06	; 6
    1900:	0c 94 d0 57 	jmp	0xafa0	; 0xafa0 <__epilogue_restores__+0x18>

00001904 <set_vel_func>:
            break;
    }
}


void set_vel_func(uint8_t func_channel, uint8_t func_id) {
    1904:	ae e0       	ldi	r26, 0x0E	; 14
    1906:	b2 e0       	ldi	r27, 0x02	; 2
    1908:	e8 e8       	ldi	r30, 0x88	; 136
    190a:	fc e0       	ldi	r31, 0x0C	; 12
    190c:	0c 94 b5 57 	jmp	0xaf6a	; 0xaf6a <__prologue_saves__+0x1a>
    1910:	f8 2e       	mov	r15, r24
    1912:	16 2f       	mov	r17, r22
    //uint8_t func_name_y[100];
    uint8_t res, func_name_len;
    uint8_t velFuncBuff[512];
    
    
    if (func_id < 10)
    1914:	6a 30       	cpi	r22, 0x0A	; 10
    1916:	80 f4       	brcc	.+32     	; 0x1938 <set_vel_func+0x34>
        sprintf(str, "vel000%d.fun\0", func_id);
    1918:	00 d0       	rcall	.+0      	; 0x191a <set_vel_func+0x16>
    191a:	00 d0       	rcall	.+0      	; 0x191c <set_vel_func+0x18>
    191c:	ed b7       	in	r30, 0x3d	; 61
    191e:	fe b7       	in	r31, 0x3e	; 62
    1920:	31 96       	adiw	r30, 0x01	; 1
    1922:	ce 01       	movw	r24, r28
    1924:	03 96       	adiw	r24, 0x03	; 3
    1926:	ad b7       	in	r26, 0x3d	; 61
    1928:	be b7       	in	r27, 0x3e	; 62
    192a:	11 96       	adiw	r26, 0x01	; 1
    192c:	8d 93       	st	X+, r24
    192e:	9c 93       	st	X, r25
    1930:	12 97       	sbiw	r26, 0x02	; 2
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e2       	ldi	r25, 0x20	; 32
    1936:	1f c0       	rjmp	.+62     	; 0x1976 <set_vel_func+0x72>
    1938:	ce 01       	movw	r24, r28
    193a:	03 96       	adiw	r24, 0x03	; 3
    else if (func_id < 100)
    193c:	64 36       	cpi	r22, 0x64	; 100
    193e:	70 f4       	brcc	.+28     	; 0x195c <set_vel_func+0x58>
        sprintf(str, "vel00%d.fun\0", func_id);
    1940:	00 d0       	rcall	.+0      	; 0x1942 <set_vel_func+0x3e>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <set_vel_func+0x40>
    1944:	ed b7       	in	r30, 0x3d	; 61
    1946:	fe b7       	in	r31, 0x3e	; 62
    1948:	31 96       	adiw	r30, 0x01	; 1
    194a:	ad b7       	in	r26, 0x3d	; 61
    194c:	be b7       	in	r27, 0x3e	; 62
    194e:	11 96       	adiw	r26, 0x01	; 1
    1950:	8d 93       	st	X+, r24
    1952:	9c 93       	st	X, r25
    1954:	12 97       	sbiw	r26, 0x02	; 2
    1956:	8e e0       	ldi	r24, 0x0E	; 14
    1958:	90 e2       	ldi	r25, 0x20	; 32
    195a:	0d c0       	rjmp	.+26     	; 0x1976 <set_vel_func+0x72>
    else if (func_id < 1000)
        sprintf(str, "vel0%d.fun\0", func_id);
    195c:	00 d0       	rcall	.+0      	; 0x195e <set_vel_func+0x5a>
    195e:	00 d0       	rcall	.+0      	; 0x1960 <set_vel_func+0x5c>
    1960:	ed b7       	in	r30, 0x3d	; 61
    1962:	fe b7       	in	r31, 0x3e	; 62
    1964:	31 96       	adiw	r30, 0x01	; 1
    1966:	ad b7       	in	r26, 0x3d	; 61
    1968:	be b7       	in	r27, 0x3e	; 62
    196a:	11 96       	adiw	r26, 0x01	; 1
    196c:	8d 93       	st	X+, r24
    196e:	9c 93       	st	X, r25
    1970:	12 97       	sbiw	r26, 0x02	; 2
    1972:	8b e1       	ldi	r24, 0x1B	; 27
    1974:	90 e2       	ldi	r25, 0x20	; 32
    1976:	82 83       	std	Z+2, r24	; 0x02
    1978:	93 83       	std	Z+3, r25	; 0x03
    197a:	14 83       	std	Z+4, r17	; 0x04
    197c:	15 82       	std	Z+5, r1	; 0x05
    197e:	0e 94 08 5a 	call	0xb410	; 0xb410 <sprintf>
    1982:	8d b7       	in	r24, 0x3d	; 61
    1984:	9e b7       	in	r25, 0x3e	; 62
    1986:	06 96       	adiw	r24, 0x06	; 6
    1988:	8d bf       	out	0x3d, r24	; 61
    198a:	9e bf       	out	0x3e, r25	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("function id is too big.\n"));
    
    switch(func_channel) {
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	f9 16       	cp	r15, r25
    1990:	29 f0       	breq	.+10     	; 0x199c <set_vel_func+0x98>
    1992:	a2 e0       	ldi	r26, 0x02	; 2
    1994:	fa 16       	cp	r15, r26
    1996:	09 f0       	breq	.+2      	; 0x199a <set_vel_func+0x96>
    1998:	17 c1       	rjmp	.+558    	; 0x1bc8 <set_vel_func+0x2c4>
    199a:	89 c0       	rjmp	.+274    	; 0x1aae <set_vel_func+0x1aa>
        case 1:    //channel x
            Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0); //disable ISR
    199c:	40 91 9f 20 	lds	r20, 0x209F
    19a0:	50 91 a0 20 	lds	r21, 0x20A0
    19a4:	60 e0       	ldi	r22, 0x00	; 0
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	8d e3       	ldi	r24, 0x3D	; 61
    19aa:	9b e0       	ldi	r25, 0x0B	; 11
    19ac:	24 e0       	ldi	r18, 0x04	; 4
    19ae:	00 e0       	ldi	r16, 0x00	; 0
    19b0:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
            //read the header block and send back the function name
            res = f_close(&file2);
    19b4:	86 e7       	ldi	r24, 0x76	; 118
    19b6:	95 e2       	ldi	r25, 0x25	; 37
    19b8:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <f_close>
            
            res = f_open(&file2, str, FA_OPEN_EXISTING | FA_READ);
    19bc:	86 e7       	ldi	r24, 0x76	; 118
    19be:	95 e2       	ldi	r25, 0x25	; 37
    19c0:	be 01       	movw	r22, r28
    19c2:	6d 5f       	subi	r22, 0xFD	; 253
    19c4:	7f 4f       	sbci	r23, 0xFF	; 255
    19c6:	41 e0       	ldi	r20, 0x01	; 1
    19c8:	0e 94 17 4c 	call	0x982e	; 0x982e <f_open>
            
            if (res == FR_OK) {
    19cc:	88 23       	and	r24, r24
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <set_vel_func+0xce>
    19d0:	48 c0       	rjmp	.+144    	; 0x1a62 <set_vel_func+0x15e>
                
                res = f_read(&file2, velFuncBuff, 512, &cnt);
    19d2:	86 e7       	ldi	r24, 0x76	; 118
    19d4:	95 e2       	ldi	r25, 0x25	; 37
    19d6:	be 01       	movw	r22, r28
    19d8:	61 5f       	subi	r22, 0xF1	; 241
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	52 e0       	ldi	r21, 0x02	; 2
    19e0:	9e 01       	movw	r18, r28
    19e2:	2f 5f       	subi	r18, 0xFF	; 255
    19e4:	3f 4f       	sbci	r19, 0xFF	; 255
    19e6:	0e 94 2e 4d 	call	0x9a5c	; 0x9a5c <f_read>
                
                if ((res == FR_OK) && (cnt == 512)) {
    19ea:	88 23       	and	r24, r24
    19ec:	99 f5       	brne	.+102    	; 0x1a54 <set_vel_func+0x150>
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	9a 81       	ldd	r25, Y+2	; 0x02
    19f2:	80 50       	subi	r24, 0x00	; 0
    19f4:	92 40       	sbci	r25, 0x02	; 2
    19f6:	71 f5       	brne	.+92     	; 0x1a54 <set_vel_func+0x150>
                    
                    // get the test header info
                    ((uint8_t*)&funcSize_x)[0] = velFuncBuff[0];
    19f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fa:	80 93 a5 20 	sts	0x20A5, r24
                    ((uint8_t*)&funcSize_x)[1] = velFuncBuff[1];
    19fe:	88 89       	ldd	r24, Y+16	; 0x10
    1a00:	80 93 a6 20 	sts	0x20A6, r24
                    ((uint8_t*)&funcSize_x)[2] = velFuncBuff[2];
    1a04:	89 89       	ldd	r24, Y+17	; 0x11
    1a06:	80 93 a7 20 	sts	0x20A7, r24
                    ((uint8_t*)&funcSize_x)[3] = velFuncBuff[3];
    1a0a:	8a 89       	ldd	r24, Y+18	; 0x12
    1a0c:	80 93 a8 20 	sts	0x20A8, r24
                    func_name_len = velFuncBuff[4];
                    
                    func_ID_X = func_id;
    1a10:	10 93 f4 24 	sts	0x24F4, r17
    1a14:	10 92 f5 24 	sts	0x24F5, r1
                    
                    Stop = 1;
    1a18:	f0 92 9c 20 	sts	0x209C, r15
                    display_flag = 0;  //clear the display flag
    1a1c:	10 92 e0 24 	sts	0x24E0, r1
                    if (quiet_mode_on == 0)
    1a20:	80 91 f3 24 	lds	r24, 0x24F3
    1a24:	88 23       	and	r24, r24
    1a26:	29 f5       	brne	.+74     	; 0x1a72 <set_vel_func+0x16e>
                        xprintf(PSTR("Setting velocity function  %u for X\n"), func_id);
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <set_vel_func+0x126>
    1a2a:	0f 92       	push	r0
    1a2c:	ed b7       	in	r30, 0x3d	; 61
    1a2e:	fe b7       	in	r31, 0x3e	; 62
    1a30:	31 96       	adiw	r30, 0x01	; 1
    1a32:	81 e2       	ldi	r24, 0x21	; 33
    1a34:	94 e0       	ldi	r25, 0x04	; 4
    1a36:	ad b7       	in	r26, 0x3d	; 61
    1a38:	be b7       	in	r27, 0x3e	; 62
    1a3a:	11 96       	adiw	r26, 0x01	; 1
    1a3c:	8d 93       	st	X+, r24
    1a3e:	9c 93       	st	X, r25
    1a40:	12 97       	sbiw	r26, 0x02	; 2
    1a42:	12 83       	std	Z+2, r17	; 0x02
    1a44:	13 82       	std	Z+3, r1	; 0x03
    1a46:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f c0       	rjmp	.+30     	; 0x1a72 <set_vel_func+0x16e>
                    
                } else {
                    if (quiet_mode_on == 0)
    1a54:	80 91 f3 24 	lds	r24, 0x24F3
    1a58:	88 23       	and	r24, r24
    1a5a:	59 f4       	brne	.+22     	; 0x1a72 <set_vel_func+0x16e>
                        xputs(PSTR("Error f_read in set_vel_func X.\n"));
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	94 e0       	ldi	r25, 0x04	; 4
    1a60:	06 c0       	rjmp	.+12     	; 0x1a6e <set_vel_func+0x16a>
                }
            } else {
                if (quiet_mode_on == 0)
    1a62:	80 91 f3 24 	lds	r24, 0x24F3
    1a66:	88 23       	and	r24, r24
    1a68:	21 f4       	brne	.+8      	; 0x1a72 <set_vel_func+0x16e>
                    xputs(PSTR("Error f_open in set_vel_func X.\n"));
    1a6a:	8f ed       	ldi	r24, 0xDF	; 223
    1a6c:	93 e0       	ldi	r25, 0x03	; 3
    1a6e:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
            }
            function_counter_x = 0;
    1a72:	10 92 e7 24 	sts	0x24E7, r1
    1a76:	10 92 e8 24 	sts	0x24E8, r1
            func_global_counter_x = funcSize_x;
    1a7a:	80 91 a5 20 	lds	r24, 0x20A5
    1a7e:	90 91 a6 20 	lds	r25, 0x20A6
    1a82:	a0 91 a7 20 	lds	r26, 0x20A7
    1a86:	b0 91 a8 20 	lds	r27, 0x20A8
    1a8a:	80 93 eb 24 	sts	0x24EB, r24
    1a8e:	90 93 ec 24 	sts	0x24EC, r25
    1a92:	a0 93 ed 24 	sts	0x24ED, r26
    1a96:	b0 93 ee 24 	sts	0x24EE, r27
            Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1); //enable ISR
    1a9a:	40 91 9f 20 	lds	r20, 0x209F
    1a9e:	50 91 a0 20 	lds	r21, 0x20A0
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	8d e3       	ldi	r24, 0x3D	; 61
    1aa8:	9b e0       	ldi	r25, 0x0B	; 11
    1aaa:	24 e0       	ldi	r18, 0x04	; 4
    1aac:	89 c0       	rjmp	.+274    	; 0x1bc0 <set_vel_func+0x2bc>
            break;
            
        case 2:
            
            Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //disable ISR
    1aae:	40 91 a1 20 	lds	r20, 0x20A1
    1ab2:	50 91 a2 20 	lds	r21, 0x20A2
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	70 e0       	ldi	r23, 0x00	; 0
    1aba:	88 ef       	ldi	r24, 0xF8	; 248
    1abc:	99 e0       	ldi	r25, 0x09	; 9
    1abe:	25 e0       	ldi	r18, 0x05	; 5
    1ac0:	00 e0       	ldi	r16, 0x00	; 0
    1ac2:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
            
            res = f_close(&file3);
    1ac6:	88 ee       	ldi	r24, 0xE8	; 232
    1ac8:	96 e2       	ldi	r25, 0x26	; 38
    1aca:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <f_close>
            
            //read the header block and send back the function name
            res = f_open(&file3, str, FA_OPEN_EXISTING | FA_READ);
    1ace:	88 ee       	ldi	r24, 0xE8	; 232
    1ad0:	96 e2       	ldi	r25, 0x26	; 38
    1ad2:	be 01       	movw	r22, r28
    1ad4:	6d 5f       	subi	r22, 0xFD	; 253
    1ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad8:	41 e0       	ldi	r20, 0x01	; 1
    1ada:	0e 94 17 4c 	call	0x982e	; 0x982e <f_open>
            
            if (res == FR_OK) {
    1ade:	88 23       	and	r24, r24
    1ae0:	09 f0       	breq	.+2      	; 0x1ae4 <set_vel_func+0x1e0>
    1ae2:	49 c0       	rjmp	.+146    	; 0x1b76 <set_vel_func+0x272>
                
                res = f_read(&file3, velFuncBuff, 512, &cnt);
    1ae4:	88 ee       	ldi	r24, 0xE8	; 232
    1ae6:	96 e2       	ldi	r25, 0x26	; 38
    1ae8:	be 01       	movw	r22, r28
    1aea:	61 5f       	subi	r22, 0xF1	; 241
    1aec:	7f 4f       	sbci	r23, 0xFF	; 255
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	52 e0       	ldi	r21, 0x02	; 2
    1af2:	9e 01       	movw	r18, r28
    1af4:	2f 5f       	subi	r18, 0xFF	; 255
    1af6:	3f 4f       	sbci	r19, 0xFF	; 255
    1af8:	0e 94 2e 4d 	call	0x9a5c	; 0x9a5c <f_read>
                
                if ((res == FR_OK) && (cnt == 512)) {
    1afc:	88 23       	and	r24, r24
    1afe:	a1 f5       	brne	.+104    	; 0x1b68 <set_vel_func+0x264>
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	80 50       	subi	r24, 0x00	; 0
    1b06:	92 40       	sbci	r25, 0x02	; 2
    1b08:	79 f5       	brne	.+94     	; 0x1b68 <set_vel_func+0x264>
                    // get the test header info
                    ((uint8_t*)&funcSize_y)[0] = velFuncBuff[0];
    1b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b0c:	80 93 a9 20 	sts	0x20A9, r24
                    ((uint8_t*)&funcSize_y)[1] = velFuncBuff[1];
    1b10:	88 89       	ldd	r24, Y+16	; 0x10
    1b12:	80 93 aa 20 	sts	0x20AA, r24
                    ((uint8_t*)&funcSize_y)[2] = velFuncBuff[2];
    1b16:	89 89       	ldd	r24, Y+17	; 0x11
    1b18:	80 93 ab 20 	sts	0x20AB, r24
                    ((uint8_t*)&funcSize_y)[3] = velFuncBuff[3];
    1b1c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b1e:	80 93 ac 20 	sts	0x20AC, r24
                    func_name_len = velFuncBuff[4];
                    
                    func_ID_Y = func_id;
    1b22:	10 93 f6 24 	sts	0x24F6, r17
    1b26:	10 92 f7 24 	sts	0x24F7, r1
                    
                    Stop = 1;
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	80 93 9c 20 	sts	0x209C, r24
                    display_flag = 0;  //clear the display flag
    1b30:	10 92 e0 24 	sts	0x24E0, r1
                    if (quiet_mode_on == 0)
    1b34:	80 91 f3 24 	lds	r24, 0x24F3
    1b38:	88 23       	and	r24, r24
    1b3a:	29 f5       	brne	.+74     	; 0x1b86 <set_vel_func+0x282>
                        xprintf(PSTR("Setting velocity function %u for Y\n"), func_id);
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <set_vel_func+0x23a>
    1b3e:	0f 92       	push	r0
    1b40:	ed b7       	in	r30, 0x3d	; 61
    1b42:	fe b7       	in	r31, 0x3e	; 62
    1b44:	31 96       	adiw	r30, 0x01	; 1
    1b46:	8b eb       	ldi	r24, 0xBB	; 187
    1b48:	93 e0       	ldi	r25, 0x03	; 3
    1b4a:	ad b7       	in	r26, 0x3d	; 61
    1b4c:	be b7       	in	r27, 0x3e	; 62
    1b4e:	11 96       	adiw	r26, 0x01	; 1
    1b50:	8d 93       	st	X+, r24
    1b52:	9c 93       	st	X, r25
    1b54:	12 97       	sbiw	r26, 0x02	; 2
    1b56:	12 83       	std	Z+2, r17	; 0x02
    1b58:	13 82       	std	Z+3, r1	; 0x03
    1b5a:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f c0       	rjmp	.+30     	; 0x1b86 <set_vel_func+0x282>
                    
                } else {
                    if (quiet_mode_on == 0)
    1b68:	80 91 f3 24 	lds	r24, 0x24F3
    1b6c:	88 23       	and	r24, r24
    1b6e:	59 f4       	brne	.+22     	; 0x1b86 <set_vel_func+0x282>
                        xputs(PSTR("Error f_read in set_vel_func Y.\n"));
    1b70:	8a e9       	ldi	r24, 0x9A	; 154
    1b72:	93 e0       	ldi	r25, 0x03	; 3
    1b74:	06 c0       	rjmp	.+12     	; 0x1b82 <set_vel_func+0x27e>
                }
            } else {
                if (quiet_mode_on == 0)
    1b76:	80 91 f3 24 	lds	r24, 0x24F3
    1b7a:	88 23       	and	r24, r24
    1b7c:	21 f4       	brne	.+8      	; 0x1b86 <set_vel_func+0x282>
                    xputs(PSTR("Error f_open in set_vel_func Y.\n"));
    1b7e:	89 e7       	ldi	r24, 0x79	; 121
    1b80:	93 e0       	ldi	r25, 0x03	; 3
    1b82:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
            }
            function_counter_y = 0;
    1b86:	10 92 e9 24 	sts	0x24E9, r1
    1b8a:	10 92 ea 24 	sts	0x24EA, r1
            func_global_counter_y = funcSize_y;
    1b8e:	80 91 a9 20 	lds	r24, 0x20A9
    1b92:	90 91 aa 20 	lds	r25, 0x20AA
    1b96:	a0 91 ab 20 	lds	r26, 0x20AB
    1b9a:	b0 91 ac 20 	lds	r27, 0x20AC
    1b9e:	80 93 ef 24 	sts	0x24EF, r24
    1ba2:	90 93 f0 24 	sts	0x24F0, r25
    1ba6:	a0 93 f1 24 	sts	0x24F1, r26
    1baa:	b0 93 f2 24 	sts	0x24F2, r27
            Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); //enable ISR
    1bae:	40 91 a1 20 	lds	r20, 0x20A1
    1bb2:	50 91 a2 20 	lds	r21, 0x20A2
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	88 ef       	ldi	r24, 0xF8	; 248
    1bbc:	99 e0       	ldi	r25, 0x09	; 9
    1bbe:	25 e0       	ldi	r18, 0x05	; 5
    1bc0:	01 e0       	ldi	r16, 0x01	; 1
    1bc2:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
    1bc6:	08 c0       	rjmp	.+16     	; 0x1bd8 <set_vel_func+0x2d4>
            break;
            
        default:
            if (quiet_mode_on == 0)
    1bc8:	80 91 f3 24 	lds	r24, 0x24F3
    1bcc:	88 23       	and	r24, r24
    1bce:	21 f4       	brne	.+8      	; 0x1bd8 <set_vel_func+0x2d4>
                xputs(PSTR("Error input for function channel.\n"));
    1bd0:	86 e5       	ldi	r24, 0x56	; 86
    1bd2:	93 e0       	ldi	r25, 0x03	; 3
    1bd4:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
            break;
    }
}
    1bd8:	c2 5f       	subi	r28, 0xF2	; 242
    1bda:	dd 4f       	sbci	r29, 0xFD	; 253
    1bdc:	e5 e0       	ldi	r30, 0x05	; 5
    1bde:	0c 94 d1 57 	jmp	0xafa2	; 0xafa2 <__epilogue_restores__+0x1a>

00001be2 <set_pos_func>:
    }
    
}


void set_pos_func(uint8_t func_channel, uint8_t func_id) {
    1be2:	ae e0       	ldi	r26, 0x0E	; 14
    1be4:	b2 e0       	ldi	r27, 0x02	; 2
    1be6:	e7 ef       	ldi	r30, 0xF7	; 247
    1be8:	fd e0       	ldi	r31, 0x0D	; 13
    1bea:	0c 94 b5 57 	jmp	0xaf6a	; 0xaf6a <__prologue_saves__+0x1a>
    1bee:	f8 2e       	mov	r15, r24
    1bf0:	16 2f       	mov	r17, r22
    //uint8_t func_name_y[100];
    uint8_t res, func_name_len;
    uint8_t posFuncBuff[512];
    
    
    if (func_id < 10)
    1bf2:	6a 30       	cpi	r22, 0x0A	; 10
    1bf4:	80 f4       	brcc	.+32     	; 0x1c16 <set_pos_func+0x34>
        sprintf(str, "pos000%d.fun\0", func_id);
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <set_pos_func+0x16>
    1bf8:	00 d0       	rcall	.+0      	; 0x1bfa <set_pos_func+0x18>
    1bfa:	ed b7       	in	r30, 0x3d	; 61
    1bfc:	fe b7       	in	r31, 0x3e	; 62
    1bfe:	31 96       	adiw	r30, 0x01	; 1
    1c00:	ce 01       	movw	r24, r28
    1c02:	03 96       	adiw	r24, 0x03	; 3
    1c04:	ad b7       	in	r26, 0x3d	; 61
    1c06:	be b7       	in	r27, 0x3e	; 62
    1c08:	11 96       	adiw	r26, 0x01	; 1
    1c0a:	8d 93       	st	X+, r24
    1c0c:	9c 93       	st	X, r25
    1c0e:	12 97       	sbiw	r26, 0x02	; 2
    1c10:	87 e2       	ldi	r24, 0x27	; 39
    1c12:	90 e2       	ldi	r25, 0x20	; 32
    1c14:	1f c0       	rjmp	.+62     	; 0x1c54 <set_pos_func+0x72>
    1c16:	ce 01       	movw	r24, r28
    1c18:	03 96       	adiw	r24, 0x03	; 3
    else if (func_id < 100)
    1c1a:	64 36       	cpi	r22, 0x64	; 100
    1c1c:	70 f4       	brcc	.+28     	; 0x1c3a <set_pos_func+0x58>
        sprintf(str, "pos00%d.fun\0", func_id);
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <set_pos_func+0x3e>
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <set_pos_func+0x40>
    1c22:	ed b7       	in	r30, 0x3d	; 61
    1c24:	fe b7       	in	r31, 0x3e	; 62
    1c26:	31 96       	adiw	r30, 0x01	; 1
    1c28:	ad b7       	in	r26, 0x3d	; 61
    1c2a:	be b7       	in	r27, 0x3e	; 62
    1c2c:	11 96       	adiw	r26, 0x01	; 1
    1c2e:	8d 93       	st	X+, r24
    1c30:	9c 93       	st	X, r25
    1c32:	12 97       	sbiw	r26, 0x02	; 2
    1c34:	85 e3       	ldi	r24, 0x35	; 53
    1c36:	90 e2       	ldi	r25, 0x20	; 32
    1c38:	0d c0       	rjmp	.+26     	; 0x1c54 <set_pos_func+0x72>
    else if (func_id < 1000)
        sprintf(str, "pos0%d.fun\0", func_id);
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <set_pos_func+0x5a>
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <set_pos_func+0x5c>
    1c3e:	ed b7       	in	r30, 0x3d	; 61
    1c40:	fe b7       	in	r31, 0x3e	; 62
    1c42:	31 96       	adiw	r30, 0x01	; 1
    1c44:	ad b7       	in	r26, 0x3d	; 61
    1c46:	be b7       	in	r27, 0x3e	; 62
    1c48:	11 96       	adiw	r26, 0x01	; 1
    1c4a:	8d 93       	st	X+, r24
    1c4c:	9c 93       	st	X, r25
    1c4e:	12 97       	sbiw	r26, 0x02	; 2
    1c50:	82 e4       	ldi	r24, 0x42	; 66
    1c52:	90 e2       	ldi	r25, 0x20	; 32
    1c54:	82 83       	std	Z+2, r24	; 0x02
    1c56:	93 83       	std	Z+3, r25	; 0x03
    1c58:	14 83       	std	Z+4, r17	; 0x04
    1c5a:	15 82       	std	Z+5, r1	; 0x05
    1c5c:	0e 94 08 5a 	call	0xb410	; 0xb410 <sprintf>
    1c60:	8d b7       	in	r24, 0x3d	; 61
    1c62:	9e b7       	in	r25, 0x3e	; 62
    1c64:	06 96       	adiw	r24, 0x06	; 6
    1c66:	8d bf       	out	0x3d, r24	; 61
    1c68:	9e bf       	out	0x3e, r25	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("function id is too big.\n"));
    
    switch(func_channel) {
    1c6a:	91 e0       	ldi	r25, 0x01	; 1
    1c6c:	f9 16       	cp	r15, r25
    1c6e:	29 f0       	breq	.+10     	; 0x1c7a <set_pos_func+0x98>
    1c70:	a2 e0       	ldi	r26, 0x02	; 2
    1c72:	fa 16       	cp	r15, r26
    1c74:	09 f0       	breq	.+2      	; 0x1c78 <set_pos_func+0x96>
    1c76:	17 c1       	rjmp	.+558    	; 0x1ea6 <set_pos_func+0x2c4>
    1c78:	89 c0       	rjmp	.+274    	; 0x1d8c <set_pos_func+0x1aa>
        case 1:    //channel x
            //read the header block and send back the function name
            Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
    1c7a:	40 91 9f 20 	lds	r20, 0x209F
    1c7e:	50 91 a0 20 	lds	r21, 0x20A0
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	70 e0       	ldi	r23, 0x00	; 0
    1c86:	8d e3       	ldi	r24, 0x3D	; 61
    1c88:	9b e0       	ldi	r25, 0x0B	; 11
    1c8a:	24 e0       	ldi	r18, 0x04	; 4
    1c8c:	00 e0       	ldi	r16, 0x00	; 0
    1c8e:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
            
            res = f_close(&file2);
    1c92:	86 e7       	ldi	r24, 0x76	; 118
    1c94:	95 e2       	ldi	r25, 0x25	; 37
    1c96:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <f_close>
            
            res = f_open(&file2, str, FA_OPEN_EXISTING | FA_READ);
    1c9a:	86 e7       	ldi	r24, 0x76	; 118
    1c9c:	95 e2       	ldi	r25, 0x25	; 37
    1c9e:	be 01       	movw	r22, r28
    1ca0:	6d 5f       	subi	r22, 0xFD	; 253
    1ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca4:	41 e0       	ldi	r20, 0x01	; 1
    1ca6:	0e 94 17 4c 	call	0x982e	; 0x982e <f_open>
            if (res == FR_OK) {
    1caa:	88 23       	and	r24, r24
    1cac:	09 f0       	breq	.+2      	; 0x1cb0 <set_pos_func+0xce>
    1cae:	48 c0       	rjmp	.+144    	; 0x1d40 <set_pos_func+0x15e>
                res = f_read(&file2, posFuncBuff, 512, &cnt);
    1cb0:	86 e7       	ldi	r24, 0x76	; 118
    1cb2:	95 e2       	ldi	r25, 0x25	; 37
    1cb4:	be 01       	movw	r22, r28
    1cb6:	61 5f       	subi	r22, 0xF1	; 241
    1cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	52 e0       	ldi	r21, 0x02	; 2
    1cbe:	9e 01       	movw	r18, r28
    1cc0:	2f 5f       	subi	r18, 0xFF	; 255
    1cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc4:	0e 94 2e 4d 	call	0x9a5c	; 0x9a5c <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    1cc8:	88 23       	and	r24, r24
    1cca:	99 f5       	brne	.+102    	; 0x1d32 <set_pos_func+0x150>
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd0:	80 50       	subi	r24, 0x00	; 0
    1cd2:	92 40       	sbci	r25, 0x02	; 2
    1cd4:	71 f5       	brne	.+92     	; 0x1d32 <set_pos_func+0x150>
                    // get the test header info
                    ((uint8_t*)&funcSize_x)[0] = posFuncBuff[0];
    1cd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd8:	80 93 a5 20 	sts	0x20A5, r24
                    ((uint8_t*)&funcSize_x)[1] = posFuncBuff[1];
    1cdc:	88 89       	ldd	r24, Y+16	; 0x10
    1cde:	80 93 a6 20 	sts	0x20A6, r24
                    ((uint8_t*)&funcSize_x)[2] = posFuncBuff[2];
    1ce2:	89 89       	ldd	r24, Y+17	; 0x11
    1ce4:	80 93 a7 20 	sts	0x20A7, r24
                    ((uint8_t*)&funcSize_x)[3] = posFuncBuff[3];
    1ce8:	8a 89       	ldd	r24, Y+18	; 0x12
    1cea:	80 93 a8 20 	sts	0x20A8, r24
                    
                    //for (tmpCnt=0; tmpCnt<func_name_len; tmpCnt++)
                    //	{func_name_x[tmpCnt] = posFuncBuff[tmpCnt+5];}
                    //func_name_x[func_name_len] = '\0';
                    
                    func_ID_X = func_id;
    1cee:	10 93 f4 24 	sts	0x24F4, r17
    1cf2:	10 92 f5 24 	sts	0x24F5, r1
                    
                    Stop = 1;
    1cf6:	f0 92 9c 20 	sts	0x209C, r15
                    display_flag = 0;  //clear the display flag
    1cfa:	10 92 e0 24 	sts	0x24E0, r1
                    if (quiet_mode_on == 0)
    1cfe:	80 91 f3 24 	lds	r24, 0x24F3
    1d02:	88 23       	and	r24, r24
    1d04:	29 f5       	brne	.+74     	; 0x1d50 <set_pos_func+0x16e>
                        xprintf(PSTR("Setting position function %u for X\n"), func_id);
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <set_pos_func+0x126>
    1d08:	0f 92       	push	r0
    1d0a:	ed b7       	in	r30, 0x3d	; 61
    1d0c:	fe b7       	in	r31, 0x3e	; 62
    1d0e:	31 96       	adiw	r30, 0x01	; 1
    1d10:	8a e0       	ldi	r24, 0x0A	; 10
    1d12:	95 e0       	ldi	r25, 0x05	; 5
    1d14:	ad b7       	in	r26, 0x3d	; 61
    1d16:	be b7       	in	r27, 0x3e	; 62
    1d18:	11 96       	adiw	r26, 0x01	; 1
    1d1a:	8d 93       	st	X+, r24
    1d1c:	9c 93       	st	X, r25
    1d1e:	12 97       	sbiw	r26, 0x02	; 2
    1d20:	12 83       	std	Z+2, r17	; 0x02
    1d22:	13 82       	std	Z+3, r1	; 0x03
    1d24:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f c0       	rjmp	.+30     	; 0x1d50 <set_pos_func+0x16e>
                    //xprintf(PSTR("fun X: %s\n function X size: %lu bytes\n"),
                    //        func_name_x, funcSize_x);
                    
                } else {
                    if (quiet_mode_on == 0)
    1d32:	80 91 f3 24 	lds	r24, 0x24F3
    1d36:	88 23       	and	r24, r24
    1d38:	59 f4       	brne	.+22     	; 0x1d50 <set_pos_func+0x16e>
                        xputs(PSTR("Error f_read set_pos_func X\n"));
    1d3a:	8d ee       	ldi	r24, 0xED	; 237
    1d3c:	94 e0       	ldi	r25, 0x04	; 4
    1d3e:	06 c0       	rjmp	.+12     	; 0x1d4c <set_pos_func+0x16a>
                }
            } else {
                if (quiet_mode_on == 0)
    1d40:	80 91 f3 24 	lds	r24, 0x24F3
    1d44:	88 23       	and	r24, r24
    1d46:	21 f4       	brne	.+8      	; 0x1d50 <set_pos_func+0x16e>
                    xputs(PSTR("Error f_open in set_pos_func X.\n"));
    1d48:	8c ec       	ldi	r24, 0xCC	; 204
    1d4a:	94 e0       	ldi	r25, 0x04	; 4
    1d4c:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
            }
            function_counter_x = 0;
    1d50:	10 92 e7 24 	sts	0x24E7, r1
    1d54:	10 92 e8 24 	sts	0x24E8, r1
            func_global_counter_x = funcSize_x;
    1d58:	80 91 a5 20 	lds	r24, 0x20A5
    1d5c:	90 91 a6 20 	lds	r25, 0x20A6
    1d60:	a0 91 a7 20 	lds	r26, 0x20A7
    1d64:	b0 91 a8 20 	lds	r27, 0x20A8
    1d68:	80 93 eb 24 	sts	0x24EB, r24
    1d6c:	90 93 ec 24 	sts	0x24EC, r25
    1d70:	a0 93 ed 24 	sts	0x24ED, r26
    1d74:	b0 93 ee 24 	sts	0x24EE, r27
            Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);//enable ISR
    1d78:	40 91 9f 20 	lds	r20, 0x209F
    1d7c:	50 91 a0 20 	lds	r21, 0x20A0
    1d80:	60 e0       	ldi	r22, 0x00	; 0
    1d82:	70 e0       	ldi	r23, 0x00	; 0
    1d84:	8d e3       	ldi	r24, 0x3D	; 61
    1d86:	9b e0       	ldi	r25, 0x0B	; 11
    1d88:	24 e0       	ldi	r18, 0x04	; 4
    1d8a:	89 c0       	rjmp	.+274    	; 0x1e9e <set_pos_func+0x2bc>
            break;
            
        case 2:
            Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //disable ISR
    1d8c:	40 91 a1 20 	lds	r20, 0x20A1
    1d90:	50 91 a2 20 	lds	r21, 0x20A2
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	70 e0       	ldi	r23, 0x00	; 0
    1d98:	88 ef       	ldi	r24, 0xF8	; 248
    1d9a:	99 e0       	ldi	r25, 0x09	; 9
    1d9c:	25 e0       	ldi	r18, 0x05	; 5
    1d9e:	00 e0       	ldi	r16, 0x00	; 0
    1da0:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
            //read the header block and send back the function name
            res = f_close(&file3);
    1da4:	88 ee       	ldi	r24, 0xE8	; 232
    1da6:	96 e2       	ldi	r25, 0x26	; 38
    1da8:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <f_close>
            
            res = f_open(&file3, str, FA_OPEN_EXISTING | FA_READ);
    1dac:	88 ee       	ldi	r24, 0xE8	; 232
    1dae:	96 e2       	ldi	r25, 0x26	; 38
    1db0:	be 01       	movw	r22, r28
    1db2:	6d 5f       	subi	r22, 0xFD	; 253
    1db4:	7f 4f       	sbci	r23, 0xFF	; 255
    1db6:	41 e0       	ldi	r20, 0x01	; 1
    1db8:	0e 94 17 4c 	call	0x982e	; 0x982e <f_open>
            if (res == FR_OK) {
    1dbc:	88 23       	and	r24, r24
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <set_pos_func+0x1e0>
    1dc0:	49 c0       	rjmp	.+146    	; 0x1e54 <set_pos_func+0x272>
                res = f_read(&file3, posFuncBuff, 512, &cnt);
    1dc2:	88 ee       	ldi	r24, 0xE8	; 232
    1dc4:	96 e2       	ldi	r25, 0x26	; 38
    1dc6:	be 01       	movw	r22, r28
    1dc8:	61 5f       	subi	r22, 0xF1	; 241
    1dca:	7f 4f       	sbci	r23, 0xFF	; 255
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	52 e0       	ldi	r21, 0x02	; 2
    1dd0:	9e 01       	movw	r18, r28
    1dd2:	2f 5f       	subi	r18, 0xFF	; 255
    1dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd6:	0e 94 2e 4d 	call	0x9a5c	; 0x9a5c <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    1dda:	88 23       	and	r24, r24
    1ddc:	a1 f5       	brne	.+104    	; 0x1e46 <set_pos_func+0x264>
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	9a 81       	ldd	r25, Y+2	; 0x02
    1de2:	80 50       	subi	r24, 0x00	; 0
    1de4:	92 40       	sbci	r25, 0x02	; 2
    1de6:	79 f5       	brne	.+94     	; 0x1e46 <set_pos_func+0x264>
                    // get the test header info
                    // get the test header info
                    ((uint8_t*)&funcSize_y)[0] = posFuncBuff[0];
    1de8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dea:	80 93 a9 20 	sts	0x20A9, r24
                    ((uint8_t*)&funcSize_y)[1] = posFuncBuff[1];
    1dee:	88 89       	ldd	r24, Y+16	; 0x10
    1df0:	80 93 aa 20 	sts	0x20AA, r24
                    ((uint8_t*)&funcSize_y)[2] = posFuncBuff[2];
    1df4:	89 89       	ldd	r24, Y+17	; 0x11
    1df6:	80 93 ab 20 	sts	0x20AB, r24
                    ((uint8_t*)&funcSize_y)[3] = posFuncBuff[3];
    1dfa:	8a 89       	ldd	r24, Y+18	; 0x12
    1dfc:	80 93 ac 20 	sts	0x20AC, r24
                    
                    //for (tmpCnt=0; tmpCnt<func_name_len; tmpCnt++)
                    //	{func_name_y[tmpCnt] = posFuncBuff[tmpCnt+5];}
                    //func_name_y[func_name_len] = '\0';
                    
                    func_ID_Y = func_id;
    1e00:	10 93 f6 24 	sts	0x24F6, r17
    1e04:	10 92 f7 24 	sts	0x24F7, r1
                    
                    Stop = 1;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	80 93 9c 20 	sts	0x209C, r24
                    display_flag = 0;  //clear the display flag
    1e0e:	10 92 e0 24 	sts	0x24E0, r1
                    if (quiet_mode_on == 0)
    1e12:	80 91 f3 24 	lds	r24, 0x24F3
    1e16:	88 23       	and	r24, r24
    1e18:	29 f5       	brne	.+74     	; 0x1e64 <set_pos_func+0x282>
                        xprintf(PSTR("Setting position function %u for Y\n"), func_id);
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <set_pos_func+0x23a>
    1e1c:	0f 92       	push	r0
    1e1e:	ed b7       	in	r30, 0x3d	; 61
    1e20:	fe b7       	in	r31, 0x3e	; 62
    1e22:	31 96       	adiw	r30, 0x01	; 1
    1e24:	88 ea       	ldi	r24, 0xA8	; 168
    1e26:	94 e0       	ldi	r25, 0x04	; 4
    1e28:	ad b7       	in	r26, 0x3d	; 61
    1e2a:	be b7       	in	r27, 0x3e	; 62
    1e2c:	11 96       	adiw	r26, 0x01	; 1
    1e2e:	8d 93       	st	X+, r24
    1e30:	9c 93       	st	X, r25
    1e32:	12 97       	sbiw	r26, 0x02	; 2
    1e34:	12 83       	std	Z+2, r17	; 0x02
    1e36:	13 82       	std	Z+3, r1	; 0x03
    1e38:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f c0       	rjmp	.+30     	; 0x1e64 <set_pos_func+0x282>
                    //xprintf(PSTR("fun Y: %s\n function Y size: %lu bytes\n"),
                    //       func_name_y, funcSize_y);
                    
                } else {
                    if (quiet_mode_on == 0)
    1e46:	80 91 f3 24 	lds	r24, 0x24F3
    1e4a:	88 23       	and	r24, r24
    1e4c:	59 f4       	brne	.+22     	; 0x1e64 <set_pos_func+0x282>
                        xputs(PSTR("Error f_read set_pos_func Y.\n"));
    1e4e:	8a e8       	ldi	r24, 0x8A	; 138
    1e50:	94 e0       	ldi	r25, 0x04	; 4
    1e52:	06 c0       	rjmp	.+12     	; 0x1e60 <set_pos_func+0x27e>
                }
            } else {
                if (quiet_mode_on == 0)
    1e54:	80 91 f3 24 	lds	r24, 0x24F3
    1e58:	88 23       	and	r24, r24
    1e5a:	21 f4       	brne	.+8      	; 0x1e64 <set_pos_func+0x282>
                    xputs(PSTR("Error f_open in set_pos_func Y.\n"));
    1e5c:	89 e6       	ldi	r24, 0x69	; 105
    1e5e:	94 e0       	ldi	r25, 0x04	; 4
    1e60:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
            }
            function_counter_y = 0;
    1e64:	10 92 e9 24 	sts	0x24E9, r1
    1e68:	10 92 ea 24 	sts	0x24EA, r1
            func_global_counter_y = funcSize_y;
    1e6c:	80 91 a9 20 	lds	r24, 0x20A9
    1e70:	90 91 aa 20 	lds	r25, 0x20AA
    1e74:	a0 91 ab 20 	lds	r26, 0x20AB
    1e78:	b0 91 ac 20 	lds	r27, 0x20AC
    1e7c:	80 93 ef 24 	sts	0x24EF, r24
    1e80:	90 93 f0 24 	sts	0x24F0, r25
    1e84:	a0 93 f1 24 	sts	0x24F1, r26
    1e88:	b0 93 f2 24 	sts	0x24F2, r27
            Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);//enable ISR
    1e8c:	40 91 a1 20 	lds	r20, 0x20A1
    1e90:	50 91 a2 20 	lds	r21, 0x20A2
    1e94:	60 e0       	ldi	r22, 0x00	; 0
    1e96:	70 e0       	ldi	r23, 0x00	; 0
    1e98:	88 ef       	ldi	r24, 0xF8	; 248
    1e9a:	99 e0       	ldi	r25, 0x09	; 9
    1e9c:	25 e0       	ldi	r18, 0x05	; 5
    1e9e:	01 e0       	ldi	r16, 0x01	; 1
    1ea0:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
    1ea4:	08 c0       	rjmp	.+16     	; 0x1eb6 <set_pos_func+0x2d4>
            break;
            
        default:
            if (quiet_mode_on == 0)
    1ea6:	80 91 f3 24 	lds	r24, 0x24F3
    1eaa:	88 23       	and	r24, r24
    1eac:	21 f4       	brne	.+8      	; 0x1eb6 <set_pos_func+0x2d4>
                xputs(PSTR("Error input for function channel.\n"));
    1eae:	86 e4       	ldi	r24, 0x46	; 70
    1eb0:	94 e0       	ldi	r25, 0x04	; 4
    1eb2:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
            break;
    }
}
    1eb6:	c2 5f       	subi	r28, 0xF2	; 242
    1eb8:	dd 4f       	sbci	r29, 0xFD	; 253
    1eba:	e5 e0       	ldi	r30, 0x05	; 5
    1ebc:	0c 94 d1 57 	jmp	0xafa2	; 0xafa2 <__epilogue_restores__+0x1a>

00001ec0 <set_default_func>:
            TWI_MasterWrite(twi, addr, data, len);
        }
    }
}

void set_default_func(uint8_t func_channel) {
    1ec0:	0f 93       	push	r16
    uint16_t funcCnt;
    
    switch (func_channel) {
    1ec2:	81 30       	cpi	r24, 0x01	; 1
    1ec4:	31 f0       	breq	.+12     	; 0x1ed2 <set_default_func+0x12>
    1ec6:	90 91 f3 24 	lds	r25, 0x24F3
    1eca:	82 30       	cpi	r24, 0x02	; 2
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <set_default_func+0x10>
    1ece:	61 c0       	rjmp	.+194    	; 0x1f92 <set_default_func+0xd2>
    1ed0:	33 c0       	rjmp	.+102    	; 0x1f38 <set_default_func+0x78>
        case 1:
            if (quiet_mode_on == 0)
    1ed2:	80 91 f3 24 	lds	r24, 0x24F3
    1ed6:	88 23       	and	r24, r24
    1ed8:	21 f4       	brne	.+8      	; 0x1ee2 <set_default_func+0x22>
                xputs(PSTR("Setting default function for X.\n"));
    1eda:	8f e6       	ldi	r24, 0x6F	; 111
    1edc:	95 e0       	ldi	r25, 0x05	; 5
    1ede:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
            
            Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
    1ee2:	40 91 9f 20 	lds	r20, 0x209F
    1ee6:	50 91 a0 20 	lds	r21, 0x20A0
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	70 e0       	ldi	r23, 0x00	; 0
    1eee:	8d e3       	ldi	r24, 0x3D	; 61
    1ef0:	9b e0       	ldi	r25, 0x0B	; 11
    1ef2:	24 e0       	ldi	r18, 0x04	; 4
    1ef4:	00 e0       	ldi	r16, 0x00	; 0
    1ef6:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
            func_ID_X = 0;
    1efa:	10 92 f4 24 	sts	0x24F4, r1
    1efe:	10 92 f5 24 	sts	0x24F5, r1
            funcSize_x = FUNCTION_LENGTH;
    1f02:	84 e6       	ldi	r24, 0x64	; 100
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a0 e0       	ldi	r26, 0x00	; 0
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	80 93 a5 20 	sts	0x20A5, r24
    1f0e:	90 93 a6 20 	sts	0x20A6, r25
    1f12:	a0 93 a7 20 	sts	0x20A7, r26
    1f16:	b0 93 a8 20 	sts	0x20A8, r27
    1f1a:	e7 e0       	ldi	r30, 0x07	; 7
    1f1c:	f8 e2       	ldi	r31, 0x28	; 40
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
            { function_X[funcCnt] = 10; }
    1f1e:	8a e0       	ldi	r24, 0x0A	; 10
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	81 93       	st	Z+, r24
    1f24:	91 93       	st	Z+, r25
                xputs(PSTR("Setting default function for X.\n"));
            
            Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            func_ID_X = 0;
            funcSize_x = FUNCTION_LENGTH;
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
    1f26:	28 e2       	ldi	r18, 0x28	; 40
    1f28:	ef 3c       	cpi	r30, 0xCF	; 207
    1f2a:	f2 07       	cpc	r31, r18
    1f2c:	d1 f7       	brne	.-12     	; 0x1f22 <set_default_func+0x62>
            { function_X[funcCnt] = 10; }
            function_counter_x = 0;
    1f2e:	10 92 e7 24 	sts	0x24E7, r1
    1f32:	10 92 e8 24 	sts	0x24E8, r1
    1f36:	33 c0       	rjmp	.+102    	; 0x1f9e <set_default_func+0xde>
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);//don't need to enable ISR
            break;
        case 2:
            if (quiet_mode_on == 0)
    1f38:	99 23       	and	r25, r25
    1f3a:	21 f4       	brne	.+8      	; 0x1f44 <set_default_func+0x84>
                xputs(PSTR("Setting default function for Y.\n"));
    1f3c:	8e e4       	ldi	r24, 0x4E	; 78
    1f3e:	95 e0       	ldi	r25, 0x05	; 5
    1f40:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
            Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0);//disable ISR
    1f44:	40 91 a1 20 	lds	r20, 0x20A1
    1f48:	50 91 a2 20 	lds	r21, 0x20A2
    1f4c:	60 e0       	ldi	r22, 0x00	; 0
    1f4e:	70 e0       	ldi	r23, 0x00	; 0
    1f50:	88 ef       	ldi	r24, 0xF8	; 248
    1f52:	99 e0       	ldi	r25, 0x09	; 9
    1f54:	25 e0       	ldi	r18, 0x05	; 5
    1f56:	00 e0       	ldi	r16, 0x00	; 0
    1f58:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
            func_ID_Y = 0;
    1f5c:	10 92 f6 24 	sts	0x24F6, r1
    1f60:	10 92 f7 24 	sts	0x24F7, r1
            funcSize_y = FUNCTION_LENGTH;
    1f64:	84 e6       	ldi	r24, 0x64	; 100
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	a0 e0       	ldi	r26, 0x00	; 0
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	80 93 a9 20 	sts	0x20A9, r24
    1f70:	90 93 aa 20 	sts	0x20AA, r25
    1f74:	a0 93 ab 20 	sts	0x20AB, r26
    1f78:	b0 93 ac 20 	sts	0x20AC, r27
    1f7c:	eb ea       	ldi	r30, 0xAB	; 171
    1f7e:	f5 e2       	ldi	r31, 0x25	; 37
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
            { function_Y[funcCnt] = 10; }
    1f80:	8a e0       	ldi	r24, 0x0A	; 10
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	81 93       	st	Z+, r24
    1f86:	91 93       	st	Z+, r25
            if (quiet_mode_on == 0)
                xputs(PSTR("Setting default function for Y.\n"));
            Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0);//disable ISR
            func_ID_Y = 0;
            funcSize_y = FUNCTION_LENGTH;
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
    1f88:	26 e2       	ldi	r18, 0x26	; 38
    1f8a:	e3 37       	cpi	r30, 0x73	; 115
    1f8c:	f2 07       	cpc	r31, r18
    1f8e:	d1 f7       	brne	.-12     	; 0x1f84 <set_default_func+0xc4>
    1f90:	06 c0       	rjmp	.+12     	; 0x1f9e <set_default_func+0xde>
            { function_Y[funcCnt] = 10; }
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);//don't need to enable ISR
            break;
        default:
            if (quiet_mode_on == 0)
    1f92:	99 23       	and	r25, r25
    1f94:	21 f4       	brne	.+8      	; 0x1f9e <set_default_func+0xde>
                xputs(PSTR("Wrong function channel number.\n"));
    1f96:	8e e2       	ldi	r24, 0x2E	; 46
    1f98:	95 e0       	ldi	r25, 0x05	; 5
    1f9a:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    }
    
}
    1f9e:	0f 91       	pop	r16
    1fa0:	08 95       	ret

00001fa2 <i2cMasterSend>:
    bench_time = timer_coarse_toc();
    frame_rate = ((uint32_t)num_frames*1000)/bench_time;
    xprintf(PSTR(" bench_time = %lu ms, frame_rate = %u\n"), bench_time, frame_rate);
}

void i2cMasterSend(uint8_t panel, uint8_t len, uint8_t *data) {
    1fa2:	1f 93       	push	r17
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29
    1fa8:	16 2f       	mov	r17, r22
    1faa:	ea 01       	movw	r28, r20
    uint8_t ch;
    uint8_t addr;
    TWI_Master_t *twi;
    
    if (panel == 0) {
    1fac:	88 23       	and	r24, r24
    1fae:	49 f5       	brne	.+82     	; 0x2002 <i2cMasterSend+0x60>
        while (twi1.status != TWIM_STATUS_READY);
    1fb0:	80 91 82 26 	lds	r24, 0x2682
    1fb4:	88 23       	and	r24, r24
    1fb6:	e1 f7       	brne	.-8      	; 0x1fb0 <i2cMasterSend+0xe>
        TWI_MasterWrite(&twi1, 0, data, len);
    1fb8:	85 e7       	ldi	r24, 0x75	; 117
    1fba:	96 e2       	ldi	r25, 0x26	; 38
    1fbc:	60 e0       	ldi	r22, 0x00	; 0
    1fbe:	ae 01       	movw	r20, r28
    1fc0:	21 2f       	mov	r18, r17
    1fc2:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <TWI_MasterWrite>
        while (twi2.status != TWIM_STATUS_READY);
    1fc6:	80 91 7f 29 	lds	r24, 0x297F
    1fca:	88 23       	and	r24, r24
    1fcc:	e1 f7       	brne	.-8      	; 0x1fc6 <i2cMasterSend+0x24>
        TWI_MasterWrite(&twi2, 0, data, len);
    1fce:	82 e7       	ldi	r24, 0x72	; 114
    1fd0:	99 e2       	ldi	r25, 0x29	; 41
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	ae 01       	movw	r20, r28
    1fd6:	21 2f       	mov	r18, r17
    1fd8:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <TWI_MasterWrite>
        while (twi3.status != TWIM_STATUS_READY);
    1fdc:	80 91 15 27 	lds	r24, 0x2715
    1fe0:	88 23       	and	r24, r24
    1fe2:	e1 f7       	brne	.-8      	; 0x1fdc <i2cMasterSend+0x3a>
        TWI_MasterWrite(&twi3, 0, data, len);
    1fe4:	88 e0       	ldi	r24, 0x08	; 8
    1fe6:	97 e2       	ldi	r25, 0x27	; 39
    1fe8:	60 e0       	ldi	r22, 0x00	; 0
    1fea:	ae 01       	movw	r20, r28
    1fec:	21 2f       	mov	r18, r17
    1fee:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <TWI_MasterWrite>
        while (twi4.status != TWIM_STATUS_READY);
    1ff2:	80 91 a4 25 	lds	r24, 0x25A4
    1ff6:	88 23       	and	r24, r24
    1ff8:	e1 f7       	brne	.-8      	; 0x1ff2 <i2cMasterSend+0x50>
        TWI_MasterWrite(&twi4, 0, data, len);
    1ffa:	87 e9       	ldi	r24, 0x97	; 151
    1ffc:	95 e2       	ldi	r25, 0x25	; 37
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	22 c0       	rjmp	.+68     	; 0x2046 <i2cMasterSend+0xa4>
    }
    else {
        // look up the actual panel address and channel
        ch = chMap[panel];
    2002:	e8 2f       	mov	r30, r24
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	df 01       	movw	r26, r30
    2008:	a8 5e       	subi	r26, 0xE8	; 232
    200a:	b8 4d       	sbci	r27, 0xD8	; 216
    200c:	ac 91       	ld	r26, X
        addr = adrMap[panel];
    200e:	e1 53       	subi	r30, 0x31	; 49
    2010:	f7 4d       	sbci	r31, 0xD7	; 215
    2012:	60 81       	ld	r22, Z
        if (ch != 0){
    2014:	aa 23       	and	r26, r26
    2016:	d9 f0       	breq	.+54     	; 0x204e <i2cMasterSend+0xac>
            
            switch (ch) {
    2018:	a3 30       	cpi	r26, 0x03	; 3
    201a:	51 f0       	breq	.+20     	; 0x2030 <i2cMasterSend+0x8e>
    201c:	a4 30       	cpi	r26, 0x04	; 4
    201e:	59 f0       	breq	.+22     	; 0x2036 <i2cMasterSend+0x94>
    2020:	a2 30       	cpi	r26, 0x02	; 2
    2022:	19 f4       	brne	.+6      	; 0x202a <i2cMasterSend+0x88>
    2024:	a2 e7       	ldi	r26, 0x72	; 114
    2026:	b9 e2       	ldi	r27, 0x29	; 41
    2028:	08 c0       	rjmp	.+16     	; 0x203a <i2cMasterSend+0x98>
    202a:	a5 e7       	ldi	r26, 0x75	; 117
    202c:	b6 e2       	ldi	r27, 0x26	; 38
    202e:	05 c0       	rjmp	.+10     	; 0x203a <i2cMasterSend+0x98>
    2030:	a8 e0       	ldi	r26, 0x08	; 8
    2032:	b7 e2       	ldi	r27, 0x27	; 39
    2034:	02 c0       	rjmp	.+4      	; 0x203a <i2cMasterSend+0x98>
                case 2:
                    twi = &twi2;
                    break;
                case 3:
                    twi = &twi3;
                    break;
    2036:	a7 e9       	ldi	r26, 0x97	; 151
    2038:	b5 e2       	ldi	r27, 0x25	; 37
                default: // send to twi1
                    twi = &twi1;
                    break;
            }
            
            while (twi->status != TWIM_STATUS_READY);
    203a:	1d 96       	adiw	r26, 0x0d	; 13
    203c:	8c 91       	ld	r24, X
    203e:	1d 97       	sbiw	r26, 0x0d	; 13
    2040:	88 23       	and	r24, r24
    2042:	d9 f7       	brne	.-10     	; 0x203a <i2cMasterSend+0x98>
            TWI_MasterWrite(twi, addr, data, len);
    2044:	cd 01       	movw	r24, r26
    2046:	ae 01       	movw	r20, r28
    2048:	21 2f       	mov	r18, r17
    204a:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <TWI_MasterWrite>
        }
    }
}
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	1f 91       	pop	r17
    2054:	08 95       	ret

00002056 <set_hwConfig>:
        if (quiet_mode_on == 0)
            xputs(PSTR("Error opening pattern file\n"));
    }
}

void set_hwConfig(uint8_t config_num) {
    2056:	a2 e8       	ldi	r26, 0x82	; 130
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e1 e3       	ldi	r30, 0x31	; 49
    205c:	f0 e1       	ldi	r31, 0x10	; 16
    205e:	0c 94 b2 57 	jmp	0xaf64	; 0xaf64 <__prologue_saves__+0x14>
    2062:	28 2f       	mov	r18, r24
	static uint8_t str[12];
    uint8_t res, b1;
    uint8_t  tempBuff[128];
	uint16_t cnt;
		
    if (config_num < 10)
    2064:	8a 30       	cpi	r24, 0x0A	; 10
    2066:	80 f4       	brcc	.+32     	; 0x2088 <set_hwConfig+0x32>
        sprintf(str, "cfg000%d.cfg\0", config_num);
    2068:	00 d0       	rcall	.+0      	; 0x206a <set_hwConfig+0x14>
    206a:	00 d0       	rcall	.+0      	; 0x206c <set_hwConfig+0x16>
    206c:	ed b7       	in	r30, 0x3d	; 61
    206e:	fe b7       	in	r31, 0x3e	; 62
    2070:	31 96       	adiw	r30, 0x01	; 1
    2072:	88 ef       	ldi	r24, 0xF8	; 248
    2074:	94 e2       	ldi	r25, 0x24	; 36
    2076:	ad b7       	in	r26, 0x3d	; 61
    2078:	be b7       	in	r27, 0x3e	; 62
    207a:	11 96       	adiw	r26, 0x01	; 1
    207c:	8d 93       	st	X+, r24
    207e:	9c 93       	st	X, r25
    2080:	12 97       	sbiw	r26, 0x02	; 2
    2082:	8e e4       	ldi	r24, 0x4E	; 78
    2084:	90 e2       	ldi	r25, 0x20	; 32
    2086:	1f c0       	rjmp	.+62     	; 0x20c6 <set_hwConfig+0x70>
    2088:	88 ef       	ldi	r24, 0xF8	; 248
    208a:	94 e2       	ldi	r25, 0x24	; 36
    else if (config_num < 100)
    208c:	24 36       	cpi	r18, 0x64	; 100
    208e:	70 f4       	brcc	.+28     	; 0x20ac <set_hwConfig+0x56>
        sprintf(str, "cfg00%d.cfg\0", config_num);
    2090:	00 d0       	rcall	.+0      	; 0x2092 <set_hwConfig+0x3c>
    2092:	00 d0       	rcall	.+0      	; 0x2094 <set_hwConfig+0x3e>
    2094:	ed b7       	in	r30, 0x3d	; 61
    2096:	fe b7       	in	r31, 0x3e	; 62
    2098:	31 96       	adiw	r30, 0x01	; 1
    209a:	ad b7       	in	r26, 0x3d	; 61
    209c:	be b7       	in	r27, 0x3e	; 62
    209e:	11 96       	adiw	r26, 0x01	; 1
    20a0:	8d 93       	st	X+, r24
    20a2:	9c 93       	st	X, r25
    20a4:	12 97       	sbiw	r26, 0x02	; 2
    20a6:	8c e5       	ldi	r24, 0x5C	; 92
    20a8:	90 e2       	ldi	r25, 0x20	; 32
    20aa:	0d c0       	rjmp	.+26     	; 0x20c6 <set_hwConfig+0x70>
    else if (config_num < 1000)
        sprintf(str, "cfg0%d.cfg\0", config_num);
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <set_hwConfig+0x58>
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <set_hwConfig+0x5a>
    20b0:	ed b7       	in	r30, 0x3d	; 61
    20b2:	fe b7       	in	r31, 0x3e	; 62
    20b4:	31 96       	adiw	r30, 0x01	; 1
    20b6:	ad b7       	in	r26, 0x3d	; 61
    20b8:	be b7       	in	r27, 0x3e	; 62
    20ba:	11 96       	adiw	r26, 0x01	; 1
    20bc:	8d 93       	st	X+, r24
    20be:	9c 93       	st	X, r25
    20c0:	12 97       	sbiw	r26, 0x02	; 2
    20c2:	89 e6       	ldi	r24, 0x69	; 105
    20c4:	90 e2       	ldi	r25, 0x20	; 32
    20c6:	82 83       	std	Z+2, r24	; 0x02
    20c8:	93 83       	std	Z+3, r25	; 0x03
    20ca:	24 83       	std	Z+4, r18	; 0x04
    20cc:	15 82       	std	Z+5, r1	; 0x05
    20ce:	0e 94 08 5a 	call	0xb410	; 0xb410 <sprintf>
    20d2:	ed b7       	in	r30, 0x3d	; 61
    20d4:	fe b7       	in	r31, 0x3e	; 62
    20d6:	36 96       	adiw	r30, 0x06	; 6
    20d8:	ed bf       	out	0x3d, r30	; 61
    20da:	fe bf       	out	0x3e, r31	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("config_num is too big.\n"));
			
    res = f_open(&file4, str, FA_OPEN_EXISTING | FA_READ);
    20dc:	85 ee       	ldi	r24, 0xE5	; 229
    20de:	97 e2       	ldi	r25, 0x27	; 39
    20e0:	68 ef       	ldi	r22, 0xF8	; 248
    20e2:	74 e2       	ldi	r23, 0x24	; 36
    20e4:	41 e0       	ldi	r20, 0x01	; 1
    20e6:	0e 94 17 4c 	call	0x982e	; 0x982e <f_open>
    if (res == FR_OK) {
    20ea:	88 23       	and	r24, r24
    20ec:	c9 f5       	brne	.+114    	; 0x2160 <set_hwConfig+0x10a>
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&file4, tempBuff, 128, &cnt);
    20ee:	83 e0       	ldi	r24, 0x03	; 3
    20f0:	c8 2e       	mov	r12, r24
    20f2:	d1 2c       	mov	r13, r1
    20f4:	cc 0e       	add	r12, r28
    20f6:	dd 1e       	adc	r13, r29
    20f8:	85 ee       	ldi	r24, 0xE5	; 229
    20fa:	97 e2       	ldi	r25, 0x27	; 39
    20fc:	b6 01       	movw	r22, r12
    20fe:	40 e8       	ldi	r20, 0x80	; 128
    2100:	50 e0       	ldi	r21, 0x00	; 0
    2102:	9e 01       	movw	r18, r28
    2104:	2f 5f       	subi	r18, 0xFF	; 255
    2106:	3f 4f       	sbci	r19, 0xFF	; 255
    2108:	0e 94 2e 4d 	call	0x9a5c	; 0x9a5c <f_read>
        if ((res == FR_OK) && (cnt == 128)) {
    210c:	88 23       	and	r24, r24
    210e:	09 f5       	brne	.+66     	; 0x2152 <set_hwConfig+0xfc>
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	9a 81       	ldd	r25, Y+2	; 0x02
    2114:	80 38       	cpi	r24, 0x80	; 128
    2116:	91 05       	cpc	r25, r1
    2118:	e1 f4       	brne	.+56     	; 0x2152 <set_hwConfig+0xfc>
    211a:	19 e1       	ldi	r17, 0x19	; 25
    211c:	e1 2e       	mov	r14, r17
    211e:	17 e2       	ldi	r17, 0x27	; 39
    2120:	f1 2e       	mov	r15, r17
    2122:	00 e0       	ldi	r16, 0x00	; 0
    2124:	10 e0       	ldi	r17, 0x00	; 0
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
    2126:	f6 01       	movw	r30, r12
    2128:	e0 0f       	add	r30, r16
    212a:	f1 1f       	adc	r31, r17
    212c:	60 81       	ld	r22, Z
    212e:	d7 01       	movw	r26, r14
    2130:	6d 93       	st	X+, r22
    2132:	7d 01       	movw	r14, r26
        if (quiet_mode_on == 0)
            xputs(PSTR("Error opening pattern file\n"));
    }
}

void set_hwConfig(uint8_t config_num) {
    2134:	0f 5f       	subi	r16, 0xFF	; 255
    2136:	1f 4f       	sbci	r17, 0xFF	; 255
        res = f_read(&file4, tempBuff, 128, &cnt);
        if ((res == FR_OK) && (cnt == 128)) {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
				eeprom_write_byte(arena_config + b1, tempBuff[b1-1]);
    2138:	c8 01       	movw	r24, r16
    213a:	8f 5f       	subi	r24, 0xFF	; 255
    213c:	9f 4f       	sbci	r25, 0xFF	; 255
    213e:	0e 94 43 5c 	call	0xb886	; 0xb886 <__eewr_byte_x128a1>
    if (res == FR_OK) {
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&file4, tempBuff, 128, &cnt);
        if ((res == FR_OK) && (cnt == 128)) {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
    2142:	00 38       	cpi	r16, 0x80	; 128
    2144:	11 05       	cpc	r17, r1
    2146:	79 f7       	brne	.-34     	; 0x2126 <set_hwConfig+0xd0>
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
				eeprom_write_byte(arena_config + b1, tempBuff[b1-1]);
            }
		    eeprom_write_byte(arena_config, 0x00); //Mark arena configuration file in EEPROM
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	60 e0       	ldi	r22, 0x00	; 0
    214e:	0e 94 43 5c 	call	0xb886	; 0xb886 <__eewr_byte_x128a1>
        }
        f_close(&file4);
    2152:	85 ee       	ldi	r24, 0xE5	; 229
    2154:	97 e2       	ldi	r25, 0x27	; 39
    2156:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <f_close>
        xputs(PSTR("Successfully load the hardware config file to EEPROM\n"));
    215a:	8d ee       	ldi	r24, 0xED	; 237
    215c:	95 e0       	ldi	r25, 0x05	; 5
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <set_hwConfig+0x10e>
    }
    else{
        xputs(PSTR("Cannot find the hardware config file on the SD card.\n"));
    2160:	87 eb       	ldi	r24, 0xB7	; 183
    2162:	95 e0       	ldi	r25, 0x05	; 5
    2164:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    }
}
    2168:	ce 57       	subi	r28, 0x7E	; 126
    216a:	df 4f       	sbci	r29, 0xFF	; 255
    216c:	e8 e0       	ldi	r30, 0x08	; 8
    216e:	0c 94 ce 57 	jmp	0xaf9c	; 0xaf9c <__epilogue_restores__+0x14>

00002172 <toggle_trigger>:
}


void toggle_trigger(void) {
    
    digitalToggle(3); //toggle digital 3 to trigger camera
    2172:	83 e0       	ldi	r24, 0x03	; 3
    2174:	0e 94 19 21 	call	0x4232	; 0x4232 <digitalToggle>
}
    2178:	08 95       	ret

0000217a <Update_display>:
  }  
	
    digitalWrite(1, LOW); // set line low at end of frame write
}

void Update_display(void) {
    217a:	ef 92       	push	r14
    217c:	ff 92       	push	r15
    217e:	0f 93       	push	r16
    2180:	1f 93       	push	r17
    2182:	cf 93       	push	r28
    2184:	df 93       	push	r29
    int16_t X_ADC1, X_ADC2, Y_ADC1, Y_ADC2;
    int16_t temp_ADC_val;
    
    //there are five modes 0 - OL, 1 - CL, 2 - CL w Bias, 3 - POS mode with ch5, 4 - POS mode from pos func 5 - function DBG mode
    
    switch(x_mode) {
    2186:	80 91 99 27 	lds	r24, 0x2799
    218a:	82 30       	cpi	r24, 0x02	; 2
    218c:	09 f4       	brne	.+2      	; 0x2190 <Update_display+0x16>
    218e:	a4 c0       	rjmp	.+328    	; 0x22d8 <Update_display+0x15e>
    2190:	83 30       	cpi	r24, 0x03	; 3
    2192:	30 f4       	brcc	.+12     	; 0x21a0 <Update_display+0x26>
    2194:	88 23       	and	r24, r24
    2196:	59 f0       	breq	.+22     	; 0x21ae <Update_display+0x34>
    2198:	81 30       	cpi	r24, 0x01	; 1
    219a:	09 f0       	breq	.+2      	; 0x219e <Update_display+0x24>
    219c:	9b c1       	rjmp	.+822    	; 0x24d4 <Update_display+0x35a>
    219e:	32 c0       	rjmp	.+100    	; 0x2204 <Update_display+0x8a>
    21a0:	83 30       	cpi	r24, 0x03	; 3
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <Update_display+0x2c>
    21a4:	ff c0       	rjmp	.+510    	; 0x23a4 <Update_display+0x22a>
    21a6:	84 30       	cpi	r24, 0x04	; 4
    21a8:	09 f0       	breq	.+2      	; 0x21ac <Update_display+0x32>
    21aa:	94 c1       	rjmp	.+808    	; 0x24d4 <Update_display+0x35a>
    21ac:	49 c1       	rjmp	.+658    	; 0x2440 <Update_display+0x2c6>
        case 0:   // open loop - use function generator to set x rate
            X_val = 2*function_X[function_counter_x];
    21ae:	e0 91 e7 24 	lds	r30, 0x24E7
    21b2:	f0 91 e8 24 	lds	r31, 0x24E8
    21b6:	ee 0f       	add	r30, r30
    21b8:	ff 1f       	adc	r31, r31
    21ba:	e9 5f       	subi	r30, 0xF9	; 249
    21bc:	f7 4d       	sbci	r31, 0xD7	; 215
    21be:	20 81       	ld	r18, Z
    21c0:	31 81       	ldd	r19, Z+1	; 0x01
    21c2:	22 0f       	add	r18, r18
    21c4:	33 1f       	adc	r19, r19
    21c6:	20 93 84 26 	sts	0x2684, r18
    21ca:	30 93 85 26 	sts	0x2685, r19
            X_rate = ((X_val*gain_x)/10 + 5*bias_x)/2;
    21ce:	80 91 e4 27 	lds	r24, 0x27E4
    21d2:	99 27       	eor	r25, r25
    21d4:	87 fd       	sbrc	r24, 7
    21d6:	90 95       	com	r25
    21d8:	ac 01       	movw	r20, r24
    21da:	24 9f       	mul	r18, r20
    21dc:	c0 01       	movw	r24, r0
    21de:	25 9f       	mul	r18, r21
    21e0:	90 0d       	add	r25, r0
    21e2:	34 9f       	mul	r19, r20
    21e4:	90 0d       	add	r25, r0
    21e6:	11 24       	eor	r1, r1
    21e8:	6a e0       	ldi	r22, 0x0A	; 10
    21ea:	70 e0       	ldi	r23, 0x00	; 0
    21ec:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    21f0:	cb 01       	movw	r24, r22
    21f2:	20 91 96 25 	lds	r18, 0x2596
    21f6:	45 e0       	ldi	r20, 0x05	; 5
    21f8:	24 02       	muls	r18, r20
    21fa:	90 01       	movw	r18, r0
    21fc:	11 24       	eor	r1, r1
    21fe:	82 0f       	add	r24, r18
    2200:	93 1f       	adc	r25, r19
    2202:	ca c0       	rjmp	.+404    	; 0x2398 <Update_display+0x21e>
            break;
        case 1: //closed loop, use CH0 - CH1 to set x rate
            X_ADC1 = analogRead(0)/4;  X_ADC2 = analogRead(1)/4; // 1 volt = 102 frames/sec
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	0e 94 2a 21 	call	0x4254	; 0x4254 <analogRead>
    220a:	64 e0       	ldi	r22, 0x04	; 4
    220c:	70 e0       	ldi	r23, 0x00	; 0
    220e:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    2212:	16 2f       	mov	r17, r22
    2214:	07 2f       	mov	r16, r23
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	0e 94 2a 21 	call	0x4254	; 0x4254 <analogRead>
    221c:	64 e0       	ldi	r22, 0x04	; 4
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
            if (X_ADC1 < 0)
                X_ADC1 = 0;
            if (X_ADC2 < 0)
                X_ADC2 = 0;
            temp_ADC_val = X_val; //the previous value
            X_val = ( 6*temp_ADC_val + 4*(X_ADC1 - X_ADC2) )/10;   //this is a 60% old value, 40% new value smoother
    2224:	21 2f       	mov	r18, r17
    2226:	30 2f       	mov	r19, r16
    2228:	c9 01       	movw	r24, r18
    222a:	ac 01       	movw	r20, r24
    222c:	97 ff       	sbrs	r25, 7
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <Update_display+0xba>
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	50 e0       	ldi	r21, 0x00	; 0
    2234:	9b 01       	movw	r18, r22
    2236:	77 ff       	sbrs	r23, 7
    2238:	02 c0       	rjmp	.+4      	; 0x223e <Update_display+0xc4>
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	42 1b       	sub	r20, r18
    2240:	53 0b       	sbc	r21, r19
    2242:	44 0f       	add	r20, r20
    2244:	55 1f       	adc	r21, r21
    2246:	44 0f       	add	r20, r20
    2248:	55 1f       	adc	r21, r21
    224a:	20 91 84 26 	lds	r18, 0x2684
    224e:	30 91 85 26 	lds	r19, 0x2685
    2252:	c9 01       	movw	r24, r18
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	82 0f       	add	r24, r18
    225a:	93 1f       	adc	r25, r19
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	84 0f       	add	r24, r20
    2262:	95 1f       	adc	r25, r21
    2264:	6a e0       	ldi	r22, 0x0A	; 10
    2266:	70 e0       	ldi	r23, 0x00	; 0
    2268:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    226c:	9b 01       	movw	r18, r22
    226e:	60 93 84 26 	sts	0x2684, r22
    2272:	70 93 85 26 	sts	0x2685, r23
            X_rate = (int16_t)((int32_t)(X_val*gain_x)/10 + 5*bias_x)/2;  //X_val can go as high as 4095, gain_x 100fiu and bias_x 250
    2276:	80 91 e4 27 	lds	r24, 0x27E4
    227a:	99 27       	eor	r25, r25
    227c:	87 fd       	sbrc	r24, 7
    227e:	90 95       	com	r25
    2280:	bc 01       	movw	r22, r24
    2282:	26 9f       	mul	r18, r22
    2284:	c0 01       	movw	r24, r0
    2286:	27 9f       	mul	r18, r23
    2288:	90 0d       	add	r25, r0
    228a:	36 9f       	mul	r19, r22
    228c:	90 0d       	add	r25, r0
    228e:	11 24       	eor	r1, r1
    2290:	6a e0       	ldi	r22, 0x0A	; 10
    2292:	70 e0       	ldi	r23, 0x00	; 0
    2294:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    2298:	cb 01       	movw	r24, r22
    229a:	20 91 96 25 	lds	r18, 0x2596
    229e:	45 e0       	ldi	r20, 0x05	; 5
    22a0:	24 02       	muls	r18, r20
    22a2:	90 01       	movw	r18, r0
    22a4:	11 24       	eor	r1, r1
    22a6:	82 0f       	add	r24, r18
    22a8:	93 1f       	adc	r25, r19
    22aa:	62 e0       	ldi	r22, 0x02	; 2
    22ac:	70 e0       	ldi	r23, 0x00	; 0
    22ae:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    22b2:	9b 01       	movw	r18, r22
    22b4:	7b 01       	movw	r14, r22
            
            //set a frame rate limit 256fps
            if (X_rate >256)
    22b6:	71 e0       	ldi	r23, 0x01	; 1
    22b8:	21 30       	cpi	r18, 0x01	; 1
    22ba:	37 07       	cpc	r19, r23
    22bc:	24 f0       	brlt	.+8      	; 0x22c6 <Update_display+0x14c>
    22be:	e1 2c       	mov	r14, r1
    22c0:	a1 e0       	ldi	r26, 0x01	; 1
    22c2:	fa 2e       	mov	r15, r26
    22c4:	09 c1       	rjmp	.+530    	; 0x24d8 <Update_display+0x35e>
                X_rate = 256;
            else if (X_rate < -256)
    22c6:	8f ef       	ldi	r24, 0xFF	; 255
    22c8:	20 30       	cpi	r18, 0x00	; 0
    22ca:	38 07       	cpc	r19, r24
    22cc:	0c f0       	brlt	.+2      	; 0x22d0 <Update_display+0x156>
    22ce:	04 c1       	rjmp	.+520    	; 0x24d8 <Update_display+0x35e>
    22d0:	e1 2c       	mov	r14, r1
    22d2:	ff ef       	ldi	r31, 0xFF	; 255
    22d4:	ff 2e       	mov	r15, r31
    22d6:	00 c1       	rjmp	.+512    	; 0x24d8 <Update_display+0x35e>
                X_rate = -256;
            
            break;
        case 2: //closed loop w bias - use CH0 - CH1, and function gen. to set x rate
            X_ADC1 = analogRead(0)/4;  X_ADC2 = analogRead(1)/4; // 1 volt = 102
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	0e 94 2a 21 	call	0x4254	; 0x4254 <analogRead>
    22de:	64 e0       	ldi	r22, 0x04	; 4
    22e0:	70 e0       	ldi	r23, 0x00	; 0
    22e2:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    22e6:	16 2f       	mov	r17, r22
    22e8:	07 2f       	mov	r16, r23
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	0e 94 2a 21 	call	0x4254	; 0x4254 <analogRead>
    22f0:	64 e0       	ldi	r22, 0x04	; 4
    22f2:	70 e0       	ldi	r23, 0x00	; 0
    22f4:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
            if (X_ADC1 < 0)
                X_ADC1 = 0;
            if (X_ADC2 < 0)
                X_ADC2 = 0;
            temp_ADC_val = X_val; //the previous value
            X_val = ( 6*temp_ADC_val + 4*(X_ADC1 - X_ADC2) )/10;   //this is a 60% old value, 40% new value smoother
    22f8:	21 2f       	mov	r18, r17
    22fa:	30 2f       	mov	r19, r16
    22fc:	c9 01       	movw	r24, r18
    22fe:	ac 01       	movw	r20, r24
    2300:	97 ff       	sbrs	r25, 7
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <Update_display+0x18e>
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	50 e0       	ldi	r21, 0x00	; 0
    2308:	9b 01       	movw	r18, r22
    230a:	77 ff       	sbrs	r23, 7
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <Update_display+0x198>
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	42 1b       	sub	r20, r18
    2314:	53 0b       	sbc	r21, r19
    2316:	44 0f       	add	r20, r20
    2318:	55 1f       	adc	r21, r21
    231a:	44 0f       	add	r20, r20
    231c:	55 1f       	adc	r21, r21
    231e:	20 91 84 26 	lds	r18, 0x2684
    2322:	30 91 85 26 	lds	r19, 0x2685
    2326:	c9 01       	movw	r24, r18
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	82 0f       	add	r24, r18
    232e:	93 1f       	adc	r25, r19
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	84 0f       	add	r24, r20
    2336:	95 1f       	adc	r25, r21
    2338:	6a e0       	ldi	r22, 0x0A	; 10
    233a:	70 e0       	ldi	r23, 0x00	; 0
    233c:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    2340:	60 93 84 26 	sts	0x2684, r22
    2344:	70 93 85 26 	sts	0x2685, r23
            //add in the bias to CL mode on ch X
            X_rate = (int16_t)((int32_t)(X_val*gain_x)/10 + 2*function_X[function_counter_x] + 5*bias_x)/2;
    2348:	e0 91 e7 24 	lds	r30, 0x24E7
    234c:	f0 91 e8 24 	lds	r31, 0x24E8
    2350:	ee 0f       	add	r30, r30
    2352:	ff 1f       	adc	r31, r31
    2354:	e9 5f       	subi	r30, 0xF9	; 249
    2356:	f7 4d       	sbci	r31, 0xD7	; 215
    2358:	20 81       	ld	r18, Z
    235a:	31 81       	ldd	r19, Z+1	; 0x01
    235c:	22 0f       	add	r18, r18
    235e:	33 1f       	adc	r19, r19
    2360:	80 91 96 25 	lds	r24, 0x2596
    2364:	45 e0       	ldi	r20, 0x05	; 5
    2366:	84 02       	muls	r24, r20
    2368:	c0 01       	movw	r24, r0
    236a:	11 24       	eor	r1, r1
    236c:	28 0f       	add	r18, r24
    236e:	39 1f       	adc	r19, r25
    2370:	80 91 e4 27 	lds	r24, 0x27E4
    2374:	99 27       	eor	r25, r25
    2376:	87 fd       	sbrc	r24, 7
    2378:	90 95       	com	r25
    237a:	ac 01       	movw	r20, r24
    237c:	64 9f       	mul	r22, r20
    237e:	c0 01       	movw	r24, r0
    2380:	65 9f       	mul	r22, r21
    2382:	90 0d       	add	r25, r0
    2384:	74 9f       	mul	r23, r20
    2386:	90 0d       	add	r25, r0
    2388:	11 24       	eor	r1, r1
    238a:	6a e0       	ldi	r22, 0x0A	; 10
    238c:	70 e0       	ldi	r23, 0x00	; 0
    238e:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    2392:	c9 01       	movw	r24, r18
    2394:	86 0f       	add	r24, r22
    2396:	97 1f       	adc	r25, r23
    2398:	62 e0       	ldi	r22, 0x02	; 2
    239a:	70 e0       	ldi	r23, 0x00	; 0
    239c:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    23a0:	7b 01       	movw	r14, r22
    23a2:	9a c0       	rjmp	.+308    	; 0x24d8 <Update_display+0x35e>
            break;
        case 3: // POS mode, use CH4 to set the frame position (pos ctrl, not vel ctrl)
            X_ADC1 = analogRead(4)/2;  //used to use CH0, changed this so no need to change connections
    23a4:	84 e0       	ldi	r24, 0x04	; 4
    23a6:	0e 94 2a 21 	call	0x4254	; 0x4254 <analogRead>
    23aa:	62 e0       	ldi	r22, 0x02	; 2
    23ac:	70 e0       	ldi	r23, 0x00	; 0
    23ae:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
            // set to 0 if negative to be compatibel with old code
            if (X_ADC1 < 0)
                X_ADC1 = 0;
            index_x = X_ADC1/gain_x + bias_x;
    23b2:	cb 01       	movw	r24, r22
    23b4:	77 ff       	sbrs	r23, 7
    23b6:	02 c0       	rjmp	.+4      	; 0x23bc <Update_display+0x242>
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	60 91 e4 27 	lds	r22, 0x27E4
    23c0:	77 27       	eor	r23, r23
    23c2:	67 fd       	sbrc	r22, 7
    23c4:	70 95       	com	r23
    23c6:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    23ca:	80 91 96 25 	lds	r24, 0x2596
    23ce:	99 27       	eor	r25, r25
    23d0:	87 fd       	sbrc	r24, 7
    23d2:	90 95       	com	r25
    23d4:	86 0f       	add	r24, r22
    23d6:	97 1f       	adc	r25, r23
    23d8:	80 93 9b 27 	sts	0x279B, r24
    23dc:	90 93 9c 27 	sts	0x279C, r25
            if (index_x >= x_num)  {index_x = x_num - 1;} //check if too big
    23e0:	80 91 9b 27 	lds	r24, 0x279B
    23e4:	90 91 9c 27 	lds	r25, 0x279C
    23e8:	40 91 05 28 	lds	r20, 0x2805
    23ec:	50 91 06 28 	lds	r21, 0x2806
    23f0:	84 17       	cp	r24, r20
    23f2:	95 07       	cpc	r25, r21
    23f4:	40 f0       	brcs	.+16     	; 0x2406 <Update_display+0x28c>
    23f6:	41 50       	subi	r20, 0x01	; 1
    23f8:	50 40       	sbci	r21, 0x00	; 0
    23fa:	40 93 9b 27 	sts	0x279B, r20
    23fe:	50 93 9c 27 	sts	0x279C, r21
    2402:	4f 5f       	subi	r20, 0xFF	; 255
    2404:	5f 4f       	sbci	r21, 0xFF	; 255
            if (index_x <= 0)  {index_x = 0;} //or too small
    2406:	80 91 9b 27 	lds	r24, 0x279B
    240a:	90 91 9c 27 	lds	r25, 0x279C
    240e:	89 2b       	or	r24, r25
    2410:	21 f4       	brne	.+8      	; 0x241a <Update_display+0x2a0>
    2412:	10 92 9b 27 	sts	0x279B, r1
    2416:	10 92 9c 27 	sts	0x279C, r1
            frame_num = index_y*x_num + index_x;
    241a:	80 91 50 29 	lds	r24, 0x2950
    241e:	90 91 51 29 	lds	r25, 0x2951
    2422:	20 91 9b 27 	lds	r18, 0x279B
    2426:	30 91 9c 27 	lds	r19, 0x279C
    242a:	bc 01       	movw	r22, r24
    242c:	64 9f       	mul	r22, r20
    242e:	c0 01       	movw	r24, r0
    2430:	65 9f       	mul	r22, r21
    2432:	90 0d       	add	r25, r0
    2434:	74 9f       	mul	r23, r20
    2436:	90 0d       	add	r25, r0
    2438:	11 24       	eor	r1, r1
    243a:	82 0f       	add	r24, r18
    243c:	93 1f       	adc	r25, r19
    243e:	46 c0       	rjmp	.+140    	; 0x24cc <Update_display+0x352>
            X_rate = 0;
            break;
        case 4:
            //only use temp_ADC_val as a temp variable, just not to create an additional one
            temp_ADC_val = (X_pos_index + function_X[function_counter_x]);
    2440:	e0 91 e7 24 	lds	r30, 0x24E7
    2444:	f0 91 e8 24 	lds	r31, 0x24E8
    2448:	ee 0f       	add	r30, r30
    244a:	ff 1f       	adc	r31, r31
    244c:	e9 5f       	subi	r30, 0xF9	; 249
    244e:	f7 4d       	sbci	r31, 0xD7	; 215
    2450:	01 90       	ld	r0, Z+
    2452:	f0 81       	ld	r31, Z
    2454:	e0 2d       	mov	r30, r0
    2456:	80 91 e6 26 	lds	r24, 0x26E6
    245a:	90 91 e7 26 	lds	r25, 0x26E7
    245e:	e8 0f       	add	r30, r24
    2460:	f9 1f       	adc	r31, r25
    2462:	20 91 05 28 	lds	r18, 0x2805
    2466:	30 91 06 28 	lds	r19, 0x2806
            if (temp_ADC_val >= 0) {index_x = temp_ADC_val%x_num; }
    246a:	f7 fd       	sbrc	r31, 7
    246c:	09 c0       	rjmp	.+18     	; 0x2480 <Update_display+0x306>
    246e:	cf 01       	movw	r24, r30
    2470:	b9 01       	movw	r22, r18
    2472:	0e 94 44 57 	call	0xae88	; 0xae88 <__udivmodhi4>
    2476:	80 93 9b 27 	sts	0x279B, r24
    247a:	90 93 9c 27 	sts	0x279C, r25
    247e:	10 c0       	rjmp	.+32     	; 0x24a0 <Update_display+0x326>
            if (temp_ADC_val < 0) {index_x = x_num - ((abs(temp_ADC_val))%x_num) -1;} //index_x should already smaller than x_num
    2480:	88 27       	eor	r24, r24
    2482:	99 27       	eor	r25, r25
    2484:	8e 1b       	sub	r24, r30
    2486:	9f 0b       	sbc	r25, r31
    2488:	b9 01       	movw	r22, r18
    248a:	0e 94 44 57 	call	0xae88	; 0xae88 <__udivmodhi4>
    248e:	21 50       	subi	r18, 0x01	; 1
    2490:	30 40       	sbci	r19, 0x00	; 0
    2492:	a9 01       	movw	r20, r18
    2494:	48 1b       	sub	r20, r24
    2496:	59 0b       	sbc	r21, r25
    2498:	40 93 9b 27 	sts	0x279B, r20
    249c:	50 93 9c 27 	sts	0x279C, r21
            frame_num = index_y*x_num + index_x;
    24a0:	20 91 50 29 	lds	r18, 0x2950
    24a4:	30 91 51 29 	lds	r19, 0x2951
    24a8:	40 91 9b 27 	lds	r20, 0x279B
    24ac:	50 91 9c 27 	lds	r21, 0x279C
    24b0:	80 91 05 28 	lds	r24, 0x2805
    24b4:	90 91 06 28 	lds	r25, 0x2806
    24b8:	bc 01       	movw	r22, r24
    24ba:	26 9f       	mul	r18, r22
    24bc:	c0 01       	movw	r24, r0
    24be:	27 9f       	mul	r18, r23
    24c0:	90 0d       	add	r25, r0
    24c2:	36 9f       	mul	r19, r22
    24c4:	90 0d       	add	r25, r0
    24c6:	11 24       	eor	r1, r1
    24c8:	84 0f       	add	r24, r20
    24ca:	95 1f       	adc	r25, r21
    24cc:	80 93 e5 24 	sts	0x24E5, r24
    24d0:	90 93 e6 24 	sts	0x24E6, r25
    24d4:	ee 24       	eor	r14, r14
    24d6:	ff 24       	eor	r15, r15
            break;
            //do something with errors here for default case
    }
    
    
    switch(y_mode) {
    24d8:	80 91 e3 27 	lds	r24, 0x27E3
    24dc:	82 30       	cpi	r24, 0x02	; 2
    24de:	09 f4       	brne	.+2      	; 0x24e2 <Update_display+0x368>
    24e0:	a2 c0       	rjmp	.+324    	; 0x2626 <Update_display+0x4ac>
    24e2:	83 30       	cpi	r24, 0x03	; 3
    24e4:	30 f4       	brcc	.+12     	; 0x24f2 <Update_display+0x378>
    24e6:	88 23       	and	r24, r24
    24e8:	59 f0       	breq	.+22     	; 0x2500 <Update_display+0x386>
    24ea:	81 30       	cpi	r24, 0x01	; 1
    24ec:	09 f0       	breq	.+2      	; 0x24f0 <Update_display+0x376>
    24ee:	85 c1       	rjmp	.+778    	; 0x27fa <Update_display+0x680>
    24f0:	32 c0       	rjmp	.+100    	; 0x2556 <Update_display+0x3dc>
    24f2:	83 30       	cpi	r24, 0x03	; 3
    24f4:	09 f4       	brne	.+2      	; 0x24f8 <Update_display+0x37e>
    24f6:	fd c0       	rjmp	.+506    	; 0x26f2 <Update_display+0x578>
    24f8:	84 30       	cpi	r24, 0x04	; 4
    24fa:	09 f0       	breq	.+2      	; 0x24fe <Update_display+0x384>
    24fc:	7e c1       	rjmp	.+764    	; 0x27fa <Update_display+0x680>
    24fe:	33 c1       	rjmp	.+614    	; 0x2766 <Update_display+0x5ec>
        case 0:   // open loop - use function generator to set x rate
            Y_val = 2*function_Y[function_counter_y];
    2500:	e0 91 e9 24 	lds	r30, 0x24E9
    2504:	f0 91 ea 24 	lds	r31, 0x24EA
    2508:	ee 0f       	add	r30, r30
    250a:	ff 1f       	adc	r31, r31
    250c:	e5 55       	subi	r30, 0x55	; 85
    250e:	fa 4d       	sbci	r31, 0xDA	; 218
    2510:	20 81       	ld	r18, Z
    2512:	31 81       	ldd	r19, Z+1	; 0x01
    2514:	22 0f       	add	r18, r18
    2516:	33 1f       	adc	r19, r19
    2518:	20 93 a8 25 	sts	0x25A8, r18
    251c:	30 93 a9 25 	sts	0x25A9, r19
            Y_rate = ((Y_val*gain_y)/10 + 5*bias_y)/2;
    2520:	80 91 9d 27 	lds	r24, 0x279D
    2524:	99 27       	eor	r25, r25
    2526:	87 fd       	sbrc	r24, 7
    2528:	90 95       	com	r25
    252a:	ac 01       	movw	r20, r24
    252c:	24 9f       	mul	r18, r20
    252e:	c0 01       	movw	r24, r0
    2530:	25 9f       	mul	r18, r21
    2532:	90 0d       	add	r25, r0
    2534:	34 9f       	mul	r19, r20
    2536:	90 0d       	add	r25, r0
    2538:	11 24       	eor	r1, r1
    253a:	6a e0       	ldi	r22, 0x0A	; 10
    253c:	70 e0       	ldi	r23, 0x00	; 0
    253e:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    2542:	cb 01       	movw	r24, r22
    2544:	20 91 b4 2b 	lds	r18, 0x2BB4
    2548:	45 e0       	ldi	r20, 0x05	; 5
    254a:	24 02       	muls	r18, r20
    254c:	90 01       	movw	r18, r0
    254e:	11 24       	eor	r1, r1
    2550:	82 0f       	add	r24, r18
    2552:	93 1f       	adc	r25, r19
    2554:	c8 c0       	rjmp	.+400    	; 0x26e6 <Update_display+0x56c>
            break;
        case 1: //closed loop, use CH2 - CH3 to set x rate
            Y_ADC1 = analogRead(2)/4;  Y_ADC2 = analogRead(3)/4; // 1 volt = 102fps
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	0e 94 2a 21 	call	0x4254	; 0x4254 <analogRead>
    255c:	64 e0       	ldi	r22, 0x04	; 4
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    2564:	16 2f       	mov	r17, r22
    2566:	07 2f       	mov	r16, r23
    2568:	83 e0       	ldi	r24, 0x03	; 3
    256a:	0e 94 2a 21 	call	0x4254	; 0x4254 <analogRead>
    256e:	64 e0       	ldi	r22, 0x04	; 4
    2570:	70 e0       	ldi	r23, 0x00	; 0
    2572:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
            if (Y_ADC1 < 0)
                Y_ADC1 = 0;
            if (Y_ADC2 < 0)
                Y_ADC2 = 0;
            temp_ADC_val = Y_val; //the previous value
            Y_val = ( 6*temp_ADC_val + 4*(Y_ADC1 - Y_ADC2) )/10;   //this is a 60% old value, 40% new value smoother
    2576:	21 2f       	mov	r18, r17
    2578:	30 2f       	mov	r19, r16
    257a:	c9 01       	movw	r24, r18
    257c:	ac 01       	movw	r20, r24
    257e:	97 ff       	sbrs	r25, 7
    2580:	02 c0       	rjmp	.+4      	; 0x2586 <Update_display+0x40c>
    2582:	40 e0       	ldi	r20, 0x00	; 0
    2584:	50 e0       	ldi	r21, 0x00	; 0
    2586:	9b 01       	movw	r18, r22
    2588:	77 ff       	sbrs	r23, 7
    258a:	02 c0       	rjmp	.+4      	; 0x2590 <Update_display+0x416>
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	42 1b       	sub	r20, r18
    2592:	53 0b       	sbc	r21, r19
    2594:	44 0f       	add	r20, r20
    2596:	55 1f       	adc	r21, r21
    2598:	44 0f       	add	r20, r20
    259a:	55 1f       	adc	r21, r21
    259c:	20 91 a8 25 	lds	r18, 0x25A8
    25a0:	30 91 a9 25 	lds	r19, 0x25A9
    25a4:	c9 01       	movw	r24, r18
    25a6:	88 0f       	add	r24, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	82 0f       	add	r24, r18
    25ac:	93 1f       	adc	r25, r19
    25ae:	88 0f       	add	r24, r24
    25b0:	99 1f       	adc	r25, r25
    25b2:	84 0f       	add	r24, r20
    25b4:	95 1f       	adc	r25, r21
    25b6:	6a e0       	ldi	r22, 0x0A	; 10
    25b8:	70 e0       	ldi	r23, 0x00	; 0
    25ba:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    25be:	9b 01       	movw	r18, r22
    25c0:	60 93 a8 25 	sts	0x25A8, r22
    25c4:	70 93 a9 25 	sts	0x25A9, r23
            Y_rate = (int16_t)((int32_t)(Y_val*gain_y)/10 + 5*bias_y)/2; //Y_val can go as high as 4095, gain_y 100, and bias_y 250.
    25c8:	80 91 9d 27 	lds	r24, 0x279D
    25cc:	99 27       	eor	r25, r25
    25ce:	87 fd       	sbrc	r24, 7
    25d0:	90 95       	com	r25
    25d2:	bc 01       	movw	r22, r24
    25d4:	26 9f       	mul	r18, r22
    25d6:	c0 01       	movw	r24, r0
    25d8:	27 9f       	mul	r18, r23
    25da:	90 0d       	add	r25, r0
    25dc:	36 9f       	mul	r19, r22
    25de:	90 0d       	add	r25, r0
    25e0:	11 24       	eor	r1, r1
    25e2:	6a e0       	ldi	r22, 0x0A	; 10
    25e4:	70 e0       	ldi	r23, 0x00	; 0
    25e6:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    25ea:	cb 01       	movw	r24, r22
    25ec:	20 91 b4 2b 	lds	r18, 0x2BB4
    25f0:	45 e0       	ldi	r20, 0x05	; 5
    25f2:	24 02       	muls	r18, r20
    25f4:	90 01       	movw	r18, r0
    25f6:	11 24       	eor	r1, r1
    25f8:	82 0f       	add	r24, r18
    25fa:	93 1f       	adc	r25, r19
    25fc:	62 e0       	ldi	r22, 0x02	; 2
    25fe:	70 e0       	ldi	r23, 0x00	; 0
    2600:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    2604:	9b 01       	movw	r18, r22
    2606:	eb 01       	movw	r28, r22
            
            //set a frame rate limit 256fps
            if (Y_rate > 256)
    2608:	71 e0       	ldi	r23, 0x01	; 1
    260a:	21 30       	cpi	r18, 0x01	; 1
    260c:	37 07       	cpc	r19, r23
    260e:	1c f0       	brlt	.+6      	; 0x2616 <Update_display+0x49c>
    2610:	c0 e0       	ldi	r28, 0x00	; 0
    2612:	d1 e0       	ldi	r29, 0x01	; 1
    2614:	f4 c0       	rjmp	.+488    	; 0x27fe <Update_display+0x684>
                Y_rate = 256;
            else if (Y_rate < -256)
    2616:	8f ef       	ldi	r24, 0xFF	; 255
    2618:	20 30       	cpi	r18, 0x00	; 0
    261a:	38 07       	cpc	r19, r24
    261c:	0c f0       	brlt	.+2      	; 0x2620 <Update_display+0x4a6>
    261e:	ef c0       	rjmp	.+478    	; 0x27fe <Update_display+0x684>
    2620:	c0 e0       	ldi	r28, 0x00	; 0
    2622:	df ef       	ldi	r29, 0xFF	; 255
    2624:	ec c0       	rjmp	.+472    	; 0x27fe <Update_display+0x684>
                Y_rate = -256;
            
            break;
        case 2: //closed loop w bias - use CH2 - CH3, and function gen. to set x rate
            Y_ADC1 = analogRead(2)/4;  Y_ADC2 = analogRead(3)/4; // 1 volt = 102
    2626:	82 e0       	ldi	r24, 0x02	; 2
    2628:	0e 94 2a 21 	call	0x4254	; 0x4254 <analogRead>
    262c:	64 e0       	ldi	r22, 0x04	; 4
    262e:	70 e0       	ldi	r23, 0x00	; 0
    2630:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    2634:	16 2f       	mov	r17, r22
    2636:	07 2f       	mov	r16, r23
    2638:	83 e0       	ldi	r24, 0x03	; 3
    263a:	0e 94 2a 21 	call	0x4254	; 0x4254 <analogRead>
    263e:	64 e0       	ldi	r22, 0x04	; 4
    2640:	70 e0       	ldi	r23, 0x00	; 0
    2642:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
            if (Y_ADC1 < 0)
                Y_ADC1 = 0;
            if (Y_ADC2 < 0)
                Y_ADC2 = 0;
            temp_ADC_val = Y_val; //the previous value
            Y_val = ( 6*temp_ADC_val + 4*(Y_ADC1 - Y_ADC2) )/10;   //this is a 60% old value, 40% new value smoother
    2646:	21 2f       	mov	r18, r17
    2648:	30 2f       	mov	r19, r16
    264a:	c9 01       	movw	r24, r18
    264c:	ac 01       	movw	r20, r24
    264e:	97 ff       	sbrs	r25, 7
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <Update_display+0x4dc>
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	50 e0       	ldi	r21, 0x00	; 0
    2656:	9b 01       	movw	r18, r22
    2658:	77 ff       	sbrs	r23, 7
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <Update_display+0x4e6>
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	42 1b       	sub	r20, r18
    2662:	53 0b       	sbc	r21, r19
    2664:	44 0f       	add	r20, r20
    2666:	55 1f       	adc	r21, r21
    2668:	44 0f       	add	r20, r20
    266a:	55 1f       	adc	r21, r21
    266c:	20 91 a8 25 	lds	r18, 0x25A8
    2670:	30 91 a9 25 	lds	r19, 0x25A9
    2674:	c9 01       	movw	r24, r18
    2676:	88 0f       	add	r24, r24
    2678:	99 1f       	adc	r25, r25
    267a:	82 0f       	add	r24, r18
    267c:	93 1f       	adc	r25, r19
    267e:	88 0f       	add	r24, r24
    2680:	99 1f       	adc	r25, r25
    2682:	84 0f       	add	r24, r20
    2684:	95 1f       	adc	r25, r21
    2686:	6a e0       	ldi	r22, 0x0A	; 10
    2688:	70 e0       	ldi	r23, 0x00	; 0
    268a:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    268e:	60 93 a8 25 	sts	0x25A8, r22
    2692:	70 93 a9 25 	sts	0x25A9, r23
            //add in the bias to CL mode on ch Y
            Y_rate = (int16_t)((int32_t)(Y_val*gain_y)/10 + 2*function_Y[function_counter_y] + 5*bias_y)/2; //Y_val can go as high as 4095
    2696:	e0 91 e9 24 	lds	r30, 0x24E9
    269a:	f0 91 ea 24 	lds	r31, 0x24EA
    269e:	ee 0f       	add	r30, r30
    26a0:	ff 1f       	adc	r31, r31
    26a2:	e5 55       	subi	r30, 0x55	; 85
    26a4:	fa 4d       	sbci	r31, 0xDA	; 218
    26a6:	20 81       	ld	r18, Z
    26a8:	31 81       	ldd	r19, Z+1	; 0x01
    26aa:	22 0f       	add	r18, r18
    26ac:	33 1f       	adc	r19, r19
    26ae:	80 91 b4 2b 	lds	r24, 0x2BB4
    26b2:	45 e0       	ldi	r20, 0x05	; 5
    26b4:	84 02       	muls	r24, r20
    26b6:	c0 01       	movw	r24, r0
    26b8:	11 24       	eor	r1, r1
    26ba:	28 0f       	add	r18, r24
    26bc:	39 1f       	adc	r19, r25
    26be:	80 91 9d 27 	lds	r24, 0x279D
    26c2:	99 27       	eor	r25, r25
    26c4:	87 fd       	sbrc	r24, 7
    26c6:	90 95       	com	r25
    26c8:	ac 01       	movw	r20, r24
    26ca:	64 9f       	mul	r22, r20
    26cc:	c0 01       	movw	r24, r0
    26ce:	65 9f       	mul	r22, r21
    26d0:	90 0d       	add	r25, r0
    26d2:	74 9f       	mul	r23, r20
    26d4:	90 0d       	add	r25, r0
    26d6:	11 24       	eor	r1, r1
    26d8:	6a e0       	ldi	r22, 0x0A	; 10
    26da:	70 e0       	ldi	r23, 0x00	; 0
    26dc:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    26e0:	c9 01       	movw	r24, r18
    26e2:	86 0f       	add	r24, r22
    26e4:	97 1f       	adc	r25, r23
    26e6:	62 e0       	ldi	r22, 0x02	; 2
    26e8:	70 e0       	ldi	r23, 0x00	; 0
    26ea:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    26ee:	eb 01       	movw	r28, r22
    26f0:	86 c0       	rjmp	.+268    	; 0x27fe <Update_display+0x684>
            break;
        case 3: // POS mode, use CH5 to set the frame position (pos ctrl, not vel ctrl)
            Y_ADC1 = analogRead(5)/2;
    26f2:	85 e0       	ldi	r24, 0x05	; 5
    26f4:	0e 94 2a 21 	call	0x4254	; 0x4254 <analogRead>
    26f8:	62 e0       	ldi	r22, 0x02	; 2
    26fa:	70 e0       	ldi	r23, 0x00	; 0
    26fc:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
            // set to 0 if negative to be compatibel with old code
            if (Y_ADC1 < 0)
                Y_ADC1 = 0;
            index_y = Y_ADC1/gain_y + bias_y;
    2700:	cb 01       	movw	r24, r22
    2702:	77 ff       	sbrs	r23, 7
    2704:	02 c0       	rjmp	.+4      	; 0x270a <Update_display+0x590>
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	60 91 9d 27 	lds	r22, 0x279D
    270e:	77 27       	eor	r23, r23
    2710:	67 fd       	sbrc	r22, 7
    2712:	70 95       	com	r23
    2714:	0e 94 58 57 	call	0xaeb0	; 0xaeb0 <__divmodhi4>
    2718:	80 91 b4 2b 	lds	r24, 0x2BB4
    271c:	99 27       	eor	r25, r25
    271e:	87 fd       	sbrc	r24, 7
    2720:	90 95       	com	r25
    2722:	86 0f       	add	r24, r22
    2724:	97 1f       	adc	r25, r23
    2726:	80 93 50 29 	sts	0x2950, r24
    272a:	90 93 51 29 	sts	0x2951, r25
            if (index_y >= y_num)  {index_y = y_num - 1;} //check if too big
    272e:	80 91 50 29 	lds	r24, 0x2950
    2732:	90 91 51 29 	lds	r25, 0x2951
    2736:	20 91 a6 25 	lds	r18, 0x25A6
    273a:	30 91 a7 25 	lds	r19, 0x25A7
    273e:	82 17       	cp	r24, r18
    2740:	93 07       	cpc	r25, r19
    2742:	30 f0       	brcs	.+12     	; 0x2750 <Update_display+0x5d6>
    2744:	21 50       	subi	r18, 0x01	; 1
    2746:	30 40       	sbci	r19, 0x00	; 0
    2748:	20 93 50 29 	sts	0x2950, r18
    274c:	30 93 51 29 	sts	0x2951, r19
            if (index_y <= 0)  {index_y = 0;} //or too small
    2750:	80 91 50 29 	lds	r24, 0x2950
    2754:	90 91 51 29 	lds	r25, 0x2951
    2758:	89 2b       	or	r24, r25
    275a:	a9 f5       	brne	.+106    	; 0x27c6 <Update_display+0x64c>
    275c:	10 92 50 29 	sts	0x2950, r1
    2760:	10 92 51 29 	sts	0x2951, r1
    2764:	30 c0       	rjmp	.+96     	; 0x27c6 <Update_display+0x64c>
            frame_num = index_y*x_num + index_x;
            Y_rate = 0;
            break;
        case 4:
            //only use temp_ADC_val as a temp variable, just not to create an additional one
            temp_ADC_val = (Y_pos_index + function_Y[function_counter_y]);
    2766:	e0 91 e9 24 	lds	r30, 0x24E9
    276a:	f0 91 ea 24 	lds	r31, 0x24EA
    276e:	ee 0f       	add	r30, r30
    2770:	ff 1f       	adc	r31, r31
    2772:	e5 55       	subi	r30, 0x55	; 85
    2774:	fa 4d       	sbci	r31, 0xDA	; 218
    2776:	01 90       	ld	r0, Z+
    2778:	f0 81       	ld	r31, Z
    277a:	e0 2d       	mov	r30, r0
    277c:	80 91 73 26 	lds	r24, 0x2673
    2780:	90 91 74 26 	lds	r25, 0x2674
    2784:	e8 0f       	add	r30, r24
    2786:	f9 1f       	adc	r31, r25
    2788:	20 91 a6 25 	lds	r18, 0x25A6
    278c:	30 91 a7 25 	lds	r19, 0x25A7
            if (temp_ADC_val >= 0) {index_y = temp_ADC_val%y_num; }
    2790:	f7 fd       	sbrc	r31, 7
    2792:	09 c0       	rjmp	.+18     	; 0x27a6 <Update_display+0x62c>
    2794:	cf 01       	movw	r24, r30
    2796:	b9 01       	movw	r22, r18
    2798:	0e 94 44 57 	call	0xae88	; 0xae88 <__udivmodhi4>
    279c:	80 93 50 29 	sts	0x2950, r24
    27a0:	90 93 51 29 	sts	0x2951, r25
    27a4:	10 c0       	rjmp	.+32     	; 0x27c6 <Update_display+0x64c>
            if (temp_ADC_val < 0) {index_y = y_num - ((abs(temp_ADC_val))%y_num) - 1;  } //index_y should always smaller than y_num
    27a6:	88 27       	eor	r24, r24
    27a8:	99 27       	eor	r25, r25
    27aa:	8e 1b       	sub	r24, r30
    27ac:	9f 0b       	sbc	r25, r31
    27ae:	b9 01       	movw	r22, r18
    27b0:	0e 94 44 57 	call	0xae88	; 0xae88 <__udivmodhi4>
    27b4:	21 50       	subi	r18, 0x01	; 1
    27b6:	30 40       	sbci	r19, 0x00	; 0
    27b8:	a9 01       	movw	r20, r18
    27ba:	48 1b       	sub	r20, r24
    27bc:	59 0b       	sbc	r21, r25
    27be:	40 93 50 29 	sts	0x2950, r20
    27c2:	50 93 51 29 	sts	0x2951, r21
            frame_num = index_y*x_num + index_x;
    27c6:	20 91 50 29 	lds	r18, 0x2950
    27ca:	30 91 51 29 	lds	r19, 0x2951
    27ce:	40 91 9b 27 	lds	r20, 0x279B
    27d2:	50 91 9c 27 	lds	r21, 0x279C
    27d6:	80 91 05 28 	lds	r24, 0x2805
    27da:	90 91 06 28 	lds	r25, 0x2806
    27de:	bc 01       	movw	r22, r24
    27e0:	26 9f       	mul	r18, r22
    27e2:	c0 01       	movw	r24, r0
    27e4:	27 9f       	mul	r18, r23
    27e6:	90 0d       	add	r25, r0
    27e8:	36 9f       	mul	r19, r22
    27ea:	90 0d       	add	r25, r0
    27ec:	11 24       	eor	r1, r1
    27ee:	84 0f       	add	r24, r20
    27f0:	95 1f       	adc	r25, r21
    27f2:	80 93 e5 24 	sts	0x24E5, r24
    27f6:	90 93 e6 24 	sts	0x24E6, r25
    27fa:	c0 e0       	ldi	r28, 0x00	; 0
    27fc:	d0 e0       	ldi	r29, 0x00	; 0
    //in the above x,y_val computation, there is a div by 10 to take away gain scaling
    //so gain_x of 10 is 1X gain, gain_x of 20 = 2X ...
    
    //here the 2* the rate is because we want 20 = 1V to correspond to 10 fps. could probably do without,
    // and just divide the a2dConvert output by 4, and not scale function_x,y by 2
    if (Stop == 1){
    27fe:	80 91 9c 20 	lds	r24, 0x209C
    2802:	81 30       	cpi	r24, 0x01	; 1
    2804:	59 f1       	breq	.+86     	; 0x285c <Update_display+0x6e2>
        X_rate = Y_rate = 0;
    }
    
    if (X_rate > 0)
    2806:	1e 14       	cp	r1, r14
    2808:	1f 04       	cpc	r1, r15
    280a:	74 f4       	brge	.+28     	; 0x2828 <Update_display+0x6ae>
        Update_Reg_Handler(increment_index_x, (uint32_t)OVERFLOW_RATE/abs(X_rate), 2, 1);
    280c:	97 01       	movw	r18, r14
    280e:	44 27       	eor	r20, r20
    2810:	37 fd       	sbrc	r19, 7
    2812:	40 95       	com	r20
    2814:	54 2f       	mov	r21, r20
    2816:	62 e1       	ldi	r22, 0x12	; 18
    2818:	7a e7       	ldi	r23, 0x7A	; 122
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    2822:	8d e0       	ldi	r24, 0x0D	; 13
    2824:	98 e0       	ldi	r25, 0x08	; 8
    2826:	13 c0       	rjmp	.+38     	; 0x284e <Update_display+0x6d4>
    else if (X_rate < 0)
    2828:	e1 14       	cp	r14, r1
    282a:	f1 04       	cpc	r15, r1
    282c:	c9 f0       	breq	.+50     	; 0x2860 <Update_display+0x6e6>
        Update_Reg_Handler(decrement_index_x, (uint32_t)OVERFLOW_RATE/abs(X_rate), 2, 1);
    282e:	22 27       	eor	r18, r18
    2830:	33 27       	eor	r19, r19
    2832:	2e 19       	sub	r18, r14
    2834:	3f 09       	sbc	r19, r15
    2836:	44 27       	eor	r20, r20
    2838:	37 fd       	sbrc	r19, 7
    283a:	40 95       	com	r20
    283c:	54 2f       	mov	r21, r20
    283e:	62 e1       	ldi	r22, 0x12	; 18
    2840:	7a e7       	ldi	r23, 0x7A	; 122
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    284a:	81 e8       	ldi	r24, 0x81	; 129
    284c:	98 e0       	ldi	r25, 0x08	; 8
    284e:	ba 01       	movw	r22, r20
    2850:	a9 01       	movw	r20, r18
    2852:	22 e0       	ldi	r18, 0x02	; 2
    2854:	01 e0       	ldi	r16, 0x01	; 1
    2856:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <Update_Reg_Handler>
    285a:	0e c0       	rjmp	.+28     	; 0x2878 <Update_display+0x6fe>
    285c:	c0 e0       	ldi	r28, 0x00	; 0
    285e:	d0 e0       	ldi	r29, 0x00	; 0
    else     //X_rate == 0
        Update_Reg_Handler(decrement_index_x, (UPDATE_RATE), 2, 0);
    2860:	81 e8       	ldi	r24, 0x81	; 129
    2862:	98 e0       	ldi	r25, 0x08	; 8
    2864:	4e e4       	ldi	r20, 0x4E	; 78
    2866:	50 e0       	ldi	r21, 0x00	; 0
    2868:	60 e0       	ldi	r22, 0x00	; 0
    286a:	70 e0       	ldi	r23, 0x00	; 0
    286c:	22 e0       	ldi	r18, 0x02	; 2
    286e:	00 e0       	ldi	r16, 0x00	; 0
    2870:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <Update_Reg_Handler>
    2874:	ee 24       	eor	r14, r14
    2876:	ff 24       	eor	r15, r15
    
    
    if (Y_rate > 0)
    2878:	1c 16       	cp	r1, r28
    287a:	1d 06       	cpc	r1, r29
    287c:	74 f4       	brge	.+28     	; 0x289a <Update_display+0x720>
        Update_Reg_Handler(increment_index_y, (uint32_t)OVERFLOW_RATE/abs(Y_rate), 3, 1);
    287e:	9e 01       	movw	r18, r28
    2880:	44 27       	eor	r20, r20
    2882:	37 fd       	sbrc	r19, 7
    2884:	40 95       	com	r20
    2886:	54 2f       	mov	r21, r20
    2888:	62 e1       	ldi	r22, 0x12	; 18
    288a:	7a e7       	ldi	r23, 0x7A	; 122
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    2894:	85 e4       	ldi	r24, 0x45	; 69
    2896:	98 e0       	ldi	r25, 0x08	; 8
    2898:	12 c0       	rjmp	.+36     	; 0x28be <Update_display+0x744>
    else if (Y_rate < 0)
    289a:	20 97       	sbiw	r28, 0x00	; 0
    289c:	a9 f0       	breq	.+42     	; 0x28c8 <Update_display+0x74e>
        Update_Reg_Handler(decrement_index_y, (uint32_t)OVERFLOW_RATE/abs(Y_rate), 3, 1);
    289e:	22 27       	eor	r18, r18
    28a0:	33 27       	eor	r19, r19
    28a2:	2c 1b       	sub	r18, r28
    28a4:	3d 0b       	sbc	r19, r29
    28a6:	44 27       	eor	r20, r20
    28a8:	37 fd       	sbrc	r19, 7
    28aa:	40 95       	com	r20
    28ac:	54 2f       	mov	r21, r20
    28ae:	62 e1       	ldi	r22, 0x12	; 18
    28b0:	7a e7       	ldi	r23, 0x7A	; 122
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    28ba:	89 eb       	ldi	r24, 0xB9	; 185
    28bc:	98 e0       	ldi	r25, 0x08	; 8
    28be:	ba 01       	movw	r22, r20
    28c0:	a9 01       	movw	r20, r18
    28c2:	23 e0       	ldi	r18, 0x03	; 3
    28c4:	01 e0       	ldi	r16, 0x01	; 1
    28c6:	08 c0       	rjmp	.+16     	; 0x28d8 <Update_display+0x75e>
    else      //Y_rate == 0
        Update_Reg_Handler(decrement_index_y, (UPDATE_RATE), 3, 0);
    28c8:	89 eb       	ldi	r24, 0xB9	; 185
    28ca:	98 e0       	ldi	r25, 0x08	; 8
    28cc:	4e e4       	ldi	r20, 0x4E	; 78
    28ce:	50 e0       	ldi	r21, 0x00	; 0
    28d0:	60 e0       	ldi	r22, 0x00	; 0
    28d2:	70 e0       	ldi	r23, 0x00	; 0
    28d4:	23 e0       	ldi	r18, 0x03	; 3
    28d6:	00 e0       	ldi	r16, 0x00	; 0
    28d8:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <Update_Reg_Handler>
    
    //if the rates are too high, track the largest one to set warning LED
    x_gt_y = (X_rate >= Y_rate);
    28dc:	10 92 e1 24 	sts	0x24E1, r1
    28e0:	ec 16       	cp	r14, r28
    28e2:	fd 06       	cpc	r15, r29
    28e4:	1c f0       	brlt	.+6      	; 0x28ec <Update_display+0x772>
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	80 93 e1 24 	sts	0x24E1, r24
}
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
    28f0:	e6 e0       	ldi	r30, 0x06	; 6
    28f2:	0c 94 d0 57 	jmp	0xafa0	; 0xafa0 <__epilogue_restores__+0x18>

000028f6 <handle_message_length_3>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[2]);
    }
}

void handle_message_length_3(uint8_t *msg_buffer) {
    28f6:	a2 e0       	ldi	r26, 0x02	; 2
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	e1 e8       	ldi	r30, 0x81	; 129
    28fc:	f4 e1       	ldi	r31, 0x14	; 20
    28fe:	0c 94 b5 57 	jmp	0xaf6a	; 0xaf6a <__prologue_saves__+0x1a>
    2902:	8c 01       	movw	r16, r24
    uint8_t target_panel_addr;
    uint8_t CMD[2];
    uint16_t funcX_freq, funcY_freq;
    
    switch(msg_buffer[0]) {
    2904:	fc 01       	movw	r30, r24
    2906:	80 81       	ld	r24, Z
    2908:	80 32       	cpi	r24, 0x20	; 32
    290a:	09 f4       	brne	.+2      	; 0x290e <handle_message_length_3+0x18>
    290c:	a5 c0       	rjmp	.+330    	; 0x2a58 <handle_message_length_3+0x162>
    290e:	81 32       	cpi	r24, 0x21	; 33
    2910:	38 f4       	brcc	.+14     	; 0x2920 <handle_message_length_3+0x2a>
    2912:	80 31       	cpi	r24, 0x10	; 16
    2914:	09 f4       	brne	.+2      	; 0x2918 <handle_message_length_3+0x22>
    2916:	8f c0       	rjmp	.+286    	; 0x2a36 <handle_message_length_3+0x140>
    2918:	85 31       	cpi	r24, 0x15	; 21
    291a:	09 f0       	breq	.+2      	; 0x291e <handle_message_length_3+0x28>
    291c:	11 c1       	rjmp	.+546    	; 0x2b40 <handle_message_length_3+0x24a>
    291e:	93 c0       	rjmp	.+294    	; 0x2a46 <handle_message_length_3+0x150>
    2920:	80 33       	cpi	r24, 0x30	; 48
    2922:	09 f4       	brne	.+2      	; 0x2926 <handle_message_length_3+0x30>
    2924:	d8 c0       	rjmp	.+432    	; 0x2ad6 <handle_message_length_3+0x1e0>
    2926:	8f 3f       	cpi	r24, 0xFF	; 255
    2928:	21 f0       	breq	.+8      	; 0x2932 <handle_message_length_3+0x3c>
    292a:	85 32       	cpi	r24, 0x25	; 37
    292c:	09 f0       	breq	.+2      	; 0x2930 <handle_message_length_3+0x3a>
    292e:	08 c1       	rjmp	.+528    	; 0x2b40 <handle_message_length_3+0x24a>
    2930:	a0 c0       	rjmp	.+320    	; 0x2a72 <handle_message_length_3+0x17c>
        case 0xFF:  //address panel
            target_panel_addr = msg_buffer[1];  //put in error check, in range < 127
    2932:	f8 01       	movw	r30, r16
    2934:	f1 80       	ldd	r15, Z+1	; 0x01
            //sends a reset command out to panel at taget address
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
    2936:	80 91 82 26 	lds	r24, 0x2682
    293a:	88 23       	and	r24, r24
    293c:	e1 f7       	brne	.-8      	; 0x2936 <handle_message_length_3+0x40>
            TWI_MasterWrite(&twi1, target_panel_addr, RESET, 2);
    293e:	85 e7       	ldi	r24, 0x75	; 117
    2940:	96 e2       	ldi	r25, 0x26	; 38
    2942:	6f 2d       	mov	r22, r15
    2944:	49 ef       	ldi	r20, 0xF9	; 249
    2946:	50 e2       	ldi	r21, 0x20	; 32
    2948:	22 e0       	ldi	r18, 0x02	; 2
    294a:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    294e:	80 91 7f 29 	lds	r24, 0x297F
    2952:	88 23       	and	r24, r24
    2954:	e1 f7       	brne	.-8      	; 0x294e <handle_message_length_3+0x58>
            TWI_MasterWrite(&twi2, target_panel_addr, RESET, 2);
    2956:	82 e7       	ldi	r24, 0x72	; 114
    2958:	99 e2       	ldi	r25, 0x29	; 41
    295a:	6f 2d       	mov	r22, r15
    295c:	49 ef       	ldi	r20, 0xF9	; 249
    295e:	50 e2       	ldi	r21, 0x20	; 32
    2960:	22 e0       	ldi	r18, 0x02	; 2
    2962:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    2966:	80 91 15 27 	lds	r24, 0x2715
    296a:	88 23       	and	r24, r24
    296c:	e1 f7       	brne	.-8      	; 0x2966 <handle_message_length_3+0x70>
            TWI_MasterWrite(&twi3, target_panel_addr, RESET, 2);
    296e:	88 e0       	ldi	r24, 0x08	; 8
    2970:	97 e2       	ldi	r25, 0x27	; 39
    2972:	6f 2d       	mov	r22, r15
    2974:	49 ef       	ldi	r20, 0xF9	; 249
    2976:	50 e2       	ldi	r21, 0x20	; 32
    2978:	22 e0       	ldi	r18, 0x02	; 2
    297a:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    297e:	80 91 a4 25 	lds	r24, 0x25A4
    2982:	88 23       	and	r24, r24
    2984:	e1 f7       	brne	.-8      	; 0x297e <handle_message_length_3+0x88>
            TWI_MasterWrite(&twi4, target_panel_addr, RESET, 2);
    2986:	87 e9       	ldi	r24, 0x97	; 151
    2988:	95 e2       	ldi	r25, 0x25	; 37
    298a:	6f 2d       	mov	r22, r15
    298c:	49 ef       	ldi	r20, 0xF9	; 249
    298e:	50 e2       	ldi	r21, 0x20	; 32
    2990:	22 e0       	ldi	r18, 0x02	; 2
    2992:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <TWI_MasterWrite>
    2996:	80 ef       	ldi	r24, 0xF0	; 240
    2998:	95 e5       	ldi	r25, 0x55	; 85
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    299a:	20 e2       	ldi	r18, 0x20	; 32
    299c:	33 e0       	ldi	r19, 0x03	; 3
    299e:	f9 01       	movw	r30, r18
    29a0:	31 97       	sbiw	r30, 0x01	; 1
    29a2:	f1 f7       	brne	.-4      	; 0x29a0 <handle_message_length_3+0xaa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a6:	d9 f7       	brne	.-10     	; 0x299e <handle_message_length_3+0xa8>
            //i2cMasterSend(target_panel_addr, 2, RESET);
            
            _delay_ms(2200);
            CMD[0] = 0xFF; CMD[1] = msg_buffer[2];   //send change address command
    29a8:	8f ef       	ldi	r24, 0xFF	; 255
    29aa:	89 83       	std	Y+1, r24	; 0x01
    29ac:	f8 01       	movw	r30, r16
    29ae:	92 81       	ldd	r25, Z+2	; 0x02
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
    29b0:	80 91 82 26 	lds	r24, 0x2682
    29b4:	88 23       	and	r24, r24
    29b6:	e1 f7       	brne	.-8      	; 0x29b0 <handle_message_length_3+0xba>
            while (twi4.status != TWIM_STATUS_READY);
            TWI_MasterWrite(&twi4, target_panel_addr, RESET, 2);
            //i2cMasterSend(target_panel_addr, 2, RESET);
            
            _delay_ms(2200);
            CMD[0] = 0xFF; CMD[1] = msg_buffer[2];   //send change address command
    29b8:	9a 83       	std	Y+2, r25	; 0x02
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
            TWI_MasterWrite(&twi1, target_panel_addr, CMD, 2);
    29ba:	85 e7       	ldi	r24, 0x75	; 117
    29bc:	96 e2       	ldi	r25, 0x26	; 38
    29be:	6f 2d       	mov	r22, r15
    29c0:	ae 01       	movw	r20, r28
    29c2:	4f 5f       	subi	r20, 0xFF	; 255
    29c4:	5f 4f       	sbci	r21, 0xFF	; 255
    29c6:	22 e0       	ldi	r18, 0x02	; 2
    29c8:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    29cc:	80 91 7f 29 	lds	r24, 0x297F
    29d0:	88 23       	and	r24, r24
    29d2:	e1 f7       	brne	.-8      	; 0x29cc <handle_message_length_3+0xd6>
            TWI_MasterWrite(&twi2, target_panel_addr, CMD, 2);
    29d4:	82 e7       	ldi	r24, 0x72	; 114
    29d6:	99 e2       	ldi	r25, 0x29	; 41
    29d8:	6f 2d       	mov	r22, r15
    29da:	ae 01       	movw	r20, r28
    29dc:	4f 5f       	subi	r20, 0xFF	; 255
    29de:	5f 4f       	sbci	r21, 0xFF	; 255
    29e0:	22 e0       	ldi	r18, 0x02	; 2
    29e2:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    29e6:	80 91 15 27 	lds	r24, 0x2715
    29ea:	88 23       	and	r24, r24
    29ec:	e1 f7       	brne	.-8      	; 0x29e6 <handle_message_length_3+0xf0>
            TWI_MasterWrite(&twi3, target_panel_addr, CMD, 2);
    29ee:	88 e0       	ldi	r24, 0x08	; 8
    29f0:	97 e2       	ldi	r25, 0x27	; 39
    29f2:	6f 2d       	mov	r22, r15
    29f4:	ae 01       	movw	r20, r28
    29f6:	4f 5f       	subi	r20, 0xFF	; 255
    29f8:	5f 4f       	sbci	r21, 0xFF	; 255
    29fa:	22 e0       	ldi	r18, 0x02	; 2
    29fc:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    2a00:	80 91 a4 25 	lds	r24, 0x25A4
    2a04:	88 23       	and	r24, r24
    2a06:	e1 f7       	brne	.-8      	; 0x2a00 <handle_message_length_3+0x10a>
            TWI_MasterWrite(&twi4, target_panel_addr, CMD, 2);
    2a08:	87 e9       	ldi	r24, 0x97	; 151
    2a0a:	95 e2       	ldi	r25, 0x25	; 37
    2a0c:	6f 2d       	mov	r22, r15
    2a0e:	ae 01       	movw	r20, r28
    2a10:	4f 5f       	subi	r20, 0xFF	; 255
    2a12:	5f 4f       	sbci	r21, 0xFF	; 255
    2a14:	22 e0       	ldi	r18, 0x02	; 2
    2a16:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <TWI_MasterWrite>
    2a1a:	84 ef       	ldi	r24, 0xF4	; 244
    2a1c:	91 e0       	ldi	r25, 0x01	; 1
    2a1e:	20 e2       	ldi	r18, 0x20	; 32
    2a20:	33 e0       	ldi	r19, 0x03	; 3
    2a22:	f9 01       	movw	r30, r18
    2a24:	31 97       	sbiw	r30, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <handle_message_length_3+0x12e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a28:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2a:	d9 f7       	brne	.-10     	; 0x2a22 <handle_message_length_3+0x12c>
            //i2cMasterSend(target_panel_addr, 2, CMD);
            
            _delay_ms(50);
            //reset all panels again
            i2cMasterSend(0, 2, RESET);
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	62 e0       	ldi	r22, 0x02	; 2
    2a30:	49 ef       	ldi	r20, 0xF9	; 249
    2a32:	50 e2       	ldi	r21, 0x20	; 32
    2a34:	89 c0       	rjmp	.+274    	; 0x2b48 <handle_message_length_3+0x252>
            
            break;
            
        case 0x10:
            x_mode = msg_buffer[1];
    2a36:	f8 01       	movw	r30, r16
    2a38:	81 81       	ldd	r24, Z+1	; 0x01
    2a3a:	80 93 99 27 	sts	0x2799, r24
            y_mode = msg_buffer[2];
    2a3e:	82 81       	ldd	r24, Z+2	; 0x02
    2a40:	80 93 e3 27 	sts	0x27E3, r24
    2a44:	83 c0       	rjmp	.+262    	; 0x2b4c <handle_message_length_3+0x256>
            //put in an error message if value is not 0, 1, or 2.
            break;
            
        case 0x15:   //this is a set position function
            if (msg_buffer[2] == 0){
    2a46:	f8 01       	movw	r30, r16
    2a48:	62 81       	ldd	r22, Z+2	; 0x02
    2a4a:	66 23       	and	r22, r22
    2a4c:	49 f0       	breq	.+18     	; 0x2a60 <handle_message_length_3+0x16a>
                set_default_func(msg_buffer[1]);}
            else
                set_pos_func(msg_buffer[1], msg_buffer[2]);
    2a4e:	f8 01       	movw	r30, r16
    2a50:	81 81       	ldd	r24, Z+1	; 0x01
    2a52:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <set_pos_func>
    2a56:	7a c0       	rjmp	.+244    	; 0x2b4c <handle_message_length_3+0x256>
            break;
            
        case 0x20:   //this is a set velocity function
            if (msg_buffer[2] == 0){
    2a58:	f8 01       	movw	r30, r16
    2a5a:	62 81       	ldd	r22, Z+2	; 0x02
    2a5c:	66 23       	and	r22, r22
    2a5e:	21 f4       	brne	.+8      	; 0x2a68 <handle_message_length_3+0x172>
                set_default_func(msg_buffer[1]);}
    2a60:	81 81       	ldd	r24, Z+1	; 0x01
    2a62:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <set_default_func>
    2a66:	72 c0       	rjmp	.+228    	; 0x2b4c <handle_message_length_3+0x256>
            else
                set_vel_func(msg_buffer[1], msg_buffer[2]);
    2a68:	f8 01       	movw	r30, r16
    2a6a:	81 81       	ldd	r24, Z+1	; 0x01
    2a6c:	0e 94 82 0c 	call	0x1904	; 0x1904 <set_vel_func>
    2a70:	6d c0       	rjmp	.+218    	; 0x2b4c <handle_message_length_3+0x256>
            break;
            
        case 0x25: // this is a set function generator frequency
            funcX_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    2a72:	f8 01       	movw	r30, r16
    2a74:	92 81       	ldd	r25, Z+2	; 0x02
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	21 81       	ldd	r18, Z+1	; 0x01
    2a7a:	8c 01       	movw	r16, r24
    2a7c:	02 0f       	add	r16, r18
    2a7e:	11 1d       	adc	r17, r1
            functionX_rate = OVERFLOW_RATE/funcX_freq;
    2a80:	98 01       	movw	r18, r16
    2a82:	40 e0       	ldi	r20, 0x00	; 0
    2a84:	50 e0       	ldi	r21, 0x00	; 0
    2a86:	62 e1       	ldi	r22, 0x12	; 18
    2a88:	7a e7       	ldi	r23, 0x7A	; 122
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	0e 94 8d 57 	call	0xaf1a	; 0xaf1a <__divmodsi4>
    2a92:	20 93 9f 20 	sts	0x209F, r18
    2a96:	30 93 a0 20 	sts	0x20A0, r19
            if (quiet_mode_on == 0)
    2a9a:	80 91 f3 24 	lds	r24, 0x24F3
    2a9e:	88 23       	and	r24, r24
    2aa0:	81 f4       	brne	.+32     	; 0x2ac2 <handle_message_length_3+0x1cc>
                xprintf(PSTR("function X update frequency = %u.\n"), funcX_freq);
    2aa2:	00 d0       	rcall	.+0      	; 0x2aa4 <handle_message_length_3+0x1ae>
    2aa4:	0f 92       	push	r0
    2aa6:	8d ed       	ldi	r24, 0xDD	; 221
    2aa8:	97 e0       	ldi	r25, 0x07	; 7
    2aaa:	ed b7       	in	r30, 0x3d	; 61
    2aac:	fe b7       	in	r31, 0x3e	; 62
    2aae:	81 83       	std	Z+1, r24	; 0x01
    2ab0:	92 83       	std	Z+2, r25	; 0x02
    2ab2:	03 83       	std	Z+3, r16	; 0x03
    2ab4:	14 83       	std	Z+4, r17	; 0x04
    2ab6:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
            Update_Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    2ac2:	40 91 9f 20 	lds	r20, 0x209F
    2ac6:	50 91 a0 20 	lds	r21, 0x20A0
    2aca:	60 e0       	ldi	r22, 0x00	; 0
    2acc:	70 e0       	ldi	r23, 0x00	; 0
    2ace:	8d e3       	ldi	r24, 0x3D	; 61
    2ad0:	9b e0       	ldi	r25, 0x0B	; 11
    2ad2:	24 e0       	ldi	r18, 0x04	; 4
    2ad4:	31 c0       	rjmp	.+98     	; 0x2b38 <handle_message_length_3+0x242>
            break;
            
        case 0x30: // this is a set function generator frequency
            funcY_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    2ad6:	f8 01       	movw	r30, r16
    2ad8:	92 81       	ldd	r25, Z+2	; 0x02
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	21 81       	ldd	r18, Z+1	; 0x01
    2ade:	8c 01       	movw	r16, r24
    2ae0:	02 0f       	add	r16, r18
    2ae2:	11 1d       	adc	r17, r1
            functionY_rate = OVERFLOW_RATE/funcY_freq;
    2ae4:	98 01       	movw	r18, r16
    2ae6:	40 e0       	ldi	r20, 0x00	; 0
    2ae8:	50 e0       	ldi	r21, 0x00	; 0
    2aea:	62 e1       	ldi	r22, 0x12	; 18
    2aec:	7a e7       	ldi	r23, 0x7A	; 122
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	0e 94 8d 57 	call	0xaf1a	; 0xaf1a <__divmodsi4>
    2af6:	20 93 a1 20 	sts	0x20A1, r18
    2afa:	30 93 a2 20 	sts	0x20A2, r19
            if (quiet_mode_on == 0)
    2afe:	80 91 f3 24 	lds	r24, 0x24F3
    2b02:	88 23       	and	r24, r24
    2b04:	81 f4       	brne	.+32     	; 0x2b26 <handle_message_length_3+0x230>
                xprintf(PSTR("function Y update frequency = %u.\n"), funcY_freq);
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <handle_message_length_3+0x212>
    2b08:	0f 92       	push	r0
    2b0a:	8a eb       	ldi	r24, 0xBA	; 186
    2b0c:	97 e0       	ldi	r25, 0x07	; 7
    2b0e:	ed b7       	in	r30, 0x3d	; 61
    2b10:	fe b7       	in	r31, 0x3e	; 62
    2b12:	81 83       	std	Z+1, r24	; 0x01
    2b14:	92 83       	std	Z+2, r25	; 0x02
    2b16:	03 83       	std	Z+3, r16	; 0x03
    2b18:	14 83       	std	Z+4, r17	; 0x04
    2b1a:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
            Update_Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);
    2b26:	40 91 a1 20 	lds	r20, 0x20A1
    2b2a:	50 91 a2 20 	lds	r21, 0x20A2
    2b2e:	60 e0       	ldi	r22, 0x00	; 0
    2b30:	70 e0       	ldi	r23, 0x00	; 0
    2b32:	88 ef       	ldi	r24, 0xF8	; 248
    2b34:	99 e0       	ldi	r25, 0x09	; 9
    2b36:	25 e0       	ldi	r18, 0x05	; 5
    2b38:	01 e0       	ldi	r16, 0x01	; 1
    2b3a:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <Update_Reg_Handler>
    2b3e:	06 c0       	rjmp	.+12     	; 0x2b4c <handle_message_length_3+0x256>
            break;
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[3]);
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	68 e0       	ldi	r22, 0x08	; 8
    2b44:	41 ed       	ldi	r20, 0xD1	; 209
    2b46:	50 e2       	ldi	r21, 0x20	; 32
    2b48:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <i2cMasterSend>
    }
}
    2b4c:	22 96       	adiw	r28, 0x02	; 2
    2b4e:	e5 e0       	ldi	r30, 0x05	; 5
    2b50:	0c 94 d1 57 	jmp	0xafa2	; 0xafa2 <__epilogue_restores__+0x1a>

00002b54 <display_dumped_frame>:
	if (quiet_mode_on == 0)
        xputs(PSTR("Success set the new laser pattern.\n"));

}

void display_dumped_frame (uint8_t *msg_buffer) {
    2b54:	a1 e0       	ldi	r26, 0x01	; 1
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	e0 eb       	ldi	r30, 0xB0	; 176
    2b5a:	f5 e1       	ldi	r31, 0x15	; 21
    2b5c:	0c 94 b0 57 	jmp	0xaf60	; 0xaf60 <__prologue_saves__+0x10>
    2b60:	5c 01       	movw	r10, r24
    //The first two byte is the x_dac_val
    //The second two byte is the y_dac_val
    //The fifth byte is the number of panels
    //the sixth byte is the gray scale level
    //the seventh byte is the flag of row compression 
    x_dac_val = (uint16_t)msg_buffer[0] + 256*(uint16_t)msg_buffer[1];
    2b62:	fc 01       	movw	r30, r24
    2b64:	e0 80       	ld	r14, Z
    2b66:	f1 80       	ldd	r15, Z+1	; 0x01
    y_dac_val = (uint16_t)msg_buffer[2] + 256*(uint16_t)msg_buffer[3];
    2b68:	c2 80       	ldd	r12, Z+2	; 0x02
    2b6a:	d3 80       	ldd	r13, Z+3	; 0x03
    num_panels = msg_buffer[4];
    2b6c:	84 81       	ldd	r24, Z+4	; 0x04
    2b6e:	80 93 e4 24 	sts	0x24E4, r24
    gs_value =msg_buffer[5];
    2b72:	95 81       	ldd	r25, Z+5	; 0x05
    2b74:	90 93 17 27 	sts	0x2717, r25
    row_compress = msg_buffer[6];
    2b78:	86 81       	ldd	r24, Z+6	; 0x06
    2b7a:	80 93 aa 25 	sts	0x25AA, r24


    if (row_compress)
    2b7e:	88 23       	and	r24, r24
    2b80:	19 f0       	breq	.+6      	; 0x2b88 <display_dumped_frame+0x34>
        bytes_per_panel_frame = gs_value;
    2b82:	90 93 9a 27 	sts	0x279A, r25
    2b86:	09 c0       	rjmp	.+18     	; 0x2b9a <display_dumped_frame+0x46>
    else
        bytes_per_panel_frame = gs_value*8;
    2b88:	89 2f       	mov	r24, r25
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	33 e0       	ldi	r19, 0x03	; 3
    2b8e:	88 0f       	add	r24, r24
    2b90:	99 1f       	adc	r25, r25
    2b92:	3a 95       	dec	r19
    2b94:	e1 f7       	brne	.-8      	; 0x2b8e <display_dumped_frame+0x3a>
    2b96:	80 93 9a 27 	sts	0x279A, r24
  
    buffer_index = 7;
    display_flag = 0;  //clear the display flag
    2b9a:	10 92 e0 24 	sts	0x24E0, r1
    digitalWrite(1, HIGH); // set line high at beginning of frame write
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	61 e0       	ldi	r22, 0x01	; 1
    2ba2:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <digitalWrite>
    2ba6:	07 e0       	ldi	r16, 0x07	; 7
    2ba8:	10 e0       	ldi	r17, 0x00	; 0
    2baa:	91 e0       	ldi	r25, 0x01	; 1
    2bac:	0f c0       	rjmp	.+30     	; 0x2bcc <display_dumped_frame+0x78>
    
    for (panel_index = 1; panel_index <= num_panels; panel_index++){
        i2cMasterSend(panel_index, bytes_per_panel_frame, &msg_buffer[buffer_index]);
    2bae:	a5 01       	movw	r20, r10
    2bb0:	40 0f       	add	r20, r16
    2bb2:	51 1f       	adc	r21, r17
    2bb4:	89 2f       	mov	r24, r25
    2bb6:	60 91 9a 27 	lds	r22, 0x279A
    2bba:	99 83       	std	Y+1, r25	; 0x01
    2bbc:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <i2cMasterSend>
        buffer_index = buffer_index + bytes_per_panel_frame;
    2bc0:	80 91 9a 27 	lds	r24, 0x279A
    2bc4:	08 0f       	add	r16, r24
    2bc6:	11 1d       	adc	r17, r1
  
    buffer_index = 7;
    display_flag = 0;  //clear the display flag
    digitalWrite(1, HIGH); // set line high at beginning of frame write
    
    for (panel_index = 1; panel_index <= num_panels; panel_index++){
    2bc8:	99 81       	ldd	r25, Y+1	; 0x01
    2bca:	9f 5f       	subi	r25, 0xFF	; 255
    2bcc:	80 91 e4 24 	lds	r24, 0x24E4
    2bd0:	89 17       	cp	r24, r25
    2bd2:	68 f7       	brcc	.-38     	; 0x2bae <display_dumped_frame+0x5a>
        i2cMasterSend(panel_index, bytes_per_panel_frame, &msg_buffer[buffer_index]);
        buffer_index = buffer_index + bytes_per_panel_frame;
    }
    analogWrite(0, x_dac_val); // make it a value in the range 0 - 2047 (0 - 5V)
    2bd4:	7f 2d       	mov	r23, r15
    2bd6:	60 e0       	ldi	r22, 0x00	; 0
    2bd8:	6e 0d       	add	r22, r14
    2bda:	71 1d       	adc	r23, r1
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	0e 94 87 21 	call	0x430e	; 0x430e <analogWrite>
    analogWrite(1, y_dac_val); 
    2be2:	7d 2d       	mov	r23, r13
    2be4:	60 e0       	ldi	r22, 0x00	; 0
    2be6:	6c 0d       	add	r22, r12
    2be8:	71 1d       	adc	r23, r1
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	0e 94 87 21 	call	0x430e	; 0x430e <analogWrite>
    digitalWrite(1, LOW); // set line low at end of frame write
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	60 e0       	ldi	r22, 0x00	; 0
    2bf4:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <digitalWrite>
}
    2bf8:	21 96       	adiw	r28, 0x01	; 1
    2bfa:	ea e0       	ldi	r30, 0x0A	; 10
    2bfc:	0c 94 cc 57 	jmp	0xaf98	; 0xaf98 <__epilogue_restores__+0x10>

00002c00 <fetch_display_frame>:





void fetch_display_frame(uint16_t f_num){
    2c00:	a6 e2       	ldi	r26, 0x26	; 38
    2c02:	b0 e0       	ldi	r27, 0x00	; 0
    2c04:	e6 e0       	ldi	r30, 0x06	; 6
    2c06:	f6 e1       	ldi	r31, 0x16	; 22
    2c08:	0c 94 aa 57 	jmp	0xaf54	; 0xaf54 <__prologue_saves__+0x4>
    2c0c:	4c 01       	movw	r8, r24
    else
      digitalWrite(2, HIGH);   // turn off laser
  }  
	
    digitalWrite(1, LOW); // set line low at end of frame write
}
    2c0e:	4d b6       	in	r4, 0x3d	; 61
    2c10:	5e b6       	in	r5, 0x3e	; 62
    uint8_t FLASH[32];
    uint16_t len, cnt, buff_index;
    uint32_t offset;
    uint8_t res;
    uint16_t X_dac_val, Y_dac_val;
    uint8_t sreg = SREG;
    2c12:	8f b7       	in	r24, 0x3f	; 63
	uint8_t block_per_frame;
    
    digitalWrite(1, HIGH); // set line high at start of frame write
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	61 e0       	ldi	r22, 0x01	; 1
    2c18:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <digitalWrite>
    len = num_panels * bytes_per_panel_frame;
    2c1c:	90 91 9a 27 	lds	r25, 0x279A
    2c20:	80 91 e4 24 	lds	r24, 0x24E4
    2c24:	98 9f       	mul	r25, r24
    2c26:	50 01       	movw	r10, r0
    2c28:	11 24       	eor	r1, r1
	block_per_frame = len/512 + 1;
    uint8_t  frameBuff[len];
    2c2a:	8d b7       	in	r24, 0x3d	; 61
    2c2c:	9e b7       	in	r25, 0x3e	; 62
    2c2e:	8a 19       	sub	r24, r10
    2c30:	9b 09       	sbc	r25, r11
    2c32:	8d bf       	out	0x3d, r24	; 61
    2c34:	9e bf       	out	0x3e, r25	; 62
    2c36:	6d b6       	in	r6, 0x3d	; 61
    2c38:	7e b6       	in	r7, 0x3e	; 62
    2c3a:	08 94       	sec
    2c3c:	61 1c       	adc	r6, r1
    2c3e:	71 1c       	adc	r7, r1
    //offset = 512 + (uint32_t)f_num * (uint32_t)len;  //byte offset into the file
    offset = 512 + (uint32_t)f_num * 512 * block_per_frame;
    2c40:	6b 2d       	mov	r22, r11
    2c42:	66 95       	lsr	r22
    2c44:	6f 5f       	subi	r22, 0xFF	; 255
    2c46:	70 e0       	ldi	r23, 0x00	; 0
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	94 01       	movw	r18, r8
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	50 e0       	ldi	r21, 0x00	; 0
    2c52:	0e 94 25 57 	call	0xae4a	; 0xae4a <__mulsi3>
    2c56:	6b 01       	movw	r12, r22
    2c58:	7c 01       	movw	r14, r24
    2c5a:	08 94       	sec
    2c5c:	c1 1c       	adc	r12, r1
    2c5e:	d1 1c       	adc	r13, r1
    2c60:	e1 1c       	adc	r14, r1
    2c62:	f1 1c       	adc	r15, r1
    2c64:	e9 e0       	ldi	r30, 0x09	; 9
    2c66:	cc 0c       	add	r12, r12
    2c68:	dd 1c       	adc	r13, r13
    2c6a:	ee 1c       	adc	r14, r14
    2c6c:	ff 1c       	adc	r15, r15
    2c6e:	ea 95       	dec	r30
    2c70:	d1 f7       	brne	.-12     	; 0x2c66 <fetch_display_frame+0x66>
	
    Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0); //straigforward way to avoid fs reentrant
    2c72:	40 91 9f 20 	lds	r20, 0x209F
    2c76:	50 91 a0 20 	lds	r21, 0x20A0
    2c7a:	60 e0       	ldi	r22, 0x00	; 0
    2c7c:	70 e0       	ldi	r23, 0x00	; 0
    2c7e:	8d e3       	ldi	r24, 0x3D	; 61
    2c80:	9b e0       	ldi	r25, 0x0B	; 11
    2c82:	24 e0       	ldi	r18, 0x04	; 4
    2c84:	00 e0       	ldi	r16, 0x00	; 0
    2c86:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
    Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //straigforward way to avoid fs reentrant
    2c8a:	40 91 a1 20 	lds	r20, 0x20A1
    2c8e:	50 91 a2 20 	lds	r21, 0x20A2
    2c92:	60 e0       	ldi	r22, 0x00	; 0
    2c94:	70 e0       	ldi	r23, 0x00	; 0
    2c96:	88 ef       	ldi	r24, 0xF8	; 248
    2c98:	99 e0       	ldi	r25, 0x09	; 9
    2c9a:	25 e0       	ldi	r18, 0x05	; 5
    2c9c:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
    
    res = f_lseek(&file1, offset);
    2ca0:	82 e5       	ldi	r24, 0x52	; 82
    2ca2:	99 e2       	ldi	r25, 0x29	; 41
    2ca4:	b7 01       	movw	r22, r14
    2ca6:	a6 01       	movw	r20, r12
    2ca8:	0e 94 c1 3b 	call	0x7782	; 0x7782 <f_lseek>
    2cac:	18 2f       	mov	r17, r24
    if ((res == FR_OK) && (file1.fptr == offset)) {
    2cae:	88 23       	and	r24, r24
    2cb0:	09 f0       	breq	.+2      	; 0x2cb4 <fetch_display_frame+0xb4>
    2cb2:	84 c1       	rjmp	.+776    	; 0x2fbc <fetch_display_frame+0x3bc>
    2cb4:	80 91 58 29 	lds	r24, 0x2958
    2cb8:	90 91 59 29 	lds	r25, 0x2959
    2cbc:	a0 91 5a 29 	lds	r26, 0x295A
    2cc0:	b0 91 5b 29 	lds	r27, 0x295B
    2cc4:	8c 15       	cp	r24, r12
    2cc6:	9d 05       	cpc	r25, r13
    2cc8:	ae 05       	cpc	r26, r14
    2cca:	bf 05       	cpc	r27, r15
    2ccc:	09 f0       	breq	.+2      	; 0x2cd0 <fetch_display_frame+0xd0>
    2cce:	76 c1       	rjmp	.+748    	; 0x2fbc <fetch_display_frame+0x3bc>
        res = f_read(&file1, frameBuff, len, &cnt);
    2cd0:	82 e5       	ldi	r24, 0x52	; 82
    2cd2:	99 e2       	ldi	r25, 0x29	; 41
    2cd4:	b3 01       	movw	r22, r6
    2cd6:	a5 01       	movw	r20, r10
    2cd8:	9e 01       	movw	r18, r28
    2cda:	2f 5f       	subi	r18, 0xFF	; 255
    2cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cde:	0e 94 2e 4d 	call	0x9a5c	; 0x9a5c <f_read>
    2ce2:	08 2f       	mov	r16, r24
        if ((res == FR_OK) && (cnt == len)) {	
    2ce4:	88 23       	and	r24, r24
    2ce6:	09 f0       	breq	.+2      	; 0x2cea <fetch_display_frame+0xea>
    2ce8:	44 c1       	rjmp	.+648    	; 0x2f72 <fetch_display_frame+0x372>
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	9a 81       	ldd	r25, Y+2	; 0x02
    2cee:	8a 15       	cp	r24, r10
    2cf0:	9b 05       	cpc	r25, r11
    2cf2:	09 f0       	breq	.+2      	; 0x2cf6 <fetch_display_frame+0xf6>
    2cf4:	3e c1       	rjmp	.+636    	; 0x2f72 <fetch_display_frame+0x372>
		    if (func_ID_X != 0)
    2cf6:	80 91 f4 24 	lds	r24, 0x24F4
    2cfa:	90 91 f5 24 	lds	r25, 0x24F5
    2cfe:	89 2b       	or	r24, r25
    2d00:	61 f0       	breq	.+24     	; 0x2d1a <fetch_display_frame+0x11a>
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);  //straigforward way to avoid fs reentrant
    2d02:	40 91 9f 20 	lds	r20, 0x209F
    2d06:	50 91 a0 20 	lds	r21, 0x20A0
    2d0a:	60 e0       	ldi	r22, 0x00	; 0
    2d0c:	70 e0       	ldi	r23, 0x00	; 0
    2d0e:	8d e3       	ldi	r24, 0x3D	; 61
    2d10:	9b e0       	ldi	r25, 0x0B	; 11
    2d12:	24 e0       	ldi	r18, 0x04	; 4
    2d14:	01 e0       	ldi	r16, 0x01	; 1
    2d16:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
        
			if (func_ID_Y != 0)
    2d1a:	80 91 f6 24 	lds	r24, 0x24F6
    2d1e:	90 91 f7 24 	lds	r25, 0x24F7
    2d22:	89 2b       	or	r24, r25
    2d24:	61 f0       	breq	.+24     	; 0x2d3e <fetch_display_frame+0x13e>
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); //straigforward way to avoid fs reentrant
    2d26:	40 91 a1 20 	lds	r20, 0x20A1
    2d2a:	50 91 a2 20 	lds	r21, 0x20A2
    2d2e:	60 e0       	ldi	r22, 0x00	; 0
    2d30:	70 e0       	ldi	r23, 0x00	; 0
    2d32:	88 ef       	ldi	r24, 0xF8	; 248
    2d34:	99 e0       	ldi	r25, 0x09	; 9
    2d36:	25 e0       	ldi	r18, 0x05	; 5
    2d38:	01 e0       	ldi	r16, 0x01	; 1
    2d3a:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
        
		
            if (display_flag > 1){      //if flag gets bigger than 1 -> frame skipped
    2d3e:	80 91 e0 24 	lds	r24, 0x24E0
    2d42:	82 30       	cpi	r24, 0x02	; 2
    2d44:	18 f0       	brcs	.+6      	; 0x2d4c <fetch_display_frame+0x14c>
                ledToggle(1);    //toggle LED 1
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	0e 94 86 20 	call	0x410c	; 0x410c <ledToggle>
            }
            
            display_flag = 0;  //clear the display flag
    2d4c:	10 92 e0 24 	sts	0x24E0, r1
    2d50:	01 e0       	ldi	r16, 0x01	; 1
    2d52:	ee 24       	eor	r14, r14
    2d54:	ff 24       	eor	r15, r15
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
                for(j = 0;j < bytes_per_panel_frame;j++){
    2d56:	77 e0       	ldi	r23, 0x07	; 7
    2d58:	c7 2e       	mov	r12, r23
    2d5a:	d1 2c       	mov	r13, r1
    2d5c:	cc 0e       	add	r12, r28
    2d5e:	dd 1e       	adc	r13, r29
                                                    if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
                                                        gscale[0] = FLASH[0];
                                                        gscale[1] = FLASH[8];
                                                        gscale[2] = FLASH[16];
                                                        gscale[3] = FLASH[24];
                                                        i2cMasterSend(panel_index, 4, &gscale[0]); //send a 4 byte packet with the correct row_compressed value.
    2d60:	63 e0       	ldi	r22, 0x03	; 3
    2d62:	a6 2e       	mov	r10, r22
    2d64:	b1 2c       	mov	r11, r1
    2d66:	ac 0e       	add	r10, r28
    2d68:	bd 1e       	adc	r11, r29
    2d6a:	f7 c0       	rjmp	.+494    	; 0x2f5a <fetch_display_frame+0x35a>
            display_flag = 0;  //clear the display flag
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
                for(j = 0;j < bytes_per_panel_frame;j++){
                    FLASH[j] = frameBuff[buff_index++]; //not good for performance, no need to copy the data
    2d6c:	8d 91       	ld	r24, X+
    2d6e:	81 93       	st	Z+, r24
            
            display_flag = 0;  //clear the display flag
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
                for(j = 0;j < bytes_per_panel_frame;j++){
    2d70:	8e 2f       	mov	r24, r30
    2d72:	8c 19       	sub	r24, r12
    2d74:	89 17       	cp	r24, r25
    2d76:	d0 f3       	brcs	.-12     	; 0x2d6c <fetch_display_frame+0x16c>
    2d78:	e9 0e       	add	r14, r25
    2d7a:	f1 1c       	adc	r15, r1
                    FLASH[j] = frameBuff[buff_index++]; //not good for performance, no need to copy the data
                }
                packet_sent = 0; //used with compression to simplify coniditionals.
                if (ident_compress == 1) {
    2d7c:	80 91 81 29 	lds	r24, 0x2981
    2d80:	81 30       	cpi	r24, 0x01	; 1
    2d82:	09 f0       	breq	.+2      	; 0x2d86 <fetch_display_frame+0x186>
    2d84:	e3 c0       	rjmp	.+454    	; 0x2f4c <fetch_display_frame+0x34c>
                    if (bytes_per_panel_frame == 8){
    2d86:	98 30       	cpi	r25, 0x08	; 8
    2d88:	e9 f4       	brne	.+58     	; 0x2dc4 <fetch_display_frame+0x1c4>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    2d8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d8c:	88 85       	ldd	r24, Y+8	; 0x08
    2d8e:	98 17       	cp	r25, r24
    2d90:	c9 f4       	brne	.+50     	; 0x2dc4 <fetch_display_frame+0x1c4>
    2d92:	49 85       	ldd	r20, Y+9	; 0x09
    2d94:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d96:	48 17       	cp	r20, r24
    2d98:	a9 f4       	brne	.+42     	; 0x2dc4 <fetch_display_frame+0x1c4>
    2d9a:	3b 85       	ldd	r19, Y+11	; 0x0b
    2d9c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d9e:	38 17       	cp	r19, r24
    2da0:	89 f4       	brne	.+34     	; 0x2dc4 <fetch_display_frame+0x1c4>
    2da2:	2d 85       	ldd	r18, Y+13	; 0x0d
    2da4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2da6:	28 17       	cp	r18, r24
    2da8:	69 f4       	brne	.+26     	; 0x2dc4 <fetch_display_frame+0x1c4>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    2daa:	94 17       	cp	r25, r20
    2dac:	59 f4       	brne	.+22     	; 0x2dc4 <fetch_display_frame+0x1c4>
    2dae:	93 17       	cp	r25, r19
    2db0:	49 f4       	brne	.+18     	; 0x2dc4 <fetch_display_frame+0x1c4>
    2db2:	92 17       	cp	r25, r18
    2db4:	39 f4       	brne	.+14     	; 0x2dc4 <fetch_display_frame+0x1c4>
                                i2cMasterSend(panel_index, 1, &FLASH[0]); //send a 1 byte packet with the correct row_compressed value.
    2db6:	80 2f       	mov	r24, r16
    2db8:	61 e0       	ldi	r22, 0x01	; 1
    2dba:	a6 01       	movw	r20, r12
    2dbc:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <i2cMasterSend>
    2dc0:	e1 e0       	ldi	r30, 0x01	; 1
    2dc2:	01 c0       	rjmp	.+2      	; 0x2dc6 <fetch_display_frame+0x1c6>
    2dc4:	e0 e0       	ldi	r30, 0x00	; 0
                                packet_sent = 1;
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 8
                    
                    if (bytes_per_panel_frame == 24){
    2dc6:	80 91 9a 27 	lds	r24, 0x279A
    2dca:	88 31       	cpi	r24, 0x18	; 24
    2dcc:	09 f0       	breq	.+2      	; 0x2dd0 <fetch_display_frame+0x1d0>
    2dce:	4e c0       	rjmp	.+156    	; 0x2e6c <fetch_display_frame+0x26c>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    2dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd2:	88 85       	ldd	r24, Y+8	; 0x08
    2dd4:	68 17       	cp	r22, r24
    2dd6:	09 f0       	breq	.+2      	; 0x2dda <fetch_display_frame+0x1da>
    2dd8:	49 c0       	rjmp	.+146    	; 0x2e6c <fetch_display_frame+0x26c>
    2dda:	39 85       	ldd	r19, Y+9	; 0x09
    2ddc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dde:	38 17       	cp	r19, r24
    2de0:	09 f0       	breq	.+2      	; 0x2de4 <fetch_display_frame+0x1e4>
    2de2:	44 c0       	rjmp	.+136    	; 0x2e6c <fetch_display_frame+0x26c>
    2de4:	2b 85       	ldd	r18, Y+11	; 0x0b
    2de6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2de8:	28 17       	cp	r18, r24
    2dea:	09 f0       	breq	.+2      	; 0x2dee <fetch_display_frame+0x1ee>
    2dec:	3f c0       	rjmp	.+126    	; 0x2e6c <fetch_display_frame+0x26c>
    2dee:	9d 85       	ldd	r25, Y+13	; 0x0d
    2df0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2df2:	98 17       	cp	r25, r24
    2df4:	d9 f5       	brne	.+118    	; 0x2e6c <fetch_display_frame+0x26c>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    2df6:	63 17       	cp	r22, r19
    2df8:	c9 f5       	brne	.+114    	; 0x2e6c <fetch_display_frame+0x26c>
    2dfa:	62 17       	cp	r22, r18
    2dfc:	b9 f5       	brne	.+110    	; 0x2e6c <fetch_display_frame+0x26c>
    2dfe:	69 17       	cp	r22, r25
    2e00:	a9 f5       	brne	.+106    	; 0x2e6c <fetch_display_frame+0x26c>
                                if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    2e02:	4f 85       	ldd	r20, Y+15	; 0x0f
    2e04:	88 89       	ldd	r24, Y+16	; 0x10
    2e06:	48 17       	cp	r20, r24
    2e08:	89 f5       	brne	.+98     	; 0x2e6c <fetch_display_frame+0x26c>
    2e0a:	39 89       	ldd	r19, Y+17	; 0x11
    2e0c:	8a 89       	ldd	r24, Y+18	; 0x12
    2e0e:	38 17       	cp	r19, r24
    2e10:	69 f5       	brne	.+90     	; 0x2e6c <fetch_display_frame+0x26c>
    2e12:	2b 89       	ldd	r18, Y+19	; 0x13
    2e14:	8c 89       	ldd	r24, Y+20	; 0x14
    2e16:	28 17       	cp	r18, r24
    2e18:	49 f5       	brne	.+82     	; 0x2e6c <fetch_display_frame+0x26c>
    2e1a:	9d 89       	ldd	r25, Y+21	; 0x15
    2e1c:	8e 89       	ldd	r24, Y+22	; 0x16
    2e1e:	98 17       	cp	r25, r24
    2e20:	29 f5       	brne	.+74     	; 0x2e6c <fetch_display_frame+0x26c>
                                    if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    2e22:	43 17       	cp	r20, r19
    2e24:	19 f5       	brne	.+70     	; 0x2e6c <fetch_display_frame+0x26c>
    2e26:	42 17       	cp	r20, r18
    2e28:	09 f5       	brne	.+66     	; 0x2e6c <fetch_display_frame+0x26c>
    2e2a:	49 17       	cp	r20, r25
    2e2c:	f9 f4       	brne	.+62     	; 0x2e6c <fetch_display_frame+0x26c>
                                        if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    2e2e:	9f 89       	ldd	r25, Y+23	; 0x17
    2e30:	88 8d       	ldd	r24, Y+24	; 0x18
    2e32:	98 17       	cp	r25, r24
    2e34:	d9 f4       	brne	.+54     	; 0x2e6c <fetch_display_frame+0x26c>
    2e36:	59 8d       	ldd	r21, Y+25	; 0x19
    2e38:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e3a:	58 17       	cp	r21, r24
    2e3c:	b9 f4       	brne	.+46     	; 0x2e6c <fetch_display_frame+0x26c>
    2e3e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2e40:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e42:	38 17       	cp	r19, r24
    2e44:	99 f4       	brne	.+38     	; 0x2e6c <fetch_display_frame+0x26c>
    2e46:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e48:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e4a:	28 17       	cp	r18, r24
    2e4c:	79 f4       	brne	.+30     	; 0x2e6c <fetch_display_frame+0x26c>
                                            if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    2e4e:	95 17       	cp	r25, r21
    2e50:	69 f4       	brne	.+26     	; 0x2e6c <fetch_display_frame+0x26c>
    2e52:	93 17       	cp	r25, r19
    2e54:	59 f4       	brne	.+22     	; 0x2e6c <fetch_display_frame+0x26c>
    2e56:	92 17       	cp	r25, r18
    2e58:	49 f4       	brne	.+18     	; 0x2e6c <fetch_display_frame+0x26c>
                                                gscale[0] = FLASH[0];
    2e5a:	6b 83       	std	Y+3, r22	; 0x03
                                                gscale[1] = FLASH[8];
    2e5c:	4c 83       	std	Y+4, r20	; 0x04
                                                gscale[2] = FLASH[16];
    2e5e:	9d 83       	std	Y+5, r25	; 0x05
                                                i2cMasterSend(panel_index, 3, &gscale[0]); //send a 3 byte packet with the correct row_compressed value.
    2e60:	80 2f       	mov	r24, r16
    2e62:	63 e0       	ldi	r22, 0x03	; 3
    2e64:	a5 01       	movw	r20, r10
    2e66:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <i2cMasterSend>
    2e6a:	e1 e0       	ldi	r30, 0x01	; 1
                                } //end of third round of comparisons
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 24
                    
                    if (bytes_per_panel_frame == 32){
    2e6c:	80 91 9a 27 	lds	r24, 0x279A
    2e70:	80 32       	cpi	r24, 0x20	; 32
    2e72:	09 f0       	breq	.+2      	; 0x2e76 <fetch_display_frame+0x276>
    2e74:	69 c0       	rjmp	.+210    	; 0x2f48 <fetch_display_frame+0x348>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    2e76:	7f 81       	ldd	r23, Y+7	; 0x07
    2e78:	88 85       	ldd	r24, Y+8	; 0x08
    2e7a:	78 17       	cp	r23, r24
    2e7c:	09 f0       	breq	.+2      	; 0x2e80 <fetch_display_frame+0x280>
    2e7e:	64 c0       	rjmp	.+200    	; 0x2f48 <fetch_display_frame+0x348>
    2e80:	39 85       	ldd	r19, Y+9	; 0x09
    2e82:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e84:	38 17       	cp	r19, r24
    2e86:	09 f0       	breq	.+2      	; 0x2e8a <fetch_display_frame+0x28a>
    2e88:	5f c0       	rjmp	.+190    	; 0x2f48 <fetch_display_frame+0x348>
    2e8a:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e8e:	28 17       	cp	r18, r24
    2e90:	09 f0       	breq	.+2      	; 0x2e94 <fetch_display_frame+0x294>
    2e92:	5a c0       	rjmp	.+180    	; 0x2f48 <fetch_display_frame+0x348>
    2e94:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e96:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e98:	98 17       	cp	r25, r24
    2e9a:	09 f0       	breq	.+2      	; 0x2e9e <fetch_display_frame+0x29e>
    2e9c:	55 c0       	rjmp	.+170    	; 0x2f48 <fetch_display_frame+0x348>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    2e9e:	73 17       	cp	r23, r19
    2ea0:	09 f0       	breq	.+2      	; 0x2ea4 <fetch_display_frame+0x2a4>
    2ea2:	52 c0       	rjmp	.+164    	; 0x2f48 <fetch_display_frame+0x348>
    2ea4:	72 17       	cp	r23, r18
    2ea6:	09 f0       	breq	.+2      	; 0x2eaa <fetch_display_frame+0x2aa>
    2ea8:	4f c0       	rjmp	.+158    	; 0x2f48 <fetch_display_frame+0x348>
    2eaa:	79 17       	cp	r23, r25
    2eac:	09 f0       	breq	.+2      	; 0x2eb0 <fetch_display_frame+0x2b0>
    2eae:	4c c0       	rjmp	.+152    	; 0x2f48 <fetch_display_frame+0x348>
                                if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    2eb0:	6f 85       	ldd	r22, Y+15	; 0x0f
    2eb2:	88 89       	ldd	r24, Y+16	; 0x10
    2eb4:	68 17       	cp	r22, r24
    2eb6:	09 f0       	breq	.+2      	; 0x2eba <fetch_display_frame+0x2ba>
    2eb8:	47 c0       	rjmp	.+142    	; 0x2f48 <fetch_display_frame+0x348>
    2eba:	39 89       	ldd	r19, Y+17	; 0x11
    2ebc:	8a 89       	ldd	r24, Y+18	; 0x12
    2ebe:	38 17       	cp	r19, r24
    2ec0:	09 f0       	breq	.+2      	; 0x2ec4 <fetch_display_frame+0x2c4>
    2ec2:	42 c0       	rjmp	.+132    	; 0x2f48 <fetch_display_frame+0x348>
    2ec4:	2b 89       	ldd	r18, Y+19	; 0x13
    2ec6:	8c 89       	ldd	r24, Y+20	; 0x14
    2ec8:	28 17       	cp	r18, r24
    2eca:	f1 f5       	brne	.+124    	; 0x2f48 <fetch_display_frame+0x348>
    2ecc:	9d 89       	ldd	r25, Y+21	; 0x15
    2ece:	8e 89       	ldd	r24, Y+22	; 0x16
    2ed0:	98 17       	cp	r25, r24
    2ed2:	d1 f5       	brne	.+116    	; 0x2f48 <fetch_display_frame+0x348>
                                    if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    2ed4:	63 17       	cp	r22, r19
    2ed6:	c1 f5       	brne	.+112    	; 0x2f48 <fetch_display_frame+0x348>
    2ed8:	62 17       	cp	r22, r18
    2eda:	b1 f5       	brne	.+108    	; 0x2f48 <fetch_display_frame+0x348>
    2edc:	69 17       	cp	r22, r25
    2ede:	a1 f5       	brne	.+104    	; 0x2f48 <fetch_display_frame+0x348>
                                        if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    2ee0:	4f 89       	ldd	r20, Y+23	; 0x17
    2ee2:	88 8d       	ldd	r24, Y+24	; 0x18
    2ee4:	48 17       	cp	r20, r24
    2ee6:	81 f5       	brne	.+96     	; 0x2f48 <fetch_display_frame+0x348>
    2ee8:	39 8d       	ldd	r19, Y+25	; 0x19
    2eea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2eec:	38 17       	cp	r19, r24
    2eee:	61 f5       	brne	.+88     	; 0x2f48 <fetch_display_frame+0x348>
    2ef0:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2ef2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ef4:	28 17       	cp	r18, r24
    2ef6:	41 f5       	brne	.+80     	; 0x2f48 <fetch_display_frame+0x348>
    2ef8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2efa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2efc:	98 17       	cp	r25, r24
    2efe:	21 f5       	brne	.+72     	; 0x2f48 <fetch_display_frame+0x348>
                                            if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    2f00:	43 17       	cp	r20, r19
    2f02:	11 f5       	brne	.+68     	; 0x2f48 <fetch_display_frame+0x348>
    2f04:	42 17       	cp	r20, r18
    2f06:	01 f5       	brne	.+64     	; 0x2f48 <fetch_display_frame+0x348>
    2f08:	49 17       	cp	r20, r25
    2f0a:	f1 f4       	brne	.+60     	; 0x2f48 <fetch_display_frame+0x348>
                                                if( (FLASH[24+0] == FLASH[24+1])&&(FLASH[24+2] == FLASH[24+3])&&(FLASH[24+4] == FLASH[24+5])&&(FLASH[24+6] == FLASH[24+7]) ){
    2f0c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f0e:	88 a1       	ldd	r24, Y+32	; 0x20
    2f10:	98 17       	cp	r25, r24
    2f12:	d1 f4       	brne	.+52     	; 0x2f48 <fetch_display_frame+0x348>
    2f14:	59 a1       	ldd	r21, Y+33	; 0x21
    2f16:	8a a1       	ldd	r24, Y+34	; 0x22
    2f18:	58 17       	cp	r21, r24
    2f1a:	b1 f4       	brne	.+44     	; 0x2f48 <fetch_display_frame+0x348>
    2f1c:	3b a1       	ldd	r19, Y+35	; 0x23
    2f1e:	8c a1       	ldd	r24, Y+36	; 0x24
    2f20:	38 17       	cp	r19, r24
    2f22:	91 f4       	brne	.+36     	; 0x2f48 <fetch_display_frame+0x348>
    2f24:	2d a1       	ldd	r18, Y+37	; 0x25
    2f26:	8e a1       	ldd	r24, Y+38	; 0x26
    2f28:	28 17       	cp	r18, r24
    2f2a:	71 f4       	brne	.+28     	; 0x2f48 <fetch_display_frame+0x348>
                                                    if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
    2f2c:	95 17       	cp	r25, r21
    2f2e:	61 f4       	brne	.+24     	; 0x2f48 <fetch_display_frame+0x348>
    2f30:	93 17       	cp	r25, r19
    2f32:	51 f4       	brne	.+20     	; 0x2f48 <fetch_display_frame+0x348>
    2f34:	92 17       	cp	r25, r18
    2f36:	41 f4       	brne	.+16     	; 0x2f48 <fetch_display_frame+0x348>
                                                        gscale[0] = FLASH[0];
    2f38:	7b 83       	std	Y+3, r23	; 0x03
                                                        gscale[1] = FLASH[8];
    2f3a:	6c 83       	std	Y+4, r22	; 0x04
                                                        gscale[2] = FLASH[16];
    2f3c:	4d 83       	std	Y+5, r20	; 0x05
                                                        gscale[3] = FLASH[24];
    2f3e:	9e 83       	std	Y+6, r25	; 0x06
                                                        i2cMasterSend(panel_index, 4, &gscale[0]); //send a 4 byte packet with the correct row_compressed value.
    2f40:	80 2f       	mov	r24, r16
    2f42:	64 e0       	ldi	r22, 0x04	; 4
    2f44:	a5 01       	movw	r20, r10
    2f46:	06 c0       	rjmp	.+12     	; 0x2f54 <fetch_display_frame+0x354>
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 32
                } //end of if ident_compress == 1
                
                if (packet_sent == 0){ //above conditionals rejected sending a simple pattern patch
    2f48:	ee 23       	and	r30, r30
    2f4a:	31 f4       	brne	.+12     	; 0x2f58 <fetch_display_frame+0x358>
                    i2cMasterSend(panel_index, bytes_per_panel_frame, &FLASH[0]);
    2f4c:	80 2f       	mov	r24, r16
    2f4e:	60 91 9a 27 	lds	r22, 0x279A
    2f52:	a6 01       	movw	r20, r12
    2f54:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <i2cMasterSend>
            }
            
            display_flag = 0;  //clear the display flag
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
    2f58:	0f 5f       	subi	r16, 0xFF	; 255
    2f5a:	80 91 e4 24 	lds	r24, 0x24E4
    2f5e:	80 17       	cp	r24, r16
    2f60:	08 f4       	brcc	.+2      	; 0x2f64 <fetch_display_frame+0x364>
    2f62:	75 c0       	rjmp	.+234    	; 0x304e <fetch_display_frame+0x44e>
                for(j = 0;j < bytes_per_panel_frame;j++){
    2f64:	90 91 9a 27 	lds	r25, 0x279A
    2f68:	d3 01       	movw	r26, r6
    2f6a:	ae 0d       	add	r26, r14
    2f6c:	bf 1d       	adc	r27, r15
    2f6e:	f6 01       	movw	r30, r12
    2f70:	ff ce       	rjmp	.-514    	; 0x2d70 <fetch_display_frame+0x170>
                    i2cMasterSend(panel_index, bytes_per_panel_frame, &FLASH[0]);
                }
            } //end of for all panels loop
        }
        else {
            if (quiet_mode_on == 0){
    2f72:	80 91 f3 24 	lds	r24, 0x24F3
    2f76:	88 23       	and	r24, r24
    2f78:	09 f0       	breq	.+2      	; 0x2f7c <fetch_display_frame+0x37c>
    2f7a:	69 c0       	rjmp	.+210    	; 0x304e <fetch_display_frame+0x44e>
                xputs(PSTR("Error in f_read in fetch_display_frame!\n"));
    2f7c:	81 e3       	ldi	r24, 0x31	; 49
    2f7e:	97 e0       	ldi	r25, 0x07	; 7
    2f80:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
                xprintf(PSTR("RES = %u, f_num= %u, cnt= %u\n"), res, f_num, cnt);
    2f84:	ad b7       	in	r26, 0x3d	; 61
    2f86:	be b7       	in	r27, 0x3e	; 62
    2f88:	18 97       	sbiw	r26, 0x08	; 8
    2f8a:	ad bf       	out	0x3d, r26	; 61
    2f8c:	be bf       	out	0x3e, r27	; 62
    2f8e:	ed b7       	in	r30, 0x3d	; 61
    2f90:	fe b7       	in	r31, 0x3e	; 62
    2f92:	31 96       	adiw	r30, 0x01	; 1
    2f94:	83 e1       	ldi	r24, 0x13	; 19
    2f96:	97 e0       	ldi	r25, 0x07	; 7
    2f98:	11 96       	adiw	r26, 0x01	; 1
    2f9a:	8d 93       	st	X+, r24
    2f9c:	9c 93       	st	X, r25
    2f9e:	12 97       	sbiw	r26, 0x02	; 2
    2fa0:	02 83       	std	Z+2, r16	; 0x02
    2fa2:	13 82       	std	Z+3, r1	; 0x03
    2fa4:	84 82       	std	Z+4, r8	; 0x04
    2fa6:	95 82       	std	Z+5, r9	; 0x05
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	9a 81       	ldd	r25, Y+2	; 0x02
    2fac:	86 83       	std	Z+6, r24	; 0x06
    2fae:	97 83       	std	Z+7, r25	; 0x07
    2fb0:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    2fb4:	8d b7       	in	r24, 0x3d	; 61
    2fb6:	9e b7       	in	r25, 0x3e	; 62
    2fb8:	08 96       	adiw	r24, 0x08	; 8
    2fba:	47 c0       	rjmp	.+142    	; 0x304a <fetch_display_frame+0x44a>
            }
        }
    } else {
        //SREG = sreg;
        if (func_ID_X != 0)
    2fbc:	80 91 f4 24 	lds	r24, 0x24F4
    2fc0:	90 91 f5 24 	lds	r25, 0x24F5
    2fc4:	89 2b       	or	r24, r25
    2fc6:	61 f0       	breq	.+24     	; 0x2fe0 <fetch_display_frame+0x3e0>
            Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);	//straigforward way to avoid fs reentrant
    2fc8:	40 91 9f 20 	lds	r20, 0x209F
    2fcc:	50 91 a0 20 	lds	r21, 0x20A0
    2fd0:	60 e0       	ldi	r22, 0x00	; 0
    2fd2:	70 e0       	ldi	r23, 0x00	; 0
    2fd4:	8d e3       	ldi	r24, 0x3D	; 61
    2fd6:	9b e0       	ldi	r25, 0x0B	; 11
    2fd8:	24 e0       	ldi	r18, 0x04	; 4
    2fda:	01 e0       	ldi	r16, 0x01	; 1
    2fdc:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
        
        if (func_ID_Y != 0)
    2fe0:	80 91 f6 24 	lds	r24, 0x24F6
    2fe4:	90 91 f7 24 	lds	r25, 0x24F7
    2fe8:	89 2b       	or	r24, r25
    2fea:	61 f0       	breq	.+24     	; 0x3004 <fetch_display_frame+0x404>
            Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);   //straigforward way to avoid fs reentrant
    2fec:	40 91 a1 20 	lds	r20, 0x20A1
    2ff0:	50 91 a2 20 	lds	r21, 0x20A2
    2ff4:	60 e0       	ldi	r22, 0x00	; 0
    2ff6:	70 e0       	ldi	r23, 0x00	; 0
    2ff8:	88 ef       	ldi	r24, 0xF8	; 248
    2ffa:	99 e0       	ldi	r25, 0x09	; 9
    2ffc:	25 e0       	ldi	r18, 0x05	; 5
    2ffe:	01 e0       	ldi	r16, 0x01	; 1
    3000:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
        
        if (quiet_mode_on == 0){
    3004:	80 91 f3 24 	lds	r24, 0x24F3
    3008:	88 23       	and	r24, r24
    300a:	09 f5       	brne	.+66     	; 0x304e <fetch_display_frame+0x44e>
            xputs(PSTR("Error in f_lseek in fetch_display_frame!\n"));
    300c:	89 ee       	ldi	r24, 0xE9	; 233
    300e:	96 e0       	ldi	r25, 0x06	; 6
    3010:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
            xprintf(PSTR("RES = %u, f_num= %u, offset = %lu\n"), res, f_num, offset);
    3014:	ad b7       	in	r26, 0x3d	; 61
    3016:	be b7       	in	r27, 0x3e	; 62
    3018:	1a 97       	sbiw	r26, 0x0a	; 10
    301a:	ad bf       	out	0x3d, r26	; 61
    301c:	be bf       	out	0x3e, r27	; 62
    301e:	ed b7       	in	r30, 0x3d	; 61
    3020:	fe b7       	in	r31, 0x3e	; 62
    3022:	31 96       	adiw	r30, 0x01	; 1
    3024:	86 ec       	ldi	r24, 0xC6	; 198
    3026:	96 e0       	ldi	r25, 0x06	; 6
    3028:	11 96       	adiw	r26, 0x01	; 1
    302a:	8d 93       	st	X+, r24
    302c:	9c 93       	st	X, r25
    302e:	12 97       	sbiw	r26, 0x02	; 2
    3030:	12 83       	std	Z+2, r17	; 0x02
    3032:	13 82       	std	Z+3, r1	; 0x03
    3034:	84 82       	std	Z+4, r8	; 0x04
    3036:	95 82       	std	Z+5, r9	; 0x05
    3038:	c6 82       	std	Z+6, r12	; 0x06
    303a:	d7 82       	std	Z+7, r13	; 0x07
    303c:	e0 86       	std	Z+8, r14	; 0x08
    303e:	f1 86       	std	Z+9, r15	; 0x09
    3040:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    3044:	8d b7       	in	r24, 0x3d	; 61
    3046:	9e b7       	in	r25, 0x3e	; 62
    3048:	0a 96       	adiw	r24, 0x0a	; 10
    304a:	8d bf       	out	0x3d, r24	; 61
    304c:	9e bf       	out	0x3e, r25	; 62
        }
    }
    
    //update analog out
    if (x_mode != 5){
    304e:	80 91 99 27 	lds	r24, 0x2799
    3052:	85 30       	cpi	r24, 0x05	; 5
    3054:	e9 f0       	breq	.+58     	; 0x3090 <fetch_display_frame+0x490>
        X_dac_val = (index_x*65535)/x_num;
    3056:	60 91 9b 27 	lds	r22, 0x279B
    305a:	70 91 9c 27 	lds	r23, 0x279C
        analogWrite(0, X_dac_val>>5); // make it a value in the range 0 - 2047 (0 - 5V)
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	2f ef       	ldi	r18, 0xFF	; 255
    3064:	3f ef       	ldi	r19, 0xFF	; 255
    3066:	40 e0       	ldi	r20, 0x00	; 0
    3068:	50 e0       	ldi	r21, 0x00	; 0
    306a:	0e 94 25 57 	call	0xae4a	; 0xae4a <__mulsi3>
    306e:	20 91 05 28 	lds	r18, 0x2805
    3072:	30 91 06 28 	lds	r19, 0x2806
    3076:	40 e0       	ldi	r20, 0x00	; 0
    3078:	50 e0       	ldi	r21, 0x00	; 0
    307a:	0e 94 8d 57 	call	0xaf1a	; 0xaf1a <__divmodsi4>
    307e:	55 e0       	ldi	r21, 0x05	; 5
    3080:	36 95       	lsr	r19
    3082:	27 95       	ror	r18
    3084:	5a 95       	dec	r21
    3086:	e1 f7       	brne	.-8      	; 0x3080 <fetch_display_frame+0x480>
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	b9 01       	movw	r22, r18
    308c:	0e 94 87 21 	call	0x430e	; 0x430e <analogWrite>
    }
    
    if (y_mode != 5){
    3090:	80 91 e3 27 	lds	r24, 0x27E3
    3094:	85 30       	cpi	r24, 0x05	; 5
    3096:	e9 f0       	breq	.+58     	; 0x30d2 <fetch_display_frame+0x4d2>
        Y_dac_val = (index_y*65535)/y_num;
    3098:	60 91 50 29 	lds	r22, 0x2950
    309c:	70 91 51 29 	lds	r23, 0x2951
        
        
        analogWrite(1, Y_dac_val>>5); // make it a value in the range 0 - 2047 (0 - 5V)
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	2f ef       	ldi	r18, 0xFF	; 255
    30a6:	3f ef       	ldi	r19, 0xFF	; 255
    30a8:	40 e0       	ldi	r20, 0x00	; 0
    30aa:	50 e0       	ldi	r21, 0x00	; 0
    30ac:	0e 94 25 57 	call	0xae4a	; 0xae4a <__mulsi3>
    30b0:	20 91 a6 25 	lds	r18, 0x25A6
    30b4:	30 91 a7 25 	lds	r19, 0x25A7
    30b8:	40 e0       	ldi	r20, 0x00	; 0
    30ba:	50 e0       	ldi	r21, 0x00	; 0
    30bc:	0e 94 8d 57 	call	0xaf1a	; 0xaf1a <__divmodsi4>
    30c0:	45 e0       	ldi	r20, 0x05	; 5
    30c2:	36 95       	lsr	r19
    30c4:	27 95       	ror	r18
    30c6:	4a 95       	dec	r20
    30c8:	e1 f7       	brne	.-8      	; 0x30c2 <fetch_display_frame+0x4c2>
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	b9 01       	movw	r22, r18
    30ce:	0e 94 87 21 	call	0x430e	; 0x430e <analogWrite>
    }
	
	  //also update the output lines for quadrant-type learning patterns
  if (Laser_active == 1)
    30d2:	80 91 e2 24 	lds	r24, 0x24E2
    30d6:	81 30       	cpi	r24, 0x01	; 1
    30d8:	81 f4       	brne	.+32     	; 0x30fa <fetch_display_frame+0x4fa>
  {
    if (laserPattern[index_x] == 0) 
    30da:	e0 91 9b 27 	lds	r30, 0x279B
    30de:	f0 91 9c 27 	lds	r31, 0x279C
    30e2:	ea 57       	subi	r30, 0x7A	; 122
    30e4:	f9 4d       	sbci	r31, 0xD9	; 217
    30e6:	80 81       	ld	r24, Z
    30e8:	88 23       	and	r24, r24
    30ea:	19 f4       	brne	.+6      	; 0x30f2 <fetch_display_frame+0x4f2>
      digitalWrite(2, LOW);  // turn on laser
    30ec:	82 e0       	ldi	r24, 0x02	; 2
    30ee:	60 e0       	ldi	r22, 0x00	; 0
    30f0:	02 c0       	rjmp	.+4      	; 0x30f6 <fetch_display_frame+0x4f6>
    else
      digitalWrite(2, HIGH);   // turn off laser
    30f2:	82 e0       	ldi	r24, 0x02	; 2
    30f4:	61 e0       	ldi	r22, 0x01	; 1
    30f6:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <digitalWrite>
  }  
	
    digitalWrite(1, LOW); // set line low at end of frame write
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	60 e0       	ldi	r22, 0x00	; 0
    30fe:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <digitalWrite>
}
    3102:	4d be       	out	0x3d, r4	; 61
    3104:	5e be       	out	0x3e, r5	; 62
    3106:	a6 96       	adiw	r28, 0x26	; 38
    3108:	e0 e1       	ldi	r30, 0x10	; 16
    310a:	0c 94 c6 57 	jmp	0xaf8c	; 0xaf8c <__epilogue_restores__+0x4>

0000310e <benchmark_pattern>:
    else{
        xputs(PSTR("Cannot find the hardware config file on the SD card.\n"));
    }
}

void benchmark_pattern(void) { // this function assumes that a pattern has been set
    310e:	a0 e0       	ldi	r26, 0x00	; 0
    3110:	b0 e0       	ldi	r27, 0x00	; 0
    3112:	ed e8       	ldi	r30, 0x8D	; 141
    3114:	f8 e1       	ldi	r31, 0x18	; 24
    3116:	0c 94 b0 57 	jmp	0xaf60	; 0xaf60 <__prologue_saves__+0x10>
    uint16_t num_frames;
    uint16_t frame_ind;
    uint32_t bench_time;
    uint16_t frame_rate;
    
    Stop = 1;
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	80 93 9c 20 	sts	0x209C, r24
    num_frames = x_num*y_num;
    3120:	20 91 a6 25 	lds	r18, 0x25A6
    3124:	30 91 a7 25 	lds	r19, 0x25A7
    3128:	80 91 05 28 	lds	r24, 0x2805
    312c:	90 91 06 28 	lds	r25, 0x2806
    3130:	28 9f       	mul	r18, r24
    3132:	50 01       	movw	r10, r0
    3134:	29 9f       	mul	r18, r25
    3136:	b0 0c       	add	r11, r0
    3138:	38 9f       	mul	r19, r24
    313a:	b0 0c       	add	r11, r0
    313c:	11 24       	eor	r1, r1
    
    timer_coarse_tic();
    313e:	0e 94 fa 54 	call	0xa9f4	; 0xa9f4 <timer_coarse_tic>
    3142:	c0 e0       	ldi	r28, 0x00	; 0
    3144:	d0 e0       	ldi	r29, 0x00	; 0
    3146:	04 c0       	rjmp	.+8      	; 0x3150 <benchmark_pattern+0x42>
    
    for(frame_ind = 0; frame_ind < num_frames; frame_ind++)
        fetch_display_frame(frame_ind);
    3148:	ce 01       	movw	r24, r28
    314a:	0e 94 00 16 	call	0x2c00	; 0x2c00 <fetch_display_frame>
    Stop = 1;
    num_frames = x_num*y_num;
    
    timer_coarse_tic();
    
    for(frame_ind = 0; frame_ind < num_frames; frame_ind++)
    314e:	21 96       	adiw	r28, 0x01	; 1
    3150:	ca 15       	cp	r28, r10
    3152:	db 05       	cpc	r29, r11
    3154:	c8 f3       	brcs	.-14     	; 0x3148 <benchmark_pattern+0x3a>
        fetch_display_frame(frame_ind);
    
    bench_time = timer_coarse_toc();
    3156:	0e 94 0f 55 	call	0xaa1e	; 0xaa1e <timer_coarse_toc>
    315a:	7b 01       	movw	r14, r22
    315c:	8c 01       	movw	r16, r24
    frame_rate = ((uint32_t)num_frames*1000)/bench_time;
    xprintf(PSTR(" bench_time = %lu ms, frame_rate = %u\n"), bench_time, frame_rate);
    315e:	8d b7       	in	r24, 0x3d	; 61
    3160:	9e b7       	in	r25, 0x3e	; 62
    3162:	08 97       	sbiw	r24, 0x08	; 8
    3164:	8d bf       	out	0x3d, r24	; 61
    3166:	9e bf       	out	0x3e, r25	; 62
    3168:	cd b6       	in	r12, 0x3d	; 61
    316a:	de b6       	in	r13, 0x3e	; 62
    316c:	08 94       	sec
    316e:	c1 1c       	adc	r12, r1
    3170:	d1 1c       	adc	r13, r1
    3172:	80 e9       	ldi	r24, 0x90	; 144
    3174:	95 e0       	ldi	r25, 0x05	; 5
    3176:	ed b7       	in	r30, 0x3d	; 61
    3178:	fe b7       	in	r31, 0x3e	; 62
    317a:	81 83       	std	Z+1, r24	; 0x01
    317c:	92 83       	std	Z+2, r25	; 0x02
    317e:	f6 01       	movw	r30, r12
    3180:	e2 82       	std	Z+2, r14	; 0x02
    3182:	f3 82       	std	Z+3, r15	; 0x03
    3184:	04 83       	std	Z+4, r16	; 0x04
    3186:	15 83       	std	Z+5, r17	; 0x05
    3188:	b5 01       	movw	r22, r10
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	28 ee       	ldi	r18, 0xE8	; 232
    3190:	33 e0       	ldi	r19, 0x03	; 3
    3192:	40 e0       	ldi	r20, 0x00	; 0
    3194:	50 e0       	ldi	r21, 0x00	; 0
    3196:	0e 94 25 57 	call	0xae4a	; 0xae4a <__mulsi3>
    319a:	a8 01       	movw	r20, r16
    319c:	97 01       	movw	r18, r14
    319e:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    31a2:	f6 01       	movw	r30, r12
    31a4:	26 83       	std	Z+6, r18	; 0x06
    31a6:	37 83       	std	Z+7, r19	; 0x07
    31a8:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    31ac:	8d b7       	in	r24, 0x3d	; 61
    31ae:	9e b7       	in	r25, 0x3e	; 62
    31b0:	08 96       	adiw	r24, 0x08	; 8
    31b2:	8d bf       	out	0x3d, r24	; 61
    31b4:	9e bf       	out	0x3e, r25	; 62
}
    31b6:	cd b7       	in	r28, 0x3d	; 61
    31b8:	de b7       	in	r29, 0x3e	; 62
    31ba:	ea e0       	ldi	r30, 0x0A	; 10
    31bc:	0c 94 cc 57 	jmp	0xaf98	; 0xaf98 <__epilogue_restores__+0x10>

000031c0 <set_pattern>:
    digitalToggle(3); //toggle digital 3 to trigger camera
}



void set_pattern(uint8_t pat_num) {
    31c0:	a2 e0       	ldi	r26, 0x02	; 2
    31c2:	b2 e0       	ldi	r27, 0x02	; 2
    31c4:	e6 ee       	ldi	r30, 0xE6	; 230
    31c6:	f8 e1       	ldi	r31, 0x18	; 24
    31c8:	0c 94 b6 57 	jmp	0xaf6c	; 0xaf6c <__prologue_saves__+0x1c>
    31cc:	18 2f       	mov	r17, r24
    uint16_t cnt;
    static uint8_t str[12];
    uint8_t  pattDataBuff[512];
    uint8_t res;
    
    if (pat_num < 10)
    31ce:	8a 30       	cpi	r24, 0x0A	; 10
    31d0:	80 f4       	brcc	.+32     	; 0x31f2 <set_pattern+0x32>
        sprintf(str, "pat000%d.pat\0", pat_num);
    31d2:	00 d0       	rcall	.+0      	; 0x31d4 <set_pattern+0x14>
    31d4:	00 d0       	rcall	.+0      	; 0x31d6 <set_pattern+0x16>
    31d6:	ed b7       	in	r30, 0x3d	; 61
    31d8:	fe b7       	in	r31, 0x3e	; 62
    31da:	31 96       	adiw	r30, 0x01	; 1
    31dc:	84 e0       	ldi	r24, 0x04	; 4
    31de:	95 e2       	ldi	r25, 0x25	; 37
    31e0:	ad b7       	in	r26, 0x3d	; 61
    31e2:	be b7       	in	r27, 0x3e	; 62
    31e4:	11 96       	adiw	r26, 0x01	; 1
    31e6:	8d 93       	st	X+, r24
    31e8:	9c 93       	st	X, r25
    31ea:	12 97       	sbiw	r26, 0x02	; 2
    31ec:	85 e7       	ldi	r24, 0x75	; 117
    31ee:	90 e2       	ldi	r25, 0x20	; 32
    31f0:	1f c0       	rjmp	.+62     	; 0x3230 <set_pattern+0x70>
    31f2:	84 e0       	ldi	r24, 0x04	; 4
    31f4:	95 e2       	ldi	r25, 0x25	; 37
    else if (pat_num < 100)
    31f6:	14 36       	cpi	r17, 0x64	; 100
    31f8:	70 f4       	brcc	.+28     	; 0x3216 <set_pattern+0x56>
        sprintf(str, "pat00%d.pat\0", pat_num);
    31fa:	00 d0       	rcall	.+0      	; 0x31fc <set_pattern+0x3c>
    31fc:	00 d0       	rcall	.+0      	; 0x31fe <set_pattern+0x3e>
    31fe:	ed b7       	in	r30, 0x3d	; 61
    3200:	fe b7       	in	r31, 0x3e	; 62
    3202:	31 96       	adiw	r30, 0x01	; 1
    3204:	ad b7       	in	r26, 0x3d	; 61
    3206:	be b7       	in	r27, 0x3e	; 62
    3208:	11 96       	adiw	r26, 0x01	; 1
    320a:	8d 93       	st	X+, r24
    320c:	9c 93       	st	X, r25
    320e:	12 97       	sbiw	r26, 0x02	; 2
    3210:	83 e8       	ldi	r24, 0x83	; 131
    3212:	90 e2       	ldi	r25, 0x20	; 32
    3214:	0d c0       	rjmp	.+26     	; 0x3230 <set_pattern+0x70>
    else if (pat_num < 1000)
        sprintf(str, "pat0%d.pat\0", pat_num);
    3216:	00 d0       	rcall	.+0      	; 0x3218 <set_pattern+0x58>
    3218:	00 d0       	rcall	.+0      	; 0x321a <set_pattern+0x5a>
    321a:	ed b7       	in	r30, 0x3d	; 61
    321c:	fe b7       	in	r31, 0x3e	; 62
    321e:	31 96       	adiw	r30, 0x01	; 1
    3220:	ad b7       	in	r26, 0x3d	; 61
    3222:	be b7       	in	r27, 0x3e	; 62
    3224:	11 96       	adiw	r26, 0x01	; 1
    3226:	8d 93       	st	X+, r24
    3228:	9c 93       	st	X, r25
    322a:	12 97       	sbiw	r26, 0x02	; 2
    322c:	80 e9       	ldi	r24, 0x90	; 144
    322e:	90 e2       	ldi	r25, 0x20	; 32
    3230:	82 83       	std	Z+2, r24	; 0x02
    3232:	93 83       	std	Z+3, r25	; 0x03
    3234:	14 83       	std	Z+4, r17	; 0x04
    3236:	15 82       	std	Z+5, r1	; 0x05
    3238:	0e 94 08 5a 	call	0xb410	; 0xb410 <sprintf>
    323c:	8d b7       	in	r24, 0x3d	; 61
    323e:	9e b7       	in	r25, 0x3e	; 62
    3240:	06 96       	adiw	r24, 0x06	; 6
    3242:	8d bf       	out	0x3d, r24	; 61
    3244:	9e bf       	out	0x3e, r25	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("pat_num is too big.\n"));
    
    
	Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0); //straigforward way to avoid fs reentrant
    3246:	40 91 9f 20 	lds	r20, 0x209F
    324a:	50 91 a0 20 	lds	r21, 0x20A0
    324e:	60 e0       	ldi	r22, 0x00	; 0
    3250:	70 e0       	ldi	r23, 0x00	; 0
    3252:	8d e3       	ldi	r24, 0x3D	; 61
    3254:	9b e0       	ldi	r25, 0x0B	; 11
    3256:	24 e0       	ldi	r18, 0x04	; 4
    3258:	00 e0       	ldi	r16, 0x00	; 0
    325a:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
    Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //straigforward way to avoid fs reentrant
    325e:	40 91 a1 20 	lds	r20, 0x20A1
    3262:	50 91 a2 20 	lds	r21, 0x20A2
    3266:	60 e0       	ldi	r22, 0x00	; 0
    3268:	70 e0       	ldi	r23, 0x00	; 0
    326a:	88 ef       	ldi	r24, 0xF8	; 248
    326c:	99 e0       	ldi	r25, 0x09	; 9
    326e:	25 e0       	ldi	r18, 0x05	; 5
    3270:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
	
    res = f_close(&file1);
    3274:	82 e5       	ldi	r24, 0x52	; 82
    3276:	99 e2       	ldi	r25, 0x29	; 41
    3278:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <f_close>
    
    res = f_open(&file1, str, FA_OPEN_EXISTING | FA_READ);
    327c:	82 e5       	ldi	r24, 0x52	; 82
    327e:	99 e2       	ldi	r25, 0x29	; 41
    3280:	64 e0       	ldi	r22, 0x04	; 4
    3282:	75 e2       	ldi	r23, 0x25	; 37
    3284:	41 e0       	ldi	r20, 0x01	; 1
    3286:	0e 94 17 4c 	call	0x982e	; 0x982e <f_open>
    if (res == FR_OK) {
    328a:	88 23       	and	r24, r24
    328c:	09 f0       	breq	.+2      	; 0x3290 <set_pattern+0xd0>
    328e:	cb c0       	rjmp	.+406    	; 0x3426 <set_pattern+0x266>
        res = f_read(&file1, pattDataBuff, 512, &cnt); // read the 10 byte test header info block
    3290:	82 e5       	ldi	r24, 0x52	; 82
    3292:	99 e2       	ldi	r25, 0x29	; 41
    3294:	be 01       	movw	r22, r28
    3296:	6d 5f       	subi	r22, 0xFD	; 253
    3298:	7f 4f       	sbci	r23, 0xFF	; 255
    329a:	40 e0       	ldi	r20, 0x00	; 0
    329c:	52 e0       	ldi	r21, 0x02	; 2
    329e:	9e 01       	movw	r18, r28
    32a0:	2f 5f       	subi	r18, 0xFF	; 255
    32a2:	3f 4f       	sbci	r19, 0xFF	; 255
    32a4:	0e 94 2e 4d 	call	0x9a5c	; 0x9a5c <f_read>
        if ((res == FR_OK) && (cnt == 512)) {
    32a8:	88 23       	and	r24, r24
    32aa:	09 f0       	breq	.+2      	; 0x32ae <set_pattern+0xee>
    32ac:	b5 c0       	rjmp	.+362    	; 0x3418 <set_pattern+0x258>
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	9a 81       	ldd	r25, Y+2	; 0x02
    32b2:	80 50       	subi	r24, 0x00	; 0
    32b4:	92 40       	sbci	r25, 0x02	; 2
    32b6:	09 f0       	breq	.+2      	; 0x32ba <set_pattern+0xfa>
    32b8:	af c0       	rjmp	.+350    	; 0x3418 <set_pattern+0x258>
		    if (func_ID_X != 0)
    32ba:	80 91 f4 24 	lds	r24, 0x24F4
    32be:	90 91 f5 24 	lds	r25, 0x24F5
    32c2:	89 2b       	or	r24, r25
    32c4:	61 f0       	breq	.+24     	; 0x32de <set_pattern+0x11e>
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);  //straigforward way to avoid fs reentrant
    32c6:	40 91 9f 20 	lds	r20, 0x209F
    32ca:	50 91 a0 20 	lds	r21, 0x20A0
    32ce:	60 e0       	ldi	r22, 0x00	; 0
    32d0:	70 e0       	ldi	r23, 0x00	; 0
    32d2:	8d e3       	ldi	r24, 0x3D	; 61
    32d4:	9b e0       	ldi	r25, 0x0B	; 11
    32d6:	24 e0       	ldi	r18, 0x04	; 4
    32d8:	01 e0       	ldi	r16, 0x01	; 1
    32da:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
        
			if (func_ID_Y != 0)
    32de:	80 91 f6 24 	lds	r24, 0x24F6
    32e2:	90 91 f7 24 	lds	r25, 0x24F7
    32e6:	89 2b       	or	r24, r25
    32e8:	61 f0       	breq	.+24     	; 0x3302 <set_pattern+0x142>
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); //straigforward way to avoid fs reentrant
    32ea:	40 91 a1 20 	lds	r20, 0x20A1
    32ee:	50 91 a2 20 	lds	r21, 0x20A2
    32f2:	60 e0       	ldi	r22, 0x00	; 0
    32f4:	70 e0       	ldi	r23, 0x00	; 0
    32f6:	88 ef       	ldi	r24, 0xF8	; 248
    32f8:	99 e0       	ldi	r25, 0x09	; 9
    32fa:	25 e0       	ldi	r18, 0x05	; 5
    32fc:	01 e0       	ldi	r16, 0x01	; 1
    32fe:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
			
            // get the test header info
            ((uint8_t*)&x_num)[0] = pattDataBuff[0];
    3302:	8b 81       	ldd	r24, Y+3	; 0x03
    3304:	80 93 05 28 	sts	0x2805, r24
            ((uint8_t*)&x_num)[1] = pattDataBuff[1];
    3308:	8c 81       	ldd	r24, Y+4	; 0x04
    330a:	80 93 06 28 	sts	0x2806, r24
            ((uint8_t*)&y_num)[0] = pattDataBuff[2];
    330e:	8d 81       	ldd	r24, Y+5	; 0x05
    3310:	80 93 a6 25 	sts	0x25A6, r24
            ((uint8_t*)&y_num)[1] = pattDataBuff[3];
    3314:	8e 81       	ldd	r24, Y+6	; 0x06
    3316:	80 93 a7 25 	sts	0x25A7, r24
            num_panels = pattDataBuff[4];
    331a:	8f 81       	ldd	r24, Y+7	; 0x07
    331c:	80 93 e4 24 	sts	0x24E4, r24
            gs_value = pattDataBuff[5];   //11, 12, 13, or 14 means use row compression
    3320:	98 85       	ldd	r25, Y+8	; 0x08
    3322:	90 93 17 27 	sts	0x2717, r25
            
            
            num_frames = x_num * y_num;
            if ((gs_value >= 11) & (gs_value <= 14)) {
    3326:	89 2f       	mov	r24, r25
    3328:	8b 50       	subi	r24, 0x0B	; 11
    332a:	84 30       	cpi	r24, 0x04	; 4
    332c:	48 f4       	brcc	.+18     	; 0x3340 <set_pattern+0x180>
                gs_value = gs_value - 10;
    332e:	9a 50       	subi	r25, 0x0A	; 10
    3330:	90 93 17 27 	sts	0x2717, r25
                row_compress = 1;
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	80 93 aa 25 	sts	0x25AA, r24
                bytes_per_panel_frame = gs_value;
    333a:	90 93 9a 27 	sts	0x279A, r25
    333e:	0b c0       	rjmp	.+22     	; 0x3356 <set_pattern+0x196>
            }
            else {
                row_compress = 0;
    3340:	10 92 aa 25 	sts	0x25AA, r1
                bytes_per_panel_frame = gs_value * 8;
    3344:	89 2f       	mov	r24, r25
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	f3 e0       	ldi	r31, 0x03	; 3
    334a:	88 0f       	add	r24, r24
    334c:	99 1f       	adc	r25, r25
    334e:	fa 95       	dec	r31
    3350:	e1 f7       	brne	.-8      	; 0x334a <set_pattern+0x18a>
    3352:	80 93 9a 27 	sts	0x279A, r24
            }
            index_x = index_y = 0;
    3356:	10 92 50 29 	sts	0x2950, r1
    335a:	10 92 51 29 	sts	0x2951, r1
    335e:	80 91 50 29 	lds	r24, 0x2950
    3362:	90 91 51 29 	lds	r25, 0x2951
    3366:	80 93 9b 27 	sts	0x279B, r24
    336a:	90 93 9c 27 	sts	0x279C, r25
            frame_num = 0;
    336e:	10 92 e5 24 	sts	0x24E5, r1
    3372:	10 92 e6 24 	sts	0x24E6, r1
            Stop = 1;
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	80 93 9c 20 	sts	0x209C, r24
            display_flag = 0;  //clear the display flag
    337c:	10 92 e0 24 	sts	0x24E0, r1
            if (quiet_mode_on == 0){
    3380:	80 91 f3 24 	lds	r24, 0x24F3
    3384:	88 23       	and	r24, r24
    3386:	09 f0       	breq	.+2      	; 0x338a <set_pattern+0x1ca>
    3388:	40 c0       	rjmp	.+128    	; 0x340a <set_pattern+0x24a>
                xprintf(PSTR("Setting pattern %u:\n"), pat_num);
    338a:	00 d0       	rcall	.+0      	; 0x338c <set_pattern+0x1cc>
    338c:	0f 92       	push	r0
    338e:	ed b7       	in	r30, 0x3d	; 61
    3390:	fe b7       	in	r31, 0x3e	; 62
    3392:	31 96       	adiw	r30, 0x01	; 1
    3394:	81 eb       	ldi	r24, 0xB1	; 177
    3396:	96 e0       	ldi	r25, 0x06	; 6
    3398:	ad b7       	in	r26, 0x3d	; 61
    339a:	be b7       	in	r27, 0x3e	; 62
    339c:	11 96       	adiw	r26, 0x01	; 1
    339e:	8d 93       	st	X+, r24
    33a0:	9c 93       	st	X, r25
    33a2:	12 97       	sbiw	r26, 0x02	; 2
    33a4:	12 83       	std	Z+2, r17	; 0x02
    33a6:	13 82       	std	Z+3, r1	; 0x03
    33a8:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
                xprintf(PSTR("  x_num = %u\n  y_num = %u\n  num_panels = %u\n  gs_value = %u\n row_compression = %u\n"),
    33ac:	8d b7       	in	r24, 0x3d	; 61
    33ae:	9e b7       	in	r25, 0x3e	; 62
    33b0:	08 97       	sbiw	r24, 0x08	; 8
    33b2:	8d bf       	out	0x3d, r24	; 61
    33b4:	9e bf       	out	0x3e, r25	; 62
    33b6:	ed b7       	in	r30, 0x3d	; 61
    33b8:	fe b7       	in	r31, 0x3e	; 62
    33ba:	31 96       	adiw	r30, 0x01	; 1
    33bc:	8e e5       	ldi	r24, 0x5E	; 94
    33be:	96 e0       	ldi	r25, 0x06	; 6
    33c0:	ad b7       	in	r26, 0x3d	; 61
    33c2:	be b7       	in	r27, 0x3e	; 62
    33c4:	11 96       	adiw	r26, 0x01	; 1
    33c6:	8d 93       	st	X+, r24
    33c8:	9c 93       	st	X, r25
    33ca:	12 97       	sbiw	r26, 0x02	; 2
    33cc:	80 91 05 28 	lds	r24, 0x2805
    33d0:	90 91 06 28 	lds	r25, 0x2806
    33d4:	82 83       	std	Z+2, r24	; 0x02
    33d6:	93 83       	std	Z+3, r25	; 0x03
    33d8:	80 91 a6 25 	lds	r24, 0x25A6
    33dc:	90 91 a7 25 	lds	r25, 0x25A7
    33e0:	84 83       	std	Z+4, r24	; 0x04
    33e2:	95 83       	std	Z+5, r25	; 0x05
    33e4:	80 91 e4 24 	lds	r24, 0x24E4
    33e8:	86 83       	std	Z+6, r24	; 0x06
    33ea:	17 82       	std	Z+7, r1	; 0x07
    33ec:	80 91 17 27 	lds	r24, 0x2717
    33f0:	80 87       	std	Z+8, r24	; 0x08
    33f2:	11 86       	std	Z+9, r1	; 0x09
    33f4:	80 91 aa 25 	lds	r24, 0x25AA
    33f8:	82 87       	std	Z+10, r24	; 0x0a
    33fa:	13 86       	std	Z+11, r1	; 0x0b
    33fc:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    3400:	8d b7       	in	r24, 0x3d	; 61
    3402:	9e b7       	in	r25, 0x3e	; 62
    3404:	0c 96       	adiw	r24, 0x0c	; 12
    3406:	8d bf       	out	0x3d, r24	; 61
    3408:	9e bf       	out	0x3e, r25	; 62
                        x_num, y_num, num_panels, gs_value, row_compress);
            }
            fetch_display_frame(frame_num);
    340a:	80 91 e5 24 	lds	r24, 0x24E5
    340e:	90 91 e6 24 	lds	r25, 0x24E6
    3412:	0e 94 00 16 	call	0x2c00	; 0x2c00 <fetch_display_frame>
    3416:	0f c0       	rjmp	.+30     	; 0x3436 <set_pattern+0x276>
        } else {
            if (quiet_mode_on == 0)
    3418:	80 91 f3 24 	lds	r24, 0x24F3
    341c:	88 23       	and	r24, r24
    341e:	59 f4       	brne	.+22     	; 0x3436 <set_pattern+0x276>
                xputs(PSTR("Error reading in pattern file\n"));
    3420:	8f e3       	ldi	r24, 0x3F	; 63
    3422:	96 e0       	ldi	r25, 0x06	; 6
    3424:	06 c0       	rjmp	.+12     	; 0x3432 <set_pattern+0x272>
        }
    } else {
        if (quiet_mode_on == 0)
    3426:	80 91 f3 24 	lds	r24, 0x24F3
    342a:	88 23       	and	r24, r24
    342c:	21 f4       	brne	.+8      	; 0x3436 <set_pattern+0x276>
            xputs(PSTR("Error opening pattern file\n"));
    342e:	83 e2       	ldi	r24, 0x23	; 35
    3430:	96 e0       	ldi	r25, 0x06	; 6
    3432:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    }
}
    3436:	ce 5f       	subi	r28, 0xFE	; 254
    3438:	dd 4f       	sbci	r29, 0xFD	; 253
    343a:	e4 e0       	ldi	r30, 0x04	; 4
    343c:	0c 94 d2 57 	jmp	0xafa4	; 0xafa4 <__epilogue_restores__+0x1c>

00003440 <handle_message_length_5>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[3]);
    }
}

void handle_message_length_5(uint8_t *msg_buffer) {
    3440:	fc 01       	movw	r30, r24
    switch(msg_buffer[0]) {
    3442:	80 81       	ld	r24, Z
    3444:	80 37       	cpi	r24, 0x70	; 112
    3446:	21 f0       	breq	.+8      	; 0x3450 <handle_message_length_5+0x10>
    3448:	81 37       	cpi	r24, 0x71	; 113
    344a:	09 f0       	breq	.+2      	; 0x344e <handle_message_length_5+0xe>
    344c:	81 c0       	rjmp	.+258    	; 0x3550 <handle_message_length_5+0x110>
    344e:	73 c0       	rjmp	.+230    	; 0x3536 <handle_message_length_5+0xf6>
        case 0x70:   //put in a bunch of type casts, because of mysterious error dealling with frame index above 128.
            //'set_position'
            index_x = (uint8_t)msg_buffer[1] + (256*(uint8_t)msg_buffer[2]);
    3450:	92 81       	ldd	r25, Z+2	; 0x02
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	21 81       	ldd	r18, Z+1	; 0x01
    3456:	82 0f       	add	r24, r18
    3458:	91 1d       	adc	r25, r1
    345a:	80 93 9b 27 	sts	0x279B, r24
    345e:	90 93 9c 27 	sts	0x279C, r25
            index_y = (uint8_t)msg_buffer[3] + (256*(uint8_t)msg_buffer[4]);
    3462:	94 81       	ldd	r25, Z+4	; 0x04
    3464:	80 e0       	ldi	r24, 0x00	; 0
    3466:	23 81       	ldd	r18, Z+3	; 0x03
    3468:	82 0f       	add	r24, r18
    346a:	91 1d       	adc	r25, r1
    346c:	80 93 50 29 	sts	0x2950, r24
    3470:	90 93 51 29 	sts	0x2951, r25
            
            X_pos_index = index_x; // these only used during position func. control mode, but
    3474:	80 91 9b 27 	lds	r24, 0x279B
    3478:	90 91 9c 27 	lds	r25, 0x279C
    347c:	80 93 e6 26 	sts	0x26E6, r24
    3480:	90 93 e7 26 	sts	0x26E7, r25
            Y_pos_index = index_y; //update here should not slow things down much and no need for sep. function.
    3484:	80 91 50 29 	lds	r24, 0x2950
    3488:	90 91 51 29 	lds	r25, 0x2951
    348c:	80 93 73 26 	sts	0x2673, r24
    3490:	90 93 74 26 	sts	0x2674, r25
            frame_num = index_y* x_num + index_x;
    3494:	20 91 50 29 	lds	r18, 0x2950
    3498:	30 91 51 29 	lds	r19, 0x2951
    349c:	40 91 9b 27 	lds	r20, 0x279B
    34a0:	50 91 9c 27 	lds	r21, 0x279C
    34a4:	80 91 05 28 	lds	r24, 0x2805
    34a8:	90 91 06 28 	lds	r25, 0x2806
    34ac:	bc 01       	movw	r22, r24
    34ae:	26 9f       	mul	r18, r22
    34b0:	c0 01       	movw	r24, r0
    34b2:	27 9f       	mul	r18, r23
    34b4:	90 0d       	add	r25, r0
    34b6:	36 9f       	mul	r19, r22
    34b8:	90 0d       	add	r25, r0
    34ba:	11 24       	eor	r1, r1
    34bc:	84 0f       	add	r24, r20
    34be:	95 1f       	adc	r25, r21
    34c0:	80 93 e5 24 	sts	0x24E5, r24
    34c4:	90 93 e6 24 	sts	0x24E6, r25
            display_flag = 0;  //clear the display flag
    34c8:	10 92 e0 24 	sts	0x24E0, r1
            if (quiet_mode_on == 0)
    34cc:	80 91 f3 24 	lds	r24, 0x24F3
    34d0:	88 23       	and	r24, r24
    34d2:	51 f5       	brne	.+84     	; 0x3528 <handle_message_length_5+0xe8>
                xprintf(PSTR("set_position: index_x= %u,  index_y= %u, and frame_num= %u\n"), index_x, index_y, frame_num);
    34d4:	20 91 9b 27 	lds	r18, 0x279B
    34d8:	30 91 9c 27 	lds	r19, 0x279C
    34dc:	40 91 50 29 	lds	r20, 0x2950
    34e0:	50 91 51 29 	lds	r21, 0x2951
    34e4:	60 91 e5 24 	lds	r22, 0x24E5
    34e8:	70 91 e6 24 	lds	r23, 0x24E6
    34ec:	8d b7       	in	r24, 0x3d	; 61
    34ee:	9e b7       	in	r25, 0x3e	; 62
    34f0:	08 97       	sbiw	r24, 0x08	; 8
    34f2:	8d bf       	out	0x3d, r24	; 61
    34f4:	9e bf       	out	0x3e, r25	; 62
    34f6:	ed b7       	in	r30, 0x3d	; 61
    34f8:	fe b7       	in	r31, 0x3e	; 62
    34fa:	31 96       	adiw	r30, 0x01	; 1
    34fc:	8e e7       	ldi	r24, 0x7E	; 126
    34fe:	97 e0       	ldi	r25, 0x07	; 7
    3500:	ad b7       	in	r26, 0x3d	; 61
    3502:	be b7       	in	r27, 0x3e	; 62
    3504:	11 96       	adiw	r26, 0x01	; 1
    3506:	8d 93       	st	X+, r24
    3508:	9c 93       	st	X, r25
    350a:	12 97       	sbiw	r26, 0x02	; 2
    350c:	22 83       	std	Z+2, r18	; 0x02
    350e:	33 83       	std	Z+3, r19	; 0x03
    3510:	44 83       	std	Z+4, r20	; 0x04
    3512:	55 83       	std	Z+5, r21	; 0x05
    3514:	66 83       	std	Z+6, r22	; 0x06
    3516:	77 83       	std	Z+7, r23	; 0x07
    3518:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    351c:	6d b7       	in	r22, 0x3d	; 61
    351e:	7e b7       	in	r23, 0x3e	; 62
    3520:	68 5f       	subi	r22, 0xF8	; 248
    3522:	7f 4f       	sbci	r23, 0xFF	; 255
    3524:	6d bf       	out	0x3d, r22	; 61
    3526:	7e bf       	out	0x3e, r23	; 62
            fetch_display_frame(frame_num);
    3528:	80 91 e5 24 	lds	r24, 0x24E5
    352c:	90 91 e6 24 	lds	r25, 0x24E6
    3530:	0e 94 00 16 	call	0x2c00	; 0x2c00 <fetch_display_frame>
    3534:	08 95       	ret
            break;
            
        case 0x71:
            //'send_gain_bias', all of these are signed byte values
            gain_x = msg_buffer[1];
    3536:	81 81       	ldd	r24, Z+1	; 0x01
    3538:	80 93 e4 27 	sts	0x27E4, r24
            bias_x = msg_buffer[2];
    353c:	82 81       	ldd	r24, Z+2	; 0x02
    353e:	80 93 96 25 	sts	0x2596, r24
            gain_y = msg_buffer[3];
    3542:	83 81       	ldd	r24, Z+3	; 0x03
    3544:	80 93 9d 27 	sts	0x279D, r24
            bias_y = msg_buffer[4];
    3548:	84 81       	ldd	r24, Z+4	; 0x04
    354a:	80 93 b4 2b 	sts	0x2BB4, r24
    354e:	08 95       	ret
            break;
            
            
        default:
            i2cMasterSend(0x00, 8, ERROR_CODES[4]);
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	68 e0       	ldi	r22, 0x08	; 8
    3554:	49 ed       	ldi	r20, 0xD9	; 217
    3556:	50 e2       	ldi	r21, 0x20	; 32
    3558:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <i2cMasterSend>
    355c:	08 95       	ret

0000355e <handle_message_length_2>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[1]);
    }
}

void handle_message_length_2(uint8_t *msg_buffer) {
    355e:	fc 01       	movw	r30, r24
    uint8_t argument_byte;
    
    argument_byte = msg_buffer[1];
    3560:	21 81       	ldd	r18, Z+1	; 0x01
    switch(msg_buffer[0]) {
    3562:	80 81       	ld	r24, Z
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	fc 01       	movw	r30, r24
    3568:	31 97       	sbiw	r30, 0x01	; 1
    356a:	e9 30       	cpi	r30, 0x09	; 9
    356c:	f1 05       	cpc	r31, r1
    356e:	78 f5       	brcc	.+94     	; 0x35ce <handle_message_length_2+0x70>
    3570:	e6 50       	subi	r30, 0x06	; 6
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	0c 94 df 57 	jmp	0xafbe	; 0xafbe <__tablejump2__>
        case 0x01: //sends a reset command out to panel at taget address
            i2cMasterSend(argument_byte, 2, RESET);
    3578:	82 2f       	mov	r24, r18
    357a:	62 e0       	ldi	r22, 0x02	; 2
    357c:	49 ef       	ldi	r20, 0xF9	; 249
    357e:	50 e2       	ldi	r21, 0x20	; 32
    3580:	2a c0       	rjmp	.+84     	; 0x35d6 <handle_message_length_2+0x78>
            break;
            
        case 0x02: //sends a display command out to panel at taget address
            i2cMasterSend(argument_byte, 2, DISPLAY);
    3582:	82 2f       	mov	r24, r18
    3584:	62 e0       	ldi	r22, 0x02	; 2
    3586:	4b ef       	ldi	r20, 0xFB	; 251
    3588:	50 e2       	ldi	r21, 0x20	; 32
    358a:	25 c0       	rjmp	.+74     	; 0x35d6 <handle_message_length_2+0x78>
            break;
            
        case 0x03:   //set pattern
            set_pattern(argument_byte);      //pattern x - specified in argument_byte
    358c:	82 2f       	mov	r24, r18
    358e:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <set_pattern>
    3592:	08 95       	ret
            break;
            
        case 0x04: // this is an ADC test command
            test_ADC(argument_byte);  //here argument_byte is actually a channel, 0-7 to test ADC/DAC system
    3594:	82 2f       	mov	r24, r18
    3596:	0e 94 1e 22 	call	0x443c	; 0x443c <test_ADC>
    359a:	08 95       	ret
            break;
            
        case 0x05: // this is a DIO test command
            test_DIO(argument_byte);  //here argument_byte is actually a channel, 0-7 to test ADC/DAC system
    359c:	82 2f       	mov	r24, r18
    359e:	0e 94 c2 21 	call	0x4384	; 0x4384 <test_DIO>
    35a2:	08 95       	ret
            break;
            
        case 0x06: // this is a trigger rate set command
            trigger_rate = argument_byte*2;  //here argument_byte is a trigger rate
    35a4:	82 2f       	mov	r24, r18
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	88 0f       	add	r24, r24
    35aa:	99 1f       	adc	r25, r25
    35ac:	80 93 a3 20 	sts	0x20A3, r24
    35b0:	90 93 a4 20 	sts	0x20A4, r25
    35b4:	08 95       	ret
            break;
            
        case 0x07:   //flash panel#
            flash_panel(argument_byte); //here argument_byte is actually a panel number
    35b6:	82 2f       	mov	r24, r18
    35b8:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <flash_panel>
    35bc:	08 95       	ret
            break;
            
        case 0x08:   //eeprom panel#
            eeprom_panel(argument_byte); //here argument_byte is actually a panel number
    35be:	82 2f       	mov	r24, r18
    35c0:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <eeprom_panel>
    35c4:	08 95       	ret
            break;
			
        case 0x09:   //set arena configuration
            set_hwConfig(argument_byte);      //configuration x - specified in argument_byte
    35c6:	82 2f       	mov	r24, r18
    35c8:	0e 94 2b 10 	call	0x2056	; 0x2056 <set_hwConfig>
    35cc:	08 95       	ret
            break;	
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[2]);
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	68 e0       	ldi	r22, 0x08	; 8
    35d2:	49 ec       	ldi	r20, 0xC9	; 201
    35d4:	50 e2       	ldi	r21, 0x20	; 32
    35d6:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <i2cMasterSend>
    35da:	08 95       	ret

000035dc <handle_message_length_1>:
	TWI_MasterReleaseBuff(&twi3);
	TWI_MasterReleaseBuff(&twi4);
	releaseRxBuff();
}

void handle_message_length_1(uint8_t *msg_buffer) {
    35dc:	a2 e0       	ldi	r26, 0x02	; 2
    35de:	b0 e0       	ldi	r27, 0x00	; 0
    35e0:	e4 ef       	ldi	r30, 0xF4	; 244
    35e2:	fa e1       	ldi	r31, 0x1A	; 26
    35e4:	0c 94 b2 57 	jmp	0xaf64	; 0xaf64 <__prologue_saves__+0x14>
    35e8:	fc 01       	movw	r30, r24
    uint8_t CMD[2];
    uint8_t i;
    
    switch(msg_buffer[0]) {
    35ea:	e0 81       	ld	r30, Z
    35ec:	e5 34       	cpi	r30, 0x45	; 69
    35ee:	09 f4       	brne	.+2      	; 0x35f2 <handle_message_length_1+0x16>
    35f0:	7a c1       	rjmp	.+756    	; 0x38e6 <handle_message_length_1+0x30a>
    35f2:	e6 34       	cpi	r30, 0x46	; 70
    35f4:	08 f0       	brcs	.+2      	; 0x35f8 <handle_message_length_1+0x1c>
    35f6:	58 c0       	rjmp	.+176    	; 0x36a8 <handle_message_length_1+0xcc>
    35f8:	e9 31       	cpi	r30, 0x19	; 25
    35fa:	09 f4       	brne	.+2      	; 0x35fe <handle_message_length_1+0x22>
    35fc:	20 c2       	rjmp	.+1088   	; 0x3a3e <handle_message_length_1+0x462>
    35fe:	ea 31       	cpi	r30, 0x1A	; 26
    3600:	40 f5       	brcc	.+80     	; 0x3652 <handle_message_length_1+0x76>
    3602:	e3 31       	cpi	r30, 0x13	; 19
    3604:	09 f4       	brne	.+2      	; 0x3608 <handle_message_length_1+0x2c>
    3606:	eb c1       	rjmp	.+982    	; 0x39de <handle_message_length_1+0x402>
    3608:	e4 31       	cpi	r30, 0x14	; 20
    360a:	80 f4       	brcc	.+32     	; 0x362c <handle_message_length_1+0x50>
    360c:	e0 31       	cpi	r30, 0x10	; 16
    360e:	09 f4       	brne	.+2      	; 0x3612 <handle_message_length_1+0x36>
    3610:	d7 c1       	rjmp	.+942    	; 0x39c0 <handle_message_length_1+0x3e4>
    3612:	e1 31       	cpi	r30, 0x11	; 17
    3614:	20 f4       	brcc	.+8      	; 0x361e <handle_message_length_1+0x42>
    3616:	ee 23       	and	r30, r30
    3618:	09 f4       	brne	.+2      	; 0x361c <handle_message_length_1+0x40>
    361a:	47 c1       	rjmp	.+654    	; 0x38aa <handle_message_length_1+0x2ce>
    361c:	40 c2       	rjmp	.+1152   	; 0x3a9e <handle_message_length_1+0x4c2>
    361e:	e1 31       	cpi	r30, 0x11	; 17
    3620:	09 f4       	brne	.+2      	; 0x3624 <handle_message_length_1+0x48>
    3622:	d2 c1       	rjmp	.+932    	; 0x39c8 <handle_message_length_1+0x3ec>
    3624:	e2 31       	cpi	r30, 0x12	; 18
    3626:	09 f0       	breq	.+2      	; 0x362a <handle_message_length_1+0x4e>
    3628:	3a c2       	rjmp	.+1140   	; 0x3a9e <handle_message_length_1+0x4c2>
    362a:	d5 c1       	rjmp	.+938    	; 0x39d6 <handle_message_length_1+0x3fa>
    362c:	e6 31       	cpi	r30, 0x16	; 22
    362e:	09 f4       	brne	.+2      	; 0x3632 <handle_message_length_1+0x56>
    3630:	e7 c1       	rjmp	.+974    	; 0x3a00 <handle_message_length_1+0x424>
    3632:	e7 31       	cpi	r30, 0x17	; 23
    3634:	38 f4       	brcc	.+14     	; 0x3644 <handle_message_length_1+0x68>
    3636:	e4 31       	cpi	r30, 0x14	; 20
    3638:	09 f4       	brne	.+2      	; 0x363c <handle_message_length_1+0x60>
    363a:	d4 c1       	rjmp	.+936    	; 0x39e4 <handle_message_length_1+0x408>
    363c:	e5 31       	cpi	r30, 0x15	; 21
    363e:	09 f0       	breq	.+2      	; 0x3642 <handle_message_length_1+0x66>
    3640:	2e c2       	rjmp	.+1116   	; 0x3a9e <handle_message_length_1+0x4c2>
    3642:	d3 c1       	rjmp	.+934    	; 0x39ea <handle_message_length_1+0x40e>
    3644:	e7 31       	cpi	r30, 0x17	; 23
    3646:	09 f4       	brne	.+2      	; 0x364a <handle_message_length_1+0x6e>
    3648:	f3 c1       	rjmp	.+998    	; 0x3a30 <handle_message_length_1+0x454>
    364a:	e8 31       	cpi	r30, 0x18	; 24
    364c:	09 f0       	breq	.+2      	; 0x3650 <handle_message_length_1+0x74>
    364e:	27 c2       	rjmp	.+1102   	; 0x3a9e <handle_message_length_1+0x4c2>
    3650:	f3 c1       	rjmp	.+998    	; 0x3a38 <handle_message_length_1+0x45c>
    3652:	e5 33       	cpi	r30, 0x35	; 53
    3654:	09 f4       	brne	.+2      	; 0x3658 <handle_message_length_1+0x7c>
    3656:	f5 c0       	rjmp	.+490    	; 0x3842 <handle_message_length_1+0x266>
    3658:	e6 33       	cpi	r30, 0x36	; 54
    365a:	98 f4       	brcc	.+38     	; 0x3682 <handle_message_length_1+0xa6>
    365c:	e2 32       	cpi	r30, 0x22	; 34
    365e:	09 f4       	brne	.+2      	; 0x3662 <handle_message_length_1+0x86>
    3660:	0c c2       	rjmp	.+1048   	; 0x3a7a <handle_message_length_1+0x49e>
    3662:	e3 32       	cpi	r30, 0x23	; 35
    3664:	38 f4       	brcc	.+14     	; 0x3674 <handle_message_length_1+0x98>
    3666:	e0 32       	cpi	r30, 0x20	; 32
    3668:	09 f4       	brne	.+2      	; 0x366c <handle_message_length_1+0x90>
    366a:	73 c0       	rjmp	.+230    	; 0x3752 <handle_message_length_1+0x176>
    366c:	e1 32       	cpi	r30, 0x21	; 33
    366e:	09 f0       	breq	.+2      	; 0x3672 <handle_message_length_1+0x96>
    3670:	16 c2       	rjmp	.+1068   	; 0x3a9e <handle_message_length_1+0x4c2>
    3672:	f9 c1       	rjmp	.+1010   	; 0x3a66 <handle_message_length_1+0x48a>
    3674:	e5 32       	cpi	r30, 0x25	; 37
    3676:	09 f4       	brne	.+2      	; 0x367a <handle_message_length_1+0x9e>
    3678:	ab c0       	rjmp	.+342    	; 0x37d0 <handle_message_length_1+0x1f4>
    367a:	e0 33       	cpi	r30, 0x30	; 48
    367c:	09 f0       	breq	.+2      	; 0x3680 <handle_message_length_1+0xa4>
    367e:	0f c2       	rjmp	.+1054   	; 0x3a9e <handle_message_length_1+0x4c2>
    3680:	87 c0       	rjmp	.+270    	; 0x3790 <handle_message_length_1+0x1b4>
    3682:	e2 34       	cpi	r30, 0x42	; 66
    3684:	09 f4       	brne	.+2      	; 0x3688 <handle_message_length_1+0xac>
    3686:	20 c1       	rjmp	.+576    	; 0x38c8 <handle_message_length_1+0x2ec>
    3688:	e3 34       	cpi	r30, 0x43	; 67
    368a:	38 f4       	brcc	.+14     	; 0x369a <handle_message_length_1+0xbe>
    368c:	e0 34       	cpi	r30, 0x40	; 64
    368e:	09 f4       	brne	.+2      	; 0x3692 <handle_message_length_1+0xb6>
    3690:	11 c1       	rjmp	.+546    	; 0x38b4 <handle_message_length_1+0x2d8>
    3692:	e1 34       	cpi	r30, 0x41	; 65
    3694:	09 f0       	breq	.+2      	; 0x3698 <handle_message_length_1+0xbc>
    3696:	03 c2       	rjmp	.+1030   	; 0x3a9e <handle_message_length_1+0x4c2>
    3698:	12 c1       	rjmp	.+548    	; 0x38be <handle_message_length_1+0x2e2>
    369a:	e3 34       	cpi	r30, 0x43	; 67
    369c:	09 f4       	brne	.+2      	; 0x36a0 <handle_message_length_1+0xc4>
    369e:	19 c1       	rjmp	.+562    	; 0x38d2 <handle_message_length_1+0x2f6>
    36a0:	e4 34       	cpi	r30, 0x44	; 68
    36a2:	09 f0       	breq	.+2      	; 0x36a6 <handle_message_length_1+0xca>
    36a4:	fc c1       	rjmp	.+1016   	; 0x3a9e <handle_message_length_1+0x4c2>
    36a6:	1a c1       	rjmp	.+564    	; 0x38dc <handle_message_length_1+0x300>
    36a8:	e5 39       	cpi	r30, 0x95	; 149
    36aa:	09 f4       	brne	.+2      	; 0x36ae <handle_message_length_1+0xd2>
    36ac:	52 c1       	rjmp	.+676    	; 0x3952 <handle_message_length_1+0x376>
    36ae:	e6 39       	cpi	r30, 0x96	; 150
    36b0:	28 f5       	brcc	.+74     	; 0x36fc <handle_message_length_1+0x120>
    36b2:	e0 37       	cpi	r30, 0x70	; 112
    36b4:	09 f4       	brne	.+2      	; 0x36b8 <handle_message_length_1+0xdc>
    36b6:	31 c1       	rjmp	.+610    	; 0x391a <handle_message_length_1+0x33e>
    36b8:	e1 37       	cpi	r30, 0x71	; 113
    36ba:	68 f4       	brcc	.+26     	; 0x36d6 <handle_message_length_1+0xfa>
    36bc:	e7 34       	cpi	r30, 0x47	; 71
    36be:	09 f4       	brne	.+2      	; 0x36c2 <handle_message_length_1+0xe6>
    36c0:	1c c1       	rjmp	.+568    	; 0x38fa <handle_message_length_1+0x31e>
    36c2:	e7 34       	cpi	r30, 0x47	; 71
    36c4:	08 f4       	brcc	.+2      	; 0x36c8 <handle_message_length_1+0xec>
    36c6:	14 c1       	rjmp	.+552    	; 0x38f0 <handle_message_length_1+0x314>
    36c8:	e0 35       	cpi	r30, 0x50	; 80
    36ca:	09 f4       	brne	.+2      	; 0x36ce <handle_message_length_1+0xf2>
    36cc:	20 c1       	rjmp	.+576    	; 0x390e <handle_message_length_1+0x332>
    36ce:	e0 36       	cpi	r30, 0x60	; 96
    36d0:	09 f0       	breq	.+2      	; 0x36d4 <handle_message_length_1+0xf8>
    36d2:	e5 c1       	rjmp	.+970    	; 0x3a9e <handle_message_length_1+0x4c2>
    36d4:	1f c1       	rjmp	.+574    	; 0x3914 <handle_message_length_1+0x338>
    36d6:	e2 39       	cpi	r30, 0x92	; 146
    36d8:	09 f4       	brne	.+2      	; 0x36dc <handle_message_length_1+0x100>
    36da:	2c c1       	rjmp	.+600    	; 0x3934 <handle_message_length_1+0x358>
    36dc:	e3 39       	cpi	r30, 0x93	; 147
    36de:	38 f4       	brcc	.+14     	; 0x36ee <handle_message_length_1+0x112>
    36e0:	e0 39       	cpi	r30, 0x90	; 144
    36e2:	09 f4       	brne	.+2      	; 0x36e6 <handle_message_length_1+0x10a>
    36e4:	1d c1       	rjmp	.+570    	; 0x3920 <handle_message_length_1+0x344>
    36e6:	e1 39       	cpi	r30, 0x91	; 145
    36e8:	09 f0       	breq	.+2      	; 0x36ec <handle_message_length_1+0x110>
    36ea:	d9 c1       	rjmp	.+946    	; 0x3a9e <handle_message_length_1+0x4c2>
    36ec:	1e c1       	rjmp	.+572    	; 0x392a <handle_message_length_1+0x34e>
    36ee:	e3 39       	cpi	r30, 0x93	; 147
    36f0:	09 f4       	brne	.+2      	; 0x36f4 <handle_message_length_1+0x118>
    36f2:	25 c1       	rjmp	.+586    	; 0x393e <handle_message_length_1+0x362>
    36f4:	e4 39       	cpi	r30, 0x94	; 148
    36f6:	09 f0       	breq	.+2      	; 0x36fa <handle_message_length_1+0x11e>
    36f8:	d2 c1       	rjmp	.+932    	; 0x3a9e <handle_message_length_1+0x4c2>
    36fa:	26 c1       	rjmp	.+588    	; 0x3948 <handle_message_length_1+0x36c>
    36fc:	eb 39       	cpi	r30, 0x9B	; 155
    36fe:	09 f4       	brne	.+2      	; 0x3702 <handle_message_length_1+0x126>
    3700:	46 c1       	rjmp	.+652    	; 0x398e <handle_message_length_1+0x3b2>
    3702:	ec 39       	cpi	r30, 0x9C	; 156
    3704:	98 f4       	brcc	.+38     	; 0x372c <handle_message_length_1+0x150>
    3706:	e8 39       	cpi	r30, 0x98	; 152
    3708:	09 f4       	brne	.+2      	; 0x370c <handle_message_length_1+0x130>
    370a:	32 c1       	rjmp	.+612    	; 0x3970 <handle_message_length_1+0x394>
    370c:	e9 39       	cpi	r30, 0x99	; 153
    370e:	38 f4       	brcc	.+14     	; 0x371e <handle_message_length_1+0x142>
    3710:	e6 39       	cpi	r30, 0x96	; 150
    3712:	09 f4       	brne	.+2      	; 0x3716 <handle_message_length_1+0x13a>
    3714:	23 c1       	rjmp	.+582    	; 0x395c <handle_message_length_1+0x380>
    3716:	e7 39       	cpi	r30, 0x97	; 151
    3718:	09 f0       	breq	.+2      	; 0x371c <handle_message_length_1+0x140>
    371a:	c1 c1       	rjmp	.+898    	; 0x3a9e <handle_message_length_1+0x4c2>
    371c:	24 c1       	rjmp	.+584    	; 0x3966 <handle_message_length_1+0x38a>
    371e:	e9 39       	cpi	r30, 0x99	; 153
    3720:	09 f4       	brne	.+2      	; 0x3724 <handle_message_length_1+0x148>
    3722:	2b c1       	rjmp	.+598    	; 0x397a <handle_message_length_1+0x39e>
    3724:	ea 39       	cpi	r30, 0x9A	; 154
    3726:	09 f0       	breq	.+2      	; 0x372a <handle_message_length_1+0x14e>
    3728:	ba c1       	rjmp	.+884    	; 0x3a9e <handle_message_length_1+0x4c2>
    372a:	2c c1       	rjmp	.+600    	; 0x3984 <handle_message_length_1+0x3a8>
    372c:	ee 39       	cpi	r30, 0x9E	; 158
    372e:	09 f4       	brne	.+2      	; 0x3732 <handle_message_length_1+0x156>
    3730:	3d c1       	rjmp	.+634    	; 0x39ac <handle_message_length_1+0x3d0>
    3732:	ef 39       	cpi	r30, 0x9F	; 159
    3734:	38 f4       	brcc	.+14     	; 0x3744 <handle_message_length_1+0x168>
    3736:	ec 39       	cpi	r30, 0x9C	; 156
    3738:	09 f4       	brne	.+2      	; 0x373c <handle_message_length_1+0x160>
    373a:	2e c1       	rjmp	.+604    	; 0x3998 <handle_message_length_1+0x3bc>
    373c:	ed 39       	cpi	r30, 0x9D	; 157
    373e:	09 f0       	breq	.+2      	; 0x3742 <handle_message_length_1+0x166>
    3740:	ae c1       	rjmp	.+860    	; 0x3a9e <handle_message_length_1+0x4c2>
    3742:	2f c1       	rjmp	.+606    	; 0x39a2 <handle_message_length_1+0x3c6>
    3744:	ef 39       	cpi	r30, 0x9F	; 159
    3746:	09 f4       	brne	.+2      	; 0x374a <handle_message_length_1+0x16e>
    3748:	36 c1       	rjmp	.+620    	; 0x39b6 <handle_message_length_1+0x3da>
    374a:	ef 3f       	cpi	r30, 0xFF	; 255
    374c:	09 f0       	breq	.+2      	; 0x3750 <handle_message_length_1+0x174>
    374e:	a7 c1       	rjmp	.+846    	; 0x3a9e <handle_message_length_1+0x4c2>
    3750:	d9 c0       	rjmp	.+434    	; 0x3904 <handle_message_length_1+0x328>
        case 0x20:  //Start display: 0x20
            //set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
            function_counter_x = 0;
    3752:	10 92 e7 24 	sts	0x24E7, r1
    3756:	10 92 e8 24 	sts	0x24E8, r1
            function_counter_y = 0;
    375a:	10 92 e9 24 	sts	0x24E9, r1
    375e:	10 92 ea 24 	sts	0x24EA, r1
            Stop = 0;
    3762:	10 92 9c 20 	sts	0x209C, r1
            display_flag = 0;  //clear the display flag
    3766:	10 92 e0 24 	sts	0x24E0, r1
            Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    376a:	8d eb       	ldi	r24, 0xBD	; 189
    376c:	90 e1       	ldi	r25, 0x10	; 16
    376e:	4e e4       	ldi	r20, 0x4E	; 78
    3770:	50 e0       	ldi	r21, 0x00	; 0
    3772:	60 e0       	ldi	r22, 0x00	; 0
    3774:	70 e0       	ldi	r23, 0x00	; 0
    3776:	21 e0       	ldi	r18, 0x01	; 1
    3778:	01 e0       	ldi	r16, 0x01	; 1
    377a:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0); //initilize the 2 and 3 priority interupts to a fast rate so that
    377e:	8d e0       	ldi	r24, 0x0D	; 13
    3780:	98 e0       	ldi	r25, 0x08	; 8
    3782:	4e e4       	ldi	r20, 0x4E	; 78
    3784:	50 e0       	ldi	r21, 0x00	; 0
    3786:	60 e0       	ldi	r22, 0x00	; 0
    3788:	70 e0       	ldi	r23, 0x00	; 0
    378a:	22 e0       	ldi	r18, 0x02	; 2
    378c:	00 e0       	ldi	r16, 0x00	; 0
    378e:	14 c0       	rjmp	.+40     	; 0x37b8 <handle_message_length_1+0x1dc>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0); // the countdown is fast until the setting of the next rate
            break;                        //by the Update_display interupt.
            
        case 0x30: //stop display
            Stop = 1;
    3790:	81 e0       	ldi	r24, 0x01	; 1
    3792:	80 93 9c 20 	sts	0x209C, r24
            //turn off the interupts
            Reg_Handler(Update_display, UPDATE_RATE, 1, 0);
    3796:	8d eb       	ldi	r24, 0xBD	; 189
    3798:	90 e1       	ldi	r25, 0x10	; 16
    379a:	4e e4       	ldi	r20, 0x4E	; 78
    379c:	50 e0       	ldi	r21, 0x00	; 0
    379e:	60 e0       	ldi	r22, 0x00	; 0
    37a0:	70 e0       	ldi	r23, 0x00	; 0
    37a2:	21 e0       	ldi	r18, 0x01	; 1
    37a4:	00 e0       	ldi	r16, 0x00	; 0
    37a6:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    37aa:	8d e0       	ldi	r24, 0x0D	; 13
    37ac:	98 e0       	ldi	r25, 0x08	; 8
    37ae:	4e e4       	ldi	r20, 0x4E	; 78
    37b0:	50 e0       	ldi	r21, 0x00	; 0
    37b2:	60 e0       	ldi	r22, 0x00	; 0
    37b4:	70 e0       	ldi	r23, 0x00	; 0
    37b6:	22 e0       	ldi	r18, 0x02	; 2
    37b8:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    37bc:	85 e4       	ldi	r24, 0x45	; 69
    37be:	98 e0       	ldi	r25, 0x08	; 8
    37c0:	4e e4       	ldi	r20, 0x4E	; 78
    37c2:	50 e0       	ldi	r21, 0x00	; 0
    37c4:	60 e0       	ldi	r22, 0x00	; 0
    37c6:	70 e0       	ldi	r23, 0x00	; 0
    37c8:	23 e0       	ldi	r18, 0x03	; 3
    37ca:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
    37ce:	6d c1       	rjmp	.+730    	; 0x3aaa <handle_message_length_1+0x4ce>
            
            break;
            
        case 0x25:  //Start display & trigger - same as regular, but this also does trigger
            //set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
            function_counter_x = 0;
    37d0:	10 92 e7 24 	sts	0x24E7, r1
    37d4:	10 92 e8 24 	sts	0x24E8, r1
            function_counter_y = 0;
    37d8:	10 92 e9 24 	sts	0x24E9, r1
    37dc:	10 92 ea 24 	sts	0x24EA, r1
            Stop = 0;
    37e0:	10 92 9c 20 	sts	0x209C, r1
            display_flag = 0;  //clear the display flag
    37e4:	10 92 e0 24 	sts	0x24E0, r1
            Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    37e8:	8d eb       	ldi	r24, 0xBD	; 189
    37ea:	90 e1       	ldi	r25, 0x10	; 16
    37ec:	4e e4       	ldi	r20, 0x4E	; 78
    37ee:	50 e0       	ldi	r21, 0x00	; 0
    37f0:	60 e0       	ldi	r22, 0x00	; 0
    37f2:	70 e0       	ldi	r23, 0x00	; 0
    37f4:	21 e0       	ldi	r18, 0x01	; 1
    37f6:	01 e0       	ldi	r16, 0x01	; 1
    37f8:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    37fc:	8d e0       	ldi	r24, 0x0D	; 13
    37fe:	98 e0       	ldi	r25, 0x08	; 8
    3800:	4e e4       	ldi	r20, 0x4E	; 78
    3802:	50 e0       	ldi	r21, 0x00	; 0
    3804:	60 e0       	ldi	r22, 0x00	; 0
    3806:	70 e0       	ldi	r23, 0x00	; 0
    3808:	22 e0       	ldi	r18, 0x02	; 2
    380a:	00 e0       	ldi	r16, 0x00	; 0
    380c:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    3810:	85 e4       	ldi	r24, 0x45	; 69
    3812:	98 e0       	ldi	r25, 0x08	; 8
    3814:	4e e4       	ldi	r20, 0x4E	; 78
    3816:	50 e0       	ldi	r21, 0x00	; 0
    3818:	60 e0       	ldi	r22, 0x00	; 0
    381a:	70 e0       	ldi	r23, 0x00	; 0
    381c:	23 e0       	ldi	r18, 0x03	; 3
    381e:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
            Reg_Handler(toggle_trigger, (uint32_t)OVERFLOW_RATE/trigger_rate, 0, 1); //turn on the trigger toggle
    3822:	60 91 a3 20 	lds	r22, 0x20A3
    3826:	70 91 a4 20 	lds	r23, 0x20A4
    382a:	82 e1       	ldi	r24, 0x12	; 18
    382c:	9a e7       	ldi	r25, 0x7A	; 122
    382e:	0e 94 44 57 	call	0xae88	; 0xae88 <__udivmodhi4>
    3832:	ab 01       	movw	r20, r22
    3834:	60 e0       	ldi	r22, 0x00	; 0
    3836:	70 e0       	ldi	r23, 0x00	; 0
    3838:	89 eb       	ldi	r24, 0xB9	; 185
    383a:	90 e1       	ldi	r25, 0x10	; 16
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	01 e0       	ldi	r16, 0x01	; 1
    3840:	c4 cf       	rjmp	.-120    	; 0x37ca <handle_message_length_1+0x1ee>
            break;
            
        case 0x35: //stop display & trigger - same as regular, but this also does trigger
            Stop = 1;
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	80 93 9c 20 	sts	0x209C, r24
            //turn off the interupts
            Reg_Handler(Update_display, UPDATE_RATE, 1, 0);
    3848:	8d eb       	ldi	r24, 0xBD	; 189
    384a:	90 e1       	ldi	r25, 0x10	; 16
    384c:	4e e4       	ldi	r20, 0x4E	; 78
    384e:	50 e0       	ldi	r21, 0x00	; 0
    3850:	60 e0       	ldi	r22, 0x00	; 0
    3852:	70 e0       	ldi	r23, 0x00	; 0
    3854:	21 e0       	ldi	r18, 0x01	; 1
    3856:	00 e0       	ldi	r16, 0x00	; 0
    3858:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    385c:	8d e0       	ldi	r24, 0x0D	; 13
    385e:	98 e0       	ldi	r25, 0x08	; 8
    3860:	4e e4       	ldi	r20, 0x4E	; 78
    3862:	50 e0       	ldi	r21, 0x00	; 0
    3864:	60 e0       	ldi	r22, 0x00	; 0
    3866:	70 e0       	ldi	r23, 0x00	; 0
    3868:	22 e0       	ldi	r18, 0x02	; 2
    386a:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    386e:	85 e4       	ldi	r24, 0x45	; 69
    3870:	98 e0       	ldi	r25, 0x08	; 8
    3872:	4e e4       	ldi	r20, 0x4E	; 78
    3874:	50 e0       	ldi	r21, 0x00	; 0
    3876:	60 e0       	ldi	r22, 0x00	; 0
    3878:	70 e0       	ldi	r23, 0x00	; 0
    387a:	23 e0       	ldi	r18, 0x03	; 3
    387c:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
            Reg_Handler(toggle_trigger, OVERFLOW_RATE/trigger_rate, 0, 0); //turn off the trigger toggle
    3880:	20 91 a3 20 	lds	r18, 0x20A3
    3884:	30 91 a4 20 	lds	r19, 0x20A4
    3888:	40 e0       	ldi	r20, 0x00	; 0
    388a:	50 e0       	ldi	r21, 0x00	; 0
    388c:	62 e1       	ldi	r22, 0x12	; 18
    388e:	7a e7       	ldi	r23, 0x7A	; 122
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	0e 94 8d 57 	call	0xaf1a	; 0xaf1a <__divmodsi4>
    3898:	89 eb       	ldi	r24, 0xB9	; 185
    389a:	90 e1       	ldi	r25, 0x10	; 16
    389c:	ba 01       	movw	r22, r20
    389e:	a9 01       	movw	r20, r18
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <Reg_Handler>
			digitalWrite(3,LOW);    //set the output to low
    38a6:	83 e0       	ldi	r24, 0x03	; 3
    38a8:	92 c0       	rjmp	.+292    	; 0x39ce <handle_message_length_1+0x3f2>
            break;
            
        case 0x00:  i2cMasterSend(0x00, 8, ALL_OFF); break;
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	68 e0       	ldi	r22, 0x08	; 8
    38ae:	40 e1       	ldi	r20, 0x10	; 16
    38b0:	55 e2       	ldi	r21, 0x25	; 37
    38b2:	f9 c0       	rjmp	.+498    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x40:  i2cMasterSend(0x00, 24, G_LEVELS[0]); break;
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	68 e1       	ldi	r22, 0x18	; 24
    38b8:	4d ef       	ldi	r20, 0xFD	; 253
    38ba:	50 e2       	ldi	r21, 0x20	; 32
    38bc:	f4 c0       	rjmp	.+488    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x41:  i2cMasterSend(0x00, 24, G_LEVELS[1]); break;
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	68 e1       	ldi	r22, 0x18	; 24
    38c2:	45 e1       	ldi	r20, 0x15	; 21
    38c4:	51 e2       	ldi	r21, 0x21	; 33
    38c6:	ef c0       	rjmp	.+478    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x42:  i2cMasterSend(0x00, 24, G_LEVELS[2]); break;
    38c8:	80 e0       	ldi	r24, 0x00	; 0
    38ca:	68 e1       	ldi	r22, 0x18	; 24
    38cc:	4d e2       	ldi	r20, 0x2D	; 45
    38ce:	51 e2       	ldi	r21, 0x21	; 33
    38d0:	ea c0       	rjmp	.+468    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x43:  i2cMasterSend(0x00, 24, G_LEVELS[3]);   break;
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	68 e1       	ldi	r22, 0x18	; 24
    38d6:	45 e4       	ldi	r20, 0x45	; 69
    38d8:	51 e2       	ldi	r21, 0x21	; 33
    38da:	e5 c0       	rjmp	.+458    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x44:  i2cMasterSend(0x00, 24, G_LEVELS[4]); break;
    38dc:	80 e0       	ldi	r24, 0x00	; 0
    38de:	68 e1       	ldi	r22, 0x18	; 24
    38e0:	4d e5       	ldi	r20, 0x5D	; 93
    38e2:	51 e2       	ldi	r21, 0x21	; 33
    38e4:	e0 c0       	rjmp	.+448    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x45:  i2cMasterSend(0x00, 24, G_LEVELS[5]); break;
    38e6:	80 e0       	ldi	r24, 0x00	; 0
    38e8:	68 e1       	ldi	r22, 0x18	; 24
    38ea:	45 e7       	ldi	r20, 0x75	; 117
    38ec:	51 e2       	ldi	r21, 0x21	; 33
    38ee:	db c0       	rjmp	.+438    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x46:  i2cMasterSend(0x00, 24, G_LEVELS[6]); break;
    38f0:	80 e0       	ldi	r24, 0x00	; 0
    38f2:	68 e1       	ldi	r22, 0x18	; 24
    38f4:	4d e8       	ldi	r20, 0x8D	; 141
    38f6:	51 e2       	ldi	r21, 0x21	; 33
    38f8:	d6 c0       	rjmp	.+428    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x47:  i2cMasterSend(0x00, 24, G_LEVELS[7]); break;
    38fa:	80 e0       	ldi	r24, 0x00	; 0
    38fc:	68 e1       	ldi	r22, 0x18	; 24
    38fe:	45 ea       	ldi	r20, 0xA5	; 165
    3900:	51 e2       	ldi	r21, 0x21	; 33
    3902:	d1 c0       	rjmp	.+418    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0xFF:  i2cMasterSend(0x00, 8, ALL_ON); break;
    3904:	80 e0       	ldi	r24, 0x00	; 0
    3906:	68 e0       	ldi	r22, 0x08	; 8
    3908:	4d eb       	ldi	r20, 0xBD	; 189
    390a:	51 e2       	ldi	r21, 0x21	; 33
    390c:	cc c0       	rjmp	.+408    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x50:  ledBlink(); break;
    390e:	0e 94 99 20 	call	0x4132	; 0x4132 <ledBlink>
    3912:	cb c0       	rjmp	.+406    	; 0x3aaa <handle_message_length_1+0x4ce>
        case 0x60:  SystemReset();  break;
    3914:	0e 94 06 22 	call	0x440c	; 0x440c <SystemReset>
    3918:	c8 c0       	rjmp	.+400    	; 0x3aaa <handle_message_length_1+0x4ce>
        case 0x70:  benchmark_pattern(); break;
    391a:	0e 94 87 18 	call	0x310e	; 0x310e <benchmark_pattern>
    391e:	c5 c0       	rjmp	.+394    	; 0x3aaa <handle_message_length_1+0x4ce>
        case 0x90:  i2cMasterSend(0x00, 32, G_LEVELS_16[0]); break;
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	60 e2       	ldi	r22, 0x20	; 32
    3924:	45 ec       	ldi	r20, 0xC5	; 197
    3926:	51 e2       	ldi	r21, 0x21	; 33
    3928:	be c0       	rjmp	.+380    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x91:  i2cMasterSend(0x00, 32, G_LEVELS_16[1]); break;
    392a:	80 e0       	ldi	r24, 0x00	; 0
    392c:	60 e2       	ldi	r22, 0x20	; 32
    392e:	45 ee       	ldi	r20, 0xE5	; 229
    3930:	51 e2       	ldi	r21, 0x21	; 33
    3932:	b9 c0       	rjmp	.+370    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x92:  i2cMasterSend(0x00, 32, G_LEVELS_16[2]); break;
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	60 e2       	ldi	r22, 0x20	; 32
    3938:	45 e0       	ldi	r20, 0x05	; 5
    393a:	52 e2       	ldi	r21, 0x22	; 34
    393c:	b4 c0       	rjmp	.+360    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x93:  i2cMasterSend(0x00, 32, G_LEVELS_16[3]); break;
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	60 e2       	ldi	r22, 0x20	; 32
    3942:	45 e2       	ldi	r20, 0x25	; 37
    3944:	52 e2       	ldi	r21, 0x22	; 34
    3946:	af c0       	rjmp	.+350    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x94:  i2cMasterSend(0x00, 32, G_LEVELS_16[4]); break;
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	60 e2       	ldi	r22, 0x20	; 32
    394c:	45 e4       	ldi	r20, 0x45	; 69
    394e:	52 e2       	ldi	r21, 0x22	; 34
    3950:	aa c0       	rjmp	.+340    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x95:  i2cMasterSend(0x00, 32, G_LEVELS_16[5]); break;
    3952:	80 e0       	ldi	r24, 0x00	; 0
    3954:	60 e2       	ldi	r22, 0x20	; 32
    3956:	45 e6       	ldi	r20, 0x65	; 101
    3958:	52 e2       	ldi	r21, 0x22	; 34
    395a:	a5 c0       	rjmp	.+330    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x96:  i2cMasterSend(0x00, 32, G_LEVELS_16[6]); break;
    395c:	80 e0       	ldi	r24, 0x00	; 0
    395e:	60 e2       	ldi	r22, 0x20	; 32
    3960:	45 e8       	ldi	r20, 0x85	; 133
    3962:	52 e2       	ldi	r21, 0x22	; 34
    3964:	a0 c0       	rjmp	.+320    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x97:  i2cMasterSend(0x00, 32, G_LEVELS_16[7]); break;
    3966:	80 e0       	ldi	r24, 0x00	; 0
    3968:	60 e2       	ldi	r22, 0x20	; 32
    396a:	45 ea       	ldi	r20, 0xA5	; 165
    396c:	52 e2       	ldi	r21, 0x22	; 34
    396e:	9b c0       	rjmp	.+310    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x98:  i2cMasterSend(0x00, 32, G_LEVELS_16[8]); break;
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	60 e2       	ldi	r22, 0x20	; 32
    3974:	45 ec       	ldi	r20, 0xC5	; 197
    3976:	52 e2       	ldi	r21, 0x22	; 34
    3978:	96 c0       	rjmp	.+300    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x99:  i2cMasterSend(0x00, 32, G_LEVELS_16[9]); break;
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	60 e2       	ldi	r22, 0x20	; 32
    397e:	45 ee       	ldi	r20, 0xE5	; 229
    3980:	52 e2       	ldi	r21, 0x22	; 34
    3982:	91 c0       	rjmp	.+290    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x9A:  i2cMasterSend(0x00, 32, G_LEVELS_16[10]); break;
    3984:	80 e0       	ldi	r24, 0x00	; 0
    3986:	60 e2       	ldi	r22, 0x20	; 32
    3988:	45 e0       	ldi	r20, 0x05	; 5
    398a:	53 e2       	ldi	r21, 0x23	; 35
    398c:	8c c0       	rjmp	.+280    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x9B:  i2cMasterSend(0x00, 32, G_LEVELS_16[11]); break;
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	60 e2       	ldi	r22, 0x20	; 32
    3992:	45 e2       	ldi	r20, 0x25	; 37
    3994:	53 e2       	ldi	r21, 0x23	; 35
    3996:	87 c0       	rjmp	.+270    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x9C:  i2cMasterSend(0x00, 32, G_LEVELS_16[12]); break;
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	60 e2       	ldi	r22, 0x20	; 32
    399c:	45 e4       	ldi	r20, 0x45	; 69
    399e:	53 e2       	ldi	r21, 0x23	; 35
    39a0:	82 c0       	rjmp	.+260    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x9D:  i2cMasterSend(0x00, 32, G_LEVELS_16[13]); break;
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	60 e2       	ldi	r22, 0x20	; 32
    39a6:	45 e6       	ldi	r20, 0x65	; 101
    39a8:	53 e2       	ldi	r21, 0x23	; 35
    39aa:	7d c0       	rjmp	.+250    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x9E:  i2cMasterSend(0x00, 32, G_LEVELS_16[14]); break;
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	60 e2       	ldi	r22, 0x20	; 32
    39b0:	45 e8       	ldi	r20, 0x85	; 133
    39b2:	53 e2       	ldi	r21, 0x23	; 35
    39b4:	78 c0       	rjmp	.+240    	; 0x3aa6 <handle_message_length_1+0x4ca>
        case 0x9F:  i2cMasterSend(0x00, 32, G_LEVELS_16[15]); break;
    39b6:	80 e0       	ldi	r24, 0x00	; 0
    39b8:	60 e2       	ldi	r22, 0x20	; 32
    39ba:	45 ea       	ldi	r20, 0xA5	; 165
    39bc:	53 e2       	ldi	r21, 0x23	; 35
    39be:	73 c0       	rjmp	.+230    	; 0x3aa6 <handle_message_length_1+0x4ca>
        
        case 0x10:  // turn laser on
            Laser_active = 1;
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	80 93 e2 24 	sts	0x24E2, r24
    39c6:	71 c0       	rjmp	.+226    	; 0x3aaa <handle_message_length_1+0x4ce>
            break;
            
        case 0x11:  // turn laser off
            Laser_active = 0;
    39c8:	10 92 e2 24 	sts	0x24E2, r1
            // turn off the lines that may be connected
            digitalWrite(2, LOW);
    39cc:	82 e0       	ldi	r24, 0x02	; 2
    39ce:	60 e0       	ldi	r22, 0x00	; 0
    39d0:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <digitalWrite>
    39d4:	6a c0       	rjmp	.+212    	; 0x3aaa <handle_message_length_1+0x4ce>
            break;
            
        case 0x12:  // turn on compression for identical elements
            ident_compress = 1;
    39d6:	81 e0       	ldi	r24, 0x01	; 1
    39d8:	80 93 81 29 	sts	0x2981, r24
    39dc:	66 c0       	rjmp	.+204    	; 0x3aaa <handle_message_length_1+0x4ce>
            break;
            
        case 0x13:  // turn off compression for identical elements
            ident_compress = 0;
    39de:	10 92 81 29 	sts	0x2981, r1
    39e2:	63 c0       	rjmp	.+198    	; 0x3aaa <handle_message_length_1+0x4ce>
            break;
            
        case 0x14:  //synchronize the SDInfo.mat with the one in the PC
            dump_mat();
    39e4:	0e 94 27 09 	call	0x124e	; 0x124e <dump_mat>
    39e8:	60 c0       	rjmp	.+192    	; 0x3aaa <handle_message_length_1+0x4ce>
            break;
            
        case 0x15:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
    39ea:	00 d0       	rcall	.+0      	; 0x39ec <handle_message_length_1+0x410>
    39ec:	0f 92       	push	r0
    39ee:	86 e7       	ldi	r24, 0x76	; 118
    39f0:	98 e0       	ldi	r25, 0x08	; 8
    39f2:	ed b7       	in	r30, 0x3d	; 61
    39f4:	fe b7       	in	r31, 0x3e	; 62
    39f6:	81 83       	std	Z+1, r24	; 0x01
    39f8:	92 83       	std	Z+2, r25	; 0x02
    39fa:	85 ec       	ldi	r24, 0xC5	; 197
    39fc:	93 e2       	ldi	r25, 0x23	; 35
    39fe:	2a c0       	rjmp	.+84     	; 0x3a54 <handle_message_length_1+0x478>
            break;
    3a00:	b9 e1       	ldi	r27, 0x19	; 25
    3a02:	eb 2e       	mov	r14, r27
    3a04:	b7 e2       	ldi	r27, 0x27	; 39
    3a06:	fb 2e       	mov	r15, r27
    3a08:	01 e0       	ldi	r16, 0x01	; 1
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
                CMD[0] = 0xFE; CMD[1] = chMap[i];
    3a0a:	1e ef       	ldi	r17, 0xFE	; 254
                i2cMasterSend(i, 2, CMD);
    3a0c:	6e 01       	movw	r12, r28
    3a0e:	08 94       	sec
    3a10:	c1 1c       	adc	r12, r1
    3a12:	d1 1c       	adc	r13, r1
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
            break;
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
                CMD[0] = 0xFE; CMD[1] = chMap[i];
    3a14:	19 83       	std	Y+1, r17	; 0x01
    3a16:	f7 01       	movw	r30, r14
    3a18:	81 91       	ld	r24, Z+
    3a1a:	7f 01       	movw	r14, r30
    3a1c:	8a 83       	std	Y+2, r24	; 0x02
                i2cMasterSend(i, 2, CMD);
    3a1e:	80 2f       	mov	r24, r16
    3a20:	62 e0       	ldi	r22, 0x02	; 2
    3a22:	a6 01       	movw	r20, r12
    3a24:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <i2cMasterSend>
        case 0x15:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
            break;
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
    3a28:	0f 5f       	subi	r16, 0xFF	; 255
    3a2a:	01 38       	cpi	r16, 0x81	; 129
    3a2c:	99 f7       	brne	.-26     	; 0x3a14 <handle_message_length_1+0x438>
    3a2e:	3d c0       	rjmp	.+122    	; 0x3aaa <handle_message_length_1+0x4ce>
                i2cMasterSend(i, 2, CMD);
            }
            break;
            
        case 0x17:  // turn on quiet_mode, no message sent out
            quiet_mode_on = 1;
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	80 93 f3 24 	sts	0x24F3, r24
    3a36:	39 c0       	rjmp	.+114    	; 0x3aaa <handle_message_length_1+0x4ce>
            break;
            
        case 0x18:  // turn off quiet_mode, essage sent out
            quiet_mode_on = 0;
    3a38:	10 92 f3 24 	sts	0x24F3, r1
    3a3c:	36 c0       	rjmp	.+108    	; 0x3aaa <handle_message_length_1+0x4ce>
            break;
            
        case 0x19:  // get ADC value from ADC0 to debug ADC
            xprintf(PSTR("ADC_value =  %d:\n"), analogRead(0));
    3a3e:	80 e0       	ldi	r24, 0x00	; 0
    3a40:	0e 94 2a 21 	call	0x4254	; 0x4254 <analogRead>
    3a44:	00 d0       	rcall	.+0      	; 0x3a46 <handle_message_length_1+0x46a>
    3a46:	0f 92       	push	r0
    3a48:	24 e6       	ldi	r18, 0x64	; 100
    3a4a:	38 e0       	ldi	r19, 0x08	; 8
    3a4c:	ed b7       	in	r30, 0x3d	; 61
    3a4e:	fe b7       	in	r31, 0x3e	; 62
    3a50:	21 83       	std	Z+1, r18	; 0x01
    3a52:	32 83       	std	Z+2, r19	; 0x02
    3a54:	83 83       	std	Z+3, r24	; 0x03
    3a56:	94 83       	std	Z+4, r25	; 0x04
    3a58:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    3a5c:	0f 90       	pop	r0
    3a5e:	0f 90       	pop	r0
    3a60:	0f 90       	pop	r0
    3a62:	0f 90       	pop	r0
    3a64:	22 c0       	rjmp	.+68     	; 0x3aaa <handle_message_length_1+0x4ce>
            break;
			
		case 0x21:	// working mode 1 = default mode = controller mode
			eeprom_write_byte(work_mode,0xff);
    3a66:	80 e0       	ldi	r24, 0x00	; 0
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	6f ef       	ldi	r22, 0xFF	; 255
    3a6c:	0e 94 43 5c 	call	0xb886	; 0xb886 <__eewr_byte_x128a1>
			xprintf(PSTR("Reset controller to work in the controller mode!\n"));
    3a70:	0f 92       	push	r0
    3a72:	0f 92       	push	r0
    3a74:	82 e3       	ldi	r24, 0x32	; 50
    3a76:	98 e0       	ldi	r25, 0x08	; 8
    3a78:	09 c0       	rjmp	.+18     	; 0x3a8c <handle_message_length_1+0x4b0>
			break;

		case 0x22:
		    eeprom_write_byte(work_mode,0x00);
    3a7a:	80 e0       	ldi	r24, 0x00	; 0
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	60 e0       	ldi	r22, 0x00	; 0
    3a80:	0e 94 43 5c 	call	0xb886	; 0xb886 <__eewr_byte_x128a1>
			xprintf(PSTR("Reset controller to work in the PC dumping mode!\n"));
    3a84:	0f 92       	push	r0
    3a86:	0f 92       	push	r0
    3a88:	80 e0       	ldi	r24, 0x00	; 0
    3a8a:	98 e0       	ldi	r25, 0x08	; 8
    3a8c:	ed b7       	in	r30, 0x3d	; 61
    3a8e:	fe b7       	in	r31, 0x3e	; 62
    3a90:	81 83       	std	Z+1, r24	; 0x01
    3a92:	92 83       	std	Z+2, r25	; 0x02
    3a94:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    3a98:	0f 90       	pop	r0
    3a9a:	0f 90       	pop	r0
    3a9c:	06 c0       	rjmp	.+12     	; 0x3aaa <handle_message_length_1+0x4ce>
			break;
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[1]);
    3a9e:	80 e0       	ldi	r24, 0x00	; 0
    3aa0:	68 e0       	ldi	r22, 0x08	; 8
    3aa2:	41 ec       	ldi	r20, 0xC1	; 193
    3aa4:	50 e2       	ldi	r21, 0x20	; 32
    3aa6:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <i2cMasterSend>
    }
}
    3aaa:	22 96       	adiw	r28, 0x02	; 2
    3aac:	e8 e0       	ldi	r30, 0x08	; 8
    3aae:	0c 94 ce 57 	jmp	0xaf9c	; 0xaf9c <__epilogue_restores__+0x14>

00003ab2 <main>:
}




int main(void) {
    3ab2:	a6 e4       	ldi	r26, 0x46	; 70
    3ab4:	b6 e0       	ldi	r27, 0x06	; 6
    3ab6:	ef e5       	ldi	r30, 0x5F	; 95
    3ab8:	fd e1       	ldi	r31, 0x1D	; 29
    3aba:	0c 94 b2 57 	jmp	0xaf64	; 0xaf64 <__prologue_saves__+0x14>
    uint16_t message_length;
    uint16_t lcv;
    uint8_t  tempBuff[128];
	uint8_t workingModes;
	
	workingModes = eeprom_read_byte(work_mode);
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	0e 94 33 5c 	call	0xb866	; 0xb866 <__eerd_byte_x128a1>
    3ac6:	e8 2e       	mov	r14, r24
	
    TWI_MasterCreateBuff(&twi1,workingModes);
    3ac8:	85 e7       	ldi	r24, 0x75	; 117
    3aca:	96 e2       	ldi	r25, 0x26	; 38
    3acc:	6e 2d       	mov	r22, r14
    3ace:	0e 94 78 30 	call	0x60f0	; 0x60f0 <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi2,workingModes);
    3ad2:	82 e7       	ldi	r24, 0x72	; 114
    3ad4:	99 e2       	ldi	r25, 0x29	; 41
    3ad6:	6e 2d       	mov	r22, r14
    3ad8:	0e 94 78 30 	call	0x60f0	; 0x60f0 <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi3,workingModes);
    3adc:	88 e0       	ldi	r24, 0x08	; 8
    3ade:	97 e2       	ldi	r25, 0x27	; 39
    3ae0:	6e 2d       	mov	r22, r14
    3ae2:	0e 94 78 30 	call	0x60f0	; 0x60f0 <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi4,workingModes);
    3ae6:	87 e9       	ldi	r24, 0x97	; 151
    3ae8:	95 e2       	ldi	r25, 0x25	; 37
    3aea:	6e 2d       	mov	r22, r14
    3aec:	0e 94 78 30 	call	0x60f0	; 0x60f0 <TWI_MasterCreateBuff>
    
// Initialize TWI master #1
    TWI_MasterInit(&twi1,
    3af0:	85 e7       	ldi	r24, 0x75	; 117
    3af2:	96 e2       	ldi	r25, 0x26	; 38
    3af4:	60 e8       	ldi	r22, 0x80	; 128
    3af6:	74 e0       	ldi	r23, 0x04	; 4
    3af8:	40 e4       	ldi	r20, 0x40	; 64
    3afa:	50 e0       	ldi	r21, 0x00	; 0
    3afc:	23 e2       	ldi	r18, 0x23	; 35
    3afe:	0e 94 29 2f 	call	0x5e52	; 0x5e52 <TWI_MasterInit>
            &TWIC,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #2
    TWI_MasterInit(&twi2,
    3b02:	82 e7       	ldi	r24, 0x72	; 114
    3b04:	99 e2       	ldi	r25, 0x29	; 41
    3b06:	60 e9       	ldi	r22, 0x90	; 144
    3b08:	74 e0       	ldi	r23, 0x04	; 4
    3b0a:	40 e4       	ldi	r20, 0x40	; 64
    3b0c:	50 e0       	ldi	r21, 0x00	; 0
    3b0e:	23 e2       	ldi	r18, 0x23	; 35
    3b10:	0e 94 29 2f 	call	0x5e52	; 0x5e52 <TWI_MasterInit>
            &TWID,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #3
    TWI_MasterInit(&twi3,
    3b14:	88 e0       	ldi	r24, 0x08	; 8
    3b16:	97 e2       	ldi	r25, 0x27	; 39
    3b18:	60 ea       	ldi	r22, 0xA0	; 160
    3b1a:	74 e0       	ldi	r23, 0x04	; 4
    3b1c:	40 e4       	ldi	r20, 0x40	; 64
    3b1e:	50 e0       	ldi	r21, 0x00	; 0
    3b20:	23 e2       	ldi	r18, 0x23	; 35
    3b22:	0e 94 29 2f 	call	0x5e52	; 0x5e52 <TWI_MasterInit>
            &TWIE,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #4
    TWI_MasterInit(&twi4,
    3b26:	87 e9       	ldi	r24, 0x97	; 151
    3b28:	95 e2       	ldi	r25, 0x25	; 37
    3b2a:	60 eb       	ldi	r22, 0xB0	; 176
    3b2c:	74 e0       	ldi	r23, 0x04	; 4
    3b2e:	40 e4       	ldi	r20, 0x40	; 64
    3b30:	50 e0       	ldi	r21, 0x00	; 0
    3b32:	23 e2       	ldi	r18, 0x23	; 35
    3b34:	0e 94 29 2f 	call	0x5e52	; 0x5e52 <TWI_MasterInit>
            &TWIF,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize the rest of the system
	createRxBuff(workingModes);
    3b38:	8e 2d       	mov	r24, r14
    3b3a:	0e 94 20 2e 	call	0x5c40	; 0x5c40 <createRxBuff>
    init_all();
    3b3e:	0e 94 82 2b 	call	0x5704	; 0x5704 <init_all>

    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    3b42:	89 ee       	ldi	r24, 0xE9	; 233
    3b44:	9c e2       	ldi	r25, 0x2C	; 44
    3b46:	80 93 74 25 	sts	0x2574, r24
    3b4a:	90 93 75 25 	sts	0x2575, r25
    3b4e:	80 e0       	ldi	r24, 0x00	; 0
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    { function_X[lcv] = function_Y[lcv] = 10;  }// here we use 10 as the equivalent for 1 V.
    3b52:	2a e0       	ldi	r18, 0x0A	; 10
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	fc 01       	movw	r30, r24
    3b58:	e5 55       	subi	r30, 0x55	; 85
    3b5a:	fa 4d       	sbci	r31, 0xDA	; 218
    3b5c:	20 83       	st	Z, r18
    3b5e:	31 83       	std	Z+1, r19	; 0x01
    3b60:	fc 01       	movw	r30, r24
    3b62:	e9 5f       	subi	r30, 0xF9	; 249
    3b64:	f7 4d       	sbci	r31, 0xD7	; 215
    3b66:	20 83       	st	Z, r18
    3b68:	31 83       	std	Z+1, r19	; 0x01
    3b6a:	02 96       	adiw	r24, 0x02	; 2

    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    3b6c:	88 3c       	cpi	r24, 0xC8	; 200
    3b6e:	91 05       	cpc	r25, r1
    3b70:	91 f7       	brne	.-28     	; 0x3b56 <main+0xa4>
    3b72:	e6 e8       	ldi	r30, 0x86	; 134
    3b74:	f6 e2       	ldi	r31, 0x26	; 38
    3b76:	20 e0       	ldi	r18, 0x00	; 0
    3b78:	30 e0       	ldi	r19, 0x00	; 0
	
	//initialize laser pattern
	for (lcv = 0; lcv < 96; lcv++)
	{ 
		if (((lcv >=0) && (lcv <= 23)) || ((lcv >= 48)&&(lcv <= 71)))
	        laserPattern[lcv] = 1;
    3b7a:	41 e0       	ldi	r20, 0x01	; 1
	
	
	//initialize laser pattern
	for (lcv = 0; lcv < 96; lcv++)
	{ 
		if (((lcv >=0) && (lcv <= 23)) || ((lcv >= 48)&&(lcv <= 71)))
    3b7c:	28 31       	cpi	r18, 0x18	; 24
    3b7e:	31 05       	cpc	r19, r1
    3b80:	20 f0       	brcs	.+8      	; 0x3b8a <main+0xd8>
    3b82:	c9 01       	movw	r24, r18
    3b84:	c0 97       	sbiw	r24, 0x30	; 48
    3b86:	48 97       	sbiw	r24, 0x18	; 24
    3b88:	10 f4       	brcc	.+4      	; 0x3b8e <main+0xdc>
	        laserPattern[lcv] = 1;
    3b8a:	40 83       	st	Z, r20
    3b8c:	01 c0       	rjmp	.+2      	; 0x3b90 <main+0xde>
		else
			laserPattern[lcv] = 0;
    3b8e:	10 82       	st	Z, r1
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    { function_X[lcv] = function_Y[lcv] = 10;  }// here we use 10 as the equivalent for 1 V.
	
	
	//initialize laser pattern
	for (lcv = 0; lcv < 96; lcv++)
    3b90:	2f 5f       	subi	r18, 0xFF	; 255
    3b92:	3f 4f       	sbci	r19, 0xFF	; 255
    3b94:	31 96       	adiw	r30, 0x01	; 1
    3b96:	20 36       	cpi	r18, 0x60	; 96
    3b98:	31 05       	cpc	r19, r1
    3b9a:	81 f7       	brne	.-32     	; 0x3b7c <main+0xca>
			laserPattern[lcv] = 0;
	}
	
    
    //initilializations
    X_pos_index = Y_pos_index = index_x = index_y = 0;
    3b9c:	10 92 50 29 	sts	0x2950, r1
    3ba0:	10 92 51 29 	sts	0x2951, r1
    3ba4:	80 91 50 29 	lds	r24, 0x2950
    3ba8:	90 91 51 29 	lds	r25, 0x2951
    3bac:	80 93 9b 27 	sts	0x279B, r24
    3bb0:	90 93 9c 27 	sts	0x279C, r25
    3bb4:	80 91 9b 27 	lds	r24, 0x279B
    3bb8:	90 91 9c 27 	lds	r25, 0x279C
    3bbc:	80 93 73 26 	sts	0x2673, r24
    3bc0:	90 93 74 26 	sts	0x2674, r25
    3bc4:	80 93 e6 26 	sts	0x26E6, r24
    3bc8:	90 93 e7 26 	sts	0x26E7, r25
    bias_x = bias_y = 0;
    3bcc:	10 92 b4 2b 	sts	0x2BB4, r1
    3bd0:	10 92 96 25 	sts	0x2596, r1
    gain_x = gain_y = 10;
    3bd4:	8a e0       	ldi	r24, 0x0A	; 10
    3bd6:	80 93 9d 27 	sts	0x279D, r24
    3bda:	80 93 e4 27 	sts	0x27E4, r24
    x_mode = y_mode = 0;
    3bde:	10 92 e3 27 	sts	0x27E3, r1
    3be2:	10 92 99 27 	sts	0x2799, r1
    X_val = Y_val = 0;
    3be6:	10 92 a8 25 	sts	0x25A8, r1
    3bea:	10 92 a9 25 	sts	0x25A9, r1
    3bee:	10 92 84 26 	sts	0x2684, r1
    3bf2:	10 92 85 26 	sts	0x2685, r1
    gs_value = 1;
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	80 93 17 27 	sts	0x2717, r24
    row_compress = 0;
    3bfc:	10 92 aa 25 	sts	0x25AA, r1
    ident_compress = 0; // enable this to substitute simpler panael pattern for uniform pattern patches
    3c00:	10 92 81 29 	sts	0x2981, r1
    
    temp = eeprom_read_byte(arena_config);
    3c04:	81 e0       	ldi	r24, 0x01	; 1
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	0e 94 33 5c 	call	0xb866	; 0xb866 <__eerd_byte_x128a1>
    if (temp == 0xff)     //there is no configuration file and use default value 
    3c0c:	8f 3f       	cpi	r24, 0xFF	; 255
    3c0e:	c1 f4       	brne	.+48     	; 0x3c40 <main+0x18e>
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
    3c10:	80 e0       	ldi	r24, 0x00	; 0
			chMap[b1] = b1 % 4;
			if (b1 && (chMap[b1] == 0))
				chMap[b1] = 4;
    3c12:	24 e0       	ldi	r18, 0x04	; 4
    3c14:	11 c0       	rjmp	.+34     	; 0x3c38 <main+0x186>
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
			chMap[b1] = b1 % 4;
    3c16:	e8 2f       	mov	r30, r24
    3c18:	f0 e0       	ldi	r31, 0x00	; 0
    3c1a:	98 2f       	mov	r25, r24
    3c1c:	93 70       	andi	r25, 0x03	; 3
    3c1e:	df 01       	movw	r26, r30
    3c20:	a8 5e       	subi	r26, 0xE8	; 232
    3c22:	b8 4d       	sbci	r27, 0xD8	; 216
    3c24:	9c 93       	st	X, r25
			if (b1 && (chMap[b1] == 0))
    3c26:	88 23       	and	r24, r24
    3c28:	19 f0       	breq	.+6      	; 0x3c30 <main+0x17e>
    3c2a:	99 23       	and	r25, r25
    3c2c:	09 f4       	brne	.+2      	; 0x3c30 <main+0x17e>
				chMap[b1] = 4;
    3c2e:	2c 93       	st	X, r18
			adrMap[b1] = b1; // panel address identity mapping
    3c30:	e1 53       	subi	r30, 0x31	; 49
    3c32:	f7 4d       	sbci	r31, 0xD7	; 215
    3c34:	80 83       	st	Z, r24
    3c36:	8f 5f       	subi	r24, 0xFF	; 255
    ident_compress = 0; // enable this to substitute simpler panael pattern for uniform pattern patches
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
    3c38:	81 38       	cpi	r24, 0x81	; 129
    3c3a:	68 f3       	brcs	.-38     	; 0x3c16 <main+0x164>
    3c3c:	89 83       	std	Y+1, r24	; 0x01
    3c3e:	17 c0       	rjmp	.+46     	; 0x3c6e <main+0x1bc>
				chMap[b1] = 4;
			adrMap[b1] = b1; // panel address identity mapping
		}
	} else
	{//load panel mapping from EEPROM	
		for (b1 = 0; b1 <= 128; b1++) {
    3c40:	19 82       	std	Y+1, r1	; 0x01
    3c42:	11 c0       	rjmp	.+34     	; 0x3c66 <main+0x1b4>
			chMap[b1] = eeprom_read_byte(arena_config + b1);
    3c44:	0f 2d       	mov	r16, r15
    3c46:	10 e0       	ldi	r17, 0x00	; 0
    3c48:	c8 01       	movw	r24, r16
    3c4a:	8f 5f       	subi	r24, 0xFF	; 255
    3c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c4e:	0e 94 33 5c 	call	0xb866	; 0xb866 <__eerd_byte_x128a1>
    3c52:	f8 01       	movw	r30, r16
    3c54:	e8 5e       	subi	r30, 0xE8	; 232
    3c56:	f8 4d       	sbci	r31, 0xD8	; 216
    3c58:	80 83       	st	Z, r24
			adrMap[b1] = b1; // panel address identity mapping
    3c5a:	01 53       	subi	r16, 0x31	; 49
    3c5c:	17 4d       	sbci	r17, 0xD7	; 215
    3c5e:	f8 01       	movw	r30, r16
    3c60:	f0 82       	st	Z, r15
				chMap[b1] = 4;
			adrMap[b1] = b1; // panel address identity mapping
		}
	} else
	{//load panel mapping from EEPROM	
		for (b1 = 0; b1 <= 128; b1++) {
    3c62:	f3 94       	inc	r15
    3c64:	f9 82       	std	Y+1, r15	; 0x01
    3c66:	f9 80       	ldd	r15, Y+1	; 0x01
    3c68:	f0 e8       	ldi	r31, 0x80	; 128
    3c6a:	ff 15       	cp	r31, r15
    3c6c:	58 f7       	brcc	.-42     	; 0x3c44 <main+0x192>
			chMap[b1] = eeprom_read_byte(arena_config + b1);
			adrMap[b1] = b1; // panel address identity mapping
		}
    }
    
    xputs(PSTR("\nMain Controller Works\n"));
    3c6e:	84 ee       	ldi	r24, 0xE4	; 228
    3c70:	99 e0       	ldi	r25, 0x09	; 9
    3c72:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	61 e0       	ldi	r22, 0x01	; 1
    3c7a:	0e 94 63 20 	call	0x40c6	; 0x40c6 <ledWrite>
    3c7e:	01 e0       	ldi	r16, 0x01	; 1
    3c80:	90 e2       	ldi	r25, 0x20	; 32
    3c82:	c9 2e       	mov	r12, r25
    3c84:	93 e0       	ldi	r25, 0x03	; 3
    3c86:	d9 2e       	mov	r13, r25
    3c88:	3a c0       	rjmp	.+116    	; 0x3cfe <main+0x24c>
    sta = STA_NOINIT;
    while (sta & STA_NOINIT) {
        sta = disk_status(0);
    3c8a:	80 e0       	ldi	r24, 0x00	; 0
    3c8c:	0e 94 8b 50 	call	0xa116	; 0xa116 <disk_status>
    3c90:	08 2f       	mov	r16, r24
        if(sta & STA_NODISK) {
    3c92:	81 ff       	sbrs	r24, 1
    3c94:	0d c0       	rjmp	.+26     	; 0x3cb0 <main+0x1fe>
            xputs(PSTR("Insert SD card"));
    3c96:	85 ed       	ldi	r24, 0xD5	; 213
    3c98:	99 e0       	ldi	r25, 0x09	; 9
    3c9a:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
            uart_crlf();
    3c9e:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <uart_crlf>
    3ca2:	04 c0       	rjmp	.+8      	; 0x3cac <main+0x1fa>
            while (sta & STA_NODISK) {
                sta = disk_status(0);
    3ca4:	80 e0       	ldi	r24, 0x00	; 0
    3ca6:	0e 94 8b 50 	call	0xa116	; 0xa116 <disk_status>
    3caa:	08 2f       	mov	r16, r24
    while (sta & STA_NOINIT) {
        sta = disk_status(0);
        if(sta & STA_NODISK) {
            xputs(PSTR("Insert SD card"));
            uart_crlf();
            while (sta & STA_NODISK) {
    3cac:	01 fd       	sbrc	r16, 1
    3cae:	fa cf       	rjmp	.-12     	; 0x3ca4 <main+0x1f2>
                sta = disk_status(0);
            }
        }
        if(sta & STA_PROTECT) {
    3cb0:	02 ff       	sbrs	r16, 2
    3cb2:	04 c0       	rjmp	.+8      	; 0x3cbc <main+0x20a>
            xputs(PSTR("SD card is Write Protected!\n"));
    3cb4:	88 eb       	ldi	r24, 0xB8	; 184
    3cb6:	99 e0       	ldi	r25, 0x09	; 9
    3cb8:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; ) {
    3cbc:	19 82       	std	Y+1, r1	; 0x01
    3cbe:	10 c0       	rjmp	.+32     	; 0x3ce0 <main+0x22e>
            sta = disk_initialize(0);
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	0e 94 81 53 	call	0xa702	; 0xa702 <disk_initialize>
    3cc6:	08 2f       	mov	r16, r24
            if(sta & STA_NOINIT) b1++;
    3cc8:	80 ff       	sbrs	r24, 0
    3cca:	0d c0       	rjmp	.+26     	; 0x3ce6 <main+0x234>
    3ccc:	29 81       	ldd	r18, Y+1	; 0x01
    3cce:	84 ef       	ldi	r24, 0xF4	; 244
    3cd0:	91 e0       	ldi	r25, 0x01	; 1
    3cd2:	f6 01       	movw	r30, r12
    3cd4:	31 97       	sbiw	r30, 0x01	; 1
    3cd6:	f1 f7       	brne	.-4      	; 0x3cd4 <main+0x222>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cda:	d9 f7       	brne	.-10     	; 0x3cd2 <main+0x220>
    3cdc:	2f 5f       	subi	r18, 0xFF	; 255
    3cde:	29 83       	std	Y+1, r18	; 0x01
        }
        if(sta & STA_PROTECT) {
            xputs(PSTR("SD card is Write Protected!\n"));
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; ) {
    3ce0:	89 81       	ldd	r24, Y+1	; 0x01
    3ce2:	84 30       	cpi	r24, 0x04	; 4
    3ce4:	68 f3       	brcs	.-38     	; 0x3cc0 <main+0x20e>
            sta = disk_initialize(0);
            if(sta & STA_NOINIT) b1++;
            else break;
            _delay_ms(50);
        }
        if(sta & STA_NOINIT) {
    3ce6:	00 ff       	sbrs	r16, 0
    3ce8:	0a c0       	rjmp	.+20     	; 0x3cfe <main+0x24c>
            xputs(PSTR("Initialization failed!!!\n"));
    3cea:	8e e9       	ldi	r24, 0x9E	; 158
    3cec:	99 e0       	ldi	r25, 0x09	; 9
    3cee:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
            sta = disk_status(0);
            while (!(sta & STA_NODISK)) {
                sta = disk_status(0);
    3cf2:	80 e0       	ldi	r24, 0x00	; 0
    3cf4:	0e 94 8b 50 	call	0xa116	; 0xa116 <disk_status>
    3cf8:	08 2f       	mov	r16, r24
            _delay_ms(50);
        }
        if(sta & STA_NOINIT) {
            xputs(PSTR("Initialization failed!!!\n"));
            sta = disk_status(0);
            while (!(sta & STA_NODISK)) {
    3cfa:	81 ff       	sbrs	r24, 1
    3cfc:	fa cf       	rjmp	.-12     	; 0x3cf2 <main+0x240>
    xputs(PSTR("\nMain Controller Works\n"));
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    sta = STA_NOINIT;
    while (sta & STA_NOINIT) {
    3cfe:	00 fd       	sbrc	r16, 0
    3d00:	c4 cf       	rjmp	.-120    	; 0x3c8a <main+0x1d8>
            while (!(sta & STA_NODISK)) {
                sta = disk_status(0);
            }
        }
    }
    xputs(PSTR("SD card is initialized\n"));
    3d02:	86 e8       	ldi	r24, 0x86	; 134
    3d04:	99 e0       	ldi	r25, 0x09	; 9
    3d06:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    
    if (disk_ioctl(0, MMC_GET_TYPE, &b1) == RES_OK) {
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	6a e0       	ldi	r22, 0x0A	; 10
    3d0e:	ae 01       	movw	r20, r28
    3d10:	4f 5f       	subi	r20, 0xFF	; 255
    3d12:	5f 4f       	sbci	r21, 0xFF	; 255
    3d14:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <disk_ioctl>
    3d18:	89 2b       	or	r24, r25
    3d1a:	59 f5       	brne	.+86     	; 0x3d72 <main+0x2c0>
        xputs(PSTR("Card type: "));
    3d1c:	8a e7       	ldi	r24, 0x7A	; 122
    3d1e:	99 e0       	ldi	r25, 0x09	; 9
    3d20:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
        switch(b1) {
    3d24:	89 81       	ldd	r24, Y+1	; 0x01
    3d26:	84 30       	cpi	r24, 0x04	; 4
    3d28:	a1 f0       	breq	.+40     	; 0x3d52 <main+0x2a0>
    3d2a:	85 30       	cpi	r24, 0x05	; 5
    3d2c:	28 f4       	brcc	.+10     	; 0x3d38 <main+0x286>
    3d2e:	81 30       	cpi	r24, 0x01	; 1
    3d30:	51 f0       	breq	.+20     	; 0x3d46 <main+0x294>
    3d32:	82 30       	cpi	r24, 0x02	; 2
    3d34:	d1 f4       	brne	.+52     	; 0x3d6a <main+0x2b8>
    3d36:	0a c0       	rjmp	.+20     	; 0x3d4c <main+0x29a>
    3d38:	88 30       	cpi	r24, 0x08	; 8
    3d3a:	89 f0       	breq	.+34     	; 0x3d5e <main+0x2ac>
    3d3c:	8c 30       	cpi	r24, 0x0C	; 12
    3d3e:	91 f0       	breq	.+36     	; 0x3d64 <main+0x2b2>
    3d40:	86 30       	cpi	r24, 0x06	; 6
    3d42:	99 f4       	brne	.+38     	; 0x3d6a <main+0x2b8>
    3d44:	09 c0       	rjmp	.+18     	; 0x3d58 <main+0x2a6>
            case CT_MMC: xputs(PSTR("MMC\n")); break;
    3d46:	85 e7       	ldi	r24, 0x75	; 117
    3d48:	99 e0       	ldi	r25, 0x09	; 9
    3d4a:	11 c0       	rjmp	.+34     	; 0x3d6e <main+0x2bc>
            case CT_SD1: xputs(PSTR("SD\n")); break;
    3d4c:	81 e7       	ldi	r24, 0x71	; 113
    3d4e:	99 e0       	ldi	r25, 0x09	; 9
    3d50:	0e c0       	rjmp	.+28     	; 0x3d6e <main+0x2bc>
            case CT_SD2: xputs(PSTR("SD2\n")); break;
    3d52:	8c e6       	ldi	r24, 0x6C	; 108
    3d54:	99 e0       	ldi	r25, 0x09	; 9
    3d56:	0b c0       	rjmp	.+22     	; 0x3d6e <main+0x2bc>
            case CT_SDC: xputs(PSTR("SDC\n")); break;
    3d58:	87 e6       	ldi	r24, 0x67	; 103
    3d5a:	99 e0       	ldi	r25, 0x09	; 9
    3d5c:	08 c0       	rjmp	.+16     	; 0x3d6e <main+0x2bc>
            case CT_BLOCK: xputs(PSTR("BLK\n")); break;
    3d5e:	82 e6       	ldi	r24, 0x62	; 98
    3d60:	99 e0       	ldi	r25, 0x09	; 9
    3d62:	05 c0       	rjmp	.+10     	; 0x3d6e <main+0x2bc>
            case CT_SD2_BLK: xputs(PSTR("SDHC\n")); break;
    3d64:	8c e5       	ldi	r24, 0x5C	; 92
    3d66:	99 e0       	ldi	r25, 0x09	; 9
    3d68:	02 c0       	rjmp	.+4      	; 0x3d6e <main+0x2bc>
            default: xputs(PSTR("???\n"));
    3d6a:	87 e5       	ldi	r24, 0x57	; 87
    3d6c:	99 e0       	ldi	r25, 0x09	; 9
    3d6e:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
        }
    }
    
    xputs(PSTR("Initializing FAT Disk..."));
    3d72:	8e e3       	ldi	r24, 0x3E	; 62
    3d74:	99 e0       	ldi	r25, 0x09	; 9
    3d76:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    res = f_mount(0, &fatfs);
    3d7a:	80 e0       	ldi	r24, 0x00	; 0
    3d7c:	62 e8       	ldi	r22, 0x82	; 130
    3d7e:	79 e2       	ldi	r23, 0x29	; 41
    3d80:	0e 94 19 31 	call	0x6232	; 0x6232 <f_mount>
    switch(res) {
    3d84:	81 30       	cpi	r24, 0x01	; 1
    3d86:	51 f0       	breq	.+20     	; 0x3d9c <main+0x2ea>
    3d88:	81 30       	cpi	r24, 0x01	; 1
    3d8a:	28 f0       	brcs	.+10     	; 0x3d96 <main+0x2e4>
    3d8c:	82 30       	cpi	r24, 0x02	; 2
    3d8e:	49 f0       	breq	.+18     	; 0x3da2 <main+0x2f0>
    3d90:	83 30       	cpi	r24, 0x03	; 3
    3d92:	69 f4       	brne	.+26     	; 0x3dae <main+0x2fc>
    3d94:	09 c0       	rjmp	.+18     	; 0x3da8 <main+0x2f6>
        case RES_OK: xputs(PSTR(" FAT OK!\n")); break;
    3d96:	84 e3       	ldi	r24, 0x34	; 52
    3d98:	99 e0       	ldi	r25, 0x09	; 9
    3d9a:	0b c0       	rjmp	.+22     	; 0x3db2 <main+0x300>
        case RES_ERROR: xputs(PSTR(" ERROR!\n")); break;
    3d9c:	8b e2       	ldi	r24, 0x2B	; 43
    3d9e:	99 e0       	ldi	r25, 0x09	; 9
    3da0:	08 c0       	rjmp	.+16     	; 0x3db2 <main+0x300>
        case RES_WRPRT: xputs(PSTR(" WRITE PROTECTED!\n")); break;
    3da2:	88 e1       	ldi	r24, 0x18	; 24
    3da4:	99 e0       	ldi	r25, 0x09	; 9
    3da6:	05 c0       	rjmp	.+10     	; 0x3db2 <main+0x300>
        case RES_NOTRDY: xputs(PSTR(" NOT READY!\n")); break;
    3da8:	8b e0       	ldi	r24, 0x0B	; 11
    3daa:	99 e0       	ldi	r25, 0x09	; 9
    3dac:	02 c0       	rjmp	.+4      	; 0x3db2 <main+0x300>
        default: xputs(PSTR("???\n"));
    3dae:	86 e0       	ldi	r24, 0x06	; 6
    3db0:	99 e0       	ldi	r25, 0x09	; 9
    3db2:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    }
    
    
    i2cMasterSend(0x00, 8, ALL_OFF);
    3db6:	80 e0       	ldi	r24, 0x00	; 0
    3db8:	68 e0       	ldi	r22, 0x08	; 8
    3dba:	40 e1       	ldi	r20, 0x10	; 16
    3dbc:	55 e2       	ldi	r21, 0x25	; 37
    3dbe:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <i2cMasterSend>
    ledWrite(LED1, OFF);
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	60 e0       	ldi	r22, 0x00	; 0
    3dc6:	0e 94 63 20 	call	0x40c6	; 0x40c6 <ledWrite>
    ledBlink();
    3dca:	0e 94 99 20 	call	0x4132	; 0x4132 <ledBlink>
    // Here the EEPROM location 0 is used as a switch between Controller and PCDump mode
    // An alternative is to base the switch on the SD config file
    if (workingModes == 0xff) {
    3dce:	8f ef       	ldi	r24, 0xFF	; 255
    3dd0:	e8 16       	cp	r14, r24
    3dd2:	09 f0       	breq	.+2      	; 0x3dd6 <main+0x324>
    3dd4:	59 c0       	rjmp	.+178    	; 0x3e88 <main+0x3d6>
        uint8_t msg_buffer[55];
		xputs(PSTR("Current working mode is the Controller mode!\n"));
    3dd6:	88 ed       	ldi	r24, 0xD8	; 216
    3dd8:	98 e0       	ldi	r25, 0x08	; 8
    3dda:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
		
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    3dde:	8e 01       	movw	r16, r28
    3de0:	0e 5f       	subi	r16, 0xFE	; 254
    3de2:	1f 4f       	sbci	r17, 0xFF	; 255
    if (workingModes == 0xff) {
        uint8_t msg_buffer[55];
		xputs(PSTR("Current working mode is the Controller mode!\n"));
		
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
    3de4:	0e 94 b6 2c 	call	0x596c	; 0x596c <uart_test>
    3de8:	89 2b       	or	r24, r25
    3dea:	79 f1       	breq	.+94     	; 0x3e4a <main+0x398>
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    3dec:	c8 01       	movw	r24, r16
    3dee:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <fill_Rx_buffer>
                switch(message_length) {
    3df2:	83 30       	cpi	r24, 0x03	; 3
    3df4:	91 05       	cpc	r25, r1
    3df6:	b9 f0       	breq	.+46     	; 0x3e26 <main+0x374>
    3df8:	84 30       	cpi	r24, 0x04	; 4
    3dfa:	91 05       	cpc	r25, r1
    3dfc:	30 f4       	brcc	.+12     	; 0x3e0a <main+0x358>
    3dfe:	81 30       	cpi	r24, 0x01	; 1
    3e00:	91 05       	cpc	r25, r1
    3e02:	49 f0       	breq	.+18     	; 0x3e16 <main+0x364>
    3e04:	02 97       	sbiw	r24, 0x02	; 2
    3e06:	d9 f4       	brne	.+54     	; 0x3e3e <main+0x38c>
    3e08:	0a c0       	rjmp	.+20     	; 0x3e1e <main+0x36c>
    3e0a:	85 30       	cpi	r24, 0x05	; 5
    3e0c:	91 05       	cpc	r25, r1
    3e0e:	79 f0       	breq	.+30     	; 0x3e2e <main+0x37c>
    3e10:	0c 97       	sbiw	r24, 0x0c	; 12
    3e12:	a9 f4       	brne	.+42     	; 0x3e3e <main+0x38c>
    3e14:	10 c0       	rjmp	.+32     	; 0x3e36 <main+0x384>
                    case 1:  // if length 1, then decode...
                        handle_message_length_1(&msg_buffer[0]);
    3e16:	c8 01       	movw	r24, r16
    3e18:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <handle_message_length_1>
    3e1c:	16 c0       	rjmp	.+44     	; 0x3e4a <main+0x398>
                        break;
                    case 2: // if length 2, then decode, could be reset, display num, or change pat
                        handle_message_length_2(&msg_buffer[0]);
    3e1e:	c8 01       	movw	r24, r16
    3e20:	0e 94 af 1a 	call	0x355e	; 0x355e <handle_message_length_2>
    3e24:	12 c0       	rjmp	.+36     	; 0x3e4a <main+0x398>
                        break;
                    case 3: // if length 3, then decode...address change or ...
                        handle_message_length_3(&msg_buffer[0]);
    3e26:	c8 01       	movw	r24, r16
    3e28:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <handle_message_length_3>
    3e2c:	0e c0       	rjmp	.+28     	; 0x3e4a <main+0x398>
                        break;
                    case 5: // if length 5, then decode, set x,y index, or set gain, bias
                        handle_message_length_5(&msg_buffer[0]);
    3e2e:	c8 01       	movw	r24, r16
    3e30:	0e 94 20 1a 	call	0x3440	; 0x3440 <handle_message_length_5>
    3e34:	0a c0       	rjmp	.+20     	; 0x3e4a <main+0x398>
                        break;
                    case 12: //if length 12, then set laser trigger pattern
                        handle_message_length_12(&msg_buffer[0]);
    3e36:	c8 01       	movw	r24, r16
    3e38:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <handle_message_length_12>
    3e3c:	06 c0       	rjmp	.+12     	; 0x3e4a <main+0x398>
                        break;
                    default:
                        i2cMasterSend(0x00, 8, ERROR_CODES[6]);
    3e3e:	80 e0       	ldi	r24, 0x00	; 0
    3e40:	68 e0       	ldi	r22, 0x08	; 8
    3e42:	49 ee       	ldi	r20, 0xE9	; 233
    3e44:	50 e2       	ldi	r21, 0x20	; 32
    3e46:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <i2cMasterSend>
                } //end of switch
            }// end of if, goes to top if nothing received on UART
            
            // at bottom of while(1) loop, check to see if stop is 0, then unpdate display if the frame has changed.
            if (Stop == 0){  //only send out new pattern if the pattern index has changed
    3e4a:	80 91 9c 20 	lds	r24, 0x209C
    3e4e:	88 23       	and	r24, r24
    3e50:	49 f6       	brne	.-110    	; 0x3de4 <main+0x332>
                if (frame_num != frame_num_old) {
    3e52:	20 91 e5 24 	lds	r18, 0x24E5
    3e56:	30 91 e6 24 	lds	r19, 0x24E6
    3e5a:	80 91 9d 20 	lds	r24, 0x209D
    3e5e:	90 91 9e 20 	lds	r25, 0x209E
    3e62:	28 17       	cp	r18, r24
    3e64:	39 07       	cpc	r19, r25
    3e66:	09 f4       	brne	.+2      	; 0x3e6a <main+0x3b8>
    3e68:	bd cf       	rjmp	.-134    	; 0x3de4 <main+0x332>
                    frame_num_old = frame_num; //update the 'old' frame number
    3e6a:	80 91 e5 24 	lds	r24, 0x24E5
    3e6e:	90 91 e6 24 	lds	r25, 0x24E6
    3e72:	80 93 9d 20 	sts	0x209D, r24
    3e76:	90 93 9e 20 	sts	0x209E, r25
                    fetch_display_frame(frame_num);
    3e7a:	80 91 e5 24 	lds	r24, 0x24E5
    3e7e:	90 91 e6 24 	lds	r25, 0x24E6
    3e82:	0e 94 00 16 	call	0x2c00	; 0x2c00 <fetch_display_frame>
    3e86:	ae cf       	rjmp	.-164    	; 0x3de4 <main+0x332>
                }
            }
        }
    } else {
        uint8_t msg_buffer[1550];
		xputs(PSTR("Current working mode is the PC dumping mode!\n"));
    3e88:	8a ea       	ldi	r24, 0xAA	; 170
    3e8a:	98 e0       	ldi	r25, 0x08	; 8
    3e8c:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    3e90:	8e 01       	movw	r16, r28
    3e92:	07 5c       	subi	r16, 0xC7	; 199
    3e94:	1f 4f       	sbci	r17, 0xFF	; 255
                    //    break;
                    case 50: //
                        display_dumped_frame(&msg_buffer[0]);
                        break;
                    default:
xprintf(PSTR("message_length = %u\n"), message_length);					
    3e96:	85 e9       	ldi	r24, 0x95	; 149
    3e98:	e8 2e       	mov	r14, r24
    3e9a:	88 e0       	ldi	r24, 0x08	; 8
    3e9c:	f8 2e       	mov	r15, r24
        }
    } else {
        uint8_t msg_buffer[1550];
		xputs(PSTR("Current working mode is the PC dumping mode!\n"));
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
    3e9e:	0e 94 b6 2c 	call	0x596c	; 0x596c <uart_test>
    3ea2:	89 2b       	or	r24, r25
    3ea4:	e1 f3       	breq	.-8      	; 0x3e9e <main+0x3ec>
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    3ea6:	c8 01       	movw	r24, r16
    3ea8:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <fill_Rx_buffer>
                switch(message_length) {
    3eac:	81 30       	cpi	r24, 0x01	; 1
    3eae:	91 05       	cpc	r25, r1
    3eb0:	21 f0       	breq	.+8      	; 0x3eba <main+0x408>
    3eb2:	82 33       	cpi	r24, 0x32	; 50
    3eb4:	91 05       	cpc	r25, r1
    3eb6:	49 f4       	brne	.+18     	; 0x3eca <main+0x418>
    3eb8:	04 c0       	rjmp	.+8      	; 0x3ec2 <main+0x410>
                    case 1:  // if length 1, then decode...
                        handle_message_length_1(&msg_buffer[0]);
    3eba:	c8 01       	movw	r24, r16
    3ebc:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <handle_message_length_1>
    3ec0:	ee cf       	rjmp	.-36     	; 0x3e9e <main+0x3ec>
                        break;
                    //case 2: // if length 2, then decode, could be reset, display num, or change pat
                    //    handle_message_length_2(&msg_buffer[0]);
                    //    break;
                    case 50: //
                        display_dumped_frame(&msg_buffer[0]);
    3ec2:	c8 01       	movw	r24, r16
    3ec4:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <display_dumped_frame>
    3ec8:	ea cf       	rjmp	.-44     	; 0x3e9e <main+0x3ec>
                        break;
                    default:
xprintf(PSTR("message_length = %u\n"), message_length);					
    3eca:	00 d0       	rcall	.+0      	; 0x3ecc <main+0x41a>
    3ecc:	0f 92       	push	r0
    3ece:	ed b7       	in	r30, 0x3d	; 61
    3ed0:	fe b7       	in	r31, 0x3e	; 62
    3ed2:	e1 82       	std	Z+1, r14	; 0x01
    3ed4:	f2 82       	std	Z+2, r15	; 0x02
    3ed6:	83 83       	std	Z+3, r24	; 0x03
    3ed8:	94 83       	std	Z+4, r25	; 0x04
    3eda:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
                        i2cMasterSend(0x00, 8, ERROR_CODES[6]);
    3ede:	0f 90       	pop	r0
    3ee0:	0f 90       	pop	r0
    3ee2:	0f 90       	pop	r0
    3ee4:	0f 90       	pop	r0
    3ee6:	80 e0       	ldi	r24, 0x00	; 0
    3ee8:	68 e0       	ldi	r22, 0x08	; 8
    3eea:	49 ee       	ldi	r20, 0xE9	; 233
    3eec:	50 e2       	ldi	r21, 0x20	; 32
    3eee:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <i2cMasterSend>
    3ef2:	d5 cf       	rjmp	.-86     	; 0x3e9e <main+0x3ec>

00003ef4 <__vector_107>:

/*---------------------------------------------------------*/
/* TWIF Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIF_TWIM_vect) {
    3ef4:	1f 92       	push	r1
    3ef6:	0f 92       	push	r0
    3ef8:	0f b6       	in	r0, 0x3f	; 63
    3efa:	0f 92       	push	r0
    3efc:	08 b6       	in	r0, 0x38	; 56
    3efe:	0f 92       	push	r0
    3f00:	09 b6       	in	r0, 0x39	; 57
    3f02:	0f 92       	push	r0
    3f04:	0b b6       	in	r0, 0x3b	; 59
    3f06:	0f 92       	push	r0
    3f08:	11 24       	eor	r1, r1
    3f0a:	18 be       	out	0x38, r1	; 56
    3f0c:	19 be       	out	0x39, r1	; 57
    3f0e:	1b be       	out	0x3b, r1	; 59
    3f10:	2f 93       	push	r18
    3f12:	3f 93       	push	r19
    3f14:	4f 93       	push	r20
    3f16:	5f 93       	push	r21
    3f18:	6f 93       	push	r22
    3f1a:	7f 93       	push	r23
    3f1c:	8f 93       	push	r24
    3f1e:	9f 93       	push	r25
    3f20:	af 93       	push	r26
    3f22:	bf 93       	push	r27
    3f24:	ef 93       	push	r30
    3f26:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi4);
    3f28:	87 e9       	ldi	r24, 0x97	; 151
    3f2a:	95 e2       	ldi	r25, 0x25	; 37
    3f2c:	0e 94 45 30 	call	0x608a	; 0x608a <TWI_MasterInterruptHandler>
}
    3f30:	ff 91       	pop	r31
    3f32:	ef 91       	pop	r30
    3f34:	bf 91       	pop	r27
    3f36:	af 91       	pop	r26
    3f38:	9f 91       	pop	r25
    3f3a:	8f 91       	pop	r24
    3f3c:	7f 91       	pop	r23
    3f3e:	6f 91       	pop	r22
    3f40:	5f 91       	pop	r21
    3f42:	4f 91       	pop	r20
    3f44:	3f 91       	pop	r19
    3f46:	2f 91       	pop	r18
    3f48:	0f 90       	pop	r0
    3f4a:	0b be       	out	0x3b, r0	; 59
    3f4c:	0f 90       	pop	r0
    3f4e:	09 be       	out	0x39, r0	; 57
    3f50:	0f 90       	pop	r0
    3f52:	08 be       	out	0x38, r0	; 56
    3f54:	0f 90       	pop	r0
    3f56:	0f be       	out	0x3f, r0	; 63
    3f58:	0f 90       	pop	r0
    3f5a:	1f 90       	pop	r1
    3f5c:	18 95       	reti

00003f5e <__vector_46>:

/*---------------------------------------------------------*/
/* TWIE Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIE_TWIM_vect) {
    3f5e:	1f 92       	push	r1
    3f60:	0f 92       	push	r0
    3f62:	0f b6       	in	r0, 0x3f	; 63
    3f64:	0f 92       	push	r0
    3f66:	08 b6       	in	r0, 0x38	; 56
    3f68:	0f 92       	push	r0
    3f6a:	09 b6       	in	r0, 0x39	; 57
    3f6c:	0f 92       	push	r0
    3f6e:	0b b6       	in	r0, 0x3b	; 59
    3f70:	0f 92       	push	r0
    3f72:	11 24       	eor	r1, r1
    3f74:	18 be       	out	0x38, r1	; 56
    3f76:	19 be       	out	0x39, r1	; 57
    3f78:	1b be       	out	0x3b, r1	; 59
    3f7a:	2f 93       	push	r18
    3f7c:	3f 93       	push	r19
    3f7e:	4f 93       	push	r20
    3f80:	5f 93       	push	r21
    3f82:	6f 93       	push	r22
    3f84:	7f 93       	push	r23
    3f86:	8f 93       	push	r24
    3f88:	9f 93       	push	r25
    3f8a:	af 93       	push	r26
    3f8c:	bf 93       	push	r27
    3f8e:	ef 93       	push	r30
    3f90:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi3);
    3f92:	88 e0       	ldi	r24, 0x08	; 8
    3f94:	97 e2       	ldi	r25, 0x27	; 39
    3f96:	0e 94 45 30 	call	0x608a	; 0x608a <TWI_MasterInterruptHandler>
}
    3f9a:	ff 91       	pop	r31
    3f9c:	ef 91       	pop	r30
    3f9e:	bf 91       	pop	r27
    3fa0:	af 91       	pop	r26
    3fa2:	9f 91       	pop	r25
    3fa4:	8f 91       	pop	r24
    3fa6:	7f 91       	pop	r23
    3fa8:	6f 91       	pop	r22
    3faa:	5f 91       	pop	r21
    3fac:	4f 91       	pop	r20
    3fae:	3f 91       	pop	r19
    3fb0:	2f 91       	pop	r18
    3fb2:	0f 90       	pop	r0
    3fb4:	0b be       	out	0x3b, r0	; 59
    3fb6:	0f 90       	pop	r0
    3fb8:	09 be       	out	0x39, r0	; 57
    3fba:	0f 90       	pop	r0
    3fbc:	08 be       	out	0x38, r0	; 56
    3fbe:	0f 90       	pop	r0
    3fc0:	0f be       	out	0x3f, r0	; 63
    3fc2:	0f 90       	pop	r0
    3fc4:	1f 90       	pop	r1
    3fc6:	18 95       	reti

00003fc8 <__vector_76>:

/*---------------------------------------------------------*/
/* TWID Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWID_TWIM_vect) {
    3fc8:	1f 92       	push	r1
    3fca:	0f 92       	push	r0
    3fcc:	0f b6       	in	r0, 0x3f	; 63
    3fce:	0f 92       	push	r0
    3fd0:	08 b6       	in	r0, 0x38	; 56
    3fd2:	0f 92       	push	r0
    3fd4:	09 b6       	in	r0, 0x39	; 57
    3fd6:	0f 92       	push	r0
    3fd8:	0b b6       	in	r0, 0x3b	; 59
    3fda:	0f 92       	push	r0
    3fdc:	11 24       	eor	r1, r1
    3fde:	18 be       	out	0x38, r1	; 56
    3fe0:	19 be       	out	0x39, r1	; 57
    3fe2:	1b be       	out	0x3b, r1	; 59
    3fe4:	2f 93       	push	r18
    3fe6:	3f 93       	push	r19
    3fe8:	4f 93       	push	r20
    3fea:	5f 93       	push	r21
    3fec:	6f 93       	push	r22
    3fee:	7f 93       	push	r23
    3ff0:	8f 93       	push	r24
    3ff2:	9f 93       	push	r25
    3ff4:	af 93       	push	r26
    3ff6:	bf 93       	push	r27
    3ff8:	ef 93       	push	r30
    3ffa:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi2);
    3ffc:	82 e7       	ldi	r24, 0x72	; 114
    3ffe:	99 e2       	ldi	r25, 0x29	; 41
    4000:	0e 94 45 30 	call	0x608a	; 0x608a <TWI_MasterInterruptHandler>
}
    4004:	ff 91       	pop	r31
    4006:	ef 91       	pop	r30
    4008:	bf 91       	pop	r27
    400a:	af 91       	pop	r26
    400c:	9f 91       	pop	r25
    400e:	8f 91       	pop	r24
    4010:	7f 91       	pop	r23
    4012:	6f 91       	pop	r22
    4014:	5f 91       	pop	r21
    4016:	4f 91       	pop	r20
    4018:	3f 91       	pop	r19
    401a:	2f 91       	pop	r18
    401c:	0f 90       	pop	r0
    401e:	0b be       	out	0x3b, r0	; 59
    4020:	0f 90       	pop	r0
    4022:	09 be       	out	0x39, r0	; 57
    4024:	0f 90       	pop	r0
    4026:	08 be       	out	0x38, r0	; 56
    4028:	0f 90       	pop	r0
    402a:	0f be       	out	0x3f, r0	; 63
    402c:	0f 90       	pop	r0
    402e:	1f 90       	pop	r1
    4030:	18 95       	reti

00004032 <__vector_13>:

/*---------------------------------------------------------*/
/* TWIC Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIC_TWIM_vect) {
    4032:	1f 92       	push	r1
    4034:	0f 92       	push	r0
    4036:	0f b6       	in	r0, 0x3f	; 63
    4038:	0f 92       	push	r0
    403a:	08 b6       	in	r0, 0x38	; 56
    403c:	0f 92       	push	r0
    403e:	09 b6       	in	r0, 0x39	; 57
    4040:	0f 92       	push	r0
    4042:	0b b6       	in	r0, 0x3b	; 59
    4044:	0f 92       	push	r0
    4046:	11 24       	eor	r1, r1
    4048:	18 be       	out	0x38, r1	; 56
    404a:	19 be       	out	0x39, r1	; 57
    404c:	1b be       	out	0x3b, r1	; 59
    404e:	2f 93       	push	r18
    4050:	3f 93       	push	r19
    4052:	4f 93       	push	r20
    4054:	5f 93       	push	r21
    4056:	6f 93       	push	r22
    4058:	7f 93       	push	r23
    405a:	8f 93       	push	r24
    405c:	9f 93       	push	r25
    405e:	af 93       	push	r26
    4060:	bf 93       	push	r27
    4062:	ef 93       	push	r30
    4064:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi1);
    4066:	85 e7       	ldi	r24, 0x75	; 117
    4068:	96 e2       	ldi	r25, 0x26	; 38
    406a:	0e 94 45 30 	call	0x608a	; 0x608a <TWI_MasterInterruptHandler>
}
    406e:	ff 91       	pop	r31
    4070:	ef 91       	pop	r30
    4072:	bf 91       	pop	r27
    4074:	af 91       	pop	r26
    4076:	9f 91       	pop	r25
    4078:	8f 91       	pop	r24
    407a:	7f 91       	pop	r23
    407c:	6f 91       	pop	r22
    407e:	5f 91       	pop	r21
    4080:	4f 91       	pop	r20
    4082:	3f 91       	pop	r19
    4084:	2f 91       	pop	r18
    4086:	0f 90       	pop	r0
    4088:	0b be       	out	0x3b, r0	; 59
    408a:	0f 90       	pop	r0
    408c:	09 be       	out	0x39, r0	; 57
    408e:	0f 90       	pop	r0
    4090:	08 be       	out	0x38, r0	; 56
    4092:	0f 90       	pop	r0
    4094:	0f be       	out	0x3f, r0	; 63
    4096:	0f 90       	pop	r0
    4098:	1f 90       	pop	r1
    409a:	18 95       	reti

0000409c <CCPWrite>:
  sei();
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    409c:	0f 93       	push	r16
    409e:	df 93       	push	r29
    40a0:	cf 93       	push	r28
    40a2:	0f 92       	push	r0
    40a4:	cd b7       	in	r28, 0x3d	; 61
    40a6:	de b7       	in	r29, 0x3e	; 62
  uint8_t volatile saved_sreg = SREG;
    40a8:	2f b7       	in	r18, 0x3f	; 63
    40aa:	29 83       	std	Y+1, r18	; 0x01
  cli();
    40ac:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    40ae:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    40b0:	fc 01       	movw	r30, r24
    40b2:	08 ed       	ldi	r16, 0xD8	; 216
    40b4:	04 bf       	out	0x34, r16	; 52
    40b6:	60 83       	st	Z, r22
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    40b8:	89 81       	ldd	r24, Y+1	; 0x01
    40ba:	8f bf       	out	0x3f, r24	; 63
}
    40bc:	0f 90       	pop	r0
    40be:	cf 91       	pop	r28
    40c0:	df 91       	pop	r29
    40c2:	0f 91       	pop	r16
    40c4:	08 95       	ret

000040c6 <ledWrite>:

void ledWrite( uint8_t led, uint8_t value ) {
  // ignore write if out-ouf-bounds argument
  if (!((led & ~3) || (value & ~1))) {
    40c6:	28 2f       	mov	r18, r24
    40c8:	30 e0       	ldi	r19, 0x00	; 0
    40ca:	c9 01       	movw	r24, r18
    40cc:	8c 7f       	andi	r24, 0xFC	; 252
    40ce:	89 2b       	or	r24, r25
    40d0:	e1 f4       	brne	.+56     	; 0x410a <ledWrite+0x44>
    40d2:	86 2f       	mov	r24, r22
    40d4:	8e 7f       	andi	r24, 0xFE	; 254
    40d6:	c9 f4       	brne	.+50     	; 0x410a <ledWrite+0x44>
    40d8:	2c 5f       	subi	r18, 0xFC	; 252
    40da:	3f 4f       	sbci	r19, 0xFF	; 255
    if (value == 1) {
    40dc:	61 30       	cpi	r22, 0x01	; 1
    40de:	59 f4       	brne	.+22     	; 0x40f6 <ledWrite+0x30>
      // turn the led ON
      PORTJ.OUTCLR = 1 << 4 + led;
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	02 c0       	rjmp	.+4      	; 0x40ea <ledWrite+0x24>
    40e6:	88 0f       	add	r24, r24
    40e8:	99 1f       	adc	r25, r25
    40ea:	2a 95       	dec	r18
    40ec:	e2 f7       	brpl	.-8      	; 0x40e6 <ledWrite+0x20>
    40ee:	e0 e0       	ldi	r30, 0x00	; 0
    40f0:	f7 e0       	ldi	r31, 0x07	; 7
    40f2:	86 83       	std	Z+6, r24	; 0x06
    40f4:	08 95       	ret
    } else {
      // turn the led OFF
      PORTJ.OUTSET = 1 << 4 + led;
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	02 c0       	rjmp	.+4      	; 0x4100 <ledWrite+0x3a>
    40fc:	88 0f       	add	r24, r24
    40fe:	99 1f       	adc	r25, r25
    4100:	2a 95       	dec	r18
    4102:	e2 f7       	brpl	.-8      	; 0x40fc <ledWrite+0x36>
    4104:	e0 e0       	ldi	r30, 0x00	; 0
    4106:	f7 e0       	ldi	r31, 0x07	; 7
    4108:	85 83       	std	Z+5, r24	; 0x05
    410a:	08 95       	ret

0000410c <ledToggle>:
  }
}

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    410c:	28 2f       	mov	r18, r24
    410e:	30 e0       	ldi	r19, 0x00	; 0
    4110:	c9 01       	movw	r24, r18
    4112:	8c 7f       	andi	r24, 0xFC	; 252
    4114:	89 2b       	or	r24, r25
    4116:	61 f4       	brne	.+24     	; 0x4130 <ledToggle+0x24>
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    4118:	2c 5f       	subi	r18, 0xFC	; 252
    411a:	3f 4f       	sbci	r19, 0xFF	; 255
    411c:	81 e0       	ldi	r24, 0x01	; 1
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	02 c0       	rjmp	.+4      	; 0x4126 <ledToggle+0x1a>
    4122:	88 0f       	add	r24, r24
    4124:	99 1f       	adc	r25, r25
    4126:	2a 95       	dec	r18
    4128:	e2 f7       	brpl	.-8      	; 0x4122 <ledToggle+0x16>
    412a:	e0 e0       	ldi	r30, 0x00	; 0
    412c:	f7 e0       	ldi	r31, 0x07	; 7
    412e:	87 83       	std	Z+7, r24	; 0x07
    4130:	08 95       	ret

00004132 <ledBlink>:
  }
}

void ledBlink(void)
{ 
    4132:	20 e0       	ldi	r18, 0x00	; 0
    4134:	30 e0       	ldi	r19, 0x00	; 0

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    4136:	a0 e0       	ldi	r26, 0x00	; 0
    4138:	b7 e0       	ldi	r27, 0x07	; 7
    413a:	60 e2       	ldi	r22, 0x20	; 32
    413c:	40 e2       	ldi	r20, 0x20	; 32
    413e:	53 e0       	ldi	r21, 0x03	; 3
    4140:	17 96       	adiw	r26, 0x07	; 7
    4142:	6c 93       	st	X, r22
    4144:	17 97       	sbiw	r26, 0x07	; 7
    4146:	8c ea       	ldi	r24, 0xAC	; 172
    4148:	9d e0       	ldi	r25, 0x0D	; 13
    414a:	fa 01       	movw	r30, r20
    414c:	31 97       	sbiw	r30, 0x01	; 1
    414e:	f1 f7       	brne	.-4      	; 0x414c <ledBlink+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4150:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4152:	d9 f7       	brne	.-10     	; 0x414a <ledBlink+0x18>
void ledBlink(void)
{ 
  /* blink LED 1, this is a simple debug tool to see if the controller is responsive */
  int j;
  	
  for(j = 0;j < 10;j++)
    4154:	2f 5f       	subi	r18, 0xFF	; 255
    4156:	3f 4f       	sbci	r19, 0xFF	; 255
    4158:	2a 30       	cpi	r18, 0x0A	; 10
    415a:	31 05       	cpc	r19, r1
    415c:	89 f7       	brne	.-30     	; 0x4140 <ledBlink+0xe>
  {
    ledToggle(1);
    _delay_ms(350);
//Wait(350);		
  }
}
    415e:	08 95       	ret

00004160 <digitalMode>:

void digitalMode( uint8_t bit, uint8_t mode) {
  if (!(bit & ~3)) {
    4160:	48 2f       	mov	r20, r24
    4162:	50 e0       	ldi	r21, 0x00	; 0
    4164:	ca 01       	movw	r24, r20
    4166:	8c 7f       	andi	r24, 0xFC	; 252
    4168:	89 2b       	or	r24, r25
    416a:	79 f5       	brne	.+94     	; 0x41ca <digitalMode+0x6a>
    if (mode == OUTPUT) {
    416c:	66 23       	and	r22, r22
    416e:	b9 f4       	brne	.+46     	; 0x419e <digitalMode+0x3e>
      /* set the port as output */
      PORTK.OUTCLR = 1 << 4 + bit; // set the external driver mode to output first
    4170:	4c 5f       	subi	r20, 0xFC	; 252
    4172:	5f 4f       	sbci	r21, 0xFF	; 255
    4174:	81 e0       	ldi	r24, 0x01	; 1
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	9c 01       	movw	r18, r24
    417a:	04 2e       	mov	r0, r20
    417c:	02 c0       	rjmp	.+4      	; 0x4182 <digitalMode+0x22>
    417e:	22 0f       	add	r18, r18
    4180:	33 1f       	adc	r19, r19
    4182:	0a 94       	dec	r0
    4184:	e2 f7       	brpl	.-8      	; 0x417e <digitalMode+0x1e>
    4186:	44 50       	subi	r20, 0x04	; 4
    4188:	50 40       	sbci	r21, 0x00	; 0
    418a:	e0 e2       	ldi	r30, 0x20	; 32
    418c:	f7 e0       	ldi	r31, 0x07	; 7
    418e:	26 83       	std	Z+6, r18	; 0x06
      PORTK.DIRSET = 1 << bit;   // set the uC pin direction to output second
    4190:	02 c0       	rjmp	.+4      	; 0x4196 <digitalMode+0x36>
    4192:	88 0f       	add	r24, r24
    4194:	99 1f       	adc	r25, r25
    4196:	4a 95       	dec	r20
    4198:	e2 f7       	brpl	.-8      	; 0x4192 <digitalMode+0x32>
    419a:	81 83       	std	Z+1, r24	; 0x01
    419c:	08 95       	ret
    } else if (mode == INPUT) {
    419e:	61 30       	cpi	r22, 0x01	; 1
    41a0:	a1 f4       	brne	.+40     	; 0x41ca <digitalMode+0x6a>
      /* set the port as input */
      PORTK.DIRCLR = 1 << bit;   // set the uC pin direction to input first
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	9c 01       	movw	r18, r24
    41a8:	04 2e       	mov	r0, r20
    41aa:	02 c0       	rjmp	.+4      	; 0x41b0 <digitalMode+0x50>
    41ac:	22 0f       	add	r18, r18
    41ae:	33 1f       	adc	r19, r19
    41b0:	0a 94       	dec	r0
    41b2:	e2 f7       	brpl	.-8      	; 0x41ac <digitalMode+0x4c>
    41b4:	e0 e2       	ldi	r30, 0x20	; 32
    41b6:	f7 e0       	ldi	r31, 0x07	; 7
    41b8:	22 83       	std	Z+2, r18	; 0x02
      PORTK.OUTSET = 1 << 4 + bit; // set the external driver direction to input
    41ba:	4c 5f       	subi	r20, 0xFC	; 252
    41bc:	5f 4f       	sbci	r21, 0xFF	; 255
    41be:	02 c0       	rjmp	.+4      	; 0x41c4 <digitalMode+0x64>
    41c0:	88 0f       	add	r24, r24
    41c2:	99 1f       	adc	r25, r25
    41c4:	4a 95       	dec	r20
    41c6:	e2 f7       	brpl	.-8      	; 0x41c0 <digitalMode+0x60>
    41c8:	85 83       	std	Z+5, r24	; 0x05
    41ca:	08 95       	ret

000041cc <digitalRead>:
}

uint8_t digitalRead( uint8_t bit ) {
  uint8_t res;
  // ignore read if out-ouf-bounds argument
  if (!(bit & ~3)) {
    41cc:	28 2f       	mov	r18, r24
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	c9 01       	movw	r24, r18
    41d2:	8c 7f       	andi	r24, 0xFC	; 252
    41d4:	89 2b       	or	r24, r25
    41d6:	11 f0       	breq	.+4      	; 0x41dc <digitalRead+0x10>
    41d8:	80 e0       	ldi	r24, 0x00	; 0
    41da:	08 95       	ret
    res = (PORTK.IN >> bit) & 0x01;
    41dc:	80 91 28 07 	lds	r24, 0x0728
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	02 c0       	rjmp	.+4      	; 0x41e8 <digitalRead+0x1c>
    41e4:	95 95       	asr	r25
    41e6:	87 95       	ror	r24
    41e8:	2a 95       	dec	r18
    41ea:	e2 f7       	brpl	.-8      	; 0x41e4 <digitalRead+0x18>
    41ec:	81 70       	andi	r24, 0x01	; 1
  } else {
    res = 0;
  }
  return(res);
}
    41ee:	08 95       	ret

000041f0 <digitalWrite>:

void digitalWrite( uint8_t bit, uint8_t value ) {
  // ignore write if out-ouf-bounds argument
  if (!((bit & ~3) || (value & ~1))) {
    41f0:	28 2f       	mov	r18, r24
    41f2:	30 e0       	ldi	r19, 0x00	; 0
    41f4:	c9 01       	movw	r24, r18
    41f6:	8c 7f       	andi	r24, 0xFC	; 252
    41f8:	89 2b       	or	r24, r25
    41fa:	d1 f4       	brne	.+52     	; 0x4230 <digitalWrite+0x40>
    41fc:	86 2f       	mov	r24, r22
    41fe:	8e 7f       	andi	r24, 0xFE	; 254
    4200:	b9 f4       	brne	.+46     	; 0x4230 <digitalWrite+0x40>
    if (value == 1) {
    4202:	61 30       	cpi	r22, 0x01	; 1
    4204:	59 f4       	brne	.+22     	; 0x421c <digitalWrite+0x2c>
      // set the bit HIGH
      PORTK.OUTSET = 1 << bit;
    4206:	81 e0       	ldi	r24, 0x01	; 1
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	02 c0       	rjmp	.+4      	; 0x4210 <digitalWrite+0x20>
    420c:	88 0f       	add	r24, r24
    420e:	99 1f       	adc	r25, r25
    4210:	2a 95       	dec	r18
    4212:	e2 f7       	brpl	.-8      	; 0x420c <digitalWrite+0x1c>
    4214:	e0 e2       	ldi	r30, 0x20	; 32
    4216:	f7 e0       	ldi	r31, 0x07	; 7
    4218:	85 83       	std	Z+5, r24	; 0x05
    421a:	08 95       	ret
    } else {
      // set the bit LOW
      PORTK.OUTCLR = 1 << bit;
    421c:	81 e0       	ldi	r24, 0x01	; 1
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	02 c0       	rjmp	.+4      	; 0x4226 <digitalWrite+0x36>
    4222:	88 0f       	add	r24, r24
    4224:	99 1f       	adc	r25, r25
    4226:	2a 95       	dec	r18
    4228:	e2 f7       	brpl	.-8      	; 0x4222 <digitalWrite+0x32>
    422a:	e0 e2       	ldi	r30, 0x20	; 32
    422c:	f7 e0       	ldi	r31, 0x07	; 7
    422e:	86 83       	std	Z+6, r24	; 0x06
    4230:	08 95       	ret

00004232 <digitalToggle>:
  }
}

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    4232:	28 2f       	mov	r18, r24
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	c9 01       	movw	r24, r18
    4238:	8c 7f       	andi	r24, 0xFC	; 252
    423a:	89 2b       	or	r24, r25
    423c:	51 f4       	brne	.+20     	; 0x4252 <digitalToggle+0x20>
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    423e:	81 e0       	ldi	r24, 0x01	; 1
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	02 c0       	rjmp	.+4      	; 0x4248 <digitalToggle+0x16>
    4244:	88 0f       	add	r24, r24
    4246:	99 1f       	adc	r25, r25
    4248:	2a 95       	dec	r18
    424a:	e2 f7       	brpl	.-8      	; 0x4244 <digitalToggle+0x12>
    424c:	e0 e2       	ldi	r30, 0x20	; 32
    424e:	f7 e0       	ldi	r31, 0x07	; 7
    4250:	87 83       	std	Z+7, r24	; 0x07
    4252:	08 95       	ret

00004254 <analogRead>:
  }
}

int16_t analogRead( uint8_t ch ) {
    4254:	a2 e0       	ldi	r26, 0x02	; 2
    4256:	b0 e0       	ldi	r27, 0x00	; 0
    4258:	e0 e3       	ldi	r30, 0x30	; 48
    425a:	f1 e2       	ldi	r31, 0x21	; 33
    425c:	0c 94 b8 57 	jmp	0xaf70	; 0xaf70 <__prologue_saves__+0x20>
  int16_t w1;
  if (!(ch & ~7)) {
    4260:	28 2f       	mov	r18, r24
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	c9 01       	movw	r24, r18
    4266:	88 7f       	andi	r24, 0xF8	; 248
    4268:	89 2b       	or	r24, r25
    426a:	19 f0       	breq	.+6      	; 0x4272 <analogRead+0x1e>
    426c:	20 e0       	ldi	r18, 0x00	; 0
    426e:	30 e0       	ldi	r19, 0x00	; 0
    4270:	49 c0       	rjmp	.+146    	; 0x4304 <analogRead+0xb0>
    // control register: ch = <ch>, mode = 00, pm = 00, code = 0, ref = 1, seq = 00
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    4272:	80 e1       	ldi	r24, 0x10	; 16
    4274:	e0 e4       	ldi	r30, 0x40	; 64
    4276:	f6 e0       	ldi	r31, 0x06	; 6
    4278:	86 83       	std	Z+6, r24	; 0x06
    SPIC.DATA = 0x80 | ((ch & 0x7) << 2);
    427a:	27 70       	andi	r18, 0x07	; 7
    427c:	30 70       	andi	r19, 0x00	; 0
    427e:	22 0f       	add	r18, r18
    4280:	33 1f       	adc	r19, r19
    4282:	22 0f       	add	r18, r18
    4284:	33 1f       	adc	r19, r19
    4286:	82 2f       	mov	r24, r18
    4288:	80 68       	ori	r24, 0x80	; 128
    428a:	e0 ec       	ldi	r30, 0xC0	; 192
    428c:	f8 e0       	ldi	r31, 0x08	; 8
    428e:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    4290:	80 91 c2 08 	lds	r24, 0x08C2
    4294:	87 ff       	sbrs	r24, 7
    4296:	fc cf       	rjmp	.-8      	; 0x4290 <analogRead+0x3c>
    SPIC.DATA = 0x10;
    4298:	80 e1       	ldi	r24, 0x10	; 16
    429a:	e0 ec       	ldi	r30, 0xC0	; 192
    429c:	f8 e0       	ldi	r31, 0x08	; 8
    429e:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    42a0:	80 91 c2 08 	lds	r24, 0x08C2
    42a4:	87 ff       	sbrs	r24, 7
    42a6:	fc cf       	rjmp	.-8      	; 0x42a0 <analogRead+0x4c>
    PORTC.OUTSET = PIN4_bm;        // SPI SS = H
    42a8:	e0 e4       	ldi	r30, 0x40	; 64
    42aa:	f6 e0       	ldi	r31, 0x06	; 6
    42ac:	80 e1       	ldi	r24, 0x10	; 16
    42ae:	85 83       	std	Z+5, r24	; 0x05

    // do a conversion on the selected channel (no register write)
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    42b0:	86 83       	std	Z+6, r24	; 0x06
    SPIC.DATA = 0x00;
    42b2:	e0 ec       	ldi	r30, 0xC0	; 192
    42b4:	f8 e0       	ldi	r31, 0x08	; 8
    42b6:	13 82       	std	Z+3, r1	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    42b8:	80 91 c2 08 	lds	r24, 0x08C2
    42bc:	87 ff       	sbrs	r24, 7
    42be:	fc cf       	rjmp	.-8      	; 0x42b8 <analogRead+0x64>
    ((uint8_t*)&w1)[1] = SPIC.DATA;
    42c0:	de 01       	movw	r26, r28
    42c2:	11 96       	adiw	r26, 0x01	; 1
    42c4:	90 91 c3 08 	lds	r25, 0x08C3
    SPIC.DATA = 0x00;
    42c8:	e0 ec       	ldi	r30, 0xC0	; 192
    42ca:	f8 e0       	ldi	r31, 0x08	; 8
    42cc:	13 82       	std	Z+3, r1	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    42ce:	80 91 c2 08 	lds	r24, 0x08C2
    42d2:	87 ff       	sbrs	r24, 7
    42d4:	fc cf       	rjmp	.-8      	; 0x42ce <analogRead+0x7a>
    ((uint8_t*)&w1)[0] = SPIC.DATA;
    42d6:	80 91 c3 08 	lds	r24, 0x08C3

    // do a conversion on the selected channel (no register write)
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    SPIC.DATA = 0x00;
    loop_until_bit_is_set(SPIC.STATUS, 7);
    ((uint8_t*)&w1)[1] = SPIC.DATA;
    42da:	11 96       	adiw	r26, 0x01	; 1
    42dc:	9c 93       	st	X, r25
    42de:	11 97       	sbiw	r26, 0x01	; 1
    SPIC.DATA = 0x00;
    loop_until_bit_is_set(SPIC.STATUS, 7);
    ((uint8_t*)&w1)[0] = SPIC.DATA;
    42e0:	8c 93       	st	X, r24
    PORTC.OUTSET = PIN4_bm;        // SPI SS = H
    42e2:	80 e1       	ldi	r24, 0x10	; 16
    42e4:	e0 e4       	ldi	r30, 0x40	; 64
    42e6:	f6 e0       	ldi	r31, 0x06	; 6
    42e8:	85 83       	std	Z+5, r24	; 0x05
	
	//in this way, 0v ->0, 5V -> 2047, 10V->4095
    if (w1 & 1 << 12) {
    42ea:	89 81       	ldd	r24, Y+1	; 0x01
    42ec:	9a 81       	ldd	r25, Y+2	; 0x02
    42ee:	94 ff       	sbrs	r25, 4
    42f0:	02 c0       	rjmp	.+4      	; 0x42f6 <analogRead+0xa2>
      w1 = (w1 & 0x0fff) >> 1;
    42f2:	9f 70       	andi	r25, 0x0F	; 15
    42f4:	01 c0       	rjmp	.+2      	; 0x42f8 <analogRead+0xa4>
    } 
	else{
	  w1 = (w1 | 0x1000) >> 1;
    42f6:	90 61       	ori	r25, 0x10	; 16
    42f8:	95 95       	asr	r25
    42fa:	87 95       	ror	r24
    42fc:	89 83       	std	Y+1, r24	; 0x01
    42fe:	9a 83       	std	Y+2, r25	; 0x02
	}
    return w1;
    4300:	29 81       	ldd	r18, Y+1	; 0x01
    4302:	3a 81       	ldd	r19, Y+2	; 0x02
  }
  else {
    return 0;
  }
}
    4304:	c9 01       	movw	r24, r18
    4306:	22 96       	adiw	r28, 0x02	; 2
    4308:	e2 e0       	ldi	r30, 0x02	; 2
    430a:	0c 94 d4 57 	jmp	0xafa8	; 0xafa8 <__epilogue_restores__+0x20>

0000430e <analogWrite>:

void analogWrite(uint8_t ch, int16_t value) {
    430e:	28 2f       	mov	r18, r24
  if (!((ch & ~3) || ((value & ~2047) && (~value & ~2047)))) {
    4310:	8c 7f       	andi	r24, 0xFC	; 252
    4312:	b9 f5       	brne	.+110    	; 0x4382 <analogWrite+0x74>
    4314:	cb 01       	movw	r24, r22
    4316:	80 70       	andi	r24, 0x00	; 0
    4318:	98 7f       	andi	r25, 0xF8	; 248
    431a:	89 2b       	or	r24, r25
    431c:	39 f0       	breq	.+14     	; 0x432c <analogWrite+0x1e>
    431e:	cb 01       	movw	r24, r22
    4320:	80 95       	com	r24
    4322:	90 95       	com	r25
    4324:	80 70       	andi	r24, 0x00	; 0
    4326:	98 7f       	andi	r25, 0xF8	; 248
    4328:	89 2b       	or	r24, r25
    432a:	59 f5       	brne	.+86     	; 0x4382 <analogWrite+0x74>
    /* DAC register*/
    PORTD.OUTCLR = PIN4_bm;        // SPI SS = L
    432c:	80 e1       	ldi	r24, 0x10	; 16
    432e:	e0 e6       	ldi	r30, 0x60	; 96
    4330:	f6 e0       	ldi	r31, 0x06	; 6
    4332:	86 83       	std	Z+6, r24	; 0x06
    SPID.DATA = 0x00 | (ch & 0x7);
    4334:	27 70       	andi	r18, 0x07	; 7
    4336:	e0 ec       	ldi	r30, 0xC0	; 192
    4338:	f9 e0       	ldi	r31, 0x09	; 9
    433a:	23 83       	std	Z+3, r18	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    433c:	80 91 c2 09 	lds	r24, 0x09C2
    4340:	87 ff       	sbrs	r24, 7
    4342:	fc cf       	rjmp	.-8      	; 0x433c <analogWrite+0x2e>
    SPID.DATA = (uint8_t)((value & 0xff0) >> 4);
    4344:	cb 01       	movw	r24, r22
    4346:	80 7f       	andi	r24, 0xF0	; 240
    4348:	9f 70       	andi	r25, 0x0F	; 15
    434a:	e4 e0       	ldi	r30, 0x04	; 4
    434c:	95 95       	asr	r25
    434e:	87 95       	ror	r24
    4350:	ea 95       	dec	r30
    4352:	e1 f7       	brne	.-8      	; 0x434c <analogWrite+0x3e>
    4354:	e0 ec       	ldi	r30, 0xC0	; 192
    4356:	f9 e0       	ldi	r31, 0x09	; 9
    4358:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    435a:	80 91 c2 09 	lds	r24, 0x09C2
    435e:	87 ff       	sbrs	r24, 7
    4360:	fc cf       	rjmp	.-8      	; 0x435a <analogWrite+0x4c>
    SPID.DATA = (uint8_t)((value & 0xf) << 4);
    4362:	54 e0       	ldi	r21, 0x04	; 4
    4364:	66 0f       	add	r22, r22
    4366:	77 1f       	adc	r23, r23
    4368:	5a 95       	dec	r21
    436a:	e1 f7       	brne	.-8      	; 0x4364 <analogWrite+0x56>
    436c:	e0 ec       	ldi	r30, 0xC0	; 192
    436e:	f9 e0       	ldi	r31, 0x09	; 9
    4370:	63 83       	std	Z+3, r22	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    4372:	80 91 c2 09 	lds	r24, 0x09C2
    4376:	87 ff       	sbrs	r24, 7
    4378:	fc cf       	rjmp	.-8      	; 0x4372 <analogWrite+0x64>
    PORTD.OUTSET = PIN4_bm;        // SPI SS = H
    437a:	80 e1       	ldi	r24, 0x10	; 16
    437c:	e0 e6       	ldi	r30, 0x60	; 96
    437e:	f6 e0       	ldi	r31, 0x06	; 6
    4380:	85 83       	std	Z+5, r24	; 0x05
    4382:	08 95       	ret

00004384 <test_DIO>:
  }
}
 
void test_DIO(uint8_t ch)
{ 
    4384:	a0 e0       	ldi	r26, 0x00	; 0
    4386:	b0 e0       	ldi	r27, 0x00	; 0
    4388:	e8 ec       	ldi	r30, 0xC8	; 200
    438a:	f1 e2       	ldi	r31, 0x21	; 33
    438c:	0c 94 ac 57 	jmp	0xaf58	; 0xaf58 <__prologue_saves__+0x8>
    4390:	b8 2e       	mov	r11, r24
    4392:	c0 e0       	ldi	r28, 0x00	; 0
    4394:	d0 e0       	ldi	r29, 0x00	; 0

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    4396:	00 e2       	ldi	r16, 0x20	; 32
    4398:	17 e0       	ldi	r17, 0x07	; 7
    439a:	66 24       	eor	r6, r6
    439c:	63 94       	inc	r6
    439e:	22 e0       	ldi	r18, 0x02	; 2
    43a0:	72 2e       	mov	r7, r18
    43a2:	94 e0       	ldi	r25, 0x04	; 4
    43a4:	89 2e       	mov	r8, r25
    43a6:	88 e0       	ldi	r24, 0x08	; 8
    43a8:	98 2e       	mov	r9, r24
    43aa:	b0 e2       	ldi	r27, 0x20	; 32
    43ac:	eb 2e       	mov	r14, r27
    43ae:	b3 e0       	ldi	r27, 0x03	; 3
    43b0:	fb 2e       	mov	r15, r27

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    43b2:	c1 2c       	mov	r12, r1
    43b4:	a7 e0       	ldi	r26, 0x07	; 7
    43b6:	da 2e       	mov	r13, r26
    43b8:	f0 e2       	ldi	r31, 0x20	; 32
    43ba:	af 2e       	mov	r10, r31

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    43bc:	f8 01       	movw	r30, r16
    43be:	67 82       	std	Z+7, r6	; 0x07
    43c0:	77 82       	std	Z+7, r7	; 0x07
    43c2:	87 82       	std	Z+7, r8	; 0x07
    43c4:	97 82       	std	Z+7, r9	; 0x07
    43c6:	88 ee       	ldi	r24, 0xE8	; 232
    43c8:	93 e0       	ldi	r25, 0x03	; 3
    43ca:	f7 01       	movw	r30, r14
    43cc:	31 97       	sbiw	r30, 0x01	; 1
    43ce:	f1 f7       	brne	.-4      	; 0x43cc <test_DIO+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43d2:	d9 f7       	brne	.-10     	; 0x43ca <test_DIO+0x46>
    digitalToggle(1);
    digitalToggle(2);
    digitalToggle(3);

		_delay_ms(100);			
    ADC_val = analogRead(ch); // +/-5v range, 1v = 408
    43d4:	8b 2d       	mov	r24, r11
    43d6:	0e 94 2a 21 	call	0x4254	; 0x4254 <analogRead>
    43da:	bc 01       	movw	r22, r24
    43dc:	28 ee       	ldi	r18, 0xE8	; 232
    43de:	33 e0       	ldi	r19, 0x03	; 3
    43e0:	f7 01       	movw	r30, r14
    43e2:	31 97       	sbiw	r30, 0x01	; 1
    43e4:	f1 f7       	brne	.-4      	; 0x43e2 <test_DIO+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43e6:	21 50       	subi	r18, 0x01	; 1
    43e8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ea:	d1 f7       	brne	.-12     	; 0x43e0 <test_DIO+0x5c>
		_delay_ms(100);			
    analogWrite(1, ADC_val); // +/- 5v range, 1v = 408
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	0e 94 87 21 	call	0x430e	; 0x430e <analogWrite>
    if (k % 2)
    43f2:	c0 ff       	sbrs	r28, 0
    43f4:	02 c0       	rjmp	.+4      	; 0x43fa <test_DIO+0x76>

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    43f6:	f6 01       	movw	r30, r12
    43f8:	a7 82       	std	Z+7, r10	; 0x07
    43fa:	21 96       	adiw	r28, 0x01	; 1
void test_DIO(uint8_t ch)
{ 
  int16_t ADC_val;
  uint8_t k;

  for (k = 0; k < 60; k++)
    43fc:	cc 33       	cpi	r28, 0x3C	; 60
    43fe:	d1 05       	cpc	r29, r1
    4400:	e9 f6       	brne	.-70     	; 0x43bc <test_DIO+0x38>
		_delay_ms(100);			
    analogWrite(1, ADC_val); // +/- 5v range, 1v = 408
    if (k % 2)
    ledToggle(1);  //toggle LED, once per triangle wave pulse
  }
}
    4402:	cd b7       	in	r28, 0x3d	; 61
    4404:	de b7       	in	r29, 0x3e	; 62
    4406:	ee e0       	ldi	r30, 0x0E	; 14
    4408:	0c 94 c8 57 	jmp	0xaf90	; 0xaf90 <__epilogue_restores__+0x8>

0000440c <SystemReset>:

void SystemReset(void) {
    440c:	0f 93       	push	r16
    440e:	df 93       	push	r29
    4410:	cf 93       	push	r28
    4412:	0f 92       	push	r0
    4414:	cd b7       	in	r28, 0x3d	; 61
    4416:	de b7       	in	r29, 0x3e	; 62
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
  uint8_t volatile saved_sreg = SREG;
    4418:	8f b7       	in	r24, 0x3f	; 63
    441a:	89 83       	std	Y+1, r24	; 0x01
  cli();
    441c:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    441e:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    4420:	21 e0       	ldi	r18, 0x01	; 1
    4422:	89 e7       	ldi	r24, 0x79	; 121
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	fc 01       	movw	r30, r24
    4428:	08 ed       	ldi	r16, 0xD8	; 216
    442a:	04 bf       	out	0x34, r16	; 52
    442c:	20 83       	st	Z, r18
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    442e:	89 81       	ldd	r24, Y+1	; 0x01
    4430:	8f bf       	out	0x3f, r24	; 63
}

void SystemReset(void) {
  //issue software reset
  CCPWrite(&RST.CTRL, RST_SWRST_bm);
}
    4432:	0f 90       	pop	r0
    4434:	cf 91       	pop	r28
    4436:	df 91       	pop	r29
    4438:	0f 91       	pop	r16
    443a:	08 95       	ret

0000443c <test_ADC>:

void test_ADC(uint8_t ch)
 { 
    443c:	a0 e0       	ldi	r26, 0x00	; 0
    443e:	b0 e0       	ldi	r27, 0x00	; 0
    4440:	e4 e2       	ldi	r30, 0x24	; 36
    4442:	f2 e2       	ldi	r31, 0x22	; 34
    4444:	0c 94 ae 57 	jmp	0xaf5c	; 0xaf5c <__prologue_saves__+0xc>
    4448:	98 2e       	mov	r9, r24
    444a:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
		{	if (j < 100)
    444c:	60 ea       	ldi	r22, 0xA0	; 160
    444e:	a6 2e       	mov	r10, r22
    4450:	6f e0       	ldi	r22, 0x0F	; 15
    4452:	b6 2e       	mov	r11, r22
    4454:	50 e8       	ldi	r21, 0x80	; 128
    4456:	c5 2e       	mov	r12, r21
    4458:	5e e3       	ldi	r21, 0x3E	; 62
    445a:	d5 2e       	mov	r13, r21

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    445c:	e1 2c       	mov	r14, r1
    445e:	47 e0       	ldi	r20, 0x07	; 7
    4460:	f4 2e       	mov	r15, r20
    4462:	30 e2       	ldi	r19, 0x20	; 32
    4464:	83 2e       	mov	r8, r19
    4466:	1d c0       	rjmp	.+58     	; 0x44a2 <test_ADC+0x66>
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
		{	if (j < 100)
    4468:	14 36       	cpi	r17, 0x64	; 100
    446a:	10 f4       	brcc	.+4      	; 0x4470 <test_ADC+0x34>
    446c:	be 01       	movw	r22, r28
    446e:	03 c0       	rjmp	.+6      	; 0x4476 <test_ADC+0x3a>
    4470:	b5 01       	movw	r22, r10
    4472:	6c 1b       	sub	r22, r28
    4474:	7d 0b       	sbc	r23, r29
			X_dac_val = 20*(uint16_t)j; 	// build the up part of the triangle wave
			else
			X_dac_val = 20*(uint16_t)(100 + (100 - j)); // build the down part of the triangle wave
 	
            analogWrite(0, X_dac_val);
    4476:	80 e0       	ldi	r24, 0x00	; 0
    4478:	0e 94 87 21 	call	0x430e	; 0x430e <analogWrite>
			
			ADC_val = analogRead(ch);   //1v = 102 -> ~5 TIMES THE GAIN OF OL
    447c:	89 2d       	mov	r24, r9
    447e:	0e 94 2a 21 	call	0x4254	; 0x4254 <analogRead>
    4482:	bc 01       	movw	r22, r24
			
            analogWrite(1, ADC_val);
    4484:	81 e0       	ldi	r24, 0x01	; 1
    4486:	0e 94 87 21 	call	0x430e	; 0x430e <analogWrite>
    448a:	c6 01       	movw	r24, r12
    448c:	01 97       	sbiw	r24, 0x01	; 1
    448e:	f1 f7       	brne	.-4      	; 0x448c <test_ADC+0x50>
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
    4490:	1f 5f       	subi	r17, 0xFF	; 255
    4492:	64 96       	adiw	r28, 0x14	; 20
    4494:	18 3c       	cpi	r17, 0xC8	; 200
    4496:	41 f7       	brne	.-48     	; 0x4468 <test_ADC+0x2c>

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    4498:	f7 01       	movw	r30, r14
    449a:	87 82       	std	Z+7, r8	; 0x07
 { 
	int16_t X_dac_val;
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
    449c:	0f 5f       	subi	r16, 0xFF	; 255
    449e:	0e 31       	cpi	r16, 0x1E	; 30
    44a0:	21 f0       	breq	.+8      	; 0x44aa <test_ADC+0x6e>
    44a2:	10 e0       	ldi	r17, 0x00	; 0
    44a4:	c0 e0       	ldi	r28, 0x00	; 0
    44a6:	d0 e0       	ldi	r29, 0x00	; 0
    44a8:	df cf       	rjmp	.-66     	; 0x4468 <test_ADC+0x2c>
            analogWrite(1, ADC_val);
			_delay_ms(2);			
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
	}	 	
}
    44aa:	cd b7       	in	r28, 0x3d	; 61
    44ac:	de b7       	in	r29, 0x3e	; 62
    44ae:	ec e0       	ldi	r30, 0x0C	; 12
    44b0:	0c 94 ca 57 	jmp	0xaf94	; 0xaf94 <__epilogue_restores__+0xc>

000044b4 <put_rc>:
    }
    
};

static
        void put_rc(FRESULT rc) {
    44b4:	bc 01       	movw	r22, r24
    44b6:	27 e3       	ldi	r18, 0x37	; 55
    44b8:	3c e0       	ldi	r19, 0x0C	; 12
    44ba:	40 e0       	ldi	r20, 0x00	; 0
    44bc:	50 e0       	ldi	r21, 0x00	; 0
    44be:	08 c0       	rjmp	.+16     	; 0x44d0 <put_rc+0x1c>
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    44c0:	f9 01       	movw	r30, r18
        while(pgm_read_byte_near(p++));
    44c2:	2f 5f       	subi	r18, 0xFF	; 255
    44c4:	3f 4f       	sbci	r19, 0xFF	; 255
    44c6:	e4 91       	lpm	r30, Z+
    44c8:	ee 23       	and	r30, r30
    44ca:	d1 f7       	brne	.-12     	; 0x44c0 <put_rc+0xc>
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    44cc:	4f 5f       	subi	r20, 0xFF	; 255
    44ce:	5f 4f       	sbci	r21, 0xFF	; 255
    44d0:	46 17       	cp	r20, r22
    44d2:	57 07       	cpc	r21, r23
    44d4:	21 f0       	breq	.+8      	; 0x44de <put_rc+0x2a>
    44d6:	f9 01       	movw	r30, r18
    44d8:	84 91       	lpm	r24, Z+
    44da:	88 23       	and	r24, r24
    44dc:	89 f7       	brne	.-30     	; 0x44c0 <put_rc+0xc>
        while(pgm_read_byte_near(p++));
    }
    xprintf(PSTR("%S\n"), p);
    44de:	00 d0       	rcall	.+0      	; 0x44e0 <put_rc+0x2c>
    44e0:	0f 92       	push	r0
    44e2:	83 e3       	ldi	r24, 0x33	; 51
    44e4:	9c e0       	ldi	r25, 0x0C	; 12
    44e6:	ed b7       	in	r30, 0x3d	; 61
    44e8:	fe b7       	in	r31, 0x3e	; 62
    44ea:	81 83       	std	Z+1, r24	; 0x01
    44ec:	92 83       	std	Z+2, r25	; 0x02
    44ee:	23 83       	std	Z+3, r18	; 0x03
    44f0:	34 83       	std	Z+4, r19	; 0x04
    44f2:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    44f6:	0f 90       	pop	r0
    44f8:	0f 90       	pop	r0
    44fa:	0f 90       	pop	r0
    44fc:	0f 90       	pop	r0
}
    44fe:	08 95       	ret

00004500 <verifyEEPage>:
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}

int verifyEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4500:	a0 e0       	ldi	r26, 0x00	; 0
    4502:	b0 e0       	ldi	r27, 0x00	; 0
    4504:	e6 e8       	ldi	r30, 0x86	; 134
    4506:	f2 e2       	ldi	r31, 0x22	; 34
    4508:	0c 94 af 57 	jmp	0xaf5e	; 0xaf5e <__prologue_saves__+0xe>
    450c:	5c 01       	movw	r10, r24
    450e:	6a 01       	movw	r12, r20
    4510:	7b 01       	movw	r14, r22
    4512:	92 2e       	mov	r9, r18
    4514:	e8 01       	movw	r28, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    4516:	89 e2       	ldi	r24, 0x29	; 41
    4518:	9f e0       	ldi	r25, 0x0F	; 15
    451a:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    buff[0] = 'g';
    451e:	87 e6       	ldi	r24, 0x67	; 103
    4520:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4522:	bb 27       	eor	r27, r27
    4524:	af 2d       	mov	r26, r15
    4526:	9e 2d       	mov	r25, r14
    4528:	8d 2d       	mov	r24, r13
    452a:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    452c:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize;
    452e:	9b 82       	std	Y+3, r9	; 0x03
    buff[4] = 'E';
    4530:	85 e4       	ldi	r24, 0x45	; 69
    4532:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    4534:	c5 01       	movw	r24, r10
    4536:	60 e7       	ldi	r22, 0x70	; 112
    4538:	a8 01       	movw	r20, r16
    453a:	25 e0       	ldi	r18, 0x05	; 5
    453c:	09 2d       	mov	r16, r9
    453e:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4542:	d5 01       	movw	r26, r10
    4544:	1d 96       	adiw	r26, 0x0d	; 13
    4546:	8c 91       	ld	r24, X
    4548:	1d 97       	sbiw	r26, 0x0d	; 13
    454a:	88 23       	and	r24, r24
    454c:	d1 f7       	brne	.-12     	; 0x4542 <verifyEEPage+0x42>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    454e:	1e 96       	adiw	r26, 0x0e	; 14
    4550:	8c 91       	ld	r24, X
    4552:	1e 97       	sbiw	r26, 0x0e	; 14
    4554:	81 30       	cpi	r24, 0x01	; 1
    4556:	b9 f0       	breq	.+46     	; 0x4586 <verifyEEPage+0x86>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4558:	1e 96       	adiw	r26, 0x0e	; 14
    455a:	2c 91       	ld	r18, X
    455c:	00 d0       	rcall	.+0      	; 0x455e <verifyEEPage+0x5e>
    455e:	0f 92       	push	r0
    4560:	ed b7       	in	r30, 0x3d	; 61
    4562:	fe b7       	in	r31, 0x3e	; 62
    4564:	31 96       	adiw	r30, 0x01	; 1
    4566:	8c e0       	ldi	r24, 0x0C	; 12
    4568:	9f e0       	ldi	r25, 0x0F	; 15
    456a:	ad b7       	in	r26, 0x3d	; 61
    456c:	be b7       	in	r27, 0x3e	; 62
    456e:	11 96       	adiw	r26, 0x01	; 1
    4570:	8d 93       	st	X+, r24
    4572:	9c 93       	st	X, r25
    4574:	12 97       	sbiw	r26, 0x02	; 2
    4576:	22 83       	std	Z+2, r18	; 0x02
    4578:	13 82       	std	Z+3, r1	; 0x03
    457a:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    457e:	0f 90       	pop	r0
    4580:	0f 90       	pop	r0
    4582:	0f 90       	pop	r0
    4584:	0f 90       	pop	r0
    4586:	de 01       	movw	r26, r28
    4588:	31 e0       	ldi	r19, 0x01	; 1
    458a:	20 e0       	ldi	r18, 0x00	; 0
    458c:	0d c0       	rjmp	.+26     	; 0x45a8 <verifyEEPage+0xa8>
    }
    match = 1;
    for (i = 0; i < psize; i++) {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    458e:	e5 01       	movw	r28, r10
    4590:	ed 81       	ldd	r30, Y+5	; 0x05
    4592:	fe 81       	ldd	r31, Y+6	; 0x06
    4594:	e2 0f       	add	r30, r18
    4596:	f1 1d       	adc	r31, r1
    4598:	90 81       	ld	r25, Z
    459a:	15 96       	adiw	r26, 0x05	; 5
    459c:	8c 91       	ld	r24, X
    459e:	15 97       	sbiw	r26, 0x05	; 5
    45a0:	98 13       	cpse	r25, r24
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    match = 1;
    for (i = 0; i < psize; i++) {
    45a4:	2f 5f       	subi	r18, 0xFF	; 255
    45a6:	11 96       	adiw	r26, 0x01	; 1
    45a8:	29 15       	cp	r18, r9
    45aa:	88 f3       	brcs	.-30     	; 0x458e <verifyEEPage+0x8e>
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    45ac:	83 2f       	mov	r24, r19
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	cd b7       	in	r28, 0x3d	; 61
    45b2:	de b7       	in	r29, 0x3e	; 62
    45b4:	eb e0       	ldi	r30, 0x0B	; 11
    45b6:	0c 94 cb 57 	jmp	0xaf96	; 0xaf96 <__epilogue_restores__+0xe>

000045ba <readEEPage>:
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);
    }
}

void readEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    45ba:	a0 e0       	ldi	r26, 0x00	; 0
    45bc:	b0 e0       	ldi	r27, 0x00	; 0
    45be:	e3 ee       	ldi	r30, 0xE3	; 227
    45c0:	f2 e2       	ldi	r31, 0x22	; 34
    45c2:	0c 94 af 57 	jmp	0xaf5e	; 0xaf5e <__prologue_saves__+0xe>
    45c6:	5c 01       	movw	r10, r24
    45c8:	6a 01       	movw	r12, r20
    45ca:	7b 01       	movw	r14, r22
    45cc:	92 2e       	mov	r9, r18
    45ce:	e8 01       	movw	r28, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    45d0:	88 e4       	ldi	r24, 0x48	; 72
    45d2:	9f e0       	ldi	r25, 0x0F	; 15
    45d4:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    buff[0] = 'g';
    45d8:	87 e6       	ldi	r24, 0x67	; 103
    45da:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    45dc:	bb 27       	eor	r27, r27
    45de:	af 2d       	mov	r26, r15
    45e0:	9e 2d       	mov	r25, r14
    45e2:	8d 2d       	mov	r24, r13
    45e4:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    45e6:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize;
    45e8:	9b 82       	std	Y+3, r9	; 0x03
    buff[4] = 'E';
    45ea:	85 e4       	ldi	r24, 0x45	; 69
    45ec:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    45ee:	c5 01       	movw	r24, r10
    45f0:	60 e7       	ldi	r22, 0x70	; 112
    45f2:	a8 01       	movw	r20, r16
    45f4:	25 e0       	ldi	r18, 0x05	; 5
    45f6:	09 2d       	mov	r16, r9
    45f8:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    45fc:	d5 01       	movw	r26, r10
    45fe:	1d 96       	adiw	r26, 0x0d	; 13
    4600:	8c 91       	ld	r24, X
    4602:	1d 97       	sbiw	r26, 0x0d	; 13
    4604:	88 23       	and	r24, r24
    4606:	d1 f7       	brne	.-12     	; 0x45fc <readEEPage+0x42>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    4608:	1e 96       	adiw	r26, 0x0e	; 14
    460a:	8c 91       	ld	r24, X
    460c:	1e 97       	sbiw	r26, 0x0e	; 14
    460e:	81 30       	cpi	r24, 0x01	; 1
    4610:	b9 f0       	breq	.+46     	; 0x4640 <readEEPage+0x86>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4612:	1e 96       	adiw	r26, 0x0e	; 14
    4614:	2c 91       	ld	r18, X
    4616:	00 d0       	rcall	.+0      	; 0x4618 <readEEPage+0x5e>
    4618:	0f 92       	push	r0
    461a:	ed b7       	in	r30, 0x3d	; 61
    461c:	fe b7       	in	r31, 0x3e	; 62
    461e:	31 96       	adiw	r30, 0x01	; 1
    4620:	8b e2       	ldi	r24, 0x2B	; 43
    4622:	9f e0       	ldi	r25, 0x0F	; 15
    4624:	ad b7       	in	r26, 0x3d	; 61
    4626:	be b7       	in	r27, 0x3e	; 62
    4628:	11 96       	adiw	r26, 0x01	; 1
    462a:	8d 93       	st	X+, r24
    462c:	9c 93       	st	X, r25
    462e:	12 97       	sbiw	r26, 0x02	; 2
    4630:	22 83       	std	Z+2, r18	; 0x02
    4632:	13 82       	std	Z+3, r1	; 0x03
    4634:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    4638:	0f 90       	pop	r0
    463a:	0f 90       	pop	r0
    463c:	0f 90       	pop	r0
    463e:	0f 90       	pop	r0
    4640:	de 01       	movw	r26, r28
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	0a c0       	rjmp	.+20     	; 0x465a <readEEPage+0xa0>
    }
    
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    4646:	e5 01       	movw	r28, r10
    4648:	ed 81       	ldd	r30, Y+5	; 0x05
    464a:	fe 81       	ldd	r31, Y+6	; 0x06
    464c:	e9 0f       	add	r30, r25
    464e:	f1 1d       	adc	r31, r1
    4650:	80 81       	ld	r24, Z
    4652:	14 96       	adiw	r26, 0x04	; 4
    4654:	8c 93       	st	X, r24
    4656:	14 97       	sbiw	r26, 0x04	; 4
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    
    for (i = 0; i < psize; i++) {
    4658:	9f 5f       	subi	r25, 0xFF	; 255
    465a:	11 96       	adiw	r26, 0x01	; 1
    465c:	99 15       	cp	r25, r9
    465e:	98 f3       	brcs	.-26     	; 0x4646 <readEEPage+0x8c>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}
    4660:	cd b7       	in	r28, 0x3d	; 61
    4662:	de b7       	in	r29, 0x3e	; 62
    4664:	eb e0       	ldi	r30, 0x0B	; 11
    4666:	0c 94 cb 57 	jmp	0xaf96	; 0xaf96 <__epilogue_restores__+0xe>

0000466a <progEEPage>:
            match = 0;
    }
    return match;
}

void progEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    466a:	a0 e0       	ldi	r26, 0x00	; 0
    466c:	b0 e0       	ldi	r27, 0x00	; 0
    466e:	eb e3       	ldi	r30, 0x3B	; 59
    4670:	f3 e2       	ldi	r31, 0x23	; 35
    4672:	0c 94 b1 57 	jmp	0xaf62	; 0xaf62 <__prologue_saves__+0x12>
    4676:	ec 01       	movw	r28, r24
    4678:	6a 01       	movw	r12, r20
    467a:	7b 01       	movw	r14, r22
    467c:	b2 2e       	mov	r11, r18
    xputs(PSTR("#"));
    467e:	89 e6       	ldi	r24, 0x69	; 105
    4680:	9f e0       	ldi	r25, 0x0F	; 15
    4682:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    buff[0] = 'B';
    4686:	82 e4       	ldi	r24, 0x42	; 66
    4688:	d8 01       	movw	r26, r16
    468a:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    468c:	bb 27       	eor	r27, r27
    468e:	af 2d       	mov	r26, r15
    4690:	9e 2d       	mov	r25, r14
    4692:	8d 2d       	mov	r24, r13
    4694:	f8 01       	movw	r30, r16
    4696:	81 83       	std	Z+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4698:	c2 82       	std	Z+2, r12	; 0x02
    buff[3] = psize;
    469a:	b3 82       	std	Z+3, r11	; 0x03
    buff[4] = 'E';
    469c:	85 e4       	ldi	r24, 0x45	; 69
    469e:	84 83       	std	Z+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    46a0:	f5 e0       	ldi	r31, 0x05	; 5
    46a2:	bf 0e       	add	r11, r31
    46a4:	ce 01       	movw	r24, r28
    46a6:	60 e7       	ldi	r22, 0x70	; 112
    46a8:	a8 01       	movw	r20, r16
    46aa:	2b 2d       	mov	r18, r11
    46ac:	00 e0       	ldi	r16, 0x00	; 0
    46ae:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    46b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    46b4:	88 23       	and	r24, r24
    46b6:	e9 f7       	brne	.-6      	; 0x46b2 <progEEPage+0x48>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    46b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    46ba:	81 30       	cpi	r24, 0x01	; 1
    46bc:	b1 f0       	breq	.+44     	; 0x46ea <progEEPage+0x80>
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);
    46be:	2e 85       	ldd	r18, Y+14	; 0x0e
    46c0:	00 d0       	rcall	.+0      	; 0x46c2 <progEEPage+0x58>
    46c2:	0f 92       	push	r0
    46c4:	ed b7       	in	r30, 0x3d	; 61
    46c6:	fe b7       	in	r31, 0x3e	; 62
    46c8:	31 96       	adiw	r30, 0x01	; 1
    46ca:	8a e4       	ldi	r24, 0x4A	; 74
    46cc:	9f e0       	ldi	r25, 0x0F	; 15
    46ce:	ad b7       	in	r26, 0x3d	; 61
    46d0:	be b7       	in	r27, 0x3e	; 62
    46d2:	11 96       	adiw	r26, 0x01	; 1
    46d4:	8d 93       	st	X+, r24
    46d6:	9c 93       	st	X, r25
    46d8:	12 97       	sbiw	r26, 0x02	; 2
    46da:	22 83       	std	Z+2, r18	; 0x02
    46dc:	13 82       	std	Z+3, r1	; 0x03
    46de:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    46e2:	0f 90       	pop	r0
    46e4:	0f 90       	pop	r0
    46e6:	0f 90       	pop	r0
    46e8:	0f 90       	pop	r0
    }
}
    46ea:	cd b7       	in	r28, 0x3d	; 61
    46ec:	de b7       	in	r29, 0x3e	; 62
    46ee:	e9 e0       	ldi	r30, 0x09	; 9
    46f0:	0c 94 cd 57 	jmp	0xaf9a	; 0xaf9a <__epilogue_restores__+0x12>

000046f4 <verifyPage>:
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}


int verifyPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    46f4:	a0 e0       	ldi	r26, 0x00	; 0
    46f6:	b0 e0       	ldi	r27, 0x00	; 0
    46f8:	e0 e8       	ldi	r30, 0x80	; 128
    46fa:	f3 e2       	ldi	r31, 0x23	; 35
    46fc:	0c 94 af 57 	jmp	0xaf5e	; 0xaf5e <__prologue_saves__+0xe>
    4700:	5c 01       	movw	r10, r24
    4702:	6a 01       	movw	r12, r20
    4704:	7b 01       	movw	r14, r22
    4706:	92 2e       	mov	r9, r18
    4708:	e8 01       	movw	r28, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    470a:	88 e8       	ldi	r24, 0x88	; 136
    470c:	9f e0       	ldi	r25, 0x0F	; 15
    470e:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    buff[0] = 'g';
    4712:	87 e6       	ldi	r24, 0x67	; 103
    4714:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4716:	bb 27       	eor	r27, r27
    4718:	af 2d       	mov	r26, r15
    471a:	9e 2d       	mov	r25, r14
    471c:	8d 2d       	mov	r24, r13
    471e:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4720:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize>>1;
    4722:	89 2d       	mov	r24, r9
    4724:	86 95       	lsr	r24
    4726:	8b 83       	std	Y+3, r24	; 0x03
    buff[4] = 'F';
    4728:	86 e4       	ldi	r24, 0x46	; 70
    472a:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    472c:	c5 01       	movw	r24, r10
    472e:	60 e7       	ldi	r22, 0x70	; 112
    4730:	a8 01       	movw	r20, r16
    4732:	25 e0       	ldi	r18, 0x05	; 5
    4734:	09 2d       	mov	r16, r9
    4736:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    473a:	d5 01       	movw	r26, r10
    473c:	1d 96       	adiw	r26, 0x0d	; 13
    473e:	8c 91       	ld	r24, X
    4740:	1d 97       	sbiw	r26, 0x0d	; 13
    4742:	88 23       	and	r24, r24
    4744:	d1 f7       	brne	.-12     	; 0x473a <verifyPage+0x46>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    4746:	1e 96       	adiw	r26, 0x0e	; 14
    4748:	8c 91       	ld	r24, X
    474a:	1e 97       	sbiw	r26, 0x0e	; 14
    474c:	81 30       	cpi	r24, 0x01	; 1
    474e:	b9 f0       	breq	.+46     	; 0x477e <verifyPage+0x8a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4750:	1e 96       	adiw	r26, 0x0e	; 14
    4752:	2c 91       	ld	r18, X
    4754:	00 d0       	rcall	.+0      	; 0x4756 <verifyPage+0x62>
    4756:	0f 92       	push	r0
    4758:	ed b7       	in	r30, 0x3d	; 61
    475a:	fe b7       	in	r31, 0x3e	; 62
    475c:	31 96       	adiw	r30, 0x01	; 1
    475e:	8b e6       	ldi	r24, 0x6B	; 107
    4760:	9f e0       	ldi	r25, 0x0F	; 15
    4762:	ad b7       	in	r26, 0x3d	; 61
    4764:	be b7       	in	r27, 0x3e	; 62
    4766:	11 96       	adiw	r26, 0x01	; 1
    4768:	8d 93       	st	X+, r24
    476a:	9c 93       	st	X, r25
    476c:	12 97       	sbiw	r26, 0x02	; 2
    476e:	22 83       	std	Z+2, r18	; 0x02
    4770:	13 82       	std	Z+3, r1	; 0x03
    4772:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    4776:	0f 90       	pop	r0
    4778:	0f 90       	pop	r0
    477a:	0f 90       	pop	r0
    477c:	0f 90       	pop	r0
    477e:	de 01       	movw	r26, r28
    4780:	31 e0       	ldi	r19, 0x01	; 1
    4782:	20 e0       	ldi	r18, 0x00	; 0
    4784:	0d c0       	rjmp	.+26     	; 0x47a0 <verifyPage+0xac>
    }
    match = 1;
    for (i = 0; i < psize; i++) {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    4786:	e5 01       	movw	r28, r10
    4788:	ed 81       	ldd	r30, Y+5	; 0x05
    478a:	fe 81       	ldd	r31, Y+6	; 0x06
    478c:	e2 0f       	add	r30, r18
    478e:	f1 1d       	adc	r31, r1
    4790:	90 81       	ld	r25, Z
    4792:	15 96       	adiw	r26, 0x05	; 5
    4794:	8c 91       	ld	r24, X
    4796:	15 97       	sbiw	r26, 0x05	; 5
    4798:	98 13       	cpse	r25, r24
    479a:	30 e0       	ldi	r19, 0x00	; 0
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    match = 1;
    for (i = 0; i < psize; i++) {
    479c:	2f 5f       	subi	r18, 0xFF	; 255
    479e:	11 96       	adiw	r26, 0x01	; 1
    47a0:	29 15       	cp	r18, r9
    47a2:	88 f3       	brcs	.-30     	; 0x4786 <verifyPage+0x92>
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    47a4:	83 2f       	mov	r24, r19
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	cd b7       	in	r28, 0x3d	; 61
    47aa:	de b7       	in	r29, 0x3e	; 62
    47ac:	eb e0       	ldi	r30, 0x0B	; 11
    47ae:	0c 94 cb 57 	jmp	0xaf96	; 0xaf96 <__epilogue_restores__+0xe>

000047b2 <readPage>:
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    }
}

void readPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    47b2:	a0 e0       	ldi	r26, 0x00	; 0
    47b4:	b0 e0       	ldi	r27, 0x00	; 0
    47b6:	ef ed       	ldi	r30, 0xDF	; 223
    47b8:	f3 e2       	ldi	r31, 0x23	; 35
    47ba:	0c 94 af 57 	jmp	0xaf5e	; 0xaf5e <__prologue_saves__+0xe>
    47be:	5c 01       	movw	r10, r24
    47c0:	6a 01       	movw	r12, r20
    47c2:	7b 01       	movw	r14, r22
    47c4:	92 2e       	mov	r9, r18
    47c6:	e8 01       	movw	r28, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    47c8:	87 ea       	ldi	r24, 0xA7	; 167
    47ca:	9f e0       	ldi	r25, 0x0F	; 15
    47cc:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    buff[0] = 'g';
    47d0:	87 e6       	ldi	r24, 0x67	; 103
    47d2:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    47d4:	bb 27       	eor	r27, r27
    47d6:	af 2d       	mov	r26, r15
    47d8:	9e 2d       	mov	r25, r14
    47da:	8d 2d       	mov	r24, r13
    47dc:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    47de:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize>>1;
    47e0:	89 2d       	mov	r24, r9
    47e2:	86 95       	lsr	r24
    47e4:	8b 83       	std	Y+3, r24	; 0x03
    buff[4] = 'F';
    47e6:	86 e4       	ldi	r24, 0x46	; 70
    47e8:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    47ea:	c5 01       	movw	r24, r10
    47ec:	60 e7       	ldi	r22, 0x70	; 112
    47ee:	a8 01       	movw	r20, r16
    47f0:	25 e0       	ldi	r18, 0x05	; 5
    47f2:	09 2d       	mov	r16, r9
    47f4:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    47f8:	d5 01       	movw	r26, r10
    47fa:	1d 96       	adiw	r26, 0x0d	; 13
    47fc:	8c 91       	ld	r24, X
    47fe:	1d 97       	sbiw	r26, 0x0d	; 13
    4800:	88 23       	and	r24, r24
    4802:	d1 f7       	brne	.-12     	; 0x47f8 <readPage+0x46>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    4804:	1e 96       	adiw	r26, 0x0e	; 14
    4806:	8c 91       	ld	r24, X
    4808:	1e 97       	sbiw	r26, 0x0e	; 14
    480a:	81 30       	cpi	r24, 0x01	; 1
    480c:	b9 f0       	breq	.+46     	; 0x483c <readPage+0x8a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    480e:	1e 96       	adiw	r26, 0x0e	; 14
    4810:	2c 91       	ld	r18, X
    4812:	00 d0       	rcall	.+0      	; 0x4814 <readPage+0x62>
    4814:	0f 92       	push	r0
    4816:	ed b7       	in	r30, 0x3d	; 61
    4818:	fe b7       	in	r31, 0x3e	; 62
    481a:	31 96       	adiw	r30, 0x01	; 1
    481c:	8a e8       	ldi	r24, 0x8A	; 138
    481e:	9f e0       	ldi	r25, 0x0F	; 15
    4820:	ad b7       	in	r26, 0x3d	; 61
    4822:	be b7       	in	r27, 0x3e	; 62
    4824:	11 96       	adiw	r26, 0x01	; 1
    4826:	8d 93       	st	X+, r24
    4828:	9c 93       	st	X, r25
    482a:	12 97       	sbiw	r26, 0x02	; 2
    482c:	22 83       	std	Z+2, r18	; 0x02
    482e:	13 82       	std	Z+3, r1	; 0x03
    4830:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    4834:	0f 90       	pop	r0
    4836:	0f 90       	pop	r0
    4838:	0f 90       	pop	r0
    483a:	0f 90       	pop	r0
    483c:	de 01       	movw	r26, r28
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	0a c0       	rjmp	.+20     	; 0x4856 <readPage+0xa4>
    }
    
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    4842:	e5 01       	movw	r28, r10
    4844:	ed 81       	ldd	r30, Y+5	; 0x05
    4846:	fe 81       	ldd	r31, Y+6	; 0x06
    4848:	e9 0f       	add	r30, r25
    484a:	f1 1d       	adc	r31, r1
    484c:	80 81       	ld	r24, Z
    484e:	14 96       	adiw	r26, 0x04	; 4
    4850:	8c 93       	st	X, r24
    4852:	14 97       	sbiw	r26, 0x04	; 4
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    
    for (i = 0; i < psize; i++) {
    4854:	9f 5f       	subi	r25, 0xFF	; 255
    4856:	11 96       	adiw	r26, 0x01	; 1
    4858:	99 15       	cp	r25, r9
    485a:	98 f3       	brcs	.-26     	; 0x4842 <readPage+0x90>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}
    485c:	cd b7       	in	r28, 0x3d	; 61
    485e:	de b7       	in	r29, 0x3e	; 62
    4860:	eb e0       	ldi	r30, 0x0B	; 11
    4862:	0c 94 cb 57 	jmp	0xaf96	; 0xaf96 <__epilogue_restores__+0xe>

00004866 <progPage>:
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
	}	 	
}

void progPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4866:	a0 e0       	ldi	r26, 0x00	; 0
    4868:	b0 e0       	ldi	r27, 0x00	; 0
    486a:	e9 e3       	ldi	r30, 0x39	; 57
    486c:	f4 e2       	ldi	r31, 0x24	; 36
    486e:	0c 94 b1 57 	jmp	0xaf62	; 0xaf62 <__prologue_saves__+0x12>
    4872:	ec 01       	movw	r28, r24
    4874:	6a 01       	movw	r12, r20
    4876:	7b 01       	movw	r14, r22
    4878:	b2 2e       	mov	r11, r18
    xputs(PSTR("#"));
    487a:	87 ec       	ldi	r24, 0xC7	; 199
    487c:	9f e0       	ldi	r25, 0x0F	; 15
    487e:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
//  xprintf(PSTR("flash page write: 0x%lX 0x%X\n"), paddr, psize);
    buff[0] = 'B';
    4882:	82 e4       	ldi	r24, 0x42	; 66
    4884:	d8 01       	movw	r26, r16
    4886:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4888:	bb 27       	eor	r27, r27
    488a:	af 2d       	mov	r26, r15
    488c:	9e 2d       	mov	r25, r14
    488e:	8d 2d       	mov	r24, r13
    4890:	f8 01       	movw	r30, r16
    4892:	81 83       	std	Z+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4894:	c2 82       	std	Z+2, r12	; 0x02
    buff[3] = psize>>1;
    4896:	8b 2d       	mov	r24, r11
    4898:	86 95       	lsr	r24
    489a:	83 83       	std	Z+3, r24	; 0x03
    buff[4] = 'F';
    489c:	86 e4       	ldi	r24, 0x46	; 70
    489e:	84 83       	std	Z+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    48a0:	f5 e0       	ldi	r31, 0x05	; 5
    48a2:	bf 0e       	add	r11, r31
    48a4:	ce 01       	movw	r24, r28
    48a6:	60 e7       	ldi	r22, 0x70	; 112
    48a8:	a8 01       	movw	r20, r16
    48aa:	2b 2d       	mov	r18, r11
    48ac:	00 e0       	ldi	r16, 0x00	; 0
    48ae:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    48b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    48b4:	88 23       	and	r24, r24
    48b6:	e9 f7       	brne	.-6      	; 0x48b2 <progPage+0x4c>
        /* Wait until transaction is complete. */
        //xputs(PSTR("I am waiting.\n"));
    }
    if (twi->result != TWIM_RESULT_OK) {
    48b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    48ba:	81 30       	cpi	r24, 0x01	; 1
    48bc:	b1 f0       	breq	.+44     	; 0x48ea <progPage+0x84>
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    48be:	2e 85       	ldd	r18, Y+14	; 0x0e
    48c0:	00 d0       	rcall	.+0      	; 0x48c2 <progPage+0x5c>
    48c2:	0f 92       	push	r0
    48c4:	ed b7       	in	r30, 0x3d	; 61
    48c6:	fe b7       	in	r31, 0x3e	; 62
    48c8:	31 96       	adiw	r30, 0x01	; 1
    48ca:	89 ea       	ldi	r24, 0xA9	; 169
    48cc:	9f e0       	ldi	r25, 0x0F	; 15
    48ce:	ad b7       	in	r26, 0x3d	; 61
    48d0:	be b7       	in	r27, 0x3e	; 62
    48d2:	11 96       	adiw	r26, 0x01	; 1
    48d4:	8d 93       	st	X+, r24
    48d6:	9c 93       	st	X, r25
    48d8:	12 97       	sbiw	r26, 0x02	; 2
    48da:	22 83       	std	Z+2, r18	; 0x02
    48dc:	13 82       	std	Z+3, r1	; 0x03
    48de:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    48e2:	0f 90       	pop	r0
    48e4:	0f 90       	pop	r0
    48e6:	0f 90       	pop	r0
    48e8:	0f 90       	pop	r0
    }
}
    48ea:	cd b7       	in	r28, 0x3d	; 61
    48ec:	de b7       	in	r29, 0x3e	; 62
    48ee:	e9 e0       	ldi	r30, 0x09	; 9
    48f0:	0c 94 cd 57 	jmp	0xaf9a	; 0xaf9a <__epilogue_restores__+0x12>

000048f4 <ihex_readrec>:
    }
    xprintf(PSTR("%S\n"), p);
}

static
        int16_t ihex_readrec(ihexrec_t * ihex, char * rec) {
    48f4:	af e0       	ldi	r26, 0x0F	; 15
    48f6:	b0 e0       	ldi	r27, 0x00	; 0
    48f8:	e0 e8       	ldi	r30, 0x80	; 128
    48fa:	f4 e2       	ldi	r31, 0x24	; 36
    48fc:	0c 94 a8 57 	jmp	0xaf50	; 0xaf50 <__prologue_saves__>
    4900:	7c 01       	movw	r14, r24
    4902:	8b 01       	movw	r16, r22
    int offset, len;
    char * e;
    unsigned char cksum;
    int rc;
    
    len    = strlen(rec);
    4904:	db 01       	movw	r26, r22
    4906:	0d 90       	ld	r0, X+
    4908:	00 20       	and	r0, r0
    490a:	e9 f7       	brne	.-6      	; 0x4906 <ihex_readrec+0x12>
    490c:	6d 01       	movw	r12, r26
    490e:	08 94       	sec
    4910:	c1 08       	sbc	r12, r1
    4912:	d1 08       	sbc	r13, r1
    4914:	c6 1a       	sub	r12, r22
    4916:	d7 0a       	sbc	r13, r23
    offset = 1;
    cksum  = 0;
    
    /* reclen */
    if (offset + 2 > len)
    4918:	b3 e0       	ldi	r27, 0x03	; 3
    491a:	cb 16       	cp	r12, r27
    491c:	d1 04       	cpc	r13, r1
    491e:	0c f4       	brge	.+2      	; 0x4922 <ihex_readrec+0x2e>
    4920:	f2 c0       	rjmp	.+484    	; 0x4b06 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    4922:	fb 01       	movw	r30, r22
    4924:	81 81       	ldd	r24, Z+1	; 0x01
    4926:	8b 83       	std	Y+3, r24	; 0x03
    4928:	82 81       	ldd	r24, Z+2	; 0x02
    492a:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    492c:	1d 82       	std	Y+5, r1	; 0x05
    ihex->reclen = strtoul(buf, &e, 16);
    492e:	ce 01       	movw	r24, r28
    4930:	03 96       	adiw	r24, 0x03	; 3
    4932:	8c 87       	std	Y+12, r24	; 0x0c
    4934:	9d 87       	std	Y+13, r25	; 0x0d
    4936:	ce 01       	movw	r24, r28
    4938:	03 96       	adiw	r24, 0x03	; 3
    493a:	be 01       	movw	r22, r28
    493c:	6f 5f       	subi	r22, 0xFF	; 255
    493e:	7f 4f       	sbci	r23, 0xFF	; 255
    4940:	40 e1       	ldi	r20, 0x10	; 16
    4942:	50 e0       	ldi	r21, 0x00	; 0
    4944:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <strtoul>
    4948:	d7 01       	movw	r26, r14
    494a:	6c 93       	st	X, r22
    if (e == buf || *e != 0)
    494c:	e9 81       	ldd	r30, Y+1	; 0x01
    494e:	fa 81       	ldd	r31, Y+2	; 0x02
    4950:	8c 85       	ldd	r24, Y+12	; 0x0c
    4952:	9d 85       	ldd	r25, Y+13	; 0x0d
    4954:	e8 17       	cp	r30, r24
    4956:	f9 07       	cpc	r31, r25
    4958:	09 f4       	brne	.+2      	; 0x495c <ihex_readrec+0x68>
    495a:	d5 c0       	rjmp	.+426    	; 0x4b06 <ihex_readrec+0x212>
    495c:	80 81       	ld	r24, Z
    495e:	88 23       	and	r24, r24
    4960:	09 f0       	breq	.+2      	; 0x4964 <ihex_readrec+0x70>
    4962:	d1 c0       	rjmp	.+418    	; 0x4b06 <ihex_readrec+0x212>
        return -1;
    
    /* load offset */
    if (offset + 4 > len)
    4964:	97 e0       	ldi	r25, 0x07	; 7
    4966:	c9 16       	cp	r12, r25
    4968:	d1 04       	cpc	r13, r1
    496a:	0c f4       	brge	.+2      	; 0x496e <ihex_readrec+0x7a>
    496c:	cc c0       	rjmp	.+408    	; 0x4b06 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<4; i++)
        buf[i] = rec[offset++];
    496e:	d8 01       	movw	r26, r16
    4970:	13 96       	adiw	r26, 0x03	; 3
    4972:	8c 91       	ld	r24, X
    4974:	13 97       	sbiw	r26, 0x03	; 3
    4976:	8b 83       	std	Y+3, r24	; 0x03
    4978:	14 96       	adiw	r26, 0x04	; 4
    497a:	8c 91       	ld	r24, X
    497c:	14 97       	sbiw	r26, 0x04	; 4
    497e:	8c 83       	std	Y+4, r24	; 0x04
    4980:	15 96       	adiw	r26, 0x05	; 5
    4982:	8c 91       	ld	r24, X
    4984:	15 97       	sbiw	r26, 0x05	; 5
    4986:	8d 83       	std	Y+5, r24	; 0x05
    4988:	16 96       	adiw	r26, 0x06	; 6
    498a:	8c 91       	ld	r24, X
    498c:	8e 83       	std	Y+6, r24	; 0x06
    buf[i] = 0;
    498e:	1f 82       	std	Y+7, r1	; 0x07
    ihex->loadofs = strtoul(buf, &e, 16);
    4990:	ce 01       	movw	r24, r28
    4992:	03 96       	adiw	r24, 0x03	; 3
    4994:	be 01       	movw	r22, r28
    4996:	6f 5f       	subi	r22, 0xFF	; 255
    4998:	7f 4f       	sbci	r23, 0xFF	; 255
    499a:	40 e1       	ldi	r20, 0x10	; 16
    499c:	50 e0       	ldi	r21, 0x00	; 0
    499e:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <strtoul>
    49a2:	f7 01       	movw	r30, r14
    49a4:	61 83       	std	Z+1, r22	; 0x01
    49a6:	72 83       	std	Z+2, r23	; 0x02
    if (e == buf || *e != 0)
    49a8:	e9 81       	ldd	r30, Y+1	; 0x01
    49aa:	fa 81       	ldd	r31, Y+2	; 0x02
    49ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    49ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    49b0:	e8 17       	cp	r30, r24
    49b2:	f9 07       	cpc	r31, r25
    49b4:	09 f4       	brne	.+2      	; 0x49b8 <ihex_readrec+0xc4>
    49b6:	a7 c0       	rjmp	.+334    	; 0x4b06 <ihex_readrec+0x212>
    49b8:	80 81       	ld	r24, Z
    49ba:	88 23       	and	r24, r24
    49bc:	09 f0       	breq	.+2      	; 0x49c0 <ihex_readrec+0xcc>
    49be:	a3 c0       	rjmp	.+326    	; 0x4b06 <ihex_readrec+0x212>
        return -1;
    
    /* record type */
    if (offset + 2 > len)
    49c0:	99 e0       	ldi	r25, 0x09	; 9
    49c2:	c9 16       	cp	r12, r25
    49c4:	d1 04       	cpc	r13, r1
    49c6:	0c f4       	brge	.+2      	; 0x49ca <ihex_readrec+0xd6>
    49c8:	9e c0       	rjmp	.+316    	; 0x4b06 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    49ca:	d8 01       	movw	r26, r16
    49cc:	17 96       	adiw	r26, 0x07	; 7
    49ce:	8c 91       	ld	r24, X
    49d0:	17 97       	sbiw	r26, 0x07	; 7
    49d2:	8b 83       	std	Y+3, r24	; 0x03
    49d4:	18 96       	adiw	r26, 0x08	; 8
    49d6:	8c 91       	ld	r24, X
    49d8:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    49da:	1d 82       	std	Y+5, r1	; 0x05
    ihex->rectyp = strtoul(buf, &e, 16);
    49dc:	ce 01       	movw	r24, r28
    49de:	03 96       	adiw	r24, 0x03	; 3
    49e0:	be 01       	movw	r22, r28
    49e2:	6f 5f       	subi	r22, 0xFF	; 255
    49e4:	7f 4f       	sbci	r23, 0xFF	; 255
    49e6:	40 e1       	ldi	r20, 0x10	; 16
    49e8:	50 e0       	ldi	r21, 0x00	; 0
    49ea:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <strtoul>
    49ee:	f7 01       	movw	r30, r14
    49f0:	63 83       	std	Z+3, r22	; 0x03
    if (e == buf || *e != 0)
    49f2:	e9 81       	ldd	r30, Y+1	; 0x01
    49f4:	fa 81       	ldd	r31, Y+2	; 0x02
    49f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    49f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    49fa:	e8 17       	cp	r30, r24
    49fc:	f9 07       	cpc	r31, r25
    49fe:	09 f4       	brne	.+2      	; 0x4a02 <ihex_readrec+0x10e>
    4a00:	82 c0       	rjmp	.+260    	; 0x4b06 <ihex_readrec+0x212>
    4a02:	80 81       	ld	r24, Z
    4a04:	88 23       	and	r24, r24
    4a06:	09 f0       	breq	.+2      	; 0x4a0a <ihex_readrec+0x116>
    4a08:	7e c0       	rjmp	.+252    	; 0x4b06 <ihex_readrec+0x212>
        return -1;
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
    4a0a:	d7 01       	movw	r26, r14
    4a0c:	11 96       	adiw	r26, 0x01	; 1
    4a0e:	8c 91       	ld	r24, X
    4a10:	11 97       	sbiw	r26, 0x01	; 1
    4a12:	12 96       	adiw	r26, 0x02	; 2
    4a14:	9c 91       	ld	r25, X
    4a16:	12 97       	sbiw	r26, 0x02	; 2
    4a18:	7c 90       	ld	r7, X
    4a1a:	78 0e       	add	r7, r24
    4a1c:	79 0e       	add	r7, r25
    4a1e:	76 0e       	add	r7, r22
    4a20:	48 01       	movw	r8, r16
    4a22:	17 01       	movw	r2, r14
    4a24:	44 24       	eor	r4, r4
    4a26:	55 24       	eor	r5, r5
    4a28:	99 e0       	ldi	r25, 0x09	; 9
    4a2a:	a9 2e       	mov	r10, r25
    4a2c:	b1 2c       	mov	r11, r1
        if (offset + 2 > len)
            return -1;
        for (i=0; i<2; i++)
            buf[i] = rec[offset++];
        buf[i] = 0;
        ihex->data[j] = strtoul(buf, &e, 16);
    4a2e:	fe 01       	movw	r30, r28
    4a30:	33 96       	adiw	r30, 0x03	; 3
    4a32:	ee 87       	std	Y+14, r30	; 0x0e
    4a34:	ff 87       	std	Y+15, r31	; 0x0f
    4a36:	ce 01       	movw	r24, r28
    4a38:	01 96       	adiw	r24, 0x01	; 1
    4a3a:	8b 87       	std	Y+11, r24	; 0x0b
    4a3c:	69 2e       	mov	r6, r25
    4a3e:	32 c0       	rjmp	.+100    	; 0x4aa4 <ihex_readrec+0x1b0>
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++) {
        if (offset + 2 > len)
    4a40:	2c 15       	cp	r18, r12
    4a42:	3d 05       	cpc	r19, r13
    4a44:	0c f0       	brlt	.+2      	; 0x4a48 <ihex_readrec+0x154>
    4a46:	5f c0       	rjmp	.+190    	; 0x4b06 <ihex_readrec+0x212>
            return -1;
        for (i=0; i<2; i++)
            buf[i] = rec[offset++];
    4a48:	d4 01       	movw	r26, r8
    4a4a:	19 96       	adiw	r26, 0x09	; 9
    4a4c:	8c 91       	ld	r24, X
    4a4e:	19 97       	sbiw	r26, 0x09	; 9
    4a50:	8b 83       	std	Y+3, r24	; 0x03
    4a52:	1a 96       	adiw	r26, 0x0a	; 10
    4a54:	8c 91       	ld	r24, X
    4a56:	8c 83       	std	Y+4, r24	; 0x04
    4a58:	e2 e0       	ldi	r30, 0x02	; 2
    4a5a:	f0 e0       	ldi	r31, 0x00	; 0
    4a5c:	ae 0e       	add	r10, r30
    4a5e:	bf 1e       	adc	r11, r31
        buf[i] = 0;
    4a60:	1d 82       	std	Y+5, r1	; 0x05
        ihex->data[j] = strtoul(buf, &e, 16);
    4a62:	ce 01       	movw	r24, r28
    4a64:	03 96       	adiw	r24, 0x03	; 3
    4a66:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a68:	76 2d       	mov	r23, r6
    4a6a:	40 e1       	ldi	r20, 0x10	; 16
    4a6c:	50 e0       	ldi	r21, 0x00	; 0
    4a6e:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <strtoul>
    4a72:	d1 01       	movw	r26, r2
    4a74:	14 96       	adiw	r26, 0x04	; 4
    4a76:	6c 93       	st	X, r22
        if (e == buf || *e != 0)
    4a78:	e9 81       	ldd	r30, Y+1	; 0x01
    4a7a:	fa 81       	ldd	r31, Y+2	; 0x02
    4a7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a80:	e8 17       	cp	r30, r24
    4a82:	f9 07       	cpc	r31, r25
    4a84:	09 f4       	brne	.+2      	; 0x4a88 <ihex_readrec+0x194>
    4a86:	3f c0       	rjmp	.+126    	; 0x4b06 <ihex_readrec+0x212>
    4a88:	a2 e0       	ldi	r26, 0x02	; 2
    4a8a:	b0 e0       	ldi	r27, 0x00	; 0
    4a8c:	8a 0e       	add	r8, r26
    4a8e:	9b 1e       	adc	r9, r27
    4a90:	08 94       	sec
    4a92:	21 1c       	adc	r2, r1
    4a94:	31 1c       	adc	r3, r1
    4a96:	80 81       	ld	r24, Z
    4a98:	88 23       	and	r24, r24
    4a9a:	a9 f5       	brne	.+106    	; 0x4b06 <ihex_readrec+0x212>
            return -1;
        cksum += ihex->data[j];
    4a9c:	76 0e       	add	r7, r22
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++) {
    4a9e:	08 94       	sec
    4aa0:	41 1c       	adc	r4, r1
    4aa2:	51 1c       	adc	r5, r1
    4aa4:	f7 01       	movw	r30, r14
    4aa6:	80 81       	ld	r24, Z
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	95 01       	movw	r18, r10
    4aac:	2f 5f       	subi	r18, 0xFF	; 255
    4aae:	3f 4f       	sbci	r19, 0xFF	; 255
    4ab0:	48 16       	cp	r4, r24
    4ab2:	59 06       	cpc	r5, r25
    4ab4:	2c f2       	brlt	.-118    	; 0x4a40 <ihex_readrec+0x14c>
            return -1;
        cksum += ihex->data[j];
    }
    
    /* cksum */
    if (offset + 2 > len)
    4ab6:	2c 15       	cp	r18, r12
    4ab8:	3d 05       	cpc	r19, r13
    4aba:	2c f5       	brge	.+74     	; 0x4b06 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    4abc:	f8 01       	movw	r30, r16
    4abe:	ea 0d       	add	r30, r10
    4ac0:	fb 1d       	adc	r31, r11
    4ac2:	80 81       	ld	r24, Z
    4ac4:	8b 83       	std	Y+3, r24	; 0x03
    4ac6:	81 81       	ldd	r24, Z+1	; 0x01
    4ac8:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    4aca:	1d 82       	std	Y+5, r1	; 0x05
    ihex->cksum = strtoul(buf, &e, 16);
    4acc:	8e 01       	movw	r16, r28
    4ace:	0d 5f       	subi	r16, 0xFD	; 253
    4ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad2:	c8 01       	movw	r24, r16
    4ad4:	be 01       	movw	r22, r28
    4ad6:	6f 5f       	subi	r22, 0xFF	; 255
    4ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    4ada:	40 e1       	ldi	r20, 0x10	; 16
    4adc:	50 e0       	ldi	r21, 0x00	; 0
    4ade:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <strtoul>
    4ae2:	84 e0       	ldi	r24, 0x04	; 4
    4ae4:	91 e0       	ldi	r25, 0x01	; 1
    4ae6:	e8 0e       	add	r14, r24
    4ae8:	f9 1e       	adc	r15, r25
    4aea:	d7 01       	movw	r26, r14
    4aec:	6c 93       	st	X, r22
    if (e == buf || *e != 0)
    4aee:	e9 81       	ldd	r30, Y+1	; 0x01
    4af0:	fa 81       	ldd	r31, Y+2	; 0x02
    4af2:	e0 17       	cp	r30, r16
    4af4:	f1 07       	cpc	r31, r17
    4af6:	39 f0       	breq	.+14     	; 0x4b06 <ihex_readrec+0x212>
    4af8:	80 81       	ld	r24, Z
    4afa:	88 23       	and	r24, r24
    4afc:	21 f4       	brne	.+8      	; 0x4b06 <ihex_readrec+0x212>
        return -1;
    
    rc = -cksum & 0x000000ff;
    4afe:	71 94       	neg	r7
    4b00:	27 2d       	mov	r18, r7
    4b02:	30 e0       	ldi	r19, 0x00	; 0
    4b04:	02 c0       	rjmp	.+4      	; 0x4b0a <ihex_readrec+0x216>
    
    return rc;
    4b06:	2f ef       	ldi	r18, 0xFF	; 255
    4b08:	3f ef       	ldi	r19, 0xFF	; 255
    4b0a:	c9 01       	movw	r24, r18
    4b0c:	2f 96       	adiw	r28, 0x0f	; 15
    4b0e:	e2 e1       	ldi	r30, 0x12	; 18
    4b10:	0c 94 c4 57 	jmp	0xaf88	; 0xaf88 <__epilogue_restores__>

00004b14 <eeprom_panel>:
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    }
};

void eeprom_panel(uint8_t panel_num) {
    4b14:	a0 e9       	ldi	r26, 0x90	; 144
    4b16:	b2 e0       	ldi	r27, 0x02	; 2
    4b18:	e0 e9       	ldi	r30, 0x90	; 144
    4b1a:	f5 e2       	ldi	r31, 0x25	; 37
    4b1c:	0c 94 a8 57 	jmp	0xaf50	; 0xaf50 <__prologue_saves__>
    4b20:	08 2f       	mov	r16, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t eepromBuff[256];
    
    ch = chMap[panel_num];
    4b22:	e8 2e       	mov	r14, r24
    4b24:	ff 24       	eor	r15, r15
    4b26:	f7 01       	movw	r30, r14
    4b28:	e8 5e       	subi	r30, 0xE8	; 232
    4b2a:	f8 4d       	sbci	r31, 0xD8	; 216
    4b2c:	e0 81       	ld	r30, Z
    if (ch != 0){
    4b2e:	ee 23       	and	r30, r30
    4b30:	09 f4       	brne	.+2      	; 0x4b34 <eeprom_panel+0x20>
    4b32:	cd c2       	rjmp	.+1434   	; 0x50ce <eeprom_panel+0x5ba>
        
        switch (ch) {
    4b34:	e3 30       	cpi	r30, 0x03	; 3
    4b36:	71 f0       	breq	.+28     	; 0x4b54 <eeprom_panel+0x40>
    4b38:	e4 30       	cpi	r30, 0x04	; 4
    4b3a:	89 f0       	breq	.+34     	; 0x4b5e <eeprom_panel+0x4a>
    4b3c:	e2 30       	cpi	r30, 0x02	; 2
    4b3e:	29 f4       	brne	.+10     	; 0x4b4a <eeprom_panel+0x36>
    4b40:	22 e7       	ldi	r18, 0x72	; 114
    4b42:	82 2e       	mov	r8, r18
    4b44:	29 e2       	ldi	r18, 0x29	; 41
    4b46:	92 2e       	mov	r9, r18
    4b48:	0e c0       	rjmp	.+28     	; 0x4b66 <eeprom_panel+0x52>
    4b4a:	95 e7       	ldi	r25, 0x75	; 117
    4b4c:	89 2e       	mov	r8, r25
    4b4e:	96 e2       	ldi	r25, 0x26	; 38
    4b50:	99 2e       	mov	r9, r25
    4b52:	09 c0       	rjmp	.+18     	; 0x4b66 <eeprom_panel+0x52>
    4b54:	88 e0       	ldi	r24, 0x08	; 8
    4b56:	88 2e       	mov	r8, r24
    4b58:	87 e2       	ldi	r24, 0x27	; 39
    4b5a:	98 2e       	mov	r9, r24
    4b5c:	04 c0       	rjmp	.+8      	; 0x4b66 <eeprom_panel+0x52>
            case 2:
                twi = &twi2;
                break;
            case 3:
                twi = &twi3;
                break;
    4b5e:	17 e9       	ldi	r17, 0x97	; 151
    4b60:	81 2e       	mov	r8, r17
    4b62:	15 e2       	ldi	r17, 0x25	; 37
    4b64:	91 2e       	mov	r9, r17
                twi = &twi1;
                break;
        }
        
        // open the hex file for reading
        res = f_open(&file6, panelEEprom, FA_OPEN_EXISTING | FA_READ);
    4b66:	83 ec       	ldi	r24, 0xC3	; 195
    4b68:	97 e2       	ldi	r25, 0x27	; 39
    4b6a:	6a ec       	ldi	r22, 0xCA	; 202
    4b6c:	73 e2       	ldi	r23, 0x23	; 35
    4b6e:	41 e0       	ldi	r20, 0x01	; 1
    4b70:	0e 94 17 4c 	call	0x982e	; 0x982e <f_open>
    4b74:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    4b76:	88 23       	and	r24, r24
    4b78:	49 f0       	breq	.+18     	; 0x4b8c <eeprom_panel+0x78>
            // could'n open the file
            xputs(PSTR("Error f_open in eeprom.hex.\n"));
    4b7a:	86 e1       	ldi	r24, 0x16	; 22
    4b7c:	9c e0       	ldi	r25, 0x0C	; 12
    4b7e:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
            put_rc(res);
    4b82:	81 2f       	mov	r24, r17
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <put_rc>
    4b8a:	3d c0       	rjmp	.+122    	; 0x4c06 <eeprom_panel+0xf2>
            } else {
                // use cmd reset (assumes panel firmware already loaded)
                //i2cMasterSend(panel_num, 2, RESET);
                
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("eeprom panel %u.\n"), panel_num);
    4b8c:	00 d0       	rcall	.+0      	; 0x4b8e <eeprom_panel+0x7a>
    4b8e:	0f 92       	push	r0
    4b90:	84 e0       	ldi	r24, 0x04	; 4
    4b92:	9c e0       	ldi	r25, 0x0C	; 12
    4b94:	ad b7       	in	r26, 0x3d	; 61
    4b96:	be b7       	in	r27, 0x3e	; 62
    4b98:	11 96       	adiw	r26, 0x01	; 1
    4b9a:	8d 93       	st	X+, r24
    4b9c:	9c 93       	st	X, r25
    4b9e:	12 97       	sbiw	r26, 0x02	; 2
    4ba0:	13 96       	adiw	r26, 0x03	; 3
    4ba2:	ed 92       	st	X+, r14
    4ba4:	fc 92       	st	X, r15
    4ba6:	14 97       	sbiw	r26, 0x04	; 4
    4ba8:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
                pagebuff[0] = 0x00;
    4bac:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    4bae:	81 e0       	ldi	r24, 0x01	; 1
    4bb0:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    4bb2:	0f 90       	pop	r0
    4bb4:	0f 90       	pop	r0
    4bb6:	0f 90       	pop	r0
    4bb8:	0f 90       	pop	r0
    4bba:	c4 01       	movw	r24, r8
    4bbc:	60 2f       	mov	r22, r16
    4bbe:	ae 01       	movw	r20, r28
    4bc0:	4f 5f       	subi	r20, 0xFF	; 255
    4bc2:	5f 4f       	sbci	r21, 0xFF	; 255
    4bc4:	22 e0       	ldi	r18, 0x02	; 2
    4bc6:	00 e0       	ldi	r16, 0x00	; 0
    4bc8:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY) {
    4bcc:	f4 01       	movw	r30, r8
    4bce:	85 85       	ldd	r24, Z+13	; 0x0d
    4bd0:	88 23       	and	r24, r24
    4bd2:	e1 f7       	brne	.-8      	; 0x4bcc <eeprom_panel+0xb8>
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK) {
    4bd4:	86 85       	ldd	r24, Z+14	; 0x0e
    4bd6:	81 30       	cpi	r24, 0x01	; 1
    4bd8:	b1 f0       	breq	.+44     	; 0x4c06 <eeprom_panel+0xf2>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    4bda:	26 85       	ldd	r18, Z+14	; 0x0e
    4bdc:	00 d0       	rcall	.+0      	; 0x4bde <eeprom_panel+0xca>
    4bde:	0f 92       	push	r0
    4be0:	ed b7       	in	r30, 0x3d	; 61
    4be2:	fe b7       	in	r31, 0x3e	; 62
    4be4:	31 96       	adiw	r30, 0x01	; 1
    4be6:	86 ee       	ldi	r24, 0xE6	; 230
    4be8:	9b e0       	ldi	r25, 0x0B	; 11
    4bea:	ad b7       	in	r26, 0x3d	; 61
    4bec:	be b7       	in	r27, 0x3e	; 62
    4bee:	11 96       	adiw	r26, 0x01	; 1
    4bf0:	8d 93       	st	X+, r24
    4bf2:	9c 93       	st	X, r25
    4bf4:	12 97       	sbiw	r26, 0x02	; 2
    4bf6:	22 83       	std	Z+2, r18	; 0x02
    4bf8:	13 82       	std	Z+3, r1	; 0x03
    4bfa:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    4bfe:	0f 90       	pop	r0
    4c00:	0f 90       	pop	r0
    4c02:	0f 90       	pop	r0
    4c04:	0f 90       	pop	r0
    4c06:	88 e8       	ldi	r24, 0x88	; 136
    4c08:	93 e1       	ldi	r25, 0x13	; 19
    4c0a:	20 e2       	ldi	r18, 0x20	; 32
    4c0c:	33 e0       	ldi	r19, 0x03	; 3
    4c0e:	f9 01       	movw	r30, r18
    4c10:	31 97       	sbiw	r30, 0x01	; 1
    4c12:	f1 f7       	brne	.-4      	; 0x4c10 <eeprom_panel+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c14:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c16:	d9 f7       	brne	.-10     	; 0x4c0e <eeprom_panel+0xfa>
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    4c18:	89 ed       	ldi	r24, 0xD9	; 217
    4c1a:	9b e0       	ldi	r25, 0x0B	; 11
    4c1c:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    4c20:	0f ef       	ldi	r16, 0xFF	; 255
    4c22:	1f ef       	ldi	r17, 0xFF	; 255
    4c24:	cc 24       	eor	r12, r12
    4c26:	dd 24       	eor	r13, r13
    4c28:	66 24       	eor	r6, r6
    4c2a:	77 24       	eor	r7, r7
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    4c2c:	b6 e8       	ldi	r27, 0x86	; 134
    4c2e:	2b 2e       	mov	r2, r27
    4c30:	31 2c       	mov	r3, r1
    4c32:	2c 0e       	add	r2, r28
    4c34:	3d 1e       	adc	r3, r29
            len = strlen(eepromBuff);
            if (eepromBuff[len-1] == '\n')
                eepromBuff[--len] = 0;
            if (eepromBuff[0] != ':')
                continue;
            rc = ihex_readrec(&ihex, eepromBuff);
    4c36:	a6 e8       	ldi	r26, 0x86	; 134
    4c38:	4a 2e       	mov	r4, r26
    4c3a:	a1 e0       	ldi	r26, 0x01	; 1
    4c3c:	5a 2e       	mov	r5, r26
    4c3e:	4c 0e       	add	r4, r28
    4c40:	5d 1e       	adc	r5, r29
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    4c42:	f2 01       	movw	r30, r4
    4c44:	34 96       	adiw	r30, 0x04	; 4
    4c46:	c3 57       	subi	r28, 0x73	; 115
    4c48:	dd 4f       	sbci	r29, 0xFD	; 253
    4c4a:	e8 83       	st	Y, r30
    4c4c:	f9 83       	std	Y+1, r31	; 0x01
    4c4e:	cd 58       	subi	r28, 0x8D	; 141
    4c50:	d2 40       	sbci	r29, 0x02	; 2
    4c52:	cb c0       	rjmp	.+406    	; 0x4dea <eeprom_panel+0x2d6>
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
            lineno++;
    4c54:	08 94       	sec
    4c56:	61 1c       	adc	r6, r1
    4c58:	71 1c       	adc	r7, r1
            len = strlen(eepromBuff);
    4c5a:	f1 01       	movw	r30, r2
    4c5c:	01 90       	ld	r0, Z+
    4c5e:	00 20       	and	r0, r0
    4c60:	e9 f7       	brne	.-6      	; 0x4c5c <eeprom_panel+0x148>
            if (eepromBuff[len-1] == '\n')
    4c62:	32 97       	sbiw	r30, 0x02	; 2
    4c64:	80 81       	ld	r24, Z
    4c66:	8a 30       	cpi	r24, 0x0A	; 10
    4c68:	09 f4       	brne	.+2      	; 0x4c6c <eeprom_panel+0x158>
                eepromBuff[--len] = 0;
    4c6a:	10 82       	st	Z, r1
            if (eepromBuff[0] != ':')
    4c6c:	d1 01       	movw	r26, r2
    4c6e:	8c 91       	ld	r24, X
    4c70:	8a 33       	cpi	r24, 0x3A	; 58
    4c72:	09 f0       	breq	.+2      	; 0x4c76 <eeprom_panel+0x162>
    4c74:	ba c0       	rjmp	.+372    	; 0x4dea <eeprom_panel+0x2d6>
                continue;
            rc = ihex_readrec(&ihex, eepromBuff);
    4c76:	c2 01       	movw	r24, r4
    4c78:	b1 01       	movw	r22, r2
    4c7a:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <ihex_readrec>
    4c7e:	f8 2e       	mov	r15, r24
            if (rc < 0) {
                xprintf(PSTR("invalid record at line %d of eeprom.hex.\n"), lineno);
                break;
            } else if (rc != ihex.cksum) {
    4c80:	c6 57       	subi	r28, 0x76	; 118
    4c82:	dd 4f       	sbci	r29, 0xFD	; 253
    4c84:	88 81       	ld	r24, Y
    4c86:	ca 58       	subi	r28, 0x8A	; 138
    4c88:	d2 40       	sbci	r29, 0x02	; 2
    4c8a:	f8 16       	cp	r15, r24
    4c8c:	19 f1       	breq	.+70     	; 0x4cd4 <eeprom_panel+0x1c0>
                xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex.\n"), lineno);
    4c8e:	00 d0       	rcall	.+0      	; 0x4c90 <eeprom_panel+0x17c>
    4c90:	0f 92       	push	r0
    4c92:	85 ea       	ldi	r24, 0xA5	; 165
    4c94:	9b e0       	ldi	r25, 0x0B	; 11
    4c96:	ed b7       	in	r30, 0x3d	; 61
    4c98:	fe b7       	in	r31, 0x3e	; 62
    4c9a:	81 83       	std	Z+1, r24	; 0x01
    4c9c:	92 83       	std	Z+2, r25	; 0x02
    4c9e:	63 82       	std	Z+3, r6	; 0x03
    4ca0:	74 82       	std	Z+4, r7	; 0x04
    4ca2:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    4ca6:	0f 92       	push	r0
    4ca8:	0f 92       	push	r0
    4caa:	ed b7       	in	r30, 0x3d	; 61
    4cac:	fe b7       	in	r31, 0x3e	; 62
    4cae:	31 96       	adiw	r30, 0x01	; 1
    4cb0:	8a e7       	ldi	r24, 0x7A	; 122
    4cb2:	9b e0       	ldi	r25, 0x0B	; 11
    4cb4:	ad b7       	in	r26, 0x3d	; 61
    4cb6:	be b7       	in	r27, 0x3e	; 62
    4cb8:	11 96       	adiw	r26, 0x01	; 1
    4cba:	8d 93       	st	X+, r24
    4cbc:	9c 93       	st	X, r25
    4cbe:	12 97       	sbiw	r26, 0x02	; 2
    4cc0:	c6 57       	subi	r28, 0x76	; 118
    4cc2:	dd 4f       	sbci	r29, 0xFD	; 253
    4cc4:	88 81       	ld	r24, Y
    4cc6:	ca 58       	subi	r28, 0x8A	; 138
    4cc8:	d2 40       	sbci	r29, 0x02	; 2
    4cca:	82 83       	std	Z+2, r24	; 0x02
    4ccc:	13 82       	std	Z+3, r1	; 0x03
    4cce:	f4 82       	std	Z+4, r15	; 0x04
    4cd0:	15 82       	std	Z+5, r1	; 0x05
    4cd2:	82 c0       	rjmp	.+260    	; 0x4dd8 <eeprom_panel+0x2c4>
                break;
            } else {
                if (ihex.rectyp == 0) {
    4cd4:	d2 01       	movw	r26, r4
    4cd6:	13 96       	adiw	r26, 0x03	; 3
    4cd8:	2c 91       	ld	r18, X
    4cda:	13 97       	sbiw	r26, 0x03	; 3
    4cdc:	22 23       	and	r18, r18
    4cde:	09 f0       	breq	.+2      	; 0x4ce2 <eeprom_panel+0x1ce>
    4ce0:	53 c0       	rjmp	.+166    	; 0x4d88 <eeprom_panel+0x274>
                    // data record
                    nextaddr = ihex.loadofs;
    4ce2:	11 96       	adiw	r26, 0x01	; 1
    4ce4:	ed 90       	ld	r14, X+
    4ce6:	fc 90       	ld	r15, X
    4ce8:	12 97       	sbiw	r26, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    4cea:	57 01       	movw	r10, r14
    4cec:	aa 0c       	add	r10, r10
    4cee:	ab 2c       	mov	r10, r11
    4cf0:	aa 1c       	adc	r10, r10
    4cf2:	bb 08       	sbc	r11, r11
    4cf4:	b1 94       	neg	r11
    4cf6:	a0 16       	cp	r10, r16
    4cf8:	b1 06       	cpc	r11, r17
    4cfa:	c1 f0       	breq	.+48     	; 0x4d2c <eeprom_panel+0x218>
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr) {
    4cfc:	cd 14       	cp	r12, r13
    4cfe:	91 f0       	breq	.+36     	; 0x4d24 <eeprom_panel+0x210>
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            progEEPage(twi, paddr, psize, &pagebuff[0]);
    4d00:	16 95       	lsr	r17
    4d02:	10 2f       	mov	r17, r16
    4d04:	00 27       	eor	r16, r16
    4d06:	17 95       	ror	r17
    4d08:	07 95       	ror	r16
    4d0a:	0c 0d       	add	r16, r12
    4d0c:	11 1d       	adc	r17, r1
    4d0e:	a8 01       	movw	r20, r16
    4d10:	60 e0       	ldi	r22, 0x00	; 0
    4d12:	70 e0       	ldi	r23, 0x00	; 0
    4d14:	dc 18       	sub	r13, r12
    4d16:	c4 01       	movw	r24, r8
    4d18:	2d 2d       	mov	r18, r13
    4d1a:	8e 01       	movw	r16, r28
    4d1c:	0f 5f       	subi	r16, 0xFF	; 255
    4d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d20:	0e 94 35 23 	call	0x466a	; 0x466a <progEEPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    4d24:	7f e7       	ldi	r23, 0x7F	; 127
    4d26:	d7 2e       	mov	r13, r23
    4d28:	de 20       	and	r13, r14
    4d2a:	cd 2c       	mov	r12, r13
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    4d2c:	4e 2d       	mov	r20, r14
    4d2e:	4f 77       	andi	r20, 0x7F	; 127
    4d30:	4c 15       	cp	r20, r12
    4d32:	08 f4       	brcc	.+2      	; 0x4d36 <eeprom_panel+0x222>
    4d34:	c4 2e       	mov	r12, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    4d36:	f2 01       	movw	r30, r4
    4d38:	50 81       	ld	r21, Z
    4d3a:	25 2f       	mov	r18, r21
    4d3c:	30 e0       	ldi	r19, 0x00	; 0
    4d3e:	c3 57       	subi	r28, 0x73	; 115
    4d40:	dd 4f       	sbci	r29, 0xFD	; 253
    4d42:	a8 81       	ld	r26, Y
    4d44:	b9 81       	ldd	r27, Y+1	; 0x01
    4d46:	cd 58       	subi	r28, 0x8D	; 141
    4d48:	d2 40       	sbci	r29, 0x02	; 2
    4d4a:	e4 2f       	mov	r30, r20
    4d4c:	f0 e0       	ldi	r31, 0x00	; 0
    4d4e:	35 96       	adiw	r30, 0x05	; 5
    4d50:	81 e0       	ldi	r24, 0x01	; 1
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	8c 0f       	add	r24, r28
    4d56:	9d 1f       	adc	r25, r29
    4d58:	e8 0f       	add	r30, r24
    4d5a:	f9 1f       	adc	r31, r25
    4d5c:	2c 5f       	subi	r18, 0xFC	; 252
    4d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    4d60:	24 0d       	add	r18, r4
    4d62:	35 1d       	adc	r19, r5
    4d64:	02 c0       	rjmp	.+4      	; 0x4d6a <eeprom_panel+0x256>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    4d66:	8d 91       	ld	r24, X+
    4d68:	81 93       	st	Z+, r24
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    4d6a:	a2 17       	cp	r26, r18
    4d6c:	b3 07       	cpc	r27, r19
    4d6e:	d9 f7       	brne	.-10     	; 0x4d66 <eeprom_panel+0x252>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                    }
                    if ((pageoffset + ihex.reclen) > pageendaddr)
    4d70:	85 2f       	mov	r24, r21
    4d72:	90 e0       	ldi	r25, 0x00	; 0
    4d74:	84 0f       	add	r24, r20
    4d76:	91 1d       	adc	r25, r1
    4d78:	2d 2d       	mov	r18, r13
    4d7a:	30 e0       	ldi	r19, 0x00	; 0
    4d7c:	28 17       	cp	r18, r24
    4d7e:	39 07       	cpc	r19, r25
    4d80:	9c f5       	brge	.+102    	; 0x4de8 <eeprom_panel+0x2d4>
                        pageendaddr = pageoffset+ihex.reclen;
    4d82:	d4 2e       	mov	r13, r20
    4d84:	d5 0e       	add	r13, r21
    4d86:	30 c0       	rjmp	.+96     	; 0x4de8 <eeprom_panel+0x2d4>
                } else if (ihex.rectyp == 1) {
    4d88:	21 30       	cpi	r18, 0x01	; 1
    4d8a:	a9 f4       	brne	.+42     	; 0x4db6 <eeprom_panel+0x2a2>
                    // end of file record
                    if (pagestartaddr != pageendaddr) {
    4d8c:	cd 14       	cp	r12, r13
    4d8e:	b9 f1       	breq	.+110    	; 0x4dfe <eeprom_panel+0x2ea>
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                        psize = pageendaddr - pagestartaddr;
                        progEEPage(twi, paddr, psize, &pagebuff[0]);
    4d90:	16 95       	lsr	r17
    4d92:	10 2f       	mov	r17, r16
    4d94:	00 27       	eor	r16, r16
    4d96:	17 95       	ror	r17
    4d98:	07 95       	ror	r16
    4d9a:	0c 0d       	add	r16, r12
    4d9c:	11 1d       	adc	r17, r1
    4d9e:	a8 01       	movw	r20, r16
    4da0:	60 e0       	ldi	r22, 0x00	; 0
    4da2:	70 e0       	ldi	r23, 0x00	; 0
    4da4:	dc 18       	sub	r13, r12
    4da6:	c4 01       	movw	r24, r8
    4da8:	2d 2d       	mov	r18, r13
    4daa:	8e 01       	movw	r16, r28
    4dac:	0f 5f       	subi	r16, 0xFF	; 255
    4dae:	1f 4f       	sbci	r17, 0xFF	; 255
    4db0:	0e 94 35 23 	call	0x466a	; 0x466a <progEEPage>
    4db4:	24 c0       	rjmp	.+72     	; 0x4dfe <eeprom_panel+0x2ea>
                    }
                    break;
                } else {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex.\n"),
    4db6:	00 d0       	rcall	.+0      	; 0x4db8 <eeprom_panel+0x2a4>
    4db8:	00 d0       	rcall	.+0      	; 0x4dba <eeprom_panel+0x2a6>
    4dba:	ed b7       	in	r30, 0x3d	; 61
    4dbc:	fe b7       	in	r31, 0x3e	; 62
    4dbe:	31 96       	adiw	r30, 0x01	; 1
    4dc0:	88 e3       	ldi	r24, 0x38	; 56
    4dc2:	9b e0       	ldi	r25, 0x0B	; 11
    4dc4:	ad b7       	in	r26, 0x3d	; 61
    4dc6:	be b7       	in	r27, 0x3e	; 62
    4dc8:	11 96       	adiw	r26, 0x01	; 1
    4dca:	8d 93       	st	X+, r24
    4dcc:	9c 93       	st	X, r25
    4dce:	12 97       	sbiw	r26, 0x02	; 2
    4dd0:	22 83       	std	Z+2, r18	; 0x02
    4dd2:	13 82       	std	Z+3, r1	; 0x03
    4dd4:	64 82       	std	Z+4, r6	; 0x04
    4dd6:	75 82       	std	Z+5, r7	; 0x05
    4dd8:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    4ddc:	ed b7       	in	r30, 0x3d	; 61
    4dde:	fe b7       	in	r31, 0x3e	; 62
    4de0:	36 96       	adiw	r30, 0x06	; 6
    4de2:	ed bf       	out	0x3d, r30	; 61
    4de4:	fe bf       	out	0x3e, r31	; 62
    4de6:	0b c0       	rjmp	.+22     	; 0x4dfe <eeprom_panel+0x2ea>
                            ihex.rectyp, lineno);
                    break;
    4de8:	85 01       	movw	r16, r10
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    4dea:	c1 01       	movw	r24, r2
    4dec:	60 e0       	ldi	r22, 0x00	; 0
    4dee:	71 e0       	ldi	r23, 0x01	; 1
    4df0:	43 ec       	ldi	r20, 0xC3	; 195
    4df2:	57 e2       	ldi	r21, 0x27	; 39
    4df4:	0e 94 d8 4e 	call	0x9db0	; 0x9db0 <f_gets>
    4df8:	89 2b       	or	r24, r25
    4dfa:	09 f0       	breq	.+2      	; 0x4dfe <eeprom_panel+0x2ea>
    4dfc:	2b cf       	rjmp	.-426    	; 0x4c54 <eeprom_panel+0x140>
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&file6, 0);
    4dfe:	83 ec       	ldi	r24, 0xC3	; 195
    4e00:	97 e2       	ldi	r25, 0x27	; 39
    4e02:	40 e0       	ldi	r20, 0x00	; 0
    4e04:	50 e0       	ldi	r21, 0x00	; 0
    4e06:	60 e0       	ldi	r22, 0x00	; 0
    4e08:	70 e0       	ldi	r23, 0x00	; 0
    4e0a:	0e 94 c1 3b 	call	0x7782	; 0x7782 <f_lseek>
    4e0e:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    4e10:	88 23       	and	r24, r24
    4e12:	49 f0       	breq	.+18     	; 0x4e26 <eeprom_panel+0x312>
            xputs(PSTR("Error f_lseek in eeprom.hex.\n"));
    4e14:	8a e1       	ldi	r24, 0x1A	; 26
    4e16:	9b e0       	ldi	r25, 0x0B	; 11
    4e18:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
            put_rc(res);
    4e1c:	81 2f       	mov	r24, r17
    4e1e:	90 e0       	ldi	r25, 0x00	; 0
    4e20:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <put_rc>
    4e24:	2c c1       	rjmp	.+600    	; 0x507e <eeprom_panel+0x56a>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    4e26:	8d e0       	ldi	r24, 0x0D	; 13
    4e28:	9b e0       	ldi	r25, 0x0B	; 11
    4e2a:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    4e2e:	cc 24       	eor	r12, r12
    4e30:	ca 94       	dec	r12
    4e32:	dc 2c       	mov	r13, r12
    4e34:	00 e0       	ldi	r16, 0x00	; 0
    4e36:	10 e0       	ldi	r17, 0x00	; 0
    4e38:	66 24       	eor	r6, r6
    4e3a:	77 24       	eor	r7, r7
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
                lineno++;
                len = strlen(eepromBuff);
    4e3c:	ce 01       	movw	r24, r28
    4e3e:	8a 57       	subi	r24, 0x7A	; 122
    4e40:	9f 4f       	sbci	r25, 0xFF	; 255
    4e42:	c1 57       	subi	r28, 0x71	; 113
    4e44:	dd 4f       	sbci	r29, 0xFD	; 253
    4e46:	88 83       	st	Y, r24
    4e48:	99 83       	std	Y+1, r25	; 0x01
    4e4a:	cf 58       	subi	r28, 0x8F	; 143
    4e4c:	d2 40       	sbci	r29, 0x02	; 2
                if (eepromBuff[len-1] == '\n')
                    eepromBuff[--len] = 0;
                if (eepromBuff[0] != ':')
                    continue;
                rc = ihex_readrec(&ihex, eepromBuff);
    4e4e:	56 e8       	ldi	r21, 0x86	; 134
    4e50:	45 2e       	mov	r4, r21
    4e52:	51 e0       	ldi	r21, 0x01	; 1
    4e54:	55 2e       	mov	r5, r21
    4e56:	4c 0e       	add	r4, r28
    4e58:	5d 1e       	adc	r5, r29
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    4e5a:	d2 01       	movw	r26, r4
    4e5c:	14 96       	adiw	r26, 0x04	; 4
    4e5e:	c5 57       	subi	r28, 0x75	; 117
    4e60:	dd 4f       	sbci	r29, 0xFD	; 253
    4e62:	a8 83       	st	Y, r26
    4e64:	b9 83       	std	Y+1, r27	; 0x01
    4e66:	cb 58       	subi	r28, 0x8B	; 139
    4e68:	d2 40       	sbci	r29, 0x02	; 2
    4e6a:	ff c0       	rjmp	.+510    	; 0x506a <eeprom_panel+0x556>
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
                lineno++;
    4e6c:	08 94       	sec
    4e6e:	61 1c       	adc	r6, r1
    4e70:	71 1c       	adc	r7, r1
                len = strlen(eepromBuff);
    4e72:	c1 57       	subi	r28, 0x71	; 113
    4e74:	dd 4f       	sbci	r29, 0xFD	; 253
    4e76:	e8 81       	ld	r30, Y
    4e78:	f9 81       	ldd	r31, Y+1	; 0x01
    4e7a:	cf 58       	subi	r28, 0x8F	; 143
    4e7c:	d2 40       	sbci	r29, 0x02	; 2
    4e7e:	01 90       	ld	r0, Z+
    4e80:	00 20       	and	r0, r0
    4e82:	e9 f7       	brne	.-6      	; 0x4e7e <eeprom_panel+0x36a>
                if (eepromBuff[len-1] == '\n')
    4e84:	32 97       	sbiw	r30, 0x02	; 2
    4e86:	80 81       	ld	r24, Z
    4e88:	8a 30       	cpi	r24, 0x0A	; 10
    4e8a:	09 f4       	brne	.+2      	; 0x4e8e <eeprom_panel+0x37a>
                    eepromBuff[--len] = 0;
    4e8c:	10 82       	st	Z, r1
                if (eepromBuff[0] != ':')
    4e8e:	ca 57       	subi	r28, 0x7A	; 122
    4e90:	df 4f       	sbci	r29, 0xFF	; 255
    4e92:	88 81       	ld	r24, Y
    4e94:	c6 58       	subi	r28, 0x86	; 134
    4e96:	d0 40       	sbci	r29, 0x00	; 0
    4e98:	8a 33       	cpi	r24, 0x3A	; 58
    4e9a:	09 f0       	breq	.+2      	; 0x4e9e <eeprom_panel+0x38a>
    4e9c:	e6 c0       	rjmp	.+460    	; 0x506a <eeprom_panel+0x556>
                    continue;
                rc = ihex_readrec(&ihex, eepromBuff);
    4e9e:	c2 01       	movw	r24, r4
    4ea0:	b1 01       	movw	r22, r2
    4ea2:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <ihex_readrec>
    4ea6:	f8 2e       	mov	r15, r24
                if (rc < 0) {
                    xprintf(PSTR("invalid record at line %d of eeprom.hex\n"), lineno);
                    break;
                } else if (rc != ihex.cksum) {
    4ea8:	c6 57       	subi	r28, 0x76	; 118
    4eaa:	dd 4f       	sbci	r29, 0xFD	; 253
    4eac:	88 81       	ld	r24, Y
    4eae:	ca 58       	subi	r28, 0x8A	; 138
    4eb0:	d2 40       	sbci	r29, 0x02	; 2
    4eb2:	f8 16       	cp	r15, r24
    4eb4:	19 f1       	breq	.+70     	; 0x4efc <eeprom_panel+0x3e8>
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex\n"), lineno);
    4eb6:	00 d0       	rcall	.+0      	; 0x4eb8 <eeprom_panel+0x3a4>
    4eb8:	0f 92       	push	r0
    4eba:	8a ed       	ldi	r24, 0xDA	; 218
    4ebc:	9a e0       	ldi	r25, 0x0A	; 10
    4ebe:	ed b7       	in	r30, 0x3d	; 61
    4ec0:	fe b7       	in	r31, 0x3e	; 62
    4ec2:	81 83       	std	Z+1, r24	; 0x01
    4ec4:	92 83       	std	Z+2, r25	; 0x02
    4ec6:	63 82       	std	Z+3, r6	; 0x03
    4ec8:	74 82       	std	Z+4, r7	; 0x04
    4eca:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    4ece:	0f 92       	push	r0
    4ed0:	0f 92       	push	r0
    4ed2:	ed b7       	in	r30, 0x3d	; 61
    4ed4:	fe b7       	in	r31, 0x3e	; 62
    4ed6:	31 96       	adiw	r30, 0x01	; 1
    4ed8:	8f ea       	ldi	r24, 0xAF	; 175
    4eda:	9a e0       	ldi	r25, 0x0A	; 10
    4edc:	ad b7       	in	r26, 0x3d	; 61
    4ede:	be b7       	in	r27, 0x3e	; 62
    4ee0:	11 96       	adiw	r26, 0x01	; 1
    4ee2:	8d 93       	st	X+, r24
    4ee4:	9c 93       	st	X, r25
    4ee6:	12 97       	sbiw	r26, 0x02	; 2
    4ee8:	c6 57       	subi	r28, 0x76	; 118
    4eea:	dd 4f       	sbci	r29, 0xFD	; 253
    4eec:	88 81       	ld	r24, Y
    4eee:	ca 58       	subi	r28, 0x8A	; 138
    4ef0:	d2 40       	sbci	r29, 0x02	; 2
    4ef2:	82 83       	std	Z+2, r24	; 0x02
    4ef4:	13 82       	std	Z+3, r1	; 0x03
    4ef6:	f4 82       	std	Z+4, r15	; 0x04
    4ef8:	15 82       	std	Z+5, r1	; 0x05
    4efa:	ae c0       	rjmp	.+348    	; 0x5058 <eeprom_panel+0x544>
                    break;
                } else {
                    if (ihex.rectyp == 0) {
    4efc:	d2 01       	movw	r26, r4
    4efe:	13 96       	adiw	r26, 0x03	; 3
    4f00:	2c 91       	ld	r18, X
    4f02:	13 97       	sbiw	r26, 0x03	; 3
    4f04:	22 23       	and	r18, r18
    4f06:	09 f0       	breq	.+2      	; 0x4f0a <eeprom_panel+0x3f6>
    4f08:	65 c0       	rjmp	.+202    	; 0x4fd4 <eeprom_panel+0x4c0>
                        // data record
                        nextaddr = ihex.loadofs;
    4f0a:	11 96       	adiw	r26, 0x01	; 1
    4f0c:	ed 90       	ld	r14, X+
    4f0e:	fc 90       	ld	r15, X
    4f10:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    4f12:	57 01       	movw	r10, r14
    4f14:	aa 0c       	add	r10, r10
    4f16:	ab 2c       	mov	r10, r11
    4f18:	aa 1c       	adc	r10, r10
    4f1a:	bb 08       	sbc	r11, r11
    4f1c:	b1 94       	neg	r11
    4f1e:	ac 14       	cp	r10, r12
    4f20:	bd 04       	cpc	r11, r13
    4f22:	49 f1       	breq	.+82     	; 0x4f76 <eeprom_panel+0x462>
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr) {
    4f24:	01 17       	cp	r16, r17
    4f26:	21 f1       	breq	.+72     	; 0x4f70 <eeprom_panel+0x45c>
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                                psize = pageendaddr - pagestartaddr;
                                if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0) {
    4f28:	a6 01       	movw	r20, r12
    4f2a:	56 95       	lsr	r21
    4f2c:	54 2f       	mov	r21, r20
    4f2e:	44 27       	eor	r20, r20
    4f30:	57 95       	ror	r21
    4f32:	47 95       	ror	r20
    4f34:	40 0f       	add	r20, r16
    4f36:	51 1d       	adc	r21, r1
    4f38:	60 e0       	ldi	r22, 0x00	; 0
    4f3a:	70 e0       	ldi	r23, 0x00	; 0
    4f3c:	10 1b       	sub	r17, r16
    4f3e:	c4 01       	movw	r24, r8
    4f40:	21 2f       	mov	r18, r17
    4f42:	8e 01       	movw	r16, r28
    4f44:	0f 5f       	subi	r16, 0xFF	; 255
    4f46:	1f 4f       	sbci	r17, 0xFF	; 255
    4f48:	0e 94 80 22 	call	0x4500	; 0x4500 <verifyEEPage>
    4f4c:	89 2b       	or	r24, r25
    4f4e:	81 f4       	brne	.+32     	; 0x4f70 <eeprom_panel+0x45c>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    4f50:	00 d0       	rcall	.+0      	; 0x4f52 <eeprom_panel+0x43e>
    4f52:	0f 92       	push	r0
    4f54:	82 e9       	ldi	r24, 0x92	; 146
    4f56:	9a e0       	ldi	r25, 0x0A	; 10
    4f58:	ed b7       	in	r30, 0x3d	; 61
    4f5a:	fe b7       	in	r31, 0x3e	; 62
    4f5c:	81 83       	std	Z+1, r24	; 0x01
    4f5e:	92 83       	std	Z+2, r25	; 0x02
    4f60:	c3 82       	std	Z+3, r12	; 0x03
    4f62:	d4 82       	std	Z+4, r13	; 0x04
    4f64:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    4f68:	0f 90       	pop	r0
    4f6a:	0f 90       	pop	r0
    4f6c:	0f 90       	pop	r0
    4f6e:	0f 90       	pop	r0
                                }
                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    4f70:	1e 2d       	mov	r17, r14
    4f72:	1f 77       	andi	r17, 0x7F	; 127
    4f74:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    4f76:	4e 2d       	mov	r20, r14
    4f78:	4f 77       	andi	r20, 0x7F	; 127
    4f7a:	40 17       	cp	r20, r16
    4f7c:	08 f4       	brcc	.+2      	; 0x4f80 <eeprom_panel+0x46c>
    4f7e:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    4f80:	d2 01       	movw	r26, r4
    4f82:	5c 91       	ld	r21, X
    4f84:	25 2f       	mov	r18, r21
    4f86:	30 e0       	ldi	r19, 0x00	; 0
    4f88:	c5 57       	subi	r28, 0x75	; 117
    4f8a:	dd 4f       	sbci	r29, 0xFD	; 253
    4f8c:	a8 81       	ld	r26, Y
    4f8e:	b9 81       	ldd	r27, Y+1	; 0x01
    4f90:	cb 58       	subi	r28, 0x8B	; 139
    4f92:	d2 40       	sbci	r29, 0x02	; 2
    4f94:	e4 2f       	mov	r30, r20
    4f96:	f0 e0       	ldi	r31, 0x00	; 0
    4f98:	35 96       	adiw	r30, 0x05	; 5
    4f9a:	81 e0       	ldi	r24, 0x01	; 1
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	8c 0f       	add	r24, r28
    4fa0:	9d 1f       	adc	r25, r29
    4fa2:	e8 0f       	add	r30, r24
    4fa4:	f9 1f       	adc	r31, r25
    4fa6:	2c 5f       	subi	r18, 0xFC	; 252
    4fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    4faa:	24 0d       	add	r18, r4
    4fac:	35 1d       	adc	r19, r5
    4fae:	02 c0       	rjmp	.+4      	; 0x4fb4 <eeprom_panel+0x4a0>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    4fb0:	8d 91       	ld	r24, X+
    4fb2:	81 93       	st	Z+, r24
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    4fb4:	a2 17       	cp	r26, r18
    4fb6:	b3 07       	cpc	r27, r19
    4fb8:	d9 f7       	brne	.-10     	; 0x4fb0 <eeprom_panel+0x49c>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                        }
                        if ((pageoffset + ihex.reclen) > pageendaddr)
    4fba:	85 2f       	mov	r24, r21
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	84 0f       	add	r24, r20
    4fc0:	91 1d       	adc	r25, r1
    4fc2:	21 2f       	mov	r18, r17
    4fc4:	30 e0       	ldi	r19, 0x00	; 0
    4fc6:	28 17       	cp	r18, r24
    4fc8:	39 07       	cpc	r19, r25
    4fca:	0c f0       	brlt	.+2      	; 0x4fce <eeprom_panel+0x4ba>
    4fcc:	4d c0       	rjmp	.+154    	; 0x5068 <eeprom_panel+0x554>
                            pageendaddr = pageoffset+ihex.reclen;
    4fce:	14 2f       	mov	r17, r20
    4fd0:	15 0f       	add	r17, r21
    4fd2:	4a c0       	rjmp	.+148    	; 0x5068 <eeprom_panel+0x554>
                    } else if (ihex.rectyp == 1) {
    4fd4:	21 30       	cpi	r18, 0x01	; 1
    4fd6:	79 f5       	brne	.+94     	; 0x5036 <eeprom_panel+0x522>
                        // end of file record
                        if (pagestartaddr != pageendaddr) {
    4fd8:	01 17       	cp	r16, r17
    4fda:	41 f1       	breq	.+80     	; 0x502c <eeprom_panel+0x518>
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0) {
    4fdc:	a6 01       	movw	r20, r12
    4fde:	56 95       	lsr	r21
    4fe0:	54 2f       	mov	r21, r20
    4fe2:	44 27       	eor	r20, r20
    4fe4:	57 95       	ror	r21
    4fe6:	47 95       	ror	r20
    4fe8:	40 0f       	add	r20, r16
    4fea:	51 1d       	adc	r21, r1
    4fec:	60 e0       	ldi	r22, 0x00	; 0
    4fee:	70 e0       	ldi	r23, 0x00	; 0
    4ff0:	10 1b       	sub	r17, r16
    4ff2:	c4 01       	movw	r24, r8
    4ff4:	21 2f       	mov	r18, r17
    4ff6:	8e 01       	movw	r16, r28
    4ff8:	0f 5f       	subi	r16, 0xFF	; 255
    4ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    4ffc:	0e 94 80 22 	call	0x4500	; 0x4500 <verifyEEPage>
    5000:	89 2b       	or	r24, r25
    5002:	a1 f4       	brne	.+40     	; 0x502c <eeprom_panel+0x518>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    5004:	00 d0       	rcall	.+0      	; 0x5006 <eeprom_panel+0x4f2>
    5006:	0f 92       	push	r0
    5008:	85 e7       	ldi	r24, 0x75	; 117
    500a:	9a e0       	ldi	r25, 0x0A	; 10
    500c:	ad b7       	in	r26, 0x3d	; 61
    500e:	be b7       	in	r27, 0x3e	; 62
    5010:	11 96       	adiw	r26, 0x01	; 1
    5012:	8d 93       	st	X+, r24
    5014:	9c 93       	st	X, r25
    5016:	12 97       	sbiw	r26, 0x02	; 2
    5018:	13 96       	adiw	r26, 0x03	; 3
    501a:	cd 92       	st	X+, r12
    501c:	dc 92       	st	X, r13
    501e:	14 97       	sbiw	r26, 0x04	; 4
    5020:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    5024:	0f 90       	pop	r0
    5026:	0f 90       	pop	r0
    5028:	0f 90       	pop	r0
    502a:	0f 90       	pop	r0
                            }
                        }
                        xputs(PSTR("\n"));
    502c:	83 e7       	ldi	r24, 0x73	; 115
    502e:	9a e0       	ldi	r25, 0x0A	; 10
    5030:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    5034:	24 c0       	rjmp	.+72     	; 0x507e <eeprom_panel+0x56a>
                        break;
                    } else {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex\n"),
    5036:	00 d0       	rcall	.+0      	; 0x5038 <eeprom_panel+0x524>
    5038:	00 d0       	rcall	.+0      	; 0x503a <eeprom_panel+0x526>
    503a:	ed b7       	in	r30, 0x3d	; 61
    503c:	fe b7       	in	r31, 0x3e	; 62
    503e:	31 96       	adiw	r30, 0x01	; 1
    5040:	82 e3       	ldi	r24, 0x32	; 50
    5042:	9a e0       	ldi	r25, 0x0A	; 10
    5044:	ad b7       	in	r26, 0x3d	; 61
    5046:	be b7       	in	r27, 0x3e	; 62
    5048:	11 96       	adiw	r26, 0x01	; 1
    504a:	8d 93       	st	X+, r24
    504c:	9c 93       	st	X, r25
    504e:	12 97       	sbiw	r26, 0x02	; 2
    5050:	22 83       	std	Z+2, r18	; 0x02
    5052:	13 82       	std	Z+3, r1	; 0x03
    5054:	64 82       	std	Z+4, r6	; 0x04
    5056:	75 82       	std	Z+5, r7	; 0x05
    5058:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    505c:	ed b7       	in	r30, 0x3d	; 61
    505e:	fe b7       	in	r31, 0x3e	; 62
    5060:	36 96       	adiw	r30, 0x06	; 6
    5062:	ed bf       	out	0x3d, r30	; 61
    5064:	fe bf       	out	0x3e, r31	; 62
    5066:	0b c0       	rjmp	.+22     	; 0x507e <eeprom_panel+0x56a>
                                ihex.rectyp, lineno);
                        break;
    5068:	65 01       	movw	r12, r10
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    506a:	c1 01       	movw	r24, r2
    506c:	60 e0       	ldi	r22, 0x00	; 0
    506e:	71 e0       	ldi	r23, 0x01	; 1
    5070:	43 ec       	ldi	r20, 0xC3	; 195
    5072:	57 e2       	ldi	r21, 0x27	; 39
    5074:	0e 94 d8 4e 	call	0x9db0	; 0x9db0 <f_gets>
    5078:	89 2b       	or	r24, r25
    507a:	09 f0       	breq	.+2      	; 0x507e <eeprom_panel+0x56a>
    507c:	f7 ce       	rjmp	.-530    	; 0x4e6c <eeprom_panel+0x358>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    507e:	85 e4       	ldi	r24, 0x45	; 69
    5080:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    5082:	c4 01       	movw	r24, r8
    5084:	60 e7       	ldi	r22, 0x70	; 112
    5086:	ae 01       	movw	r20, r28
    5088:	4f 5f       	subi	r20, 0xFF	; 255
    508a:	5f 4f       	sbci	r21, 0xFF	; 255
    508c:	21 e0       	ldi	r18, 0x01	; 1
    508e:	00 e0       	ldi	r16, 0x00	; 0
    5090:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY) {
    5094:	d4 01       	movw	r26, r8
    5096:	1d 96       	adiw	r26, 0x0d	; 13
    5098:	8c 91       	ld	r24, X
    509a:	1d 97       	sbiw	r26, 0x0d	; 13
    509c:	88 23       	and	r24, r24
    509e:	d1 f7       	brne	.-12     	; 0x5094 <eeprom_panel+0x580>
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK) {
    50a0:	1e 96       	adiw	r26, 0x0e	; 14
    50a2:	8c 91       	ld	r24, X
    50a4:	1e 97       	sbiw	r26, 0x0e	; 14
    50a6:	81 30       	cpi	r24, 0x01	; 1
    50a8:	11 f1       	breq	.+68     	; 0x50ee <eeprom_panel+0x5da>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    50aa:	1e 96       	adiw	r26, 0x0e	; 14
    50ac:	2c 91       	ld	r18, X
    50ae:	00 d0       	rcall	.+0      	; 0x50b0 <eeprom_panel+0x59c>
    50b0:	0f 92       	push	r0
    50b2:	ed b7       	in	r30, 0x3d	; 61
    50b4:	fe b7       	in	r31, 0x3e	; 62
    50b6:	31 96       	adiw	r30, 0x01	; 1
    50b8:	87 e1       	ldi	r24, 0x17	; 23
    50ba:	9a e0       	ldi	r25, 0x0A	; 10
    50bc:	ad b7       	in	r26, 0x3d	; 61
    50be:	be b7       	in	r27, 0x3e	; 62
    50c0:	11 96       	adiw	r26, 0x01	; 1
    50c2:	8d 93       	st	X+, r24
    50c4:	9c 93       	st	X, r25
    50c6:	12 97       	sbiw	r26, 0x02	; 2
    50c8:	22 83       	std	Z+2, r18	; 0x02
    50ca:	13 82       	std	Z+3, r1	; 0x03
    50cc:	0a c0       	rjmp	.+20     	; 0x50e2 <eeprom_panel+0x5ce>
        }
        
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    50ce:	00 d0       	rcall	.+0      	; 0x50d0 <eeprom_panel+0x5bc>
    50d0:	0f 92       	push	r0
    50d2:	8c ef       	ldi	r24, 0xFC	; 252
    50d4:	99 e0       	ldi	r25, 0x09	; 9
    50d6:	ed b7       	in	r30, 0x3d	; 61
    50d8:	fe b7       	in	r31, 0x3e	; 62
    50da:	81 83       	std	Z+1, r24	; 0x01
    50dc:	92 83       	std	Z+2, r25	; 0x02
    50de:	e3 82       	std	Z+3, r14	; 0x03
    50e0:	f4 82       	std	Z+4, r15	; 0x04
    50e2:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    50e6:	0f 90       	pop	r0
    50e8:	0f 90       	pop	r0
    50ea:	0f 90       	pop	r0
    50ec:	0f 90       	pop	r0
    }
    
};
    50ee:	c0 57       	subi	r28, 0x70	; 112
    50f0:	dd 4f       	sbci	r29, 0xFD	; 253
    50f2:	e2 e1       	ldi	r30, 0x12	; 18
    50f4:	0c 94 c4 57 	jmp	0xaf88	; 0xaf88 <__epilogue_restores__>

000050f8 <flash_panel>:
            match = 0;
    }
    return match;
}

void flash_panel(uint8_t panel_num) {
    50f8:	a0 e9       	ldi	r26, 0x90	; 144
    50fa:	b2 e0       	ldi	r27, 0x02	; 2
    50fc:	e2 e8       	ldi	r30, 0x82	; 130
    50fe:	f8 e2       	ldi	r31, 0x28	; 40
    5100:	0c 94 a8 57 	jmp	0xaf50	; 0xaf50 <__prologue_saves__>
    5104:	08 2f       	mov	r16, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t flashBuff[256];
    
    ch = chMap[panel_num];
    5106:	e8 2e       	mov	r14, r24
    5108:	ff 24       	eor	r15, r15
    510a:	f7 01       	movw	r30, r14
    510c:	e8 5e       	subi	r30, 0xE8	; 232
    510e:	f8 4d       	sbci	r31, 0xD8	; 216
    5110:	e0 81       	ld	r30, Z
    if (ch != 0){
    5112:	ee 23       	and	r30, r30
    5114:	09 f4       	brne	.+2      	; 0x5118 <flash_panel+0x20>
    5116:	e1 c2       	rjmp	.+1474   	; 0x56da <flash_panel+0x5e2>
        
        switch (ch) {
    5118:	e3 30       	cpi	r30, 0x03	; 3
    511a:	71 f0       	breq	.+28     	; 0x5138 <flash_panel+0x40>
    511c:	e4 30       	cpi	r30, 0x04	; 4
    511e:	89 f0       	breq	.+34     	; 0x5142 <flash_panel+0x4a>
    5120:	e2 30       	cpi	r30, 0x02	; 2
    5122:	29 f4       	brne	.+10     	; 0x512e <flash_panel+0x36>
    5124:	62 e7       	ldi	r22, 0x72	; 114
    5126:	86 2e       	mov	r8, r22
    5128:	69 e2       	ldi	r22, 0x29	; 41
    512a:	96 2e       	mov	r9, r22
    512c:	0e c0       	rjmp	.+28     	; 0x514a <flash_panel+0x52>
    512e:	55 e7       	ldi	r21, 0x75	; 117
    5130:	85 2e       	mov	r8, r21
    5132:	56 e2       	ldi	r21, 0x26	; 38
    5134:	95 2e       	mov	r9, r21
    5136:	09 c0       	rjmp	.+18     	; 0x514a <flash_panel+0x52>
    5138:	48 e0       	ldi	r20, 0x08	; 8
    513a:	84 2e       	mov	r8, r20
    513c:	47 e2       	ldi	r20, 0x27	; 39
    513e:	94 2e       	mov	r9, r20
    5140:	04 c0       	rjmp	.+8      	; 0x514a <flash_panel+0x52>
                
                break;
            case 3:
                twi = &twi3;
                
                break;
    5142:	37 e9       	ldi	r19, 0x97	; 151
    5144:	83 2e       	mov	r8, r19
    5146:	35 e2       	ldi	r19, 0x25	; 37
    5148:	93 2e       	mov	r9, r19
                
                break;
        }
        
        // open the hex file for reading
        res = f_open(&file5, panelFlash, FA_OPEN_EXISTING | FA_READ);
    514a:	83 ea       	ldi	r24, 0xA3	; 163
    514c:	97 e2       	ldi	r25, 0x27	; 39
    514e:	65 ed       	ldi	r22, 0xD5	; 213
    5150:	73 e2       	ldi	r23, 0x23	; 35
    5152:	41 e0       	ldi	r20, 0x01	; 1
    5154:	0e 94 17 4c 	call	0x982e	; 0x982e <f_open>
    5158:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    515a:	88 23       	and	r24, r24
    515c:	49 f0       	breq	.+18     	; 0x5170 <flash_panel+0x78>
            // could'n open the file
            xputs(PSTR("Error f_open in panel.hex.\n"));
    515e:	80 ef       	ldi	r24, 0xF0	; 240
    5160:	9e e0       	ldi	r25, 0x0E	; 14
    5162:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
            put_rc(res);
    5166:	81 2f       	mov	r24, r17
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <put_rc>
    516e:	51 c0       	rjmp	.+162    	; 0x5212 <flash_panel+0x11a>
        } else {
            // file open OK, get the panel address
            //paddr = panel_num;
            if (panel_num >= 128) {
    5170:	07 ff       	sbrs	r16, 7
    5172:	12 c0       	rjmp	.+36     	; 0x5198 <flash_panel+0xa0>
                // use hardware reset
                PORTD.OUTCLR = 0x04;
    5174:	84 e0       	ldi	r24, 0x04	; 4
    5176:	e0 e6       	ldi	r30, 0x60	; 96
    5178:	f6 e0       	ldi	r31, 0x06	; 6
    517a:	86 83       	std	Z+6, r24	; 0x06
    517c:	84 e6       	ldi	r24, 0x64	; 100
    517e:	90 e0       	ldi	r25, 0x00	; 0
    5180:	20 e2       	ldi	r18, 0x20	; 32
    5182:	33 e0       	ldi	r19, 0x03	; 3
    5184:	f9 01       	movw	r30, r18
    5186:	31 97       	sbiw	r30, 0x01	; 1
    5188:	f1 f7       	brne	.-4      	; 0x5186 <flash_panel+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    518a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    518c:	d9 f7       	brne	.-10     	; 0x5184 <flash_panel+0x8c>
                _delay_ms(10);
                PORTD.OUTSET = 0x04;
    518e:	84 e0       	ldi	r24, 0x04	; 4
    5190:	e0 e6       	ldi	r30, 0x60	; 96
    5192:	f6 e0       	ldi	r31, 0x06	; 6
    5194:	85 83       	std	Z+5, r24	; 0x05
    5196:	3d c0       	rjmp	.+122    	; 0x5212 <flash_panel+0x11a>
            } else {
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("flash panel %u.\n"), panel_num);
    5198:	00 d0       	rcall	.+0      	; 0x519a <flash_panel+0xa2>
    519a:	0f 92       	push	r0
    519c:	8f ed       	ldi	r24, 0xDF	; 223
    519e:	9e e0       	ldi	r25, 0x0E	; 14
    51a0:	ad b7       	in	r26, 0x3d	; 61
    51a2:	be b7       	in	r27, 0x3e	; 62
    51a4:	11 96       	adiw	r26, 0x01	; 1
    51a6:	8d 93       	st	X+, r24
    51a8:	9c 93       	st	X, r25
    51aa:	12 97       	sbiw	r26, 0x02	; 2
    51ac:	13 96       	adiw	r26, 0x03	; 3
    51ae:	ed 92       	st	X+, r14
    51b0:	fc 92       	st	X, r15
    51b2:	14 97       	sbiw	r26, 0x04	; 4
    51b4:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
                pagebuff[0] = 0x00;
    51b8:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    51ba:	81 e0       	ldi	r24, 0x01	; 1
    51bc:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    51be:	0f 90       	pop	r0
    51c0:	0f 90       	pop	r0
    51c2:	0f 90       	pop	r0
    51c4:	0f 90       	pop	r0
    51c6:	c4 01       	movw	r24, r8
    51c8:	60 2f       	mov	r22, r16
    51ca:	ae 01       	movw	r20, r28
    51cc:	4f 5f       	subi	r20, 0xFF	; 255
    51ce:	5f 4f       	sbci	r21, 0xFF	; 255
    51d0:	22 e0       	ldi	r18, 0x02	; 2
    51d2:	00 e0       	ldi	r16, 0x00	; 0
    51d4:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY) {
    51d8:	f4 01       	movw	r30, r8
    51da:	85 85       	ldd	r24, Z+13	; 0x0d
    51dc:	88 23       	and	r24, r24
    51de:	e1 f7       	brne	.-8      	; 0x51d8 <flash_panel+0xe0>
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK) {
    51e0:	86 85       	ldd	r24, Z+14	; 0x0e
    51e2:	81 30       	cpi	r24, 0x01	; 1
    51e4:	b1 f0       	breq	.+44     	; 0x5212 <flash_panel+0x11a>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    51e6:	26 85       	ldd	r18, Z+14	; 0x0e
    51e8:	00 d0       	rcall	.+0      	; 0x51ea <flash_panel+0xf2>
    51ea:	0f 92       	push	r0
    51ec:	ed b7       	in	r30, 0x3d	; 61
    51ee:	fe b7       	in	r31, 0x3e	; 62
    51f0:	31 96       	adiw	r30, 0x01	; 1
    51f2:	81 ec       	ldi	r24, 0xC1	; 193
    51f4:	9e e0       	ldi	r25, 0x0E	; 14
    51f6:	ad b7       	in	r26, 0x3d	; 61
    51f8:	be b7       	in	r27, 0x3e	; 62
    51fa:	11 96       	adiw	r26, 0x01	; 1
    51fc:	8d 93       	st	X+, r24
    51fe:	9c 93       	st	X, r25
    5200:	12 97       	sbiw	r26, 0x02	; 2
    5202:	22 83       	std	Z+2, r18	; 0x02
    5204:	13 82       	std	Z+3, r1	; 0x03
    5206:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    520a:	0f 90       	pop	r0
    520c:	0f 90       	pop	r0
    520e:	0f 90       	pop	r0
    5210:	0f 90       	pop	r0
    5212:	88 e8       	ldi	r24, 0x88	; 136
    5214:	93 e1       	ldi	r25, 0x13	; 19
    5216:	20 e2       	ldi	r18, 0x20	; 32
    5218:	33 e0       	ldi	r19, 0x03	; 3
    521a:	f9 01       	movw	r30, r18
    521c:	31 97       	sbiw	r30, 0x01	; 1
    521e:	f1 f7       	brne	.-4      	; 0x521c <flash_panel+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5220:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5222:	d9 f7       	brne	.-10     	; 0x521a <flash_panel+0x122>
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    5224:	84 eb       	ldi	r24, 0xB4	; 180
    5226:	9e e0       	ldi	r25, 0x0E	; 14
    5228:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    522c:	0f ef       	ldi	r16, 0xFF	; 255
    522e:	1f ef       	ldi	r17, 0xFF	; 255
    5230:	cc 24       	eor	r12, r12
    5232:	dd 24       	eor	r13, r13
    5234:	66 24       	eor	r6, r6
    5236:	77 24       	eor	r7, r7
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    5238:	26 e8       	ldi	r18, 0x86	; 134
    523a:	22 2e       	mov	r2, r18
    523c:	31 2c       	mov	r3, r1
    523e:	2c 0e       	add	r2, r28
    5240:	3d 1e       	adc	r3, r29
            len = strlen(flashBuff);
            if (flashBuff[len-1] == '\n')
                flashBuff[--len] = 0;
            if (flashBuff[0] != ':')
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    5242:	96 e8       	ldi	r25, 0x86	; 134
    5244:	49 2e       	mov	r4, r25
    5246:	91 e0       	ldi	r25, 0x01	; 1
    5248:	59 2e       	mov	r5, r25
    524a:	4c 0e       	add	r4, r28
    524c:	5d 1e       	adc	r5, r29
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    524e:	f2 01       	movw	r30, r4
    5250:	34 96       	adiw	r30, 0x04	; 4
    5252:	c3 57       	subi	r28, 0x73	; 115
    5254:	dd 4f       	sbci	r29, 0xFD	; 253
    5256:	e8 83       	st	Y, r30
    5258:	f9 83       	std	Y+1, r31	; 0x01
    525a:	cd 58       	subi	r28, 0x8D	; 141
    525c:	d2 40       	sbci	r29, 0x02	; 2
    525e:	cb c0       	rjmp	.+406    	; 0x53f6 <flash_panel+0x2fe>
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
            lineno++;
    5260:	08 94       	sec
    5262:	61 1c       	adc	r6, r1
    5264:	71 1c       	adc	r7, r1
            len = strlen(flashBuff);
    5266:	f1 01       	movw	r30, r2
    5268:	01 90       	ld	r0, Z+
    526a:	00 20       	and	r0, r0
    526c:	e9 f7       	brne	.-6      	; 0x5268 <flash_panel+0x170>
            if (flashBuff[len-1] == '\n')
    526e:	32 97       	sbiw	r30, 0x02	; 2
    5270:	80 81       	ld	r24, Z
    5272:	8a 30       	cpi	r24, 0x0A	; 10
    5274:	09 f4       	brne	.+2      	; 0x5278 <flash_panel+0x180>
                flashBuff[--len] = 0;
    5276:	10 82       	st	Z, r1
            if (flashBuff[0] != ':')
    5278:	d1 01       	movw	r26, r2
    527a:	8c 91       	ld	r24, X
    527c:	8a 33       	cpi	r24, 0x3A	; 58
    527e:	09 f0       	breq	.+2      	; 0x5282 <flash_panel+0x18a>
    5280:	ba c0       	rjmp	.+372    	; 0x53f6 <flash_panel+0x2fe>
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    5282:	c2 01       	movw	r24, r4
    5284:	b1 01       	movw	r22, r2
    5286:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <ihex_readrec>
    528a:	f8 2e       	mov	r15, r24
            if (rc < 0) {
                xprintf(PSTR("invalid record at line %d of panel.hex.\n"), lineno);
                break;
            } else if (rc != ihex.cksum) {
    528c:	c6 57       	subi	r28, 0x76	; 118
    528e:	dd 4f       	sbci	r29, 0xFD	; 253
    5290:	88 81       	ld	r24, Y
    5292:	ca 58       	subi	r28, 0x8A	; 138
    5294:	d2 40       	sbci	r29, 0x02	; 2
    5296:	f8 16       	cp	r15, r24
    5298:	19 f1       	breq	.+70     	; 0x52e0 <flash_panel+0x1e8>
                xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex.\n"), lineno);
    529a:	00 d0       	rcall	.+0      	; 0x529c <flash_panel+0x1a4>
    529c:	0f 92       	push	r0
    529e:	81 e8       	ldi	r24, 0x81	; 129
    52a0:	9e e0       	ldi	r25, 0x0E	; 14
    52a2:	ed b7       	in	r30, 0x3d	; 61
    52a4:	fe b7       	in	r31, 0x3e	; 62
    52a6:	81 83       	std	Z+1, r24	; 0x01
    52a8:	92 83       	std	Z+2, r25	; 0x02
    52aa:	63 82       	std	Z+3, r6	; 0x03
    52ac:	74 82       	std	Z+4, r7	; 0x04
    52ae:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    52b2:	0f 92       	push	r0
    52b4:	0f 92       	push	r0
    52b6:	ed b7       	in	r30, 0x3d	; 61
    52b8:	fe b7       	in	r31, 0x3e	; 62
    52ba:	31 96       	adiw	r30, 0x01	; 1
    52bc:	86 e5       	ldi	r24, 0x56	; 86
    52be:	9e e0       	ldi	r25, 0x0E	; 14
    52c0:	ad b7       	in	r26, 0x3d	; 61
    52c2:	be b7       	in	r27, 0x3e	; 62
    52c4:	11 96       	adiw	r26, 0x01	; 1
    52c6:	8d 93       	st	X+, r24
    52c8:	9c 93       	st	X, r25
    52ca:	12 97       	sbiw	r26, 0x02	; 2
    52cc:	c6 57       	subi	r28, 0x76	; 118
    52ce:	dd 4f       	sbci	r29, 0xFD	; 253
    52d0:	88 81       	ld	r24, Y
    52d2:	ca 58       	subi	r28, 0x8A	; 138
    52d4:	d2 40       	sbci	r29, 0x02	; 2
    52d6:	82 83       	std	Z+2, r24	; 0x02
    52d8:	13 82       	std	Z+3, r1	; 0x03
    52da:	f4 82       	std	Z+4, r15	; 0x04
    52dc:	15 82       	std	Z+5, r1	; 0x05
    52de:	82 c0       	rjmp	.+260    	; 0x53e4 <flash_panel+0x2ec>
                break;
            } else {
                if (ihex.rectyp == 0) {
    52e0:	d2 01       	movw	r26, r4
    52e2:	13 96       	adiw	r26, 0x03	; 3
    52e4:	2c 91       	ld	r18, X
    52e6:	13 97       	sbiw	r26, 0x03	; 3
    52e8:	22 23       	and	r18, r18
    52ea:	09 f0       	breq	.+2      	; 0x52ee <flash_panel+0x1f6>
    52ec:	53 c0       	rjmp	.+166    	; 0x5394 <flash_panel+0x29c>
                    // data record
                    nextaddr = ihex.loadofs;
    52ee:	11 96       	adiw	r26, 0x01	; 1
    52f0:	ed 90       	ld	r14, X+
    52f2:	fc 90       	ld	r15, X
    52f4:	12 97       	sbiw	r26, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    52f6:	57 01       	movw	r10, r14
    52f8:	aa 0c       	add	r10, r10
    52fa:	ab 2c       	mov	r10, r11
    52fc:	aa 1c       	adc	r10, r10
    52fe:	bb 08       	sbc	r11, r11
    5300:	b1 94       	neg	r11
    5302:	a0 16       	cp	r10, r16
    5304:	b1 06       	cpc	r11, r17
    5306:	c1 f0       	breq	.+48     	; 0x5338 <flash_panel+0x240>
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr) {
    5308:	cd 14       	cp	r12, r13
    530a:	91 f0       	breq	.+36     	; 0x5330 <flash_panel+0x238>
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            progPage(twi, paddr, psize, &pagebuff[0]);
    530c:	16 95       	lsr	r17
    530e:	10 2f       	mov	r17, r16
    5310:	00 27       	eor	r16, r16
    5312:	17 95       	ror	r17
    5314:	07 95       	ror	r16
    5316:	0c 0d       	add	r16, r12
    5318:	11 1d       	adc	r17, r1
    531a:	a8 01       	movw	r20, r16
    531c:	60 e0       	ldi	r22, 0x00	; 0
    531e:	70 e0       	ldi	r23, 0x00	; 0
    5320:	dc 18       	sub	r13, r12
    5322:	c4 01       	movw	r24, r8
    5324:	2d 2d       	mov	r18, r13
    5326:	8e 01       	movw	r16, r28
    5328:	0f 5f       	subi	r16, 0xFF	; 255
    532a:	1f 4f       	sbci	r17, 0xFF	; 255
    532c:	0e 94 33 24 	call	0x4866	; 0x4866 <progPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    5330:	af e7       	ldi	r26, 0x7F	; 127
    5332:	da 2e       	mov	r13, r26
    5334:	de 20       	and	r13, r14
    5336:	cd 2c       	mov	r12, r13
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    5338:	4e 2d       	mov	r20, r14
    533a:	4f 77       	andi	r20, 0x7F	; 127
    533c:	4c 15       	cp	r20, r12
    533e:	08 f4       	brcc	.+2      	; 0x5342 <flash_panel+0x24a>
    5340:	c4 2e       	mov	r12, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    5342:	f2 01       	movw	r30, r4
    5344:	50 81       	ld	r21, Z
    5346:	25 2f       	mov	r18, r21
    5348:	30 e0       	ldi	r19, 0x00	; 0
    534a:	c3 57       	subi	r28, 0x73	; 115
    534c:	dd 4f       	sbci	r29, 0xFD	; 253
    534e:	a8 81       	ld	r26, Y
    5350:	b9 81       	ldd	r27, Y+1	; 0x01
    5352:	cd 58       	subi	r28, 0x8D	; 141
    5354:	d2 40       	sbci	r29, 0x02	; 2
    5356:	e4 2f       	mov	r30, r20
    5358:	f0 e0       	ldi	r31, 0x00	; 0
    535a:	35 96       	adiw	r30, 0x05	; 5
    535c:	81 e0       	ldi	r24, 0x01	; 1
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	8c 0f       	add	r24, r28
    5362:	9d 1f       	adc	r25, r29
    5364:	e8 0f       	add	r30, r24
    5366:	f9 1f       	adc	r31, r25
    5368:	2c 5f       	subi	r18, 0xFC	; 252
    536a:	3f 4f       	sbci	r19, 0xFF	; 255
    536c:	24 0d       	add	r18, r4
    536e:	35 1d       	adc	r19, r5
    5370:	02 c0       	rjmp	.+4      	; 0x5376 <flash_panel+0x27e>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    5372:	8d 91       	ld	r24, X+
    5374:	81 93       	st	Z+, r24
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    5376:	a2 17       	cp	r26, r18
    5378:	b3 07       	cpc	r27, r19
    537a:	d9 f7       	brne	.-10     	; 0x5372 <flash_panel+0x27a>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                    }
                    if ((pageoffset + ihex.reclen) > pageendaddr)
    537c:	85 2f       	mov	r24, r21
    537e:	90 e0       	ldi	r25, 0x00	; 0
    5380:	84 0f       	add	r24, r20
    5382:	91 1d       	adc	r25, r1
    5384:	2d 2d       	mov	r18, r13
    5386:	30 e0       	ldi	r19, 0x00	; 0
    5388:	28 17       	cp	r18, r24
    538a:	39 07       	cpc	r19, r25
    538c:	9c f5       	brge	.+102    	; 0x53f4 <flash_panel+0x2fc>
                        pageendaddr = pageoffset+ihex.reclen;
    538e:	d4 2e       	mov	r13, r20
    5390:	d5 0e       	add	r13, r21
    5392:	30 c0       	rjmp	.+96     	; 0x53f4 <flash_panel+0x2fc>
                } else if (ihex.rectyp == 1) {
    5394:	21 30       	cpi	r18, 0x01	; 1
    5396:	a9 f4       	brne	.+42     	; 0x53c2 <flash_panel+0x2ca>
                    // end of file record
                    if (pagestartaddr != pageendaddr) {
    5398:	cd 14       	cp	r12, r13
    539a:	b9 f1       	breq	.+110    	; 0x540a <flash_panel+0x312>
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                        psize = pageendaddr - pagestartaddr;
                        progPage(twi, paddr, psize, &pagebuff[0]);
    539c:	16 95       	lsr	r17
    539e:	10 2f       	mov	r17, r16
    53a0:	00 27       	eor	r16, r16
    53a2:	17 95       	ror	r17
    53a4:	07 95       	ror	r16
    53a6:	0c 0d       	add	r16, r12
    53a8:	11 1d       	adc	r17, r1
    53aa:	a8 01       	movw	r20, r16
    53ac:	60 e0       	ldi	r22, 0x00	; 0
    53ae:	70 e0       	ldi	r23, 0x00	; 0
    53b0:	dc 18       	sub	r13, r12
    53b2:	c4 01       	movw	r24, r8
    53b4:	2d 2d       	mov	r18, r13
    53b6:	8e 01       	movw	r16, r28
    53b8:	0f 5f       	subi	r16, 0xFF	; 255
    53ba:	1f 4f       	sbci	r17, 0xFF	; 255
    53bc:	0e 94 33 24 	call	0x4866	; 0x4866 <progPage>
    53c0:	24 c0       	rjmp	.+72     	; 0x540a <flash_panel+0x312>
                    }
                    break;
                } else {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    53c2:	00 d0       	rcall	.+0      	; 0x53c4 <flash_panel+0x2cc>
    53c4:	00 d0       	rcall	.+0      	; 0x53c6 <flash_panel+0x2ce>
    53c6:	ed b7       	in	r30, 0x3d	; 61
    53c8:	fe b7       	in	r31, 0x3e	; 62
    53ca:	31 96       	adiw	r30, 0x01	; 1
    53cc:	86 e1       	ldi	r24, 0x16	; 22
    53ce:	9e e0       	ldi	r25, 0x0E	; 14
    53d0:	ad b7       	in	r26, 0x3d	; 61
    53d2:	be b7       	in	r27, 0x3e	; 62
    53d4:	11 96       	adiw	r26, 0x01	; 1
    53d6:	8d 93       	st	X+, r24
    53d8:	9c 93       	st	X, r25
    53da:	12 97       	sbiw	r26, 0x02	; 2
    53dc:	22 83       	std	Z+2, r18	; 0x02
    53de:	13 82       	std	Z+3, r1	; 0x03
    53e0:	64 82       	std	Z+4, r6	; 0x04
    53e2:	75 82       	std	Z+5, r7	; 0x05
    53e4:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    53e8:	ed b7       	in	r30, 0x3d	; 61
    53ea:	fe b7       	in	r31, 0x3e	; 62
    53ec:	36 96       	adiw	r30, 0x06	; 6
    53ee:	ed bf       	out	0x3d, r30	; 61
    53f0:	fe bf       	out	0x3e, r31	; 62
    53f2:	0b c0       	rjmp	.+22     	; 0x540a <flash_panel+0x312>
                            ihex.rectyp, lineno);
                    break;
    53f4:	85 01       	movw	r16, r10
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    53f6:	c1 01       	movw	r24, r2
    53f8:	60 e0       	ldi	r22, 0x00	; 0
    53fa:	71 e0       	ldi	r23, 0x01	; 1
    53fc:	43 ea       	ldi	r20, 0xA3	; 163
    53fe:	57 e2       	ldi	r21, 0x27	; 39
    5400:	0e 94 d8 4e 	call	0x9db0	; 0x9db0 <f_gets>
    5404:	89 2b       	or	r24, r25
    5406:	09 f0       	breq	.+2      	; 0x540a <flash_panel+0x312>
    5408:	2b cf       	rjmp	.-426    	; 0x5260 <flash_panel+0x168>
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&file5, 0);
    540a:	83 ea       	ldi	r24, 0xA3	; 163
    540c:	97 e2       	ldi	r25, 0x27	; 39
    540e:	40 e0       	ldi	r20, 0x00	; 0
    5410:	50 e0       	ldi	r21, 0x00	; 0
    5412:	60 e0       	ldi	r22, 0x00	; 0
    5414:	70 e0       	ldi	r23, 0x00	; 0
    5416:	0e 94 c1 3b 	call	0x7782	; 0x7782 <f_lseek>
    541a:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    541c:	88 23       	and	r24, r24
    541e:	49 f0       	breq	.+18     	; 0x5432 <flash_panel+0x33a>
            xputs(PSTR("Error f_lseek in panel.hex.\n"));
    5420:	89 ef       	ldi	r24, 0xF9	; 249
    5422:	9d e0       	ldi	r25, 0x0D	; 13
    5424:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
            put_rc(res);
    5428:	81 2f       	mov	r24, r17
    542a:	90 e0       	ldi	r25, 0x00	; 0
    542c:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <put_rc>
    5430:	2c c1       	rjmp	.+600    	; 0x568a <flash_panel+0x592>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    5432:	8c ee       	ldi	r24, 0xEC	; 236
    5434:	9d e0       	ldi	r25, 0x0D	; 13
    5436:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    543a:	cc 24       	eor	r12, r12
    543c:	ca 94       	dec	r12
    543e:	dc 2c       	mov	r13, r12
    5440:	00 e0       	ldi	r16, 0x00	; 0
    5442:	10 e0       	ldi	r17, 0x00	; 0
    5444:	66 24       	eor	r6, r6
    5446:	77 24       	eor	r7, r7
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
                lineno++;
                len = strlen(flashBuff);
    5448:	ce 01       	movw	r24, r28
    544a:	8a 57       	subi	r24, 0x7A	; 122
    544c:	9f 4f       	sbci	r25, 0xFF	; 255
    544e:	c1 57       	subi	r28, 0x71	; 113
    5450:	dd 4f       	sbci	r29, 0xFD	; 253
    5452:	88 83       	st	Y, r24
    5454:	99 83       	std	Y+1, r25	; 0x01
    5456:	cf 58       	subi	r28, 0x8F	; 143
    5458:	d2 40       	sbci	r29, 0x02	; 2
                if (flashBuff[len-1] == '\n')
                    flashBuff[--len] = 0;
                if (flashBuff[0] != ':')
                    continue;
                rc = ihex_readrec(&ihex, flashBuff);
    545a:	e6 e8       	ldi	r30, 0x86	; 134
    545c:	4e 2e       	mov	r4, r30
    545e:	e1 e0       	ldi	r30, 0x01	; 1
    5460:	5e 2e       	mov	r5, r30
    5462:	4c 0e       	add	r4, r28
    5464:	5d 1e       	adc	r5, r29
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    5466:	d2 01       	movw	r26, r4
    5468:	14 96       	adiw	r26, 0x04	; 4
    546a:	c5 57       	subi	r28, 0x75	; 117
    546c:	dd 4f       	sbci	r29, 0xFD	; 253
    546e:	a8 83       	st	Y, r26
    5470:	b9 83       	std	Y+1, r27	; 0x01
    5472:	cb 58       	subi	r28, 0x8B	; 139
    5474:	d2 40       	sbci	r29, 0x02	; 2
    5476:	ff c0       	rjmp	.+510    	; 0x5676 <flash_panel+0x57e>
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
                lineno++;
    5478:	08 94       	sec
    547a:	61 1c       	adc	r6, r1
    547c:	71 1c       	adc	r7, r1
                len = strlen(flashBuff);
    547e:	c1 57       	subi	r28, 0x71	; 113
    5480:	dd 4f       	sbci	r29, 0xFD	; 253
    5482:	e8 81       	ld	r30, Y
    5484:	f9 81       	ldd	r31, Y+1	; 0x01
    5486:	cf 58       	subi	r28, 0x8F	; 143
    5488:	d2 40       	sbci	r29, 0x02	; 2
    548a:	01 90       	ld	r0, Z+
    548c:	00 20       	and	r0, r0
    548e:	e9 f7       	brne	.-6      	; 0x548a <flash_panel+0x392>
                if (flashBuff[len-1] == '\n')
    5490:	32 97       	sbiw	r30, 0x02	; 2
    5492:	80 81       	ld	r24, Z
    5494:	8a 30       	cpi	r24, 0x0A	; 10
    5496:	09 f4       	brne	.+2      	; 0x549a <flash_panel+0x3a2>
                    flashBuff[--len] = 0;
    5498:	10 82       	st	Z, r1
                if (flashBuff[0] != ':')
    549a:	ca 57       	subi	r28, 0x7A	; 122
    549c:	df 4f       	sbci	r29, 0xFF	; 255
    549e:	88 81       	ld	r24, Y
    54a0:	c6 58       	subi	r28, 0x86	; 134
    54a2:	d0 40       	sbci	r29, 0x00	; 0
    54a4:	8a 33       	cpi	r24, 0x3A	; 58
    54a6:	09 f0       	breq	.+2      	; 0x54aa <flash_panel+0x3b2>
    54a8:	e6 c0       	rjmp	.+460    	; 0x5676 <flash_panel+0x57e>
                    continue;
                rc = ihex_readrec(&ihex, flashBuff);
    54aa:	c2 01       	movw	r24, r4
    54ac:	b1 01       	movw	r22, r2
    54ae:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <ihex_readrec>
    54b2:	f8 2e       	mov	r15, r24
                if (rc < 0) {
                    xprintf(PSTR("invalid record at line %d of panel.hex\n"), lineno);
                    break;
                } else if (rc != ihex.cksum) {
    54b4:	c6 57       	subi	r28, 0x76	; 118
    54b6:	dd 4f       	sbci	r29, 0xFD	; 253
    54b8:	88 81       	ld	r24, Y
    54ba:	ca 58       	subi	r28, 0x8A	; 138
    54bc:	d2 40       	sbci	r29, 0x02	; 2
    54be:	f8 16       	cp	r15, r24
    54c0:	19 f1       	breq	.+70     	; 0x5508 <flash_panel+0x410>
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex\n"), lineno);
    54c2:	00 d0       	rcall	.+0      	; 0x54c4 <flash_panel+0x3cc>
    54c4:	0f 92       	push	r0
    54c6:	8a eb       	ldi	r24, 0xBA	; 186
    54c8:	9d e0       	ldi	r25, 0x0D	; 13
    54ca:	ed b7       	in	r30, 0x3d	; 61
    54cc:	fe b7       	in	r31, 0x3e	; 62
    54ce:	81 83       	std	Z+1, r24	; 0x01
    54d0:	92 83       	std	Z+2, r25	; 0x02
    54d2:	63 82       	std	Z+3, r6	; 0x03
    54d4:	74 82       	std	Z+4, r7	; 0x04
    54d6:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    54da:	0f 92       	push	r0
    54dc:	0f 92       	push	r0
    54de:	ed b7       	in	r30, 0x3d	; 61
    54e0:	fe b7       	in	r31, 0x3e	; 62
    54e2:	31 96       	adiw	r30, 0x01	; 1
    54e4:	8f e8       	ldi	r24, 0x8F	; 143
    54e6:	9d e0       	ldi	r25, 0x0D	; 13
    54e8:	ad b7       	in	r26, 0x3d	; 61
    54ea:	be b7       	in	r27, 0x3e	; 62
    54ec:	11 96       	adiw	r26, 0x01	; 1
    54ee:	8d 93       	st	X+, r24
    54f0:	9c 93       	st	X, r25
    54f2:	12 97       	sbiw	r26, 0x02	; 2
    54f4:	c6 57       	subi	r28, 0x76	; 118
    54f6:	dd 4f       	sbci	r29, 0xFD	; 253
    54f8:	88 81       	ld	r24, Y
    54fa:	ca 58       	subi	r28, 0x8A	; 138
    54fc:	d2 40       	sbci	r29, 0x02	; 2
    54fe:	82 83       	std	Z+2, r24	; 0x02
    5500:	13 82       	std	Z+3, r1	; 0x03
    5502:	f4 82       	std	Z+4, r15	; 0x04
    5504:	15 82       	std	Z+5, r1	; 0x05
    5506:	ae c0       	rjmp	.+348    	; 0x5664 <flash_panel+0x56c>
                    break;
                } else {
                    if (ihex.rectyp == 0) {
    5508:	d2 01       	movw	r26, r4
    550a:	13 96       	adiw	r26, 0x03	; 3
    550c:	2c 91       	ld	r18, X
    550e:	13 97       	sbiw	r26, 0x03	; 3
    5510:	22 23       	and	r18, r18
    5512:	09 f0       	breq	.+2      	; 0x5516 <flash_panel+0x41e>
    5514:	65 c0       	rjmp	.+202    	; 0x55e0 <flash_panel+0x4e8>
                        // data record
                        nextaddr = ihex.loadofs;
    5516:	11 96       	adiw	r26, 0x01	; 1
    5518:	ed 90       	ld	r14, X+
    551a:	fc 90       	ld	r15, X
    551c:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    551e:	57 01       	movw	r10, r14
    5520:	aa 0c       	add	r10, r10
    5522:	ab 2c       	mov	r10, r11
    5524:	aa 1c       	adc	r10, r10
    5526:	bb 08       	sbc	r11, r11
    5528:	b1 94       	neg	r11
    552a:	ac 14       	cp	r10, r12
    552c:	bd 04       	cpc	r11, r13
    552e:	49 f1       	breq	.+82     	; 0x5582 <flash_panel+0x48a>
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr) {
    5530:	01 17       	cp	r16, r17
    5532:	21 f1       	breq	.+72     	; 0x557c <flash_panel+0x484>
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                                psize = pageendaddr - pagestartaddr;
                                if (verifyPage(twi, paddr, psize, &pagebuff[0])==0) {
    5534:	a6 01       	movw	r20, r12
    5536:	56 95       	lsr	r21
    5538:	54 2f       	mov	r21, r20
    553a:	44 27       	eor	r20, r20
    553c:	57 95       	ror	r21
    553e:	47 95       	ror	r20
    5540:	40 0f       	add	r20, r16
    5542:	51 1d       	adc	r21, r1
    5544:	60 e0       	ldi	r22, 0x00	; 0
    5546:	70 e0       	ldi	r23, 0x00	; 0
    5548:	10 1b       	sub	r17, r16
    554a:	c4 01       	movw	r24, r8
    554c:	21 2f       	mov	r18, r17
    554e:	8e 01       	movw	r16, r28
    5550:	0f 5f       	subi	r16, 0xFF	; 255
    5552:	1f 4f       	sbci	r17, 0xFF	; 255
    5554:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <verifyPage>
    5558:	89 2b       	or	r24, r25
    555a:	81 f4       	brne	.+32     	; 0x557c <flash_panel+0x484>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    555c:	00 d0       	rcall	.+0      	; 0x555e <flash_panel+0x466>
    555e:	0f 92       	push	r0
    5560:	82 e7       	ldi	r24, 0x72	; 114
    5562:	9d e0       	ldi	r25, 0x0D	; 13
    5564:	ed b7       	in	r30, 0x3d	; 61
    5566:	fe b7       	in	r31, 0x3e	; 62
    5568:	81 83       	std	Z+1, r24	; 0x01
    556a:	92 83       	std	Z+2, r25	; 0x02
    556c:	c3 82       	std	Z+3, r12	; 0x03
    556e:	d4 82       	std	Z+4, r13	; 0x04
    5570:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    5574:	0f 90       	pop	r0
    5576:	0f 90       	pop	r0
    5578:	0f 90       	pop	r0
    557a:	0f 90       	pop	r0
                                }
                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    557c:	1e 2d       	mov	r17, r14
    557e:	1f 77       	andi	r17, 0x7F	; 127
    5580:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    5582:	4e 2d       	mov	r20, r14
    5584:	4f 77       	andi	r20, 0x7F	; 127
    5586:	40 17       	cp	r20, r16
    5588:	08 f4       	brcc	.+2      	; 0x558c <flash_panel+0x494>
    558a:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    558c:	d2 01       	movw	r26, r4
    558e:	5c 91       	ld	r21, X
    5590:	25 2f       	mov	r18, r21
    5592:	30 e0       	ldi	r19, 0x00	; 0
    5594:	c5 57       	subi	r28, 0x75	; 117
    5596:	dd 4f       	sbci	r29, 0xFD	; 253
    5598:	a8 81       	ld	r26, Y
    559a:	b9 81       	ldd	r27, Y+1	; 0x01
    559c:	cb 58       	subi	r28, 0x8B	; 139
    559e:	d2 40       	sbci	r29, 0x02	; 2
    55a0:	e4 2f       	mov	r30, r20
    55a2:	f0 e0       	ldi	r31, 0x00	; 0
    55a4:	35 96       	adiw	r30, 0x05	; 5
    55a6:	81 e0       	ldi	r24, 0x01	; 1
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    55aa:	8c 0f       	add	r24, r28
    55ac:	9d 1f       	adc	r25, r29
    55ae:	e8 0f       	add	r30, r24
    55b0:	f9 1f       	adc	r31, r25
    55b2:	2c 5f       	subi	r18, 0xFC	; 252
    55b4:	3f 4f       	sbci	r19, 0xFF	; 255
    55b6:	24 0d       	add	r18, r4
    55b8:	35 1d       	adc	r19, r5
    55ba:	02 c0       	rjmp	.+4      	; 0x55c0 <flash_panel+0x4c8>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    55bc:	8d 91       	ld	r24, X+
    55be:	81 93       	st	Z+, r24
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    55c0:	a2 17       	cp	r26, r18
    55c2:	b3 07       	cpc	r27, r19
    55c4:	d9 f7       	brne	.-10     	; 0x55bc <flash_panel+0x4c4>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                        }
                        if ((pageoffset + ihex.reclen) > pageendaddr)
    55c6:	85 2f       	mov	r24, r21
    55c8:	90 e0       	ldi	r25, 0x00	; 0
    55ca:	84 0f       	add	r24, r20
    55cc:	91 1d       	adc	r25, r1
    55ce:	21 2f       	mov	r18, r17
    55d0:	30 e0       	ldi	r19, 0x00	; 0
    55d2:	28 17       	cp	r18, r24
    55d4:	39 07       	cpc	r19, r25
    55d6:	0c f0       	brlt	.+2      	; 0x55da <flash_panel+0x4e2>
    55d8:	4d c0       	rjmp	.+154    	; 0x5674 <flash_panel+0x57c>
                            pageendaddr = pageoffset+ihex.reclen;
    55da:	14 2f       	mov	r17, r20
    55dc:	15 0f       	add	r17, r21
    55de:	4a c0       	rjmp	.+148    	; 0x5674 <flash_panel+0x57c>
                    } else if (ihex.rectyp == 1) {
    55e0:	21 30       	cpi	r18, 0x01	; 1
    55e2:	79 f5       	brne	.+94     	; 0x5642 <flash_panel+0x54a>
                        // end of file record
                        if (pagestartaddr != pageendaddr) {
    55e4:	01 17       	cp	r16, r17
    55e6:	41 f1       	breq	.+80     	; 0x5638 <flash_panel+0x540>
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            if (verifyPage(twi, paddr, psize, &pagebuff[0])==0) {
    55e8:	a6 01       	movw	r20, r12
    55ea:	56 95       	lsr	r21
    55ec:	54 2f       	mov	r21, r20
    55ee:	44 27       	eor	r20, r20
    55f0:	57 95       	ror	r21
    55f2:	47 95       	ror	r20
    55f4:	40 0f       	add	r20, r16
    55f6:	51 1d       	adc	r21, r1
    55f8:	60 e0       	ldi	r22, 0x00	; 0
    55fa:	70 e0       	ldi	r23, 0x00	; 0
    55fc:	10 1b       	sub	r17, r16
    55fe:	c4 01       	movw	r24, r8
    5600:	21 2f       	mov	r18, r17
    5602:	8e 01       	movw	r16, r28
    5604:	0f 5f       	subi	r16, 0xFF	; 255
    5606:	1f 4f       	sbci	r17, 0xFF	; 255
    5608:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <verifyPage>
    560c:	89 2b       	or	r24, r25
    560e:	a1 f4       	brne	.+40     	; 0x5638 <flash_panel+0x540>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    5610:	00 d0       	rcall	.+0      	; 0x5612 <flash_panel+0x51a>
    5612:	0f 92       	push	r0
    5614:	85 e5       	ldi	r24, 0x55	; 85
    5616:	9d e0       	ldi	r25, 0x0D	; 13
    5618:	ad b7       	in	r26, 0x3d	; 61
    561a:	be b7       	in	r27, 0x3e	; 62
    561c:	11 96       	adiw	r26, 0x01	; 1
    561e:	8d 93       	st	X+, r24
    5620:	9c 93       	st	X, r25
    5622:	12 97       	sbiw	r26, 0x02	; 2
    5624:	13 96       	adiw	r26, 0x03	; 3
    5626:	cd 92       	st	X+, r12
    5628:	dc 92       	st	X, r13
    562a:	14 97       	sbiw	r26, 0x04	; 4
    562c:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    5630:	0f 90       	pop	r0
    5632:	0f 90       	pop	r0
    5634:	0f 90       	pop	r0
    5636:	0f 90       	pop	r0
                            }
                        }
                        xputs(PSTR("\n"));
    5638:	83 e5       	ldi	r24, 0x53	; 83
    563a:	9d e0       	ldi	r25, 0x0D	; 13
    563c:	0e 94 2a 56 	call	0xac54	; 0xac54 <xputs>
    5640:	24 c0       	rjmp	.+72     	; 0x568a <flash_panel+0x592>
                        break;
                    } else {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    5642:	00 d0       	rcall	.+0      	; 0x5644 <flash_panel+0x54c>
    5644:	00 d0       	rcall	.+0      	; 0x5646 <flash_panel+0x54e>
    5646:	ed b7       	in	r30, 0x3d	; 61
    5648:	fe b7       	in	r31, 0x3e	; 62
    564a:	31 96       	adiw	r30, 0x01	; 1
    564c:	83 e1       	ldi	r24, 0x13	; 19
    564e:	9d e0       	ldi	r25, 0x0D	; 13
    5650:	ad b7       	in	r26, 0x3d	; 61
    5652:	be b7       	in	r27, 0x3e	; 62
    5654:	11 96       	adiw	r26, 0x01	; 1
    5656:	8d 93       	st	X+, r24
    5658:	9c 93       	st	X, r25
    565a:	12 97       	sbiw	r26, 0x02	; 2
    565c:	22 83       	std	Z+2, r18	; 0x02
    565e:	13 82       	std	Z+3, r1	; 0x03
    5660:	64 82       	std	Z+4, r6	; 0x04
    5662:	75 82       	std	Z+5, r7	; 0x05
    5664:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    5668:	ed b7       	in	r30, 0x3d	; 61
    566a:	fe b7       	in	r31, 0x3e	; 62
    566c:	36 96       	adiw	r30, 0x06	; 6
    566e:	ed bf       	out	0x3d, r30	; 61
    5670:	fe bf       	out	0x3e, r31	; 62
    5672:	0b c0       	rjmp	.+22     	; 0x568a <flash_panel+0x592>
                                ihex.rectyp, lineno);
                        break;
    5674:	65 01       	movw	r12, r10
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    5676:	c1 01       	movw	r24, r2
    5678:	60 e0       	ldi	r22, 0x00	; 0
    567a:	71 e0       	ldi	r23, 0x01	; 1
    567c:	43 ea       	ldi	r20, 0xA3	; 163
    567e:	57 e2       	ldi	r21, 0x27	; 39
    5680:	0e 94 d8 4e 	call	0x9db0	; 0x9db0 <f_gets>
    5684:	89 2b       	or	r24, r25
    5686:	09 f0       	breq	.+2      	; 0x568a <flash_panel+0x592>
    5688:	f7 ce       	rjmp	.-530    	; 0x5478 <flash_panel+0x380>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    568a:	85 e4       	ldi	r24, 0x45	; 69
    568c:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    568e:	c4 01       	movw	r24, r8
    5690:	60 e7       	ldi	r22, 0x70	; 112
    5692:	ae 01       	movw	r20, r28
    5694:	4f 5f       	subi	r20, 0xFF	; 255
    5696:	5f 4f       	sbci	r21, 0xFF	; 255
    5698:	21 e0       	ldi	r18, 0x01	; 1
    569a:	00 e0       	ldi	r16, 0x00	; 0
    569c:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY) {
    56a0:	d4 01       	movw	r26, r8
    56a2:	1d 96       	adiw	r26, 0x0d	; 13
    56a4:	8c 91       	ld	r24, X
    56a6:	1d 97       	sbiw	r26, 0x0d	; 13
    56a8:	88 23       	and	r24, r24
    56aa:	d1 f7       	brne	.-12     	; 0x56a0 <flash_panel+0x5a8>
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK) {
    56ac:	1e 96       	adiw	r26, 0x0e	; 14
    56ae:	8c 91       	ld	r24, X
    56b0:	1e 97       	sbiw	r26, 0x0e	; 14
    56b2:	81 30       	cpi	r24, 0x01	; 1
    56b4:	11 f1       	breq	.+68     	; 0x56fa <flash_panel+0x602>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    56b6:	1e 96       	adiw	r26, 0x0e	; 14
    56b8:	2c 91       	ld	r18, X
    56ba:	00 d0       	rcall	.+0      	; 0x56bc <flash_panel+0x5c4>
    56bc:	0f 92       	push	r0
    56be:	ed b7       	in	r30, 0x3d	; 61
    56c0:	fe b7       	in	r31, 0x3e	; 62
    56c2:	31 96       	adiw	r30, 0x01	; 1
    56c4:	88 ef       	ldi	r24, 0xF8	; 248
    56c6:	9c e0       	ldi	r25, 0x0C	; 12
    56c8:	ad b7       	in	r26, 0x3d	; 61
    56ca:	be b7       	in	r27, 0x3e	; 62
    56cc:	11 96       	adiw	r26, 0x01	; 1
    56ce:	8d 93       	st	X+, r24
    56d0:	9c 93       	st	X, r25
    56d2:	12 97       	sbiw	r26, 0x02	; 2
    56d4:	22 83       	std	Z+2, r18	; 0x02
    56d6:	13 82       	std	Z+3, r1	; 0x03
    56d8:	0a c0       	rjmp	.+20     	; 0x56ee <flash_panel+0x5f6>
        }
        
        //i2cMasterSend(panel_num, 1, &pagebuff[0]);
        //TWI_MasterWriteRead(&twiMaster1, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    56da:	00 d0       	rcall	.+0      	; 0x56dc <flash_panel+0x5e4>
    56dc:	0f 92       	push	r0
    56de:	8d ed       	ldi	r24, 0xDD	; 221
    56e0:	9c e0       	ldi	r25, 0x0C	; 12
    56e2:	ed b7       	in	r30, 0x3d	; 61
    56e4:	fe b7       	in	r31, 0x3e	; 62
    56e6:	81 83       	std	Z+1, r24	; 0x01
    56e8:	92 83       	std	Z+2, r25	; 0x02
    56ea:	e3 82       	std	Z+3, r14	; 0x03
    56ec:	f4 82       	std	Z+4, r15	; 0x04
    56ee:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <xprintf>
    56f2:	0f 90       	pop	r0
    56f4:	0f 90       	pop	r0
    56f6:	0f 90       	pop	r0
    56f8:	0f 90       	pop	r0
    }
};
    56fa:	c0 57       	subi	r28, 0x70	; 112
    56fc:	dd 4f       	sbci	r29, 0xFD	; 253
    56fe:	e2 e1       	ldi	r30, 0x12	; 18
    5700:	0c 94 c4 57 	jmp	0xaf88	; 0xaf88 <__epilogue_restores__>

00005704 <init_all>:
#include "utils.h"

void init_all()
{ 
    5704:	0f 93       	push	r16
    5706:	df 93       	push	r29
    5708:	cf 93       	push	r28
    570a:	0f 92       	push	r0
    570c:	cd b7       	in	r28, 0x3d	; 61
    570e:	de b7       	in	r29, 0x3e	; 62
  ledWrite(LED0, ON);
    5710:	80 e0       	ldi	r24, 0x00	; 0
    5712:	61 e0       	ldi	r22, 0x01	; 1
    5714:	0e 94 63 20 	call	0x40c6	; 0x40c6 <ledWrite>
  
  PORTC.DIRSET = PIN3_bm; // UART pin
    5718:	e0 e4       	ldi	r30, 0x40	; 64
    571a:	f6 e0       	ldi	r31, 0x06	; 6
    571c:	88 e0       	ldi	r24, 0x08	; 8
    571e:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm; // UART pin
    5720:	84 e0       	ldi	r24, 0x04	; 4
    5722:	82 83       	std	Z+2, r24	; 0x02

  PORTC.DIRSET = PIN4_bm; // SS pin for SPI unit on port C
    5724:	80 e1       	ldi	r24, 0x10	; 16
    5726:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port C
    5728:	90 e2       	ldi	r25, 0x20	; 32
    572a:	91 83       	std	Z+1, r25	; 0x01
  PORTC.DIRSET = PIN7_bm; // SCL pin for SPI unit on port C
    572c:	20 e8       	ldi	r18, 0x80	; 128
    572e:	21 83       	std	Z+1, r18	; 0x01
  PORTC.OUTSET = PIN4_bm; // Set SS high
    5730:	85 83       	std	Z+5, r24	; 0x05

  PORTD.DIRSET = PIN4_bm; // SS pin for SPI unit on port D
    5732:	e0 e6       	ldi	r30, 0x60	; 96
    5734:	f6 e0       	ldi	r31, 0x06	; 6
    5736:	81 83       	std	Z+1, r24	; 0x01
  PORTD.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port D
    5738:	91 83       	std	Z+1, r25	; 0x01
  PORTD.DIRSET = PIN7_bm; // SCL pin for SPI unit on port D
    573a:	21 83       	std	Z+1, r18	; 0x01
  PORTD.OUTSET = PIN4_bm; // Set SS high
    573c:	85 83       	std	Z+5, r24	; 0x05

  PORTE.DIR = 0xB0;       // SPI (SD-card)
    573e:	80 eb       	ldi	r24, 0xB0	; 176
    5740:	80 93 80 06 	sts	0x0680, r24
  PORTE.OUT = 0x00;
    5744:	e0 e8       	ldi	r30, 0x80	; 128
    5746:	f6 e0       	ldi	r31, 0x06	; 6
    5748:	14 82       	std	Z+4, r1	; 0x04

  PORTH.DIRSET = PIN5_bm; // LDAC
    574a:	e0 ee       	ldi	r30, 0xE0	; 224
    574c:	f6 e0       	ldi	r31, 0x06	; 6
    574e:	91 83       	std	Z+1, r25	; 0x01
  PORTH.DIRSET = PIN6_bm; // CLR
    5750:	80 e4       	ldi	r24, 0x40	; 64
    5752:	81 83       	std	Z+1, r24	; 0x01
  PORTH.DIRSET = PIN7_bm; // BIN
    5754:	21 83       	std	Z+1, r18	; 0x01
  PORTH.OUTCLR = PIN5_bm; // LDAC low
    5756:	96 83       	std	Z+6, r25	; 0x06
  PORTH.OUTSET = PIN6_bm; // CLR high
    5758:	85 83       	std	Z+5, r24	; 0x05
  PORTH.OUTCLR = PIN7_bm; // BIN low
    575a:	26 83       	std	Z+6, r18	; 0x06

  PORTJ.DIR = 0xf0;       // LEDs are on bits 4 - 7
    575c:	80 ef       	ldi	r24, 0xF0	; 240
    575e:	80 93 00 07 	sts	0x0700, r24
  PORTJ.OUT = 0xf0;       // All LEDs off
    5762:	e0 e0       	ldi	r30, 0x00	; 0
    5764:	f7 e0       	ldi	r31, 0x07	; 7
    5766:	84 83       	std	Z+4, r24	; 0x04
/*
  PORTK.DIR = 0xf0;       // bit 4 - 7 are external signal direction control
  PORTK.OUT = 0xff;       // external signal direction set to input (0 = input)
*/
  // set digital I/O signals to outputs
  digitalMode(0, OUTPUT);
    5768:	80 e0       	ldi	r24, 0x00	; 0
    576a:	60 e0       	ldi	r22, 0x00	; 0
    576c:	0e 94 b0 20 	call	0x4160	; 0x4160 <digitalMode>
  digitalMode(1, OUTPUT);     //used as a sign for the start and end of fetch_display_frame function
    5770:	81 e0       	ldi	r24, 0x01	; 1
    5772:	60 e0       	ldi	r22, 0x00	; 0
    5774:	0e 94 b0 20 	call	0x4160	; 0x4160 <digitalMode>
  digitalMode(2, OUTPUT);     //used to trigger laser
    5778:	82 e0       	ldi	r24, 0x02	; 2
    577a:	60 e0       	ldi	r22, 0x00	; 0
    577c:	0e 94 b0 20 	call	0x4160	; 0x4160 <digitalMode>
  digitalMode(3, OUTPUT);     //used to trigger camera
    5780:	83 e0       	ldi	r24, 0x03	; 3
    5782:	60 e0       	ldi	r22, 0x00	; 0
    5784:	0e 94 b0 20 	call	0x4160	; 0x4160 <digitalMode>
  
  OSC.XOSCCTRL = 0x47;    // 0.4-16 MHz XTAL - 1K CLK Start Up
    5788:	e0 e5       	ldi	r30, 0x50	; 80
    578a:	f0 e0       	ldi	r31, 0x00	; 0
    578c:	87 e4       	ldi	r24, 0x47	; 71
    578e:	82 83       	std	Z+2, r24	; 0x02
  OSC.PLLCTRL = 0xC4;     // XOSC is PLL Source - 4x Factor (32MHz)
    5790:	84 ec       	ldi	r24, 0xC4	; 196
    5792:	85 83       	std	Z+5, r24	; 0x05
  OSC.CTRL = 0x18;        // Enable PLL & External Oscillator
    5794:	88 e1       	ldi	r24, 0x18	; 24
    5796:	80 93 50 00 	sts	0x0050, r24

  // switch to 32 MHz oscillator
  while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable
    579a:	80 91 51 00 	lds	r24, 0x0051
    579e:	84 ff       	sbrs	r24, 4
    57a0:	fc cf       	rjmp	.-8      	; 0x579a <init_all+0x96>
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
  uint8_t volatile saved_sreg = SREG;
    57a2:	8f b7       	in	r24, 0x3f	; 63
    57a4:	89 83       	std	Y+1, r24	; 0x01
  cli();
    57a6:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    57a8:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    57aa:	24 e0       	ldi	r18, 0x04	; 4
    57ac:	80 e4       	ldi	r24, 0x40	; 64
    57ae:	90 e0       	ldi	r25, 0x00	; 0
    57b0:	fc 01       	movw	r30, r24
    57b2:	08 ed       	ldi	r16, 0xD8	; 216
    57b4:	04 bf       	out	0x34, r16	; 52
    57b6:	20 83       	st	Z, r18
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    57b8:	89 81       	ldd	r24, Y+1	; 0x01
    57ba:	8f bf       	out	0x3f, r24	; 63
    57bc:	88 ee       	ldi	r24, 0xE8	; 232
    57be:	93 e0       	ldi	r25, 0x03	; 3
    57c0:	20 e2       	ldi	r18, 0x20	; 32
    57c2:	33 e0       	ldi	r19, 0x03	; 3
    57c4:	f9 01       	movw	r30, r18
    57c6:	31 97       	sbiw	r30, 0x01	; 1
    57c8:	f1 f7       	brne	.-4      	; 0x57c6 <init_all+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57cc:	d9 f7       	brne	.-10     	; 0x57c4 <init_all+0xc0>
  while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable
  CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // 32MHz from PLL
  _delay_ms(100);         // Debounce ON Switch

  // Timer TCE1: 100Hz timer for SD Card routines
  TCE1.CTRLA = 0x04;      // Prescaler: clk/8
    57ce:	e0 e4       	ldi	r30, 0x40	; 64
    57d0:	fa e0       	ldi	r31, 0x0A	; 10
    57d2:	84 e0       	ldi	r24, 0x04	; 4
    57d4:	80 93 40 0a 	sts	0x0A40, r24
  TCE1.PER   = 39999;     // 100Hz
    57d8:	8f e3       	ldi	r24, 0x3F	; 63
    57da:	9c e9       	ldi	r25, 0x9C	; 156
    57dc:	86 a3       	std	Z+38, r24	; 0x26
    57de:	97 a3       	std	Z+39, r25	; 0x27
  TCE1.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    57e0:	82 e0       	ldi	r24, 0x02	; 2
    57e2:	86 83       	std	Z+6, r24	; 0x06

  // Initialize ADC (SPI master on port C)
  SPIC.CTRL = 0x58;       // Enable Master Mode, Mode 2, clkper/4
    57e4:	88 e5       	ldi	r24, 0x58	; 88
    57e6:	80 93 c0 08 	sts	0x08C0, r24

  // range register 1: 0-10v range on ch 0,1,2,3
  PORTC.OUTCLR = PIN4_bm;
    57ea:	80 e1       	ldi	r24, 0x10	; 16
    57ec:	e0 e4       	ldi	r30, 0x40	; 64
    57ee:	f6 e0       	ldi	r31, 0x06	; 6
    57f0:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xbf;
    57f2:	8f eb       	ldi	r24, 0xBF	; 191
    57f4:	e0 ec       	ldi	r30, 0xC0	; 192
    57f6:	f8 e0       	ldi	r31, 0x08	; 8
    57f8:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    57fa:	80 91 c2 08 	lds	r24, 0x08C2
    57fe:	87 ff       	sbrs	r24, 7
    5800:	fc cf       	rjmp	.-8      	; 0x57fa <init_all+0xf6>
  SPIC.DATA = 0xe0;
    5802:	80 ee       	ldi	r24, 0xE0	; 224
    5804:	e0 ec       	ldi	r30, 0xC0	; 192
    5806:	f8 e0       	ldi	r31, 0x08	; 8
    5808:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    580a:	80 91 c2 08 	lds	r24, 0x08C2
    580e:	87 ff       	sbrs	r24, 7
    5810:	fc cf       	rjmp	.-8      	; 0x580a <init_all+0x106>
  PORTC.OUTSET = PIN4_bm;
    5812:	e0 e4       	ldi	r30, 0x40	; 64
    5814:	f6 e0       	ldi	r31, 0x06	; 6
    5816:	80 e1       	ldi	r24, 0x10	; 16
    5818:	85 83       	std	Z+5, r24	; 0x05

  // range register 2: 0-10V range on ch 4,5,6,7
  PORTC.OUTCLR = PIN4_bm;
    581a:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xdf;
    581c:	8f ed       	ldi	r24, 0xDF	; 223
    581e:	e0 ec       	ldi	r30, 0xC0	; 192
    5820:	f8 e0       	ldi	r31, 0x08	; 8
    5822:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5824:	80 91 c2 08 	lds	r24, 0x08C2
    5828:	87 ff       	sbrs	r24, 7
    582a:	fc cf       	rjmp	.-8      	; 0x5824 <init_all+0x120>
  SPIC.DATA = 0xe0;
    582c:	80 ee       	ldi	r24, 0xE0	; 224
    582e:	e0 ec       	ldi	r30, 0xC0	; 192
    5830:	f8 e0       	ldi	r31, 0x08	; 8
    5832:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5834:	80 91 c2 08 	lds	r24, 0x08C2
    5838:	87 ff       	sbrs	r24, 7
    583a:	fc cf       	rjmp	.-8      	; 0x5834 <init_all+0x130>
  PORTC.OUTSET = PIN4_bm;
    583c:	e0 e4       	ldi	r30, 0x40	; 64
    583e:	f6 e0       	ldi	r31, 0x06	; 6
    5840:	80 e1       	ldi	r24, 0x10	; 16
    5842:	85 83       	std	Z+5, r24	; 0x05

  // sequence register: all sequence bits off
  PORTC.OUTCLR = PIN4_bm;
    5844:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xe0;
    5846:	80 ee       	ldi	r24, 0xE0	; 224
    5848:	e0 ec       	ldi	r30, 0xC0	; 192
    584a:	f8 e0       	ldi	r31, 0x08	; 8
    584c:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    584e:	80 91 c2 08 	lds	r24, 0x08C2
    5852:	87 ff       	sbrs	r24, 7
    5854:	fc cf       	rjmp	.-8      	; 0x584e <init_all+0x14a>
  SPIC.DATA = 0x00;
    5856:	e0 ec       	ldi	r30, 0xC0	; 192
    5858:	f8 e0       	ldi	r31, 0x08	; 8
    585a:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    585c:	80 91 c2 08 	lds	r24, 0x08C2
    5860:	87 ff       	sbrs	r24, 7
    5862:	fc cf       	rjmp	.-8      	; 0x585c <init_all+0x158>
  PORTC.OUTSET = PIN4_bm;
    5864:	e0 e4       	ldi	r30, 0x40	; 64
    5866:	f6 e0       	ldi	r31, 0x06	; 6
    5868:	80 e1       	ldi	r24, 0x10	; 16
    586a:	85 83       	std	Z+5, r24	; 0x05

  // control register: ch 000, mode = 00, pm = 00, code = 1, ref = 1, seq = 00
  PORTC.OUTCLR = PIN4_bm;
    586c:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0x80;
    586e:	80 e8       	ldi	r24, 0x80	; 128
    5870:	e0 ec       	ldi	r30, 0xC0	; 192
    5872:	f8 e0       	ldi	r31, 0x08	; 8
    5874:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5876:	80 91 c2 08 	lds	r24, 0x08C2
    587a:	87 ff       	sbrs	r24, 7
    587c:	fc cf       	rjmp	.-8      	; 0x5876 <init_all+0x172>
  SPIC.DATA = 0x30;
    587e:	80 e3       	ldi	r24, 0x30	; 48
    5880:	e0 ec       	ldi	r30, 0xC0	; 192
    5882:	f8 e0       	ldi	r31, 0x08	; 8
    5884:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5886:	80 91 c2 08 	lds	r24, 0x08C2
    588a:	87 ff       	sbrs	r24, 7
    588c:	fc cf       	rjmp	.-8      	; 0x5886 <init_all+0x182>
  PORTC.OUTSET = PIN4_bm;
    588e:	90 e1       	ldi	r25, 0x10	; 16
    5890:	e0 e4       	ldi	r30, 0x40	; 64
    5892:	f6 e0       	ldi	r31, 0x06	; 6
    5894:	95 83       	std	Z+5, r25	; 0x05


  // Initialize DAC (SPI master on port D)
  SPID.CTRL = 0x58;       // Enable Master Mode, Mode 2, clkper/4
    5896:	88 e5       	ldi	r24, 0x58	; 88
    5898:	80 93 c0 09 	sts	0x09C0, r24

  // DAC power control register (all ch + ref powered up)
  PORTD.OUTCLR = PIN4_bm;
    589c:	e0 e6       	ldi	r30, 0x60	; 96
    589e:	f6 e0       	ldi	r31, 0x06	; 6
    58a0:	96 83       	std	Z+6, r25	; 0x06
  SPID.DATA = 0x10;
    58a2:	e0 ec       	ldi	r30, 0xC0	; 192
    58a4:	f9 e0       	ldi	r31, 0x09	; 9
    58a6:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    58a8:	80 91 c2 09 	lds	r24, 0x09C2
    58ac:	87 ff       	sbrs	r24, 7
    58ae:	fc cf       	rjmp	.-8      	; 0x58a8 <init_all+0x1a4>
  SPID.DATA = 0x00;
    58b0:	e0 ec       	ldi	r30, 0xC0	; 192
    58b2:	f9 e0       	ldi	r31, 0x09	; 9
    58b4:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    58b6:	80 91 c2 09 	lds	r24, 0x09C2
    58ba:	87 ff       	sbrs	r24, 7
    58bc:	fc cf       	rjmp	.-8      	; 0x58b6 <init_all+0x1b2>
  SPID.DATA = 0x1f;
    58be:	8f e1       	ldi	r24, 0x1F	; 31
    58c0:	e0 ec       	ldi	r30, 0xC0	; 192
    58c2:	f9 e0       	ldi	r31, 0x09	; 9
    58c4:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    58c6:	80 91 c2 09 	lds	r24, 0x09C2
    58ca:	87 ff       	sbrs	r24, 7
    58cc:	fc cf       	rjmp	.-8      	; 0x58c6 <init_all+0x1c2>
  PORTD.OUTSET = PIN4_bm;
    58ce:	e0 e6       	ldi	r30, 0x60	; 96
    58d0:	f6 e0       	ldi	r31, 0x06	; 6
    58d2:	80 e1       	ldi	r24, 0x10	; 16
    58d4:	85 83       	std	Z+5, r24	; 0x05

  // DAC output range register (all ch +/-5V range)
  PORTD.OUTCLR = PIN4_bm;
    58d6:	86 83       	std	Z+6, r24	; 0x06
  SPID.DATA = 0x0c;
    58d8:	8c e0       	ldi	r24, 0x0C	; 12
    58da:	e0 ec       	ldi	r30, 0xC0	; 192
    58dc:	f9 e0       	ldi	r31, 0x09	; 9
    58de:	83 83       	std	Z+3, r24	; 0x03
//	SPID.DATA = 0x08; // only ch 0
  loop_until_bit_is_set(SPID.STATUS, 7);
    58e0:	80 91 c2 09 	lds	r24, 0x09C2
    58e4:	87 ff       	sbrs	r24, 7
    58e6:	fc cf       	rjmp	.-8      	; 0x58e0 <init_all+0x1dc>
  SPID.DATA = 0x00;
    58e8:	e0 ec       	ldi	r30, 0xC0	; 192
    58ea:	f9 e0       	ldi	r31, 0x09	; 9
    58ec:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    58ee:	80 91 c2 09 	lds	r24, 0x09C2
    58f2:	87 ff       	sbrs	r24, 7
    58f4:	fc cf       	rjmp	.-8      	; 0x58ee <init_all+0x1ea>
  SPID.DATA = 0x03;
    58f6:	83 e0       	ldi	r24, 0x03	; 3
    58f8:	e0 ec       	ldi	r30, 0xC0	; 192
    58fa:	f9 e0       	ldi	r31, 0x09	; 9
    58fc:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    58fe:	80 91 c2 09 	lds	r24, 0x09C2
    5902:	87 ff       	sbrs	r24, 7
    5904:	fc cf       	rjmp	.-8      	; 0x58fe <init_all+0x1fa>
  PORTD.OUTSET = PIN4_bm;
    5906:	80 e1       	ldi	r24, 0x10	; 16
    5908:	e0 e6       	ldi	r30, 0x60	; 96
    590a:	f6 e0       	ldi	r31, 0x06	; 6
    590c:	85 83       	std	Z+5, r24	; 0x05

  // initialize the UART
  uart_init();
    590e:	0e 94 97 2c 	call	0x592e	; 0x592e <uart_init>
  
  //initialize timer
  timer_init();
    5912:	0e 94 b3 54 	call	0xa966	; 0xa966 <timer_init>
  
  Handler_Init();
    5916:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <Handler_Init>

  // Enable interrupts
  PMIC.CTRL = 0x07;       // Enable High, Medium and Low level interrupts
    591a:	87 e0       	ldi	r24, 0x07	; 7
    591c:	e0 ea       	ldi	r30, 0xA0	; 160
    591e:	f0 e0       	ldi	r31, 0x00	; 0
    5920:	82 83       	std	Z+2, r24	; 0x02
  sei();
    5922:	78 94       	sei
}
    5924:	0f 90       	pop	r0
    5926:	cf 91       	pop	r28
    5928:	df 91       	pop	r29
    592a:	0f 91       	pop	r16
    592c:	08 95       	ret

0000592e <uart_init>:
/* Initialize UART */

void uart_init()
{

  rxfifo.idx_r = 0;
    592e:	10 92 5d 25 	sts	0x255D, r1
    5932:	10 92 5e 25 	sts	0x255E, r1
  rxfifo.idx_w = 0;
    5936:	10 92 5b 25 	sts	0x255B, r1
    593a:	10 92 5c 25 	sts	0x255C, r1
  rxfifo.count = 0;
    593e:	10 92 5f 25 	sts	0x255F, r1
    5942:	10 92 60 25 	sts	0x2560, r1
  txfifo.idx_r = 0;
    5946:	10 92 19 25 	sts	0x2519, r1
  txfifo.idx_w = 0;
    594a:	10 92 18 25 	sts	0x2518, r1
  txfifo.count = 0;
    594e:	10 92 1a 25 	sts	0x251A, r1
//  USARTC0.BAUDCTRLB = 0xA1;   // ==> 230400 bps 
  
//  USARTC0.BAUDCTRLA = 0xD6;   // BSCALE = -6, BSEL = 214
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 460800 bps
  
  USARTC0.BAUDCTRLA = 0x4B;   // BSCALE = -6, BSEL = 75
    5952:	e0 ea       	ldi	r30, 0xA0	; 160
    5954:	f8 e0       	ldi	r31, 0x08	; 8
    5956:	8b e4       	ldi	r24, 0x4B	; 75
    5958:	86 83       	std	Z+6, r24	; 0x06
  USARTC0.BAUDCTRLB = 0xA0;   // ==> 921600 bps
    595a:	80 ea       	ldi	r24, 0xA0	; 160
    595c:	87 83       	std	Z+7, r24	; 0x07
  
//  USARTC0.BAUDCTRLA = 0x05;   // BSCALE = -6, BSEL = 5
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 1843200 bps
  
  USARTC0.CTRLA = 0x10;       // RX is low level interrupt
    595e:	80 e1       	ldi	r24, 0x10	; 16
    5960:	83 83       	std	Z+3, r24	; 0x03
  USARTC0.CTRLC = 0x03;       // Async, No Parity, 1 stop bit, 8 data bits
    5962:	83 e0       	ldi	r24, 0x03	; 3
    5964:	85 83       	std	Z+5, r24	; 0x05
  USARTC0.CTRLB = 0x18;       // Enable RX and TX
    5966:	88 e1       	ldi	r24, 0x18	; 24
    5968:	84 83       	std	Z+4, r24	; 0x04
}
    596a:	08 95       	ret

0000596c <uart_test>:

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    596c:	20 91 5f 25 	lds	r18, 0x255F
    5970:	30 91 60 25 	lds	r19, 0x2560
}
    5974:	c9 01       	movw	r24, r18
    5976:	08 95       	ret

00005978 <uart_get>:
uint8_t uart_get ()
{
  uint16_t i;
  uint8_t d;

  i = rxfifo.idx_r;
    5978:	20 91 5d 25 	lds	r18, 0x255D
    597c:	30 91 5e 25 	lds	r19, 0x255E
  while(rxfifo.count == 0);
    5980:	80 91 5f 25 	lds	r24, 0x255F
    5984:	90 91 60 25 	lds	r25, 0x2560
    5988:	89 2b       	or	r24, r25
    598a:	d1 f3       	breq	.-12     	; 0x5980 <uart_get+0x8>
  d = *(rxfifo.PRxBuff+i++);
    598c:	e0 91 63 25 	lds	r30, 0x2563
    5990:	f0 91 64 25 	lds	r31, 0x2564
    5994:	e2 0f       	add	r30, r18
    5996:	f3 1f       	adc	r31, r19
    5998:	e0 81       	ld	r30, Z
    599a:	2f 5f       	subi	r18, 0xFF	; 255
    599c:	3f 4f       	sbci	r19, 0xFF	; 255
  cli();
    599e:	f8 94       	cli
  rxfifo.count--;
    59a0:	80 91 5f 25 	lds	r24, 0x255F
    59a4:	90 91 60 25 	lds	r25, 0x2560
    59a8:	01 97       	sbiw	r24, 0x01	; 1
    59aa:	80 93 5f 25 	sts	0x255F, r24
    59ae:	90 93 60 25 	sts	0x2560, r25
  sei();
    59b2:	78 94       	sei
  if(i >= rxfifo.size)
    59b4:	80 91 61 25 	lds	r24, 0x2561
    59b8:	90 91 62 25 	lds	r25, 0x2562
    59bc:	28 17       	cp	r18, r24
    59be:	39 07       	cpc	r19, r25
    59c0:	10 f0       	brcs	.+4      	; 0x59c6 <uart_get+0x4e>
    59c2:	20 e0       	ldi	r18, 0x00	; 0
    59c4:	30 e0       	ldi	r19, 0x00	; 0
    i = 0;
  rxfifo.idx_r = i;
    59c6:	20 93 5d 25 	sts	0x255D, r18
    59ca:	30 93 5e 25 	sts	0x255E, r19

  return d;
}
    59ce:	8e 2f       	mov	r24, r30
    59d0:	08 95       	ret

000059d2 <uart_put>:


/* Put a character to transmit */

void uart_put (uint8_t d)
{
    59d2:	28 2f       	mov	r18, r24
  uint8_t i;

  i = txfifo.idx_w;
    59d4:	90 91 18 25 	lds	r25, 0x2518
  while(txfifo.count >= sizeof(txfifo.buff));
    59d8:	80 91 1a 25 	lds	r24, 0x251A
    59dc:	80 34       	cpi	r24, 0x40	; 64
    59de:	e0 f7       	brcc	.-8      	; 0x59d8 <uart_put+0x6>
  txfifo.buff[i++] = d;
    59e0:	e9 2f       	mov	r30, r25
    59e2:	f0 e0       	ldi	r31, 0x00	; 0
    59e4:	e8 5e       	subi	r30, 0xE8	; 232
    59e6:	fa 4d       	sbci	r31, 0xDA	; 218
    59e8:	23 83       	std	Z+3, r18	; 0x03
    59ea:	9f 5f       	subi	r25, 0xFF	; 255
  cli();
    59ec:	f8 94       	cli
  txfifo.count++;
    59ee:	80 91 1a 25 	lds	r24, 0x251A
    59f2:	8f 5f       	subi	r24, 0xFF	; 255
    59f4:	80 93 1a 25 	sts	0x251A, r24
  USARTC0.CTRLA = USART_RXCINTLVL0_bm | USART_DREINTLVL0_bm;
    59f8:	81 e1       	ldi	r24, 0x11	; 17
    59fa:	e0 ea       	ldi	r30, 0xA0	; 160
    59fc:	f8 e0       	ldi	r31, 0x08	; 8
    59fe:	83 83       	std	Z+3, r24	; 0x03

  sei();
    5a00:	78 94       	sei
  if(i >= sizeof(txfifo.buff))
    5a02:	90 34       	cpi	r25, 0x40	; 64
    5a04:	08 f0       	brcs	.+2      	; 0x5a08 <uart_put+0x36>
    5a06:	90 e0       	ldi	r25, 0x00	; 0
    i = 0;
  txfifo.idx_w = i;
    5a08:	90 93 18 25 	sts	0x2518, r25
}
    5a0c:	08 95       	ret

00005a0e <uart_putstr>:

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
    5a0e:	cf 93       	push	r28
    5a10:	df 93       	push	r29
    5a12:	ec 01       	movw	r28, r24
    5a14:	03 c0       	rjmp	.+6      	; 0x5a1c <uart_putstr+0xe>
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    uart_put(d);
    5a16:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <uart_put>
    s++;
    5a1a:	21 96       	adiw	r28, 0x01	; 1

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    5a1c:	fe 01       	movw	r30, r28
    5a1e:	84 91       	lpm	r24, Z+
    5a20:	88 23       	and	r24, r24
    5a22:	c9 f7       	brne	.-14     	; 0x5a16 <uart_putstr+0x8>
    uart_put(d);
    s++;
  }
}
    5a24:	df 91       	pop	r29
    5a26:	cf 91       	pop	r28
    5a28:	08 95       	ret

00005a2a <uart_crlf>:

// Sends a Carriage Return and Line Feed to the serial port
void uart_crlf()
{
  uart_put(CR);
    5a2a:	8d e0       	ldi	r24, 0x0D	; 13
    5a2c:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <uart_put>
  uart_put(LF);
    5a30:	8a e0       	ldi	r24, 0x0A	; 10
    5a32:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <uart_put>
}
    5a36:	08 95       	ret

00005a38 <fill_Rx_buffer>:

//Notes: this function expects the first byte in the buffer to be the length of the message
//only call this after a while(!(uart_test())); command

uint16_t fill_Rx_buffer(uint8_t *Rx_buffer)
{	
    5a38:	cf 92       	push	r12
    5a3a:	df 92       	push	r13
    5a3c:	ff 92       	push	r15
    5a3e:	0f 93       	push	r16
    5a40:	1f 93       	push	r17
    5a42:	cf 93       	push	r28
    5a44:	df 93       	push	r29
    5a46:	6c 01       	movw	r12, r24

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    5a48:	80 91 5f 25 	lds	r24, 0x255F
    5a4c:	90 91 60 25 	lds	r25, 0x2560
	uint16_t data_length, i;
	
	message_length = 0;
	//err_flag = 1;
	
	if (uart_test())
    5a50:	89 2b       	or	r24, r25
    5a52:	11 f4       	brne	.+4      	; 0x5a58 <fill_Rx_buffer+0x20>
    5a54:	ff 24       	eor	r15, r15
    5a56:	3c c0       	rjmp	.+120    	; 0x5ad0 <fill_Rx_buffer+0x98>
	{
		message_length = uart_get();
    5a58:	0e 94 bc 2c 	call	0x5978	; 0x5978 <uart_get>
    5a5c:	f8 2e       	mov	r15, r24
		
		if (message_length == 50)
    5a5e:	82 e3       	ldi	r24, 0x32	; 50
    5a60:	f8 16       	cp	r15, r24
    5a62:	29 f0       	breq	.+10     	; 0x5a6e <fill_Rx_buffer+0x36>
    5a64:	c0 e0       	ldi	r28, 0x00	; 0
    5a66:	d0 e0       	ldi	r29, 0x00	; 0
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    5a68:	0f 2d       	mov	r16, r15
    5a6a:	10 e0       	ldi	r17, 0x00	; 0
    5a6c:	2e c0       	rjmp	.+92     	; 0x5aca <fill_Rx_buffer+0x92>
		
		if (message_length == 50)
		{
		//dump frame: header and data. read the first two bytes data which are the frame data length

			temp1 = uart_get();
    5a6e:	0e 94 bc 2c 	call	0x5978	; 0x5978 <uart_get>
    5a72:	18 2f       	mov	r17, r24
			temp2 = uart_get();
    5a74:	0e 94 bc 2c 	call	0x5978	; 0x5978 <uart_get>

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	
    5a78:	38 2f       	mov	r19, r24
    5a7a:	20 e0       	ldi	r18, 0x00	; 0
    5a7c:	c9 01       	movw	r24, r18
    5a7e:	81 0f       	add	r24, r17
    5a80:	91 1d       	adc	r25, r1
    5a82:	8c 01       	movw	r16, r24
    5a84:	c0 e0       	ldi	r28, 0x00	; 0
    5a86:	d0 e0       	ldi	r29, 0x00	; 0

			for (i = 0; i < data_length+7; i++)
    5a88:	09 5f       	subi	r16, 0xF9	; 249
    5a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    5a8c:	0d c0       	rjmp	.+26     	; 0x5aa8 <fill_Rx_buffer+0x70>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    5a8e:	80 91 5f 25 	lds	r24, 0x255F
    5a92:	90 91 60 25 	lds	r25, 0x2560

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
			{
				while(!(uart_test()));
    5a96:	89 2b       	or	r24, r25
    5a98:	d1 f3       	breq	.-12     	; 0x5a8e <fill_Rx_buffer+0x56>
				Rx_buffer[i] = uart_get();
    5a9a:	0e 94 bc 2c 	call	0x5978	; 0x5978 <uart_get>
    5a9e:	f6 01       	movw	r30, r12
    5aa0:	ec 0f       	add	r30, r28
    5aa2:	fd 1f       	adc	r31, r29
    5aa4:	80 83       	st	Z, r24
			temp1 = uart_get();
			temp2 = uart_get();

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
    5aa6:	21 96       	adiw	r28, 0x01	; 1
    5aa8:	c0 17       	cp	r28, r16
    5aaa:	d1 07       	cpc	r29, r17
    5aac:	80 f3       	brcs	.-32     	; 0x5a8e <fill_Rx_buffer+0x56>
    5aae:	10 c0       	rjmp	.+32     	; 0x5ad0 <fill_Rx_buffer+0x98>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    5ab0:	80 91 5f 25 	lds	r24, 0x255F
    5ab4:	90 91 60 25 	lds	r25, 0x2560
								
		}	
        else	
			for (i = 0; i < message_length; i++)
			{
				while(!(uart_test()));
    5ab8:	89 2b       	or	r24, r25
    5aba:	d1 f3       	breq	.-12     	; 0x5ab0 <fill_Rx_buffer+0x78>
				Rx_buffer[i] = uart_get();
    5abc:	0e 94 bc 2c 	call	0x5978	; 0x5978 <uart_get>
    5ac0:	f6 01       	movw	r30, r12
    5ac2:	ec 0f       	add	r30, r28
    5ac4:	fd 1f       	adc	r31, r29
    5ac6:	80 83       	st	Z, r24
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    5ac8:	21 96       	adiw	r28, 0x01	; 1
    5aca:	c0 17       	cp	r28, r16
    5acc:	d1 07       	cpc	r29, r17
    5ace:	80 f3       	brcs	.-32     	; 0x5ab0 <fill_Rx_buffer+0x78>
	}
	//else err_flag = 0;  - without other error check, message_length stays at zero.
	//message_length = err_flag*message_length;  - only useful for multiple error sources, but mult is overkill
	return message_length;			

}	
    5ad0:	8f 2d       	mov	r24, r15
    5ad2:	90 e0       	ldi	r25, 0x00	; 0
    5ad4:	df 91       	pop	r29
    5ad6:	cf 91       	pop	r28
    5ad8:	1f 91       	pop	r17
    5ada:	0f 91       	pop	r16
    5adc:	ff 90       	pop	r15
    5ade:	df 90       	pop	r13
    5ae0:	cf 90       	pop	r12
    5ae2:	08 95       	ret

00005ae4 <send_Tx_buffer>:
//Return Values: none
//Limitations: messages can only be upto 255 bytes in length
//Notes: this function sends the message length as the first byte of the message

void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
    5ae4:	ff 92       	push	r15
    5ae6:	0f 93       	push	r16
    5ae8:	1f 93       	push	r17
    5aea:	cf 93       	push	r28
    5aec:	df 93       	push	r29
    5aee:	18 2f       	mov	r17, r24
    5af0:	09 2f       	mov	r16, r25
    5af2:	f6 2e       	mov	r15, r22
	uint8_t i;

	uart_put(message_length);
    5af4:	86 2f       	mov	r24, r22
    5af6:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <uart_put>
    5afa:	21 2f       	mov	r18, r17
    5afc:	30 2f       	mov	r19, r16
    5afe:	c9 01       	movw	r24, r18
    5b00:	ec 01       	movw	r28, r24
    5b02:	10 e0       	ldi	r17, 0x00	; 0
    5b04:	04 c0       	rjmp	.+8      	; 0x5b0e <send_Tx_buffer+0x2a>
	for (i = 0; i < message_length;i++)
	{
		uart_put(Tx_buffer[i]);
    5b06:	89 91       	ld	r24, Y+
    5b08:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <uart_put>
void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
	uint8_t i;

	uart_put(message_length);
	for (i = 0; i < message_length;i++)
    5b0c:	1f 5f       	subi	r17, 0xFF	; 255
    5b0e:	1f 15       	cp	r17, r15
    5b10:	d0 f3       	brcs	.-12     	; 0x5b06 <send_Tx_buffer+0x22>
	{
		uart_put(Tx_buffer[i]);
	}	
}
    5b12:	cd b7       	in	r28, 0x3d	; 61
    5b14:	de b7       	in	r29, 0x3e	; 62
    5b16:	e5 e0       	ldi	r30, 0x05	; 5
    5b18:	0c 94 d1 57 	jmp	0xafa2	; 0xafa2 <__epilogue_restores__+0x1a>

00005b1c <__vector_25>:


/* UART RXC interrupt */

ISR(USARTC0_RXC_vect)
{
    5b1c:	1f 92       	push	r1
    5b1e:	0f 92       	push	r0
    5b20:	0f b6       	in	r0, 0x3f	; 63
    5b22:	0f 92       	push	r0
    5b24:	08 b6       	in	r0, 0x38	; 56
    5b26:	0f 92       	push	r0
    5b28:	0b b6       	in	r0, 0x3b	; 59
    5b2a:	0f 92       	push	r0
    5b2c:	11 24       	eor	r1, r1
    5b2e:	18 be       	out	0x38, r1	; 56
    5b30:	1b be       	out	0x3b, r1	; 59
    5b32:	2f 93       	push	r18
    5b34:	3f 93       	push	r19
    5b36:	4f 93       	push	r20
    5b38:	8f 93       	push	r24
    5b3a:	9f 93       	push	r25
    5b3c:	ef 93       	push	r30
    5b3e:	ff 93       	push	r31
  uint8_t d;
  uint16_t n, i;

  d = USARTC0.DATA;
    5b40:	40 91 a0 08 	lds	r20, 0x08A0
  n = rxfifo.count;
    5b44:	20 91 5f 25 	lds	r18, 0x255F
    5b48:	30 91 60 25 	lds	r19, 0x2560
  if(n < rxfifo.size) {
    5b4c:	80 91 61 25 	lds	r24, 0x2561
    5b50:	90 91 62 25 	lds	r25, 0x2562
    5b54:	28 17       	cp	r18, r24
    5b56:	39 07       	cpc	r19, r25
    5b58:	08 f5       	brcc	.+66     	; 0x5b9c <__vector_25+0x80>
    rxfifo.count = ++n;
    5b5a:	2f 5f       	subi	r18, 0xFF	; 255
    5b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    5b5e:	20 93 5f 25 	sts	0x255F, r18
    5b62:	30 93 60 25 	sts	0x2560, r19
    i = rxfifo.idx_w;
    5b66:	80 91 5b 25 	lds	r24, 0x255B
    5b6a:	90 91 5c 25 	lds	r25, 0x255C
    *(rxfifo.PRxBuff + i++) = d;
    5b6e:	e0 91 63 25 	lds	r30, 0x2563
    5b72:	f0 91 64 25 	lds	r31, 0x2564
    5b76:	e8 0f       	add	r30, r24
    5b78:	f9 1f       	adc	r31, r25
    5b7a:	40 83       	st	Z, r20
    5b7c:	9c 01       	movw	r18, r24
    5b7e:	2f 5f       	subi	r18, 0xFF	; 255
    5b80:	3f 4f       	sbci	r19, 0xFF	; 255
    if(i >= rxfifo.size)
    5b82:	80 91 61 25 	lds	r24, 0x2561
    5b86:	90 91 62 25 	lds	r25, 0x2562
    5b8a:	28 17       	cp	r18, r24
    5b8c:	39 07       	cpc	r19, r25
    5b8e:	10 f0       	brcs	.+4      	; 0x5b94 <__vector_25+0x78>
    5b90:	20 e0       	ldi	r18, 0x00	; 0
    5b92:	30 e0       	ldi	r19, 0x00	; 0
      i = 0;
    rxfifo.idx_w = i;
    5b94:	20 93 5b 25 	sts	0x255B, r18
    5b98:	30 93 5c 25 	sts	0x255C, r19
  }
}
    5b9c:	ff 91       	pop	r31
    5b9e:	ef 91       	pop	r30
    5ba0:	9f 91       	pop	r25
    5ba2:	8f 91       	pop	r24
    5ba4:	4f 91       	pop	r20
    5ba6:	3f 91       	pop	r19
    5ba8:	2f 91       	pop	r18
    5baa:	0f 90       	pop	r0
    5bac:	0b be       	out	0x3b, r0	; 59
    5bae:	0f 90       	pop	r0
    5bb0:	08 be       	out	0x38, r0	; 56
    5bb2:	0f 90       	pop	r0
    5bb4:	0f be       	out	0x3f, r0	; 63
    5bb6:	0f 90       	pop	r0
    5bb8:	1f 90       	pop	r1
    5bba:	18 95       	reti

00005bbc <__vector_26>:


/* UART UDRE interrupt */

ISR(USARTC0_DRE_vect)
{
    5bbc:	1f 92       	push	r1
    5bbe:	0f 92       	push	r0
    5bc0:	0f b6       	in	r0, 0x3f	; 63
    5bc2:	0f 92       	push	r0
    5bc4:	08 b6       	in	r0, 0x38	; 56
    5bc6:	0f 92       	push	r0
    5bc8:	0b b6       	in	r0, 0x3b	; 59
    5bca:	0f 92       	push	r0
    5bcc:	11 24       	eor	r1, r1
    5bce:	18 be       	out	0x38, r1	; 56
    5bd0:	1b be       	out	0x3b, r1	; 59
    5bd2:	2f 93       	push	r18
    5bd4:	8f 93       	push	r24
    5bd6:	9f 93       	push	r25
    5bd8:	ef 93       	push	r30
    5bda:	ff 93       	push	r31
  uint8_t n, i;

  n = txfifo.count;
    5bdc:	80 91 1a 25 	lds	r24, 0x251A
  if(n) {
    5be0:	88 23       	and	r24, r24
    5be2:	a9 f0       	breq	.+42     	; 0x5c0e <__vector_26+0x52>
    txfifo.count = --n;
    5be4:	28 2f       	mov	r18, r24
    5be6:	21 50       	subi	r18, 0x01	; 1
    5be8:	20 93 1a 25 	sts	0x251A, r18
    i = txfifo.idx_r;
    5bec:	80 91 19 25 	lds	r24, 0x2519
    USARTC0.DATA = txfifo.buff[i++];
    5bf0:	e8 2f       	mov	r30, r24
    5bf2:	f0 e0       	ldi	r31, 0x00	; 0
    5bf4:	e8 5e       	subi	r30, 0xE8	; 232
    5bf6:	fa 4d       	sbci	r31, 0xDA	; 218
    5bf8:	93 81       	ldd	r25, Z+3	; 0x03
    5bfa:	90 93 a0 08 	sts	0x08A0, r25
    5bfe:	8f 5f       	subi	r24, 0xFF	; 255
    if(i >= sizeof(txfifo.buff))
    5c00:	80 34       	cpi	r24, 0x40	; 64
    5c02:	08 f0       	brcs	.+2      	; 0x5c06 <__vector_26+0x4a>
    5c04:	80 e0       	ldi	r24, 0x00	; 0
      i = 0;
    txfifo.idx_r = i;
    5c06:	80 93 19 25 	sts	0x2519, r24
  }
  if(n == 0)
    5c0a:	22 23       	and	r18, r18
    5c0c:	21 f4       	brne	.+8      	; 0x5c16 <__vector_26+0x5a>
    USARTC0.CTRLA = USART_RXCINTLVL0_bm;
    5c0e:	80 e1       	ldi	r24, 0x10	; 16
    5c10:	e0 ea       	ldi	r30, 0xA0	; 160
    5c12:	f8 e0       	ldi	r31, 0x08	; 8
    5c14:	83 83       	std	Z+3, r24	; 0x03
}
    5c16:	ff 91       	pop	r31
    5c18:	ef 91       	pop	r30
    5c1a:	9f 91       	pop	r25
    5c1c:	8f 91       	pop	r24
    5c1e:	2f 91       	pop	r18
    5c20:	0f 90       	pop	r0
    5c22:	0b be       	out	0x3b, r0	; 59
    5c24:	0f 90       	pop	r0
    5c26:	08 be       	out	0x38, r0	; 56
    5c28:	0f 90       	pop	r0
    5c2a:	0f be       	out	0x3f, r0	; 63
    5c2c:	0f 90       	pop	r0
    5c2e:	1f 90       	pop	r1
    5c30:	18 95       	reti

00005c32 <releaseRxBuff>:
}


void releaseRxBuff( ) {

free(rxfifo.PRxBuff);
    5c32:	80 91 63 25 	lds	r24, 0x2563
    5c36:	90 91 64 25 	lds	r25, 0x2564
    5c3a:	0e 94 92 58 	call	0xb124	; 0xb124 <free>

}
    5c3e:	08 95       	ret

00005c40 <createRxBuff>:
rxFIFO rxfifo;


void createRxBuff(uint8_t mode) {

if (mode == 0xff) {
    5c40:	8f 3f       	cpi	r24, 0xFF	; 255
    5c42:	59 f4       	brne	.+22     	; 0x5c5a <createRxBuff+0x1a>
 rxfifo.PRxBuff = malloc(64);
    5c44:	80 e4       	ldi	r24, 0x40	; 64
    5c46:	90 e0       	ldi	r25, 0x00	; 0
    5c48:	0e 94 e5 57 	call	0xafca	; 0xafca <malloc>
    5c4c:	80 93 63 25 	sts	0x2563, r24
    5c50:	90 93 64 25 	sts	0x2564, r25
 rxfifo.size = 64;
    5c54:	80 e4       	ldi	r24, 0x40	; 64
    5c56:	90 e0       	ldi	r25, 0x00	; 0
    5c58:	0a c0       	rjmp	.+20     	; 0x5c6e <createRxBuff+0x2e>
}
else {
 rxfifo.PRxBuff = malloc(1550);
    5c5a:	8e e0       	ldi	r24, 0x0E	; 14
    5c5c:	96 e0       	ldi	r25, 0x06	; 6
    5c5e:	0e 94 e5 57 	call	0xafca	; 0xafca <malloc>
    5c62:	80 93 63 25 	sts	0x2563, r24
    5c66:	90 93 64 25 	sts	0x2564, r25
 rxfifo.size = 1550;
    5c6a:	8e e0       	ldi	r24, 0x0E	; 14
    5c6c:	96 e0       	ldi	r25, 0x06	; 6
    5c6e:	80 93 61 25 	sts	0x2561, r24
    5c72:	90 93 62 25 	sts	0x2562, r25
    5c76:	08 95       	ret

00005c78 <Handler_Init>:
  uint8_t lcv;

  // Initialize masks to FALSE
  for(lcv=0;lcv<HANDLER_MAX;lcv++)
  {
    mask[lcv] = FALSE;
    5c78:	10 92 c1 2b 	sts	0x2BC1, r1
    5c7c:	10 92 c2 2b 	sts	0x2BC2, r1
    5c80:	10 92 c3 2b 	sts	0x2BC3, r1
    5c84:	10 92 c4 2b 	sts	0x2BC4, r1
    5c88:	10 92 c5 2b 	sts	0x2BC5, r1
    5c8c:	10 92 c6 2b 	sts	0x2BC6, r1
  }

// Timer TCE0: set-up to match old system (32MHz/8/512 = 16MHz/8/256):
//  TCE0.CTRLA = 0x04;      // Prescaler: clk/8
//JL03092010 change the prescaler from 8 to 2 so the overflowrate inclrease 4 times
  TCE0.CTRLA = 0x02;      // Prescaler: clk/2
    5c90:	e0 e0       	ldi	r30, 0x00	; 0
    5c92:	fa e0       	ldi	r31, 0x0A	; 10
    5c94:	82 e0       	ldi	r24, 0x02	; 2
    5c96:	80 83       	st	Z, r24
  TCE0.PER   = 511;       // 256*2 - 1
    5c98:	8f ef       	ldi	r24, 0xFF	; 255
    5c9a:	91 e0       	ldi	r25, 0x01	; 1
    5c9c:	86 a3       	std	Z+38, r24	; 0x26
    5c9e:	97 a3       	std	Z+39, r25	; 0x27
  TCE0.INTCTRLA = 0x03;   // Timer overflow is a the highest level interrupt
    5ca0:	83 e0       	ldi	r24, 0x03	; 3
    5ca2:	86 83       	std	Z+6, r24	; 0x06
}
    5ca4:	08 95       	ret

00005ca6 <__vector_47>:


// The interrupt handler function of the timer E0 interrupt.

ISR(TCE0_OVF_vect)
{
    5ca6:	1f 92       	push	r1
    5ca8:	0f 92       	push	r0
    5caa:	0f b6       	in	r0, 0x3f	; 63
    5cac:	0f 92       	push	r0
    5cae:	08 b6       	in	r0, 0x38	; 56
    5cb0:	0f 92       	push	r0
    5cb2:	09 b6       	in	r0, 0x39	; 57
    5cb4:	0f 92       	push	r0
    5cb6:	0a b6       	in	r0, 0x3a	; 58
    5cb8:	0f 92       	push	r0
    5cba:	0b b6       	in	r0, 0x3b	; 59
    5cbc:	0f 92       	push	r0
    5cbe:	11 24       	eor	r1, r1
    5cc0:	18 be       	out	0x38, r1	; 56
    5cc2:	19 be       	out	0x39, r1	; 57
    5cc4:	1a be       	out	0x3a, r1	; 58
    5cc6:	1b be       	out	0x3b, r1	; 59
    5cc8:	ef 92       	push	r14
    5cca:	ff 92       	push	r15
    5ccc:	0f 93       	push	r16
    5cce:	1f 93       	push	r17
    5cd0:	2f 93       	push	r18
    5cd2:	3f 93       	push	r19
    5cd4:	4f 93       	push	r20
    5cd6:	5f 93       	push	r21
    5cd8:	6f 93       	push	r22
    5cda:	7f 93       	push	r23
    5cdc:	8f 93       	push	r24
    5cde:	9f 93       	push	r25
    5ce0:	af 93       	push	r26
    5ce2:	bf 93       	push	r27
    5ce4:	cf 93       	push	r28
    5ce6:	df 93       	push	r29
    5ce8:	ef 93       	push	r30
    5cea:	ff 93       	push	r31
    5cec:	97 ec       	ldi	r25, 0xC7	; 199
    5cee:	e9 2e       	mov	r14, r25
    5cf0:	9b e2       	ldi	r25, 0x2B	; 43
    5cf2:	f9 2e       	mov	r15, r25
    5cf4:	05 eb       	ldi	r16, 0xB5	; 181
    5cf6:	1b e2       	ldi	r17, 0x2B	; 43
    5cf8:	c0 e0       	ldi	r28, 0x00	; 0
    5cfa:	d0 e0       	ldi	r29, 0x00	; 0
//ledToggle(1);
//xputs(PSTR("\nISR Works\n"));

   for(lcv=0;lcv<HANDLER_MAX;lcv++)		/* check and act on all vectors */
   {
     if(mask[lcv]==TRUE)			/* if int enabled check count */
    5cfc:	fe 01       	movw	r30, r28
    5cfe:	ef 53       	subi	r30, 0x3F	; 63
    5d00:	f4 4d       	sbci	r31, 0xD4	; 212
    5d02:	80 81       	ld	r24, Z
    5d04:	81 30       	cpi	r24, 0x01	; 1
    5d06:	39 f5       	brne	.+78     	; 0x5d56 <__vector_47+0xb0>
     {
       count[lcv]--;			
    5d08:	fe 01       	movw	r30, r28
    5d0a:	ee 0f       	add	r30, r30
    5d0c:	ff 1f       	adc	r31, r31
    5d0e:	ee 0f       	add	r30, r30
    5d10:	ff 1f       	adc	r31, r31
    5d12:	e1 52       	subi	r30, 0x21	; 33
    5d14:	f4 4d       	sbci	r31, 0xD4	; 212
    5d16:	80 81       	ld	r24, Z
    5d18:	91 81       	ldd	r25, Z+1	; 0x01
    5d1a:	a2 81       	ldd	r26, Z+2	; 0x02
    5d1c:	b3 81       	ldd	r27, Z+3	; 0x03
    5d1e:	01 97       	sbiw	r24, 0x01	; 1
    5d20:	a1 09       	sbc	r26, r1
    5d22:	b1 09       	sbc	r27, r1
    5d24:	80 83       	st	Z, r24
    5d26:	91 83       	std	Z+1, r25	; 0x01
    5d28:	a2 83       	std	Z+2, r26	; 0x02
    5d2a:	b3 83       	std	Z+3, r27	; 0x03
       if(count[lcv]==0)		/* if count=0, perform function call and reset */
    5d2c:	80 81       	ld	r24, Z
    5d2e:	91 81       	ldd	r25, Z+1	; 0x01
    5d30:	a2 81       	ldd	r26, Z+2	; 0x02
    5d32:	b3 81       	ldd	r27, Z+3	; 0x03
    5d34:	00 97       	sbiw	r24, 0x00	; 0
    5d36:	a1 05       	cpc	r26, r1
    5d38:	b1 05       	cpc	r27, r1
    5d3a:	69 f4       	brne	.+26     	; 0x5d56 <__vector_47+0xb0>
       {
         count[lcv]=start_count[lcv];
    5d3c:	d7 01       	movw	r26, r14
    5d3e:	2d 91       	ld	r18, X+
    5d40:	3d 91       	ld	r19, X+
    5d42:	4d 91       	ld	r20, X+
    5d44:	5c 91       	ld	r21, X
    5d46:	20 83       	st	Z, r18
    5d48:	31 83       	std	Z+1, r19	; 0x01
    5d4a:	42 83       	std	Z+2, r20	; 0x02
    5d4c:	53 83       	std	Z+3, r21	; 0x03
		 //*
         (*p_handler_func[lcv]) ();
    5d4e:	d8 01       	movw	r26, r16
    5d50:	ed 91       	ld	r30, X+
    5d52:	fc 91       	ld	r31, X
    5d54:	19 95       	eicall
    5d56:	21 96       	adiw	r28, 0x01	; 1
    5d58:	84 e0       	ldi	r24, 0x04	; 4
    5d5a:	90 e0       	ldi	r25, 0x00	; 0
    5d5c:	e8 0e       	add	r14, r24
    5d5e:	f9 1e       	adc	r15, r25
    5d60:	0e 5f       	subi	r16, 0xFE	; 254
    5d62:	1f 4f       	sbci	r17, 0xFF	; 255
 uint8_t lcv;
  
//ledToggle(1);
//xputs(PSTR("\nISR Works\n"));

   for(lcv=0;lcv<HANDLER_MAX;lcv++)		/* check and act on all vectors */
    5d64:	c6 30       	cpi	r28, 0x06	; 6
    5d66:	d1 05       	cpc	r29, r1
    5d68:	49 f6       	brne	.-110    	; 0x5cfc <__vector_47+0x56>
     }
   }



}
    5d6a:	ff 91       	pop	r31
    5d6c:	ef 91       	pop	r30
    5d6e:	df 91       	pop	r29
    5d70:	cf 91       	pop	r28
    5d72:	bf 91       	pop	r27
    5d74:	af 91       	pop	r26
    5d76:	9f 91       	pop	r25
    5d78:	8f 91       	pop	r24
    5d7a:	7f 91       	pop	r23
    5d7c:	6f 91       	pop	r22
    5d7e:	5f 91       	pop	r21
    5d80:	4f 91       	pop	r20
    5d82:	3f 91       	pop	r19
    5d84:	2f 91       	pop	r18
    5d86:	1f 91       	pop	r17
    5d88:	0f 91       	pop	r16
    5d8a:	ff 90       	pop	r15
    5d8c:	ef 90       	pop	r14
    5d8e:	0f 90       	pop	r0
    5d90:	0b be       	out	0x3b, r0	; 59
    5d92:	0f 90       	pop	r0
    5d94:	0a be       	out	0x3a, r0	; 58
    5d96:	0f 90       	pop	r0
    5d98:	09 be       	out	0x39, r0	; 57
    5d9a:	0f 90       	pop	r0
    5d9c:	08 be       	out	0x38, r0	; 56
    5d9e:	0f 90       	pop	r0
    5da0:	0f be       	out	0x3f, r0	; 63
    5da2:	0f 90       	pop	r0
    5da4:	1f 90       	pop	r1
    5da6:	18 95       	reti

00005da8 <Reg_Handler>:
//            long s_cnt = start count of the timer
//            unsigned char priority = priority of the interrupt request
//            unsigned char msk = the mask of the interrupt. TRUE/FALSE value
            
void Reg_Handler(void* fptr,uint32_t s_cnt, uint8_t priority, uint8_t msk)
{	
    5da8:	0f 93       	push	r16
    5daa:	cf 93       	push	r28
    5dac:	df 93       	push	r29
    5dae:	a2 2f       	mov	r26, r18
  mask[priority]=FALSE;             // disable while modifying vector
    5db0:	b0 e0       	ldi	r27, 0x00	; 0
  p_handler_func[priority]=fptr;    // set function pointer
    5db2:	fd 01       	movw	r30, r26
    5db4:	ee 0f       	add	r30, r30
    5db6:	ff 1f       	adc	r31, r31
    5db8:	eb 54       	subi	r30, 0x4B	; 75
    5dba:	f4 4d       	sbci	r31, 0xD4	; 212
    5dbc:	80 83       	st	Z, r24
    5dbe:	91 83       	std	Z+1, r25	; 0x01
  start_count[priority]=s_cnt;      // set start count
    5dc0:	fd 01       	movw	r30, r26
    5dc2:	ee 0f       	add	r30, r30
    5dc4:	ff 1f       	adc	r31, r31
    5dc6:	ee 0f       	add	r30, r30
    5dc8:	ff 1f       	adc	r31, r31
    5dca:	cf 01       	movw	r24, r30
    5dcc:	89 53       	subi	r24, 0x39	; 57
    5dce:	94 4d       	sbci	r25, 0xD4	; 212
    5dd0:	ec 01       	movw	r28, r24
    5dd2:	48 83       	st	Y, r20
    5dd4:	59 83       	std	Y+1, r21	; 0x01
    5dd6:	6a 83       	std	Y+2, r22	; 0x02
    5dd8:	7b 83       	std	Y+3, r23	; 0x03
  count[priority]=s_cnt;            // set count
    5dda:	e1 52       	subi	r30, 0x21	; 33
    5ddc:	f4 4d       	sbci	r31, 0xD4	; 212
    5dde:	40 83       	st	Z, r20
    5de0:	51 83       	std	Z+1, r21	; 0x01
    5de2:	62 83       	std	Z+2, r22	; 0x02
    5de4:	73 83       	std	Z+3, r23	; 0x03
  mask[priority]=msk;				        // set interrupt mask
    5de6:	af 53       	subi	r26, 0x3F	; 63
    5de8:	b4 4d       	sbci	r27, 0xD4	; 212
    5dea:	0c 93       	st	X, r16
}
    5dec:	df 91       	pop	r29
    5dee:	cf 91       	pop	r28
    5df0:	0f 91       	pop	r16
    5df2:	08 95       	ret

00005df4 <Update_Reg_Handler>:

void Update_Reg_Handler(void* fptr, uint32_t s_cnt, uint8_t priority, uint8_t msk)
{	
    5df4:	0f 93       	push	r16
    5df6:	cf 93       	push	r28
    5df8:	df 93       	push	r29
  mask[priority]=FALSE;             // disable while modifying vector
    5dfa:	c2 2f       	mov	r28, r18
    5dfc:	d0 e0       	ldi	r29, 0x00	; 0
  p_handler_func[priority]=fptr;    // set function pointer
    5dfe:	fe 01       	movw	r30, r28
    5e00:	ee 0f       	add	r30, r30
    5e02:	ff 1f       	adc	r31, r31
    5e04:	eb 54       	subi	r30, 0x4B	; 75
    5e06:	f4 4d       	sbci	r31, 0xD4	; 212
    5e08:	80 83       	st	Z, r24
    5e0a:	91 83       	std	Z+1, r25	; 0x01
  start_count[priority]=s_cnt;      // set start count
    5e0c:	ce 01       	movw	r24, r28
    5e0e:	88 0f       	add	r24, r24
    5e10:	99 1f       	adc	r25, r25
    5e12:	88 0f       	add	r24, r24
    5e14:	99 1f       	adc	r25, r25
    5e16:	fc 01       	movw	r30, r24
    5e18:	e9 53       	subi	r30, 0x39	; 57
    5e1a:	f4 4d       	sbci	r31, 0xD4	; 212
    5e1c:	40 83       	st	Z, r20
    5e1e:	51 83       	std	Z+1, r21	; 0x01
    5e20:	62 83       	std	Z+2, r22	; 0x02
    5e22:	73 83       	std	Z+3, r23	; 0x03
	
  //if current count is greater than the desired count, then reset current count
  if (count[priority] > s_cnt){
    5e24:	fc 01       	movw	r30, r24
    5e26:	e1 52       	subi	r30, 0x21	; 33
    5e28:	f4 4d       	sbci	r31, 0xD4	; 212
    5e2a:	80 81       	ld	r24, Z
    5e2c:	91 81       	ldd	r25, Z+1	; 0x01
    5e2e:	a2 81       	ldd	r26, Z+2	; 0x02
    5e30:	b3 81       	ldd	r27, Z+3	; 0x03
    5e32:	48 17       	cp	r20, r24
    5e34:	59 07       	cpc	r21, r25
    5e36:	6a 07       	cpc	r22, r26
    5e38:	7b 07       	cpc	r23, r27
    5e3a:	20 f4       	brcc	.+8      	; 0x5e44 <Update_Reg_Handler+0x50>
    count[priority]=s_cnt;          // set count
    5e3c:	40 83       	st	Z, r20
    5e3e:	51 83       	std	Z+1, r21	; 0x01
    5e40:	62 83       	std	Z+2, r22	; 0x02
    5e42:	73 83       	std	Z+3, r23	; 0x03
  }

  mask[priority]=msk;               // set interrupt mask
    5e44:	cf 53       	subi	r28, 0x3F	; 63
    5e46:	d4 4d       	sbci	r29, 0xD4	; 212
    5e48:	08 83       	st	Y, r16
}
    5e4a:	df 91       	pop	r29
    5e4c:	cf 91       	pop	r28
    5e4e:	0f 91       	pop	r16
    5e50:	08 95       	ret

00005e52 <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    5e52:	dc 01       	movw	r26, r24
    5e54:	fb 01       	movw	r30, r22
	twi->interface = module;
    5e56:	6d 93       	st	X+, r22
    5e58:	7c 93       	st	X, r23
    5e5a:	11 97       	sbiw	r26, 0x01	; 1
	twi->interface->MASTER.CTRLA = intLevel |
    5e5c:	48 63       	ori	r20, 0x38	; 56
    5e5e:	41 83       	std	Z+1, r20	; 0x01
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    5e60:	ed 91       	ld	r30, X+
    5e62:	fc 91       	ld	r31, X
    5e64:	11 97       	sbiw	r26, 0x01	; 1
    5e66:	25 83       	std	Z+5, r18	; 0x05
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    5e68:	ed 91       	ld	r30, X+
    5e6a:	fc 91       	ld	r31, X
    5e6c:	81 e0       	ldi	r24, 0x01	; 1
    5e6e:	84 83       	std	Z+4, r24	; 0x04
}
    5e70:	08 95       	ret

00005e72 <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_IDLE_gc    Bus state is idle.
 *  \retval TWI_MASTER_BUSSTATE_OWNER_gc   Bus state is owned by the master.
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
    5e72:	fc 01       	movw	r30, r24
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm);
    5e74:	01 90       	ld	r0, Z+
    5e76:	f0 81       	ld	r31, Z
    5e78:	e0 2d       	mov	r30, r0
    5e7a:	24 81       	ldd	r18, Z+4	; 0x04
    5e7c:	30 e0       	ldi	r19, 0x00	; 0
    5e7e:	23 70       	andi	r18, 0x03	; 3
    5e80:	30 70       	andi	r19, 0x00	; 0
	return twi_status;
}
    5e82:	c9 01       	movw	r24, r18
    5e84:	08 95       	ret

00005e86 <TWI_MasterReady>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
    5e86:	fc 01       	movw	r30, r24
	bool twi_status = (twi->status == TWIM_STATUS_READY);
    5e88:	85 85       	ldd	r24, Z+13	; 0x0d
    5e8a:	90 e0       	ldi	r25, 0x00	; 0
    5e8c:	88 23       	and	r24, r24
    5e8e:	09 f4       	brne	.+2      	; 0x5e92 <TWI_MasterReady+0xc>
    5e90:	91 e0       	ldi	r25, 0x01	; 1
	return twi_status;
}
    5e92:	89 2f       	mov	r24, r25
    5e94:	08 95       	ret

00005e96 <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
    5e96:	0f 93       	push	r16
    5e98:	cf 93       	push	r28
    5e9a:	df 93       	push	r29
    5e9c:	dc 01       	movw	r26, r24
    5e9e:	72 2f       	mov	r23, r18
  /*Parameter sanity check. */
  if (bytesToWrite > twi->writeBuffSize) {
    5ea0:	17 96       	adiw	r26, 0x07	; 7
    5ea2:	8c 91       	ld	r24, X
    5ea4:	17 97       	sbiw	r26, 0x07	; 7
    5ea6:	82 17       	cp	r24, r18
    5ea8:	08 f4       	brcc	.+2      	; 0x5eac <TWI_MasterWriteRead+0x16>
    5eaa:	48 c0       	rjmp	.+144    	; 0x5f3c <TWI_MasterWriteRead+0xa6>
    return false;
  }
  if (bytesToRead > twi->readBuffSize) {
    5eac:	18 96       	adiw	r26, 0x08	; 8
    5eae:	8c 91       	ld	r24, X
    5eb0:	18 97       	sbiw	r26, 0x08	; 8
    5eb2:	80 17       	cp	r24, r16
    5eb4:	08 f4       	brcc	.+2      	; 0x5eb8 <TWI_MasterWriteRead+0x22>
    5eb6:	42 c0       	rjmp	.+132    	; 0x5f3c <TWI_MasterWriteRead+0xa6>
    return false;
  }

  /*Initiate transaction if bus is ready. */
  if (twi->status == TWIM_STATUS_READY) {
    5eb8:	1d 96       	adiw	r26, 0x0d	; 13
    5eba:	8c 91       	ld	r24, X
    5ebc:	1d 97       	sbiw	r26, 0x0d	; 13
    5ebe:	88 23       	and	r24, r24
    5ec0:	e9 f5       	brne	.+122    	; 0x5f3c <TWI_MasterWriteRead+0xa6>

    twi->status = TWIM_STATUS_BUSY;
    5ec2:	81 e0       	ldi	r24, 0x01	; 1
    5ec4:	1d 96       	adiw	r26, 0x0d	; 13
    5ec6:	8c 93       	st	X, r24
    5ec8:	1d 97       	sbiw	r26, 0x0d	; 13
    twi->result = TWIM_RESULT_UNKNOWN;
    5eca:	1e 96       	adiw	r26, 0x0e	; 14
    5ecc:	1c 92       	st	X, r1
    5ece:	1e 97       	sbiw	r26, 0x0e	; 14

    twi->address = address<<1;
    5ed0:	66 0f       	add	r22, r22
    5ed2:	12 96       	adiw	r26, 0x02	; 2
    5ed4:	6c 93       	st	X, r22
    5ed6:	12 97       	sbiw	r26, 0x02	; 2
    5ed8:	ea 01       	movw	r28, r20
    5eda:	90 e0       	ldi	r25, 0x00	; 0
    5edc:	09 c0       	rjmp	.+18     	; 0x5ef0 <TWI_MasterWriteRead+0x5a>

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    5ede:	13 96       	adiw	r26, 0x03	; 3
    5ee0:	ed 91       	ld	r30, X+
    5ee2:	fc 91       	ld	r31, X
    5ee4:	14 97       	sbiw	r26, 0x04	; 4
    5ee6:	e9 0f       	add	r30, r25
    5ee8:	f1 1d       	adc	r31, r1
    5eea:	89 91       	ld	r24, Y+
    5eec:	80 83       	st	Z, r24
    twi->result = TWIM_RESULT_UNKNOWN;

    twi->address = address<<1;

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    5eee:	9f 5f       	subi	r25, 0xFF	; 255
    5ef0:	97 17       	cp	r25, r23
    5ef2:	a8 f3       	brcs	.-22     	; 0x5ede <TWI_MasterWriteRead+0x48>
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    }

    twi->bytesToWrite = bytesToWrite;
    5ef4:	19 96       	adiw	r26, 0x09	; 9
    5ef6:	7c 93       	st	X, r23
    5ef8:	19 97       	sbiw	r26, 0x09	; 9
    twi->bytesToRead = bytesToRead;
    5efa:	1a 96       	adiw	r26, 0x0a	; 10
    5efc:	0c 93       	st	X, r16
    5efe:	1a 97       	sbiw	r26, 0x0a	; 10
    twi->bytesWritten = 0;
    5f00:	1b 96       	adiw	r26, 0x0b	; 11
    5f02:	1c 92       	st	X, r1
    5f04:	1b 97       	sbiw	r26, 0x0b	; 11
    twi->bytesRead = 0;
    5f06:	1c 96       	adiw	r26, 0x0c	; 12
    5f08:	1c 92       	st	X, r1
    5f0a:	1c 97       	sbiw	r26, 0x0c	; 12

    /* If write command, send the START condition + Address + 'R/_W = 0' */
    if (twi->bytesToWrite > 0) {
    5f0c:	19 96       	adiw	r26, 0x09	; 9
    5f0e:	8c 91       	ld	r24, X
    5f10:	19 97       	sbiw	r26, 0x09	; 9
    5f12:	88 23       	and	r24, r24
    5f14:	29 f0       	breq	.+10     	; 0x5f20 <TWI_MasterWriteRead+0x8a>
      uint8_t writeAddress = twi->address & ~0x01;
    5f16:	12 96       	adiw	r26, 0x02	; 2
    5f18:	8c 91       	ld	r24, X
    5f1a:	12 97       	sbiw	r26, 0x02	; 2
    5f1c:	8e 7f       	andi	r24, 0xFE	; 254
    5f1e:	09 c0       	rjmp	.+18     	; 0x5f32 <TWI_MasterWriteRead+0x9c>
      twi->interface->MASTER.ADDR = writeAddress;
    }

    /* If read command, send the START condition + Address + 'R/_W = 1' */
    else if (twi->bytesToRead > 0) {
    5f20:	1a 96       	adiw	r26, 0x0a	; 10
    5f22:	8c 91       	ld	r24, X
    5f24:	1a 97       	sbiw	r26, 0x0a	; 10
    5f26:	88 23       	and	r24, r24
    5f28:	39 f0       	breq	.+14     	; 0x5f38 <TWI_MasterWriteRead+0xa2>
      uint8_t readAddress = twi->address | 0x01;
    5f2a:	12 96       	adiw	r26, 0x02	; 2
    5f2c:	8c 91       	ld	r24, X
    5f2e:	12 97       	sbiw	r26, 0x02	; 2
    5f30:	81 60       	ori	r24, 0x01	; 1
      twi->interface->MASTER.ADDR = readAddress;
    5f32:	ed 91       	ld	r30, X+
    5f34:	fc 91       	ld	r31, X
    5f36:	86 83       	std	Z+6, r24	; 0x06
    5f38:	81 e0       	ldi	r24, 0x01	; 1
    5f3a:	01 c0       	rjmp	.+2      	; 0x5f3e <TWI_MasterWriteRead+0xa8>
    5f3c:	80 e0       	ldi	r24, 0x00	; 0
    }
    return true;
  } else {
    return false;
  }
}
    5f3e:	df 91       	pop	r29
    5f40:	cf 91       	pop	r28
    5f42:	0f 91       	pop	r16
    5f44:	08 95       	ret

00005f46 <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
    5f46:	0f 93       	push	r16
    5f48:	04 2f       	mov	r16, r20
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
    5f4a:	40 e0       	ldi	r20, 0x00	; 0
    5f4c:	50 e0       	ldi	r21, 0x00	; 0
    5f4e:	20 e0       	ldi	r18, 0x00	; 0
    5f50:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <TWI_MasterWriteRead>
	return twi_status;
}
    5f54:	0f 91       	pop	r16
    5f56:	08 95       	ret

00005f58 <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
    5f58:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
    5f5a:	00 e0       	ldi	r16, 0x00	; 0
    5f5c:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <TWI_MasterWriteRead>
	return twi_status;
}
    5f60:	0f 91       	pop	r16
    5f62:	08 95       	ret

00005f64 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
    5f64:	dc 01       	movw	r26, r24
  uint8_t currentStatus = twi->interface->MASTER.STATUS;
    5f66:	ed 91       	ld	r30, X+
    5f68:	fc 91       	ld	r31, X
    5f6a:	11 97       	sbiw	r26, 0x01	; 1
    5f6c:	94 81       	ldd	r25, Z+4	; 0x04

  /* If bus error. */
  if (currentStatus & TWI_MASTER_BUSERR_bm) {
    5f6e:	92 ff       	sbrs	r25, 2
    5f70:	02 c0       	rjmp	.+4      	; 0x5f76 <TWI_MasterArbitrationLostBusErrorHandler+0x12>
    twi->result = TWIM_RESULT_BUS_ERROR;
    5f72:	84 e0       	ldi	r24, 0x04	; 4
    5f74:	01 c0       	rjmp	.+2      	; 0x5f78 <TWI_MasterArbitrationLostBusErrorHandler+0x14>
  }
  /* If arbitration lost. */
  else {
    twi->result = TWIM_RESULT_ARBITRATION_LOST;
    5f76:	83 e0       	ldi	r24, 0x03	; 3
    5f78:	1e 96       	adiw	r26, 0x0e	; 14
    5f7a:	8c 93       	st	X, r24
    5f7c:	1e 97       	sbiw	r26, 0x0e	; 14
  }

  /* Clear interrupt flag. */
  twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    5f7e:	ed 91       	ld	r30, X+
    5f80:	fc 91       	ld	r31, X
    5f82:	11 97       	sbiw	r26, 0x01	; 1
    5f84:	98 60       	ori	r25, 0x08	; 8
    5f86:	94 83       	std	Z+4, r25	; 0x04
  twi->status = TWIM_STATUS_READY;
    5f88:	1d 96       	adiw	r26, 0x0d	; 13
    5f8a:	1c 92       	st	X, r1
}
    5f8c:	08 95       	ret

00005f8e <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    5f8e:	cf 93       	push	r28
    5f90:	df 93       	push	r29
    5f92:	dc 01       	movw	r26, r24
  /* Local variables used in if tests to avoid compiler warning. */
  uint8_t bytesToWrite  = twi->bytesToWrite;
    5f94:	19 96       	adiw	r26, 0x09	; 9
    5f96:	9c 91       	ld	r25, X
    5f98:	19 97       	sbiw	r26, 0x09	; 9
  uint8_t bytesToRead   = twi->bytesToRead;
    5f9a:	1a 96       	adiw	r26, 0x0a	; 10
    5f9c:	2c 91       	ld	r18, X
    5f9e:	1a 97       	sbiw	r26, 0x0a	; 10

  /* If NOT acknowledged (NACK) by slave cancel the transaction. */
  if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    5fa0:	cd 91       	ld	r28, X+
    5fa2:	dc 91       	ld	r29, X
    5fa4:	11 97       	sbiw	r26, 0x01	; 1
    5fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    5fa8:	84 ff       	sbrs	r24, 4
    5faa:	04 c0       	rjmp	.+8      	; 0x5fb4 <TWI_MasterWriteHandler+0x26>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5fac:	83 e0       	ldi	r24, 0x03	; 3
    5fae:	8b 83       	std	Y+3, r24	; 0x03
    twi->result = TWIM_RESULT_NACK_RECEIVED;
    5fb0:	85 e0       	ldi	r24, 0x05	; 5
    5fb2:	24 c0       	rjmp	.+72     	; 0x5ffc <TWI_MasterWriteHandler+0x6e>
    twi->status = TWIM_STATUS_READY;
  }

  /* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    5fb4:	1b 96       	adiw	r26, 0x0b	; 11
    5fb6:	8c 91       	ld	r24, X
    5fb8:	1b 97       	sbiw	r26, 0x0b	; 11
    5fba:	89 17       	cp	r24, r25
    5fbc:	90 f4       	brcc	.+36     	; 0x5fe2 <TWI_MasterWriteHandler+0x54>
    uint8_t data = *(twi->PwriteData + twi->bytesWritten);
    5fbe:	1b 96       	adiw	r26, 0x0b	; 11
    5fc0:	8c 91       	ld	r24, X
    5fc2:	1b 97       	sbiw	r26, 0x0b	; 11
    5fc4:	13 96       	adiw	r26, 0x03	; 3
    5fc6:	ed 91       	ld	r30, X+
    5fc8:	fc 91       	ld	r31, X
    5fca:	14 97       	sbiw	r26, 0x04	; 4
    5fcc:	e8 0f       	add	r30, r24
    5fce:	f1 1d       	adc	r31, r1
    5fd0:	80 81       	ld	r24, Z
    twi->interface->MASTER.DATA = data;
    5fd2:	8f 83       	std	Y+7, r24	; 0x07
    ++twi->bytesWritten;
    5fd4:	1b 96       	adiw	r26, 0x0b	; 11
    5fd6:	8c 91       	ld	r24, X
    5fd8:	1b 97       	sbiw	r26, 0x0b	; 11
    5fda:	8f 5f       	subi	r24, 0xFF	; 255
    5fdc:	1b 96       	adiw	r26, 0x0b	; 11
    5fde:	8c 93       	st	X, r24
    5fe0:	12 c0       	rjmp	.+36     	; 0x6006 <TWI_MasterWriteHandler+0x78>
  }

  /* If bytes to read, send repeated START condition + Address + 'R/_W = 1' */
  else if (twi->bytesRead < bytesToRead) {
    5fe2:	1c 96       	adiw	r26, 0x0c	; 12
    5fe4:	8c 91       	ld	r24, X
    5fe6:	1c 97       	sbiw	r26, 0x0c	; 12
    5fe8:	82 17       	cp	r24, r18
    5fea:	28 f4       	brcc	.+10     	; 0x5ff6 <TWI_MasterWriteHandler+0x68>
    uint8_t readAddress = twi->address | 0x01;
    5fec:	12 96       	adiw	r26, 0x02	; 2
    5fee:	8c 91       	ld	r24, X
    5ff0:	81 60       	ori	r24, 0x01	; 1
    twi->interface->MASTER.ADDR = readAddress;
    5ff2:	8e 83       	std	Y+6, r24	; 0x06
    5ff4:	08 c0       	rjmp	.+16     	; 0x6006 <TWI_MasterWriteHandler+0x78>
  }

  /* If transaction finished, send STOP condition and set RESULT OK. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5ff6:	83 e0       	ldi	r24, 0x03	; 3
    5ff8:	8b 83       	std	Y+3, r24	; 0x03
	  twi->result = TWIM_RESULT_OK;
    5ffa:	81 e0       	ldi	r24, 0x01	; 1
    5ffc:	1e 96       	adiw	r26, 0x0e	; 14
    5ffe:	8c 93       	st	X, r24
    6000:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    6002:	1d 96       	adiw	r26, 0x0d	; 13
    6004:	1c 92       	st	X, r1
	}
}
    6006:	df 91       	pop	r29
    6008:	cf 91       	pop	r28
    600a:	08 95       	ret

0000600c <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
    600c:	dc 01       	movw	r26, r24
  /* Fetch data if bytes to be read. */
  if (twi->bytesRead < twi->readBuffSize) {
    600e:	1c 96       	adiw	r26, 0x0c	; 12
    6010:	9c 91       	ld	r25, X
    6012:	1c 97       	sbiw	r26, 0x0c	; 12
    6014:	18 96       	adiw	r26, 0x08	; 8
    6016:	8c 91       	ld	r24, X
    6018:	18 97       	sbiw	r26, 0x08	; 8
    601a:	ed 91       	ld	r30, X+
    601c:	fc 91       	ld	r31, X
    601e:	11 97       	sbiw	r26, 0x01	; 1
    6020:	98 17       	cp	r25, r24
    6022:	98 f4       	brcc	.+38     	; 0x604a <TWI_MasterReadHandler+0x3e>
    uint8_t data = twi->interface->MASTER.DATA;
    6024:	97 81       	ldd	r25, Z+7	; 0x07
    *(twi->PreadData + twi->bytesRead) = data;
    6026:	1c 96       	adiw	r26, 0x0c	; 12
    6028:	8c 91       	ld	r24, X
    602a:	1c 97       	sbiw	r26, 0x0c	; 12
    602c:	15 96       	adiw	r26, 0x05	; 5
    602e:	ed 91       	ld	r30, X+
    6030:	fc 91       	ld	r31, X
    6032:	16 97       	sbiw	r26, 0x06	; 6
    6034:	e8 0f       	add	r30, r24
    6036:	f1 1d       	adc	r31, r1
    6038:	90 83       	st	Z, r25
    twi->bytesRead++;
    603a:	1c 96       	adiw	r26, 0x0c	; 12
    603c:	8c 91       	ld	r24, X
    603e:	1c 97       	sbiw	r26, 0x0c	; 12
    6040:	8f 5f       	subi	r24, 0xFF	; 255
    6042:	1c 96       	adiw	r26, 0x0c	; 12
    6044:	8c 93       	st	X, r24
    6046:	1c 97       	sbiw	r26, 0x0c	; 12
    6048:	09 c0       	rjmp	.+18     	; 0x605c <TWI_MasterReadHandler+0x50>
  }

  /* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    604a:	83 e0       	ldi	r24, 0x03	; 3
    604c:	83 83       	std	Z+3, r24	; 0x03
	  twi->result = TWIM_RESULT_BUFFER_OVERFLOW;
    604e:	82 e0       	ldi	r24, 0x02	; 2
    6050:	1e 96       	adiw	r26, 0x0e	; 14
    6052:	8c 93       	st	X, r24
    6054:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    6056:	1d 96       	adiw	r26, 0x0d	; 13
    6058:	1c 92       	st	X, r1
    605a:	1d 97       	sbiw	r26, 0x0d	; 13
  }

  /* Local variable used in if test to avoid compiler warning. */
  uint8_t bytesToRead = twi->bytesToRead;
    605c:	1a 96       	adiw	r26, 0x0a	; 10
    605e:	9c 91       	ld	r25, X
    6060:	1a 97       	sbiw	r26, 0x0a	; 10

  /* If more bytes to read, issue ACK and start a byte read. */
  if (twi->bytesRead < bytesToRead) {
    6062:	1c 96       	adiw	r26, 0x0c	; 12
    6064:	8c 91       	ld	r24, X
    6066:	1c 97       	sbiw	r26, 0x0c	; 12
    6068:	ed 91       	ld	r30, X+
    606a:	fc 91       	ld	r31, X
    606c:	11 97       	sbiw	r26, 0x01	; 1
    606e:	89 17       	cp	r24, r25
    6070:	18 f4       	brcc	.+6      	; 0x6078 <TWI_MasterReadHandler+0x6c>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    6072:	82 e0       	ldi	r24, 0x02	; 2
    6074:	83 83       	std	Z+3, r24	; 0x03
    6076:	08 95       	ret
  }

  /* If transaction finished, issue NACK and STOP condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    6078:	87 e0       	ldi	r24, 0x07	; 7
    607a:	83 83       	std	Z+3, r24	; 0x03
	  twi->result = TWIM_RESULT_OK;
    607c:	81 e0       	ldi	r24, 0x01	; 1
    607e:	1e 96       	adiw	r26, 0x0e	; 14
    6080:	8c 93       	st	X, r24
    6082:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    6084:	1d 96       	adiw	r26, 0x0d	; 13
    6086:	1c 92       	st	X, r1
    6088:	08 95       	ret

0000608a <TWI_MasterInterruptHandler>:
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
    608a:	dc 01       	movw	r26, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    608c:	ed 91       	ld	r30, X+
    608e:	fc 91       	ld	r31, X
    6090:	11 97       	sbiw	r26, 0x01	; 1
    6092:	44 81       	ldd	r20, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    6094:	24 2f       	mov	r18, r20
    6096:	30 e0       	ldi	r19, 0x00	; 0
    6098:	c9 01       	movw	r24, r18
    609a:	8c 70       	andi	r24, 0x0C	; 12
    609c:	90 70       	andi	r25, 0x00	; 0
    609e:	89 2b       	or	r24, r25
    60a0:	21 f0       	breq	.+8      	; 0x60aa <TWI_MasterInterruptHandler+0x20>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    60a2:	cd 01       	movw	r24, r26
    60a4:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <TWI_MasterArbitrationLostBusErrorHandler>
    60a8:	08 95       	ret
  }

  /* If master write interrupt. */
  else if (currentStatus & TWI_MASTER_WIF_bm) {
    60aa:	46 ff       	sbrs	r20, 6
    60ac:	04 c0       	rjmp	.+8      	; 0x60b6 <TWI_MasterInterruptHandler+0x2c>
    TWI_MasterWriteHandler(twi);
    60ae:	cd 01       	movw	r24, r26
    60b0:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <TWI_MasterWriteHandler>
    60b4:	08 95       	ret
  }

	/* If master read interrupt. */
  else if (currentStatus & TWI_MASTER_RIF_bm) {
    60b6:	47 ff       	sbrs	r20, 7
    60b8:	04 c0       	rjmp	.+8      	; 0x60c2 <TWI_MasterInterruptHandler+0x38>
    TWI_MasterReadHandler(twi);
    60ba:	cd 01       	movw	r24, r26
    60bc:	0e 94 06 30 	call	0x600c	; 0x600c <TWI_MasterReadHandler>
    60c0:	08 95       	ret
  }

	/* If unexpected state. */
  else {
    twi->result = TWIM_RESULT_FAIL;
    60c2:	86 e0       	ldi	r24, 0x06	; 6
    60c4:	1e 96       	adiw	r26, 0x0e	; 14
    60c6:	8c 93       	st	X, r24
    60c8:	1e 97       	sbiw	r26, 0x0e	; 14
    twi->status = TWIM_STATUS_READY;
    60ca:	1d 96       	adiw	r26, 0x0d	; 13
    60cc:	1c 92       	st	X, r1
    60ce:	08 95       	ret

000060d0 <TWI_MasterReleaseBuff>:
 }
}


void TWI_MasterReleaseBuff(TWI_Master_t *twi)
{
    60d0:	0f 93       	push	r16
    60d2:	1f 93       	push	r17
    60d4:	8c 01       	movw	r16, r24
 free(twi->PreadData);
    60d6:	fc 01       	movw	r30, r24
    60d8:	85 81       	ldd	r24, Z+5	; 0x05
    60da:	96 81       	ldd	r25, Z+6	; 0x06
    60dc:	0e 94 92 58 	call	0xb124	; 0xb124 <free>
 free(twi->PwriteData);
    60e0:	f8 01       	movw	r30, r16
    60e2:	83 81       	ldd	r24, Z+3	; 0x03
    60e4:	94 81       	ldd	r25, Z+4	; 0x04
    60e6:	0e 94 92 58 	call	0xb124	; 0xb124 <free>
}
    60ea:	1f 91       	pop	r17
    60ec:	0f 91       	pop	r16
    60ee:	08 95       	ret

000060f0 <TWI_MasterCreateBuff>:
#include "twi.h"

void TWI_MasterCreateBuff(TWI_Master_t *twi, 
                          uint8_t mode)
{
    60f0:	cf 93       	push	r28
    60f2:	df 93       	push	r29
    60f4:	ec 01       	movw	r28, r24
if (mode == 0xff) {
    60f6:	6f 3f       	cpi	r22, 0xFF	; 255
    60f8:	79 f4       	brne	.+30     	; 0x6118 <TWI_MasterCreateBuff+0x28>
 twi->PreadData = malloc(136);
    60fa:	88 e8       	ldi	r24, 0x88	; 136
    60fc:	90 e0       	ldi	r25, 0x00	; 0
    60fe:	0e 94 e5 57 	call	0xafca	; 0xafca <malloc>
    6102:	8d 83       	std	Y+5, r24	; 0x05
    6104:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(136);
    6106:	88 e8       	ldi	r24, 0x88	; 136
    6108:	90 e0       	ldi	r25, 0x00	; 0
    610a:	0e 94 e5 57 	call	0xafca	; 0xafca <malloc>
    610e:	8b 83       	std	Y+3, r24	; 0x03
    6110:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 136;
    6112:	88 e8       	ldi	r24, 0x88	; 136
    6114:	8f 83       	std	Y+7, r24	; 0x07
    6116:	0f c0       	rjmp	.+30     	; 0x6136 <TWI_MasterCreateBuff+0x46>
 twi->readBuffSize = 136;
}
else {
 twi->PreadData = malloc(30);
    6118:	8e e1       	ldi	r24, 0x1E	; 30
    611a:	90 e0       	ldi	r25, 0x00	; 0
    611c:	0e 94 e5 57 	call	0xafca	; 0xafca <malloc>
    6120:	8d 83       	std	Y+5, r24	; 0x05
    6122:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(50);
    6124:	82 e3       	ldi	r24, 0x32	; 50
    6126:	90 e0       	ldi	r25, 0x00	; 0
    6128:	0e 94 e5 57 	call	0xafca	; 0xafca <malloc>
    612c:	8b 83       	std	Y+3, r24	; 0x03
    612e:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 100;
    6130:	84 e6       	ldi	r24, 0x64	; 100
    6132:	8f 83       	std	Y+7, r24	; 0x07
 twi->readBuffSize = 50;
    6134:	82 e3       	ldi	r24, 0x32	; 50
    6136:	88 87       	std	Y+8, r24	; 0x08
 }
}
    6138:	df 91       	pop	r29
    613a:	cf 91       	pop	r28
    613c:	08 95       	ret

0000613e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to store the file information */
)
{
    613e:	0f 93       	push	r16
    6140:	1f 93       	push	r17
    6142:	cf 93       	push	r28
    6144:	df 93       	push	r29
    6146:	fc 01       	movw	r30, r24
    6148:	8b 01       	movw	r16, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    614a:	eb 01       	movw	r28, r22
    614c:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    614e:	86 85       	ldd	r24, Z+14	; 0x0e
    6150:	97 85       	ldd	r25, Z+15	; 0x0f
    6152:	a0 89       	ldd	r26, Z+16	; 0x10
    6154:	b1 89       	ldd	r27, Z+17	; 0x11
    6156:	00 97       	sbiw	r24, 0x00	; 0
    6158:	a1 05       	cpc	r26, r1
    615a:	b1 05       	cpc	r27, r1
    615c:	09 f4       	brne	.+2      	; 0x6160 <get_fileinfo+0x22>
    615e:	63 c0       	rjmp	.+198    	; 0x6226 <get_fileinfo+0xe8>
		dir = dj->dir;
    6160:	22 89       	ldd	r18, Z+18	; 0x12
    6162:	33 89       	ldd	r19, Z+19	; 0x13
		nt = dir[DIR_NTres];		/* NT flag */
    6164:	d9 01       	movw	r26, r18
    6166:	1c 96       	adiw	r26, 0x0c	; 12
    6168:	9c 91       	ld	r25, X
    616a:	40 e0       	ldi	r20, 0x00	; 0
    616c:	50 e0       	ldi	r21, 0x00	; 0
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
    616e:	69 2f       	mov	r22, r25
    6170:	70 e0       	ldi	r23, 0x00	; 0
    6172:	68 70       	andi	r22, 0x08	; 8
    6174:	70 70       	andi	r23, 0x00	; 0
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    6176:	f9 01       	movw	r30, r18
    6178:	e4 0f       	add	r30, r20
    617a:	f5 1f       	adc	r31, r21
    617c:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    617e:	e0 32       	cpi	r30, 0x20	; 32
    6180:	89 f0       	breq	.+34     	; 0x61a4 <get_fileinfo+0x66>
			if (c == 0x05) c = 0xE5;
    6182:	e5 30       	cpi	r30, 0x05	; 5
    6184:	09 f4       	brne	.+2      	; 0x6188 <get_fileinfo+0x4a>
    6186:	e5 ee       	ldi	r30, 0xE5	; 229
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
    6188:	61 15       	cp	r22, r1
    618a:	71 05       	cpc	r23, r1
    618c:	29 f0       	breq	.+10     	; 0x6198 <get_fileinfo+0x5a>
    618e:	8e 2f       	mov	r24, r30
    6190:	81 54       	subi	r24, 0x41	; 65
    6192:	8a 31       	cpi	r24, 0x1A	; 26
    6194:	08 f4       	brcc	.+2      	; 0x6198 <get_fileinfo+0x5a>
    6196:	e0 5e       	subi	r30, 0xE0	; 224
			*p++ = c;
    6198:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    619a:	4f 5f       	subi	r20, 0xFF	; 255
    619c:	5f 4f       	sbci	r21, 0xFF	; 255
    619e:	48 30       	cpi	r20, 0x08	; 8
    61a0:	51 05       	cpc	r21, r1
    61a2:	49 f7       	brne	.-46     	; 0x6176 <get_fileinfo+0x38>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    61a4:	f9 01       	movw	r30, r18
    61a6:	80 85       	ldd	r24, Z+8	; 0x08
    61a8:	80 32       	cpi	r24, 0x20	; 32
    61aa:	11 f4       	brne	.+4      	; 0x61b0 <get_fileinfo+0x72>
    61ac:	fe 01       	movw	r30, r28
    61ae:	1d c0       	rjmp	.+58     	; 0x61ea <get_fileinfo+0xac>
			*p++ = '.';
    61b0:	fe 01       	movw	r30, r28
    61b2:	8e e2       	ldi	r24, 0x2E	; 46
    61b4:	81 93       	st	Z+, r24
    61b6:	d9 01       	movw	r26, r18
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
    61b8:	49 2f       	mov	r20, r25
    61ba:	50 e0       	ldi	r21, 0x00	; 0
    61bc:	40 71       	andi	r20, 0x10	; 16
    61be:	50 70       	andi	r21, 0x00	; 0
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    61c0:	be 01       	movw	r22, r28
    61c2:	6c 5f       	subi	r22, 0xFC	; 252
    61c4:	7f 4f       	sbci	r23, 0xFF	; 255
				c = dir[i];
    61c6:	18 96       	adiw	r26, 0x08	; 8
    61c8:	9c 91       	ld	r25, X
    61ca:	18 97       	sbiw	r26, 0x08	; 8
				if (c == ' ') break;
    61cc:	90 32       	cpi	r25, 0x20	; 32
    61ce:	69 f0       	breq	.+26     	; 0x61ea <get_fileinfo+0xac>
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
    61d0:	41 15       	cp	r20, r1
    61d2:	51 05       	cpc	r21, r1
    61d4:	29 f0       	breq	.+10     	; 0x61e0 <get_fileinfo+0xa2>
    61d6:	89 2f       	mov	r24, r25
    61d8:	81 54       	subi	r24, 0x41	; 65
    61da:	8a 31       	cpi	r24, 0x1A	; 26
    61dc:	08 f4       	brcc	.+2      	; 0x61e0 <get_fileinfo+0xa2>
    61de:	90 5e       	subi	r25, 0xE0	; 224
				*p++ = c;
    61e0:	91 93       	st	Z+, r25
    61e2:	11 96       	adiw	r26, 0x01	; 1
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    61e4:	e6 17       	cp	r30, r22
    61e6:	f7 07       	cpc	r31, r23
    61e8:	71 f7       	brne	.-36     	; 0x61c6 <get_fileinfo+0x88>
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    61ea:	d9 01       	movw	r26, r18
    61ec:	1b 96       	adiw	r26, 0x0b	; 11
    61ee:	8c 91       	ld	r24, X
    61f0:	1b 97       	sbiw	r26, 0x0b	; 11
    61f2:	e8 01       	movw	r28, r16
    61f4:	88 87       	std	Y+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    61f6:	5c 96       	adiw	r26, 0x1c	; 28
    61f8:	8d 91       	ld	r24, X+
    61fa:	9d 91       	ld	r25, X+
    61fc:	0d 90       	ld	r0, X+
    61fe:	bc 91       	ld	r27, X
    6200:	a0 2d       	mov	r26, r0
    6202:	88 83       	st	Y, r24
    6204:	99 83       	std	Y+1, r25	; 0x01
    6206:	aa 83       	std	Y+2, r26	; 0x02
    6208:	bb 83       	std	Y+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    620a:	d9 01       	movw	r26, r18
    620c:	58 96       	adiw	r26, 0x18	; 24
    620e:	8d 91       	ld	r24, X+
    6210:	9c 91       	ld	r25, X
    6212:	59 97       	sbiw	r26, 0x19	; 25
    6214:	8c 83       	std	Y+4, r24	; 0x04
    6216:	9d 83       	std	Y+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    6218:	56 96       	adiw	r26, 0x16	; 22
    621a:	8d 91       	ld	r24, X+
    621c:	9c 91       	ld	r25, X
    621e:	57 97       	sbiw	r26, 0x17	; 23
    6220:	8e 83       	std	Y+6, r24	; 0x06
    6222:	9f 83       	std	Y+7, r25	; 0x07
    6224:	ef 01       	movw	r28, r30
	}
	*p = 0;
    6226:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    6228:	df 91       	pop	r29
    622a:	cf 91       	pop	r28
    622c:	1f 91       	pop	r17
    622e:	0f 91       	pop	r16
    6230:	08 95       	ret

00006232 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    6232:	cf 93       	push	r28
    6234:	df 93       	push	r29
    6236:	eb 01       	movw	r28, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    6238:	82 30       	cpi	r24, 0x02	; 2
    623a:	18 f0       	brcs	.+6      	; 0x6242 <f_mount+0x10>
    623c:	2b e0       	ldi	r18, 0x0B	; 11
    623e:	30 e0       	ldi	r19, 0x00	; 0
    6240:	18 c0       	rjmp	.+48     	; 0x6272 <f_mount+0x40>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    6242:	a8 2f       	mov	r26, r24
    6244:	b0 e0       	ldi	r27, 0x00	; 0
    6246:	fd 01       	movw	r30, r26
    6248:	ee 0f       	add	r30, r30
    624a:	ff 1f       	adc	r31, r31
    624c:	eb 59       	subi	r30, 0x9B	; 155
    624e:	fa 4d       	sbci	r31, 0xDA	; 218
    6250:	01 90       	ld	r0, Z+
    6252:	f0 81       	ld	r31, Z
    6254:	e0 2d       	mov	r30, r0

	if (rfs) {
    6256:	30 97       	sbiw	r30, 0x00	; 0
    6258:	09 f0       	breq	.+2      	; 0x625c <f_mount+0x2a>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    625a:	10 82       	st	Z, r1
	}

	if (fs) {
    625c:	20 97       	sbiw	r28, 0x00	; 0
    625e:	09 f0       	breq	.+2      	; 0x6262 <f_mount+0x30>
		fs->fs_type = 0;			/* Clear new fs object */
    6260:	18 82       	st	Y, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    6262:	aa 0f       	add	r26, r26
    6264:	bb 1f       	adc	r27, r27
    6266:	ab 59       	subi	r26, 0x9B	; 155
    6268:	ba 4d       	sbci	r27, 0xDA	; 218
    626a:	cd 93       	st	X+, r28
    626c:	dc 93       	st	X, r29
    626e:	20 e0       	ldi	r18, 0x00	; 0
    6270:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
    6272:	c9 01       	movw	r24, r18
    6274:	df 91       	pop	r29
    6276:	cf 91       	pop	r28
    6278:	08 95       	ret

0000627a <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    627a:	82 30       	cpi	r24, 0x02	; 2
    627c:	18 f0       	brcs	.+6      	; 0x6284 <f_chdrive+0xa>
    627e:	2b e0       	ldi	r18, 0x0B	; 11
    6280:	30 e0       	ldi	r19, 0x00	; 0
    6282:	04 c0       	rjmp	.+8      	; 0x628c <f_chdrive+0x12>

	Drive = drv;
    6284:	80 93 6b 25 	sts	0x256B, r24
    6288:	20 e0       	ldi	r18, 0x00	; 0
    628a:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
    628c:	c9 01       	movw	r24, r18
    628e:	08 95       	ret

00006290 <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    6290:	a5 e2       	ldi	r26, 0x25	; 37
    6292:	b0 e0       	ldi	r27, 0x00	; 0
    6294:	ee e4       	ldi	r30, 0x4E	; 78
    6296:	f1 e3       	ldi	r31, 0x31	; 49
    6298:	0c 94 a8 57 	jmp	0xaf50	; 0xaf50 <__prologue_saves__>
    629c:	38 2e       	mov	r3, r24
    629e:	26 2e       	mov	r2, r22
    62a0:	8a 01       	movw	r16, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    62a2:	21 e0       	ldi	r18, 0x01	; 1
    62a4:	28 17       	cp	r18, r24
    62a6:	18 f4       	brcc	.+6      	; 0x62ae <f_mkfs+0x1e>
    62a8:	2b e0       	ldi	r18, 0x0B	; 11
    62aa:	30 e0       	ldi	r19, 0x00	; 0
    62ac:	58 c4       	rjmp	.+2224   	; 0x6b5e <f_mkfs+0x8ce>
	if (partition >= 2) return FR_MKFS_ABORTED;
    62ae:	31 e0       	ldi	r19, 0x01	; 1
    62b0:	36 17       	cp	r19, r22
    62b2:	08 f4       	brcc	.+2      	; 0x62b6 <f_mkfs+0x26>
    62b4:	4f c4       	rjmp	.+2206   	; 0x6b54 <f_mkfs+0x8c4>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
    62b6:	e8 2f       	mov	r30, r24
    62b8:	f0 e0       	ldi	r31, 0x00	; 0
    62ba:	ee 0f       	add	r30, r30
    62bc:	ff 1f       	adc	r31, r31
    62be:	eb 59       	subi	r30, 0x9B	; 155
    62c0:	fa 4d       	sbci	r31, 0xDA	; 218
    62c2:	80 80       	ld	r8, Z
    62c4:	91 80       	ldd	r9, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    62c6:	81 14       	cp	r8, r1
    62c8:	91 04       	cpc	r9, r1
    62ca:	19 f4       	brne	.+6      	; 0x62d2 <f_mkfs+0x42>
    62cc:	2c e0       	ldi	r18, 0x0C	; 12
    62ce:	30 e0       	ldi	r19, 0x00	; 0
    62d0:	46 c4       	rjmp	.+2188   	; 0x6b5e <f_mkfs+0x8ce>
	fs->fs_type = 0;
    62d2:	d4 01       	movw	r26, r8
    62d4:	1c 92       	st	X, r1
	drv = LD2PD(drv);

	/* Get disk statics */
	stat = disk_initialize(drv);
    62d6:	0e 94 81 53 	call	0xa702	; 0xa702 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    62da:	80 ff       	sbrs	r24, 0
    62dc:	03 c0       	rjmp	.+6      	; 0x62e4 <f_mkfs+0x54>
    62de:	23 e0       	ldi	r18, 0x03	; 3
    62e0:	30 e0       	ldi	r19, 0x00	; 0
    62e2:	3d c4       	rjmp	.+2170   	; 0x6b5e <f_mkfs+0x8ce>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    62e4:	82 ff       	sbrs	r24, 2
    62e6:	03 c0       	rjmp	.+6      	; 0x62ee <f_mkfs+0x5e>
    62e8:	2a e0       	ldi	r18, 0x0A	; 10
    62ea:	30 e0       	ldi	r19, 0x00	; 0
    62ec:	38 c4       	rjmp	.+2160   	; 0x6b5e <f_mkfs+0x8ce>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
    62ee:	83 2d       	mov	r24, r3
    62f0:	61 e0       	ldi	r22, 0x01	; 1
    62f2:	ae 01       	movw	r20, r28
    62f4:	4f 5f       	subi	r20, 0xFF	; 255
    62f6:	5f 4f       	sbci	r21, 0xFF	; 255
    62f8:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <disk_ioctl>
    62fc:	89 2b       	or	r24, r25
    62fe:	09 f0       	breq	.+2      	; 0x6302 <f_mkfs+0x72>
    6300:	29 c4       	rjmp	.+2130   	; 0x6b54 <f_mkfs+0x8c4>
    6302:	89 81       	ldd	r24, Y+1	; 0x01
    6304:	9a 81       	ldd	r25, Y+2	; 0x02
    6306:	ab 81       	ldd	r26, Y+3	; 0x03
    6308:	bc 81       	ldd	r27, Y+4	; 0x04
    630a:	80 3d       	cpi	r24, 0xD0	; 208
    630c:	e7 e0       	ldi	r30, 0x07	; 7
    630e:	9e 07       	cpc	r25, r30
    6310:	e0 e0       	ldi	r30, 0x00	; 0
    6312:	ae 07       	cpc	r26, r30
    6314:	e0 e0       	ldi	r30, 0x00	; 0
    6316:	be 07       	cpc	r27, r30
    6318:	08 f4       	brcc	.+2      	; 0x631c <f_mkfs+0x8c>
    631a:	1c c4       	rjmp	.+2104   	; 0x6b54 <f_mkfs+0x8c4>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
    631c:	81 50       	subi	r24, 0x01	; 1
    631e:	90 40       	sbci	r25, 0x00	; 0
    6320:	a0 4d       	sbci	r26, 0xD0	; 208
    6322:	b7 40       	sbci	r27, 0x07	; 7
    6324:	40 f0       	brcs	.+16     	; 0x6336 <f_mkfs+0xa6>
    6326:	80 e0       	ldi	r24, 0x00	; 0
    6328:	90 e0       	ldi	r25, 0x00	; 0
    632a:	a0 ed       	ldi	r26, 0xD0	; 208
    632c:	b7 e0       	ldi	r27, 0x07	; 7
    632e:	89 83       	std	Y+1, r24	; 0x01
    6330:	9a 83       	std	Y+2, r25	; 0x02
    6332:	ab 83       	std	Y+3, r26	; 0x03
    6334:	bc 83       	std	Y+4, r27	; 0x04
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
    6336:	22 20       	and	r2, r2
    6338:	29 f0       	breq	.+10     	; 0x6344 <f_mkfs+0xb4>
    633a:	1b 8e       	std	Y+27, r1	; 0x1b
    633c:	1c 8e       	std	Y+28, r1	; 0x1c
    633e:	1d 8e       	std	Y+29, r1	; 0x1d
    6340:	1e 8e       	std	Y+30, r1	; 0x1e
    6342:	08 c0       	rjmp	.+16     	; 0x6354 <f_mkfs+0xc4>
    6344:	2f e3       	ldi	r18, 0x3F	; 63
    6346:	30 e0       	ldi	r19, 0x00	; 0
    6348:	40 e0       	ldi	r20, 0x00	; 0
    634a:	50 e0       	ldi	r21, 0x00	; 0
    634c:	2b 8f       	std	Y+27, r18	; 0x1b
    634e:	3c 8f       	std	Y+28, r19	; 0x1c
    6350:	4d 8f       	std	Y+29, r20	; 0x1d
    6352:	5e 8f       	std	Y+30, r21	; 0x1e
	n_part -= b_part;
    6354:	a9 80       	ldd	r10, Y+1	; 0x01
    6356:	ba 80       	ldd	r11, Y+2	; 0x02
    6358:	cb 80       	ldd	r12, Y+3	; 0x03
    635a:	dc 80       	ldd	r13, Y+4	; 0x04
    635c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    635e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6360:	ad 8d       	ldd	r26, Y+29	; 0x1d
    6362:	be 8d       	ldd	r27, Y+30	; 0x1e
    6364:	a8 1a       	sub	r10, r24
    6366:	b9 0a       	sbc	r11, r25
    6368:	ca 0a       	sbc	r12, r26
    636a:	db 0a       	sbc	r13, r27
    636c:	80 e0       	ldi	r24, 0x00	; 0
    636e:	92 e0       	ldi	r25, 0x02	; 2
    6370:	a0 e0       	ldi	r26, 0x00	; 0
    6372:	b0 e0       	ldi	r27, 0x00	; 0
    6374:	20 e0       	ldi	r18, 0x00	; 0
    6376:	30 e0       	ldi	r19, 0x00	; 0
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
    6378:	a8 01       	movw	r20, r16
    637a:	60 e0       	ldi	r22, 0x00	; 0
    637c:	70 e0       	ldi	r23, 0x00	; 0
    637e:	09 c0       	rjmp	.+18     	; 0x6392 <f_mkfs+0x102>
    6380:	88 0f       	add	r24, r24
    6382:	99 1f       	adc	r25, r25
    6384:	aa 1f       	adc	r26, r26
    6386:	bb 1f       	adc	r27, r27
    6388:	2f 5f       	subi	r18, 0xFF	; 255
    638a:	3f 4f       	sbci	r19, 0xFF	; 255
    638c:	27 30       	cpi	r18, 0x07	; 7
    638e:	31 05       	cpc	r19, r1
    6390:	31 f0       	breq	.+12     	; 0x639e <f_mkfs+0x10e>
    6392:	84 17       	cp	r24, r20
    6394:	95 07       	cpc	r25, r21
    6396:	a6 07       	cpc	r26, r22
    6398:	b7 07       	cpc	r27, r23
    639a:	91 f7       	brne	.-28     	; 0x6380 <f_mkfs+0xf0>
    639c:	05 c0       	rjmp	.+10     	; 0x63a8 <f_mkfs+0x118>
	if (d != allocsize) allocsize = 0;
    639e:	84 17       	cp	r24, r20
    63a0:	95 07       	cpc	r25, r21
    63a2:	a6 07       	cpc	r26, r22
    63a4:	b7 07       	cpc	r27, r23
    63a6:	19 f4       	brne	.+6      	; 0x63ae <f_mkfs+0x11e>
	if (!allocsize) {					/* Auto selection of cluster size */
    63a8:	01 15       	cp	r16, r1
    63aa:	11 05       	cpc	r17, r1
    63ac:	11 f5       	brne	.+68     	; 0x63f2 <f_mkfs+0x162>
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
    63ae:	e9 e2       	ldi	r30, 0x29	; 41
    63b0:	f4 e2       	ldi	r31, 0x24	; 36
    63b2:	20 e0       	ldi	r18, 0x00	; 0
    63b4:	30 e0       	ldi	r19, 0x00	; 0
    63b6:	40 e0       	ldi	r20, 0x00	; 0
    63b8:	50 e0       	ldi	r21, 0x00	; 0
    63ba:	81 91       	ld	r24, Z+
    63bc:	91 91       	ld	r25, Z+
    63be:	a1 91       	ld	r26, Z+
    63c0:	b1 91       	ld	r27, Z+
    63c2:	b9 01       	movw	r22, r18
    63c4:	14 2f       	mov	r17, r20
    63c6:	05 2f       	mov	r16, r21
    63c8:	2f 5f       	subi	r18, 0xFF	; 255
    63ca:	3f 4f       	sbci	r19, 0xFF	; 255
    63cc:	4f 4f       	sbci	r20, 0xFF	; 255
    63ce:	5f 4f       	sbci	r21, 0xFF	; 255
    63d0:	a8 16       	cp	r10, r24
    63d2:	b9 06       	cpc	r11, r25
    63d4:	ca 06       	cpc	r12, r26
    63d6:	db 06       	cpc	r13, r27
    63d8:	80 f3       	brcs	.-32     	; 0x63ba <f_mkfs+0x12a>
    63da:	cb 01       	movw	r24, r22
    63dc:	6d 83       	std	Y+5, r22	; 0x05
    63de:	9e 83       	std	Y+6, r25	; 0x06
    63e0:	1f 83       	std	Y+7, r17	; 0x07
    63e2:	08 87       	std	Y+8, r16	; 0x08
		allocsize = cstbl[n];
    63e4:	fb 01       	movw	r30, r22
    63e6:	ee 0f       	add	r30, r30
    63e8:	ff 1f       	adc	r31, r31
    63ea:	ed 5e       	subi	r30, 0xED	; 237
    63ec:	fb 4d       	sbci	r31, 0xDB	; 219
    63ee:	00 81       	ld	r16, Z
    63f0:	11 81       	ldd	r17, Z+1	; 0x01
	}
	if (allocsize < SS(fs)) allocsize = SS(fs);
    63f2:	92 e0       	ldi	r25, 0x02	; 2
    63f4:	00 30       	cpi	r16, 0x00	; 0
    63f6:	19 07       	cpc	r17, r25
    63f8:	10 f4       	brcc	.+4      	; 0x63fe <f_mkfs+0x16e>
    63fa:	00 e0       	ldi	r16, 0x00	; 0
    63fc:	12 e0       	ldi	r17, 0x02	; 2

	allocsize /= SS(fs);		/* Number of sectors per cluster */
    63fe:	d8 01       	movw	r26, r16
    6400:	ab 2f       	mov	r26, r27
    6402:	bb 27       	eor	r27, r27
    6404:	a6 95       	lsr	r26
    6406:	ad 8b       	std	Y+21, r26	; 0x15
    6408:	be 8b       	std	Y+22, r27	; 0x16

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
    640a:	9d 01       	movw	r18, r26
    640c:	40 e0       	ldi	r20, 0x00	; 0
    640e:	50 e0       	ldi	r21, 0x00	; 0
    6410:	29 8b       	std	Y+17, r18	; 0x11
    6412:	3a 8b       	std	Y+18, r19	; 0x12
    6414:	4b 8b       	std	Y+19, r20	; 0x13
    6416:	5c 8b       	std	Y+20, r21	; 0x14
    6418:	c6 01       	movw	r24, r12
    641a:	b5 01       	movw	r22, r10
    641c:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    6420:	c9 01       	movw	r24, r18
    6422:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clst >= 0xFF5) fmt = FS_FAT16;
    6424:	85 3f       	cpi	r24, 0xF5	; 245
    6426:	5f e0       	ldi	r21, 0x0F	; 15
    6428:	95 07       	cpc	r25, r21
    642a:	50 e0       	ldi	r21, 0x00	; 0
    642c:	a5 07       	cpc	r26, r21
    642e:	50 e0       	ldi	r21, 0x00	; 0
    6430:	b5 07       	cpc	r27, r21
    6432:	08 f4       	brcc	.+2      	; 0x6436 <f_mkfs+0x1a6>
    6434:	99 c3       	rjmp	.+1842   	; 0x6b68 <f_mkfs+0x8d8>
    6436:	22 2d       	mov	r18, r2
    6438:	30 e0       	ldi	r19, 0x00	; 0
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
    643a:	85 3f       	cpi	r24, 0xF5	; 245
    643c:	ef ef       	ldi	r30, 0xFF	; 255
    643e:	9e 07       	cpc	r25, r30
    6440:	e0 e0       	ldi	r30, 0x00	; 0
    6442:	ae 07       	cpc	r26, r30
    6444:	e0 e0       	ldi	r30, 0x00	; 0
    6446:	be 07       	cpc	r27, r30
    6448:	30 f5       	brcc	.+76     	; 0x6496 <f_mkfs+0x206>
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
    644a:	7c 01       	movw	r14, r24
    644c:	8d 01       	movw	r16, r26
    644e:	ee 0c       	add	r14, r14
    6450:	ff 1c       	adc	r15, r15
    6452:	00 1f       	adc	r16, r16
    6454:	11 1f       	adc	r17, r17
    6456:	83 e0       	ldi	r24, 0x03	; 3
    6458:	92 e0       	ldi	r25, 0x02	; 2
    645a:	a0 e0       	ldi	r26, 0x00	; 0
    645c:	b0 e0       	ldi	r27, 0x00	; 0
    645e:	e8 0e       	add	r14, r24
    6460:	f9 1e       	adc	r15, r25
    6462:	0a 1f       	adc	r16, r26
    6464:	1b 1f       	adc	r17, r27
    6466:	f9 e0       	ldi	r31, 0x09	; 9
    6468:	16 95       	lsr	r17
    646a:	07 95       	ror	r16
    646c:	f7 94       	ror	r15
    646e:	e7 94       	ror	r14
    6470:	fa 95       	dec	r31
    6472:	d1 f7       	brne	.-12     	; 0x6468 <f_mkfs+0x1d8>
		n_rsv = 1 + partition;
    6474:	2f 5f       	subi	r18, 0xFF	; 255
    6476:	3f 4f       	sbci	r19, 0xFF	; 255
    6478:	29 01       	movw	r4, r18
    647a:	66 24       	eor	r6, r6
    647c:	57 fc       	sbrc	r5, 7
    647e:	60 94       	com	r6
    6480:	76 2c       	mov	r7, r6
    6482:	20 e2       	ldi	r18, 0x20	; 32
    6484:	30 e0       	ldi	r19, 0x00	; 0
    6486:	40 e0       	ldi	r20, 0x00	; 0
    6488:	50 e0       	ldi	r21, 0x00	; 0
    648a:	2f 8b       	std	Y+23, r18	; 0x17
    648c:	38 8f       	std	Y+24, r19	; 0x18
    648e:	49 8f       	std	Y+25, r20	; 0x19
    6490:	5a 8f       	std	Y+26, r21	; 0x1a
    6492:	32 e0       	ldi	r19, 0x02	; 2
    6494:	9c c3       	rjmp	.+1848   	; 0x6bce <f_mkfs+0x93e>
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    6496:	7c 01       	movw	r14, r24
    6498:	8d 01       	movw	r16, r26
    649a:	e2 e0       	ldi	r30, 0x02	; 2
    649c:	ee 0c       	add	r14, r14
    649e:	ff 1c       	adc	r15, r15
    64a0:	00 1f       	adc	r16, r16
    64a2:	11 1f       	adc	r17, r17
    64a4:	ea 95       	dec	r30
    64a6:	d1 f7       	brne	.-12     	; 0x649c <f_mkfs+0x20c>
    64a8:	87 e0       	ldi	r24, 0x07	; 7
    64aa:	92 e0       	ldi	r25, 0x02	; 2
    64ac:	a0 e0       	ldi	r26, 0x00	; 0
    64ae:	b0 e0       	ldi	r27, 0x00	; 0
    64b0:	e8 0e       	add	r14, r24
    64b2:	f9 1e       	adc	r15, r25
    64b4:	0a 1f       	adc	r16, r26
    64b6:	1b 1f       	adc	r17, r27
    64b8:	79 e0       	ldi	r23, 0x09	; 9
    64ba:	16 95       	lsr	r17
    64bc:	07 95       	ror	r16
    64be:	f7 94       	ror	r15
    64c0:	e7 94       	ror	r14
    64c2:	7a 95       	dec	r23
    64c4:	d1 f7       	brne	.-12     	; 0x64ba <f_mkfs+0x22a>
		n_rsv = 33 - partition;
    64c6:	81 e2       	ldi	r24, 0x21	; 33
    64c8:	90 e0       	ldi	r25, 0x00	; 0
    64ca:	82 1b       	sub	r24, r18
    64cc:	93 0b       	sbc	r25, r19
    64ce:	2c 01       	movw	r4, r24
    64d0:	66 24       	eor	r6, r6
    64d2:	57 fc       	sbrc	r5, 7
    64d4:	60 94       	com	r6
    64d6:	76 2c       	mov	r7, r6
    64d8:	1f 8a       	std	Y+23, r1	; 0x17
    64da:	18 8e       	std	Y+24, r1	; 0x18
    64dc:	19 8e       	std	Y+25, r1	; 0x19
    64de:	1a 8e       	std	Y+26, r1	; 0x1a
    64e0:	93 e0       	ldi	r25, 0x03	; 3
    64e2:	9f 8f       	std	Y+31, r25	; 0x1f
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
	n_part -= b_part;
    64e4:	a9 82       	std	Y+1, r10	; 0x01
    64e6:	ba 82       	std	Y+2, r11	; 0x02
    64e8:	cb 82       	std	Y+3, r12	; 0x03
    64ea:	dc 82       	std	Y+4, r13	; 0x04
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
    64ec:	83 2d       	mov	r24, r3
    64ee:	63 e0       	ldi	r22, 0x03	; 3
    64f0:	ae 01       	movw	r20, r28
    64f2:	4b 5f       	subi	r20, 0xFB	; 251
    64f4:	5f 4f       	sbci	r21, 0xFF	; 255
    64f6:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <disk_ioctl>
    64fa:	89 2b       	or	r24, r25
    64fc:	09 f0       	breq	.+2      	; 0x6500 <f_mkfs+0x270>
    64fe:	2a c3       	rjmp	.+1620   	; 0x6b54 <f_mkfs+0x8c4>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
    6500:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6502:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6504:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6506:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6508:	24 0d       	add	r18, r4
    650a:	35 1d       	adc	r19, r5
    650c:	46 1d       	adc	r20, r6
    650e:	57 1d       	adc	r21, r7
    6510:	2d 87       	std	Y+13, r18	; 0x0d
    6512:	3e 87       	std	Y+14, r19	; 0x0e
    6514:	4f 87       	std	Y+15, r20	; 0x0f
    6516:	58 8b       	std	Y+16, r21	; 0x10
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
    6518:	2f 89       	ldd	r18, Y+23	; 0x17
    651a:	38 8d       	ldd	r19, Y+24	; 0x18
    651c:	49 8d       	ldd	r20, Y+25	; 0x19
    651e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    6520:	2e 0d       	add	r18, r14
    6522:	3f 1d       	adc	r19, r15
    6524:	40 1f       	adc	r20, r16
    6526:	51 1f       	adc	r21, r17
    6528:	8d 85       	ldd	r24, Y+13	; 0x0d
    652a:	9e 85       	ldd	r25, Y+14	; 0x0e
    652c:	af 85       	ldd	r26, Y+15	; 0x0f
    652e:	b8 89       	ldd	r27, Y+16	; 0x10
    6530:	28 0f       	add	r18, r24
    6532:	39 1f       	adc	r19, r25
    6534:	4a 1f       	adc	r20, r26
    6536:	5b 1f       	adc	r21, r27

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    6538:	8d 81       	ldd	r24, Y+5	; 0x05
    653a:	9e 81       	ldd	r25, Y+6	; 0x06
    653c:	af 81       	ldd	r26, Y+7	; 0x07
    653e:	b8 85       	ldd	r27, Y+8	; 0x08
    6540:	5c 01       	movw	r10, r24
    6542:	6d 01       	movw	r12, r26
    6544:	08 94       	sec
    6546:	a1 08       	sbc	r10, r1
    6548:	b1 08       	sbc	r11, r1
    654a:	c1 08       	sbc	r12, r1
    654c:	d1 08       	sbc	r13, r1
    654e:	a2 0e       	add	r10, r18
    6550:	b3 1e       	adc	r11, r19
    6552:	c4 1e       	adc	r12, r20
    6554:	d5 1e       	adc	r13, r21
    6556:	b0 95       	com	r27
    6558:	a0 95       	com	r26
    655a:	90 95       	com	r25
    655c:	81 95       	neg	r24
    655e:	9f 4f       	sbci	r25, 0xFF	; 255
    6560:	af 4f       	sbci	r26, 0xFF	; 255
    6562:	bf 4f       	sbci	r27, 0xFF	; 255
    6564:	a8 22       	and	r10, r24
    6566:	b9 22       	and	r11, r25
    6568:	ca 22       	and	r12, r26
    656a:	db 22       	and	r13, r27
	n_fat += (n - b_data) / N_FATS;
    656c:	d8 01       	movw	r26, r16
    656e:	c7 01       	movw	r24, r14
    6570:	82 1b       	sub	r24, r18
    6572:	93 0b       	sbc	r25, r19
    6574:	a4 0b       	sbc	r26, r20
    6576:	b5 0b       	sbc	r27, r21
    6578:	8a 0d       	add	r24, r10
    657a:	9b 1d       	adc	r25, r11
    657c:	ac 1d       	adc	r26, r12
    657e:	bd 1d       	adc	r27, r13
    6580:	89 87       	std	Y+9, r24	; 0x09
    6582:	9a 87       	std	Y+10, r25	; 0x0a
    6584:	ab 87       	std	Y+11, r26	; 0x0b
    6586:	bc 87       	std	Y+12, r27	; 0x0c
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
    6588:	e9 80       	ldd	r14, Y+1	; 0x01
    658a:	fa 80       	ldd	r15, Y+2	; 0x02
    658c:	0b 81       	ldd	r16, Y+3	; 0x03
    658e:	1c 81       	ldd	r17, Y+4	; 0x04
    6590:	c8 01       	movw	r24, r16
    6592:	b7 01       	movw	r22, r14
    6594:	64 19       	sub	r22, r4
    6596:	75 09       	sbc	r23, r5
    6598:	86 09       	sbc	r24, r6
    659a:	97 09       	sbc	r25, r7
    659c:	29 85       	ldd	r18, Y+9	; 0x09
    659e:	3a 85       	ldd	r19, Y+10	; 0x0a
    65a0:	4b 85       	ldd	r20, Y+11	; 0x0b
    65a2:	5c 85       	ldd	r21, Y+12	; 0x0c
    65a4:	62 1b       	sub	r22, r18
    65a6:	73 0b       	sbc	r23, r19
    65a8:	84 0b       	sbc	r24, r20
    65aa:	95 0b       	sbc	r25, r21
    65ac:	2f 89       	ldd	r18, Y+23	; 0x17
    65ae:	38 8d       	ldd	r19, Y+24	; 0x18
    65b0:	49 8d       	ldd	r20, Y+25	; 0x19
    65b2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    65b4:	62 1b       	sub	r22, r18
    65b6:	73 0b       	sbc	r23, r19
    65b8:	84 0b       	sbc	r24, r20
    65ba:	95 0b       	sbc	r25, r21
    65bc:	29 89       	ldd	r18, Y+17	; 0x11
    65be:	3a 89       	ldd	r19, Y+18	; 0x12
    65c0:	4b 89       	ldd	r20, Y+19	; 0x13
    65c2:	5c 89       	ldd	r21, Y+20	; 0x14
    65c4:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    65c8:	2a a3       	std	Y+34, r18	; 0x22
    65ca:	3b a3       	std	Y+35, r19	; 0x23
    65cc:	4c a3       	std	Y+36, r20	; 0x24
    65ce:	5d a3       	std	Y+37, r21	; 0x25
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
    65d0:	3f 8d       	ldd	r19, Y+31	; 0x1f
    65d2:	32 30       	cpi	r19, 0x02	; 2
    65d4:	51 f4       	brne	.+20     	; 0x65ea <f_mkfs+0x35a>
    65d6:	8a a1       	ldd	r24, Y+34	; 0x22
    65d8:	9b a1       	ldd	r25, Y+35	; 0x23
    65da:	ac a1       	ldd	r26, Y+36	; 0x24
    65dc:	bd a1       	ldd	r27, Y+37	; 0x25
    65de:	85 5f       	subi	r24, 0xF5	; 245
    65e0:	9f 40       	sbci	r25, 0x0F	; 15
    65e2:	a0 40       	sbci	r26, 0x00	; 0
    65e4:	b0 40       	sbci	r27, 0x00	; 0
    65e6:	70 f4       	brcc	.+28     	; 0x6604 <f_mkfs+0x374>
    65e8:	b5 c2       	rjmp	.+1386   	; 0x6b54 <f_mkfs+0x8c4>
    65ea:	ff 8d       	ldd	r31, Y+31	; 0x1f
    65ec:	f3 30       	cpi	r31, 0x03	; 3
    65ee:	51 f4       	brne	.+20     	; 0x6604 <f_mkfs+0x374>
    65f0:	2a a1       	ldd	r18, Y+34	; 0x22
    65f2:	3b a1       	ldd	r19, Y+35	; 0x23
    65f4:	4c a1       	ldd	r20, Y+36	; 0x24
    65f6:	5d a1       	ldd	r21, Y+37	; 0x25
    65f8:	25 5f       	subi	r18, 0xF5	; 245
    65fa:	3f 4f       	sbci	r19, 0xFF	; 255
    65fc:	40 40       	sbci	r20, 0x00	; 0
    65fe:	50 40       	sbci	r21, 0x00	; 0
    6600:	08 f4       	brcc	.+2      	; 0x6604 <f_mkfs+0x374>
    6602:	a8 c2       	rjmp	.+1360   	; 0x6b54 <f_mkfs+0x8c4>
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    6604:	ad 82       	std	Y+5, r10	; 0x05
    6606:	be 82       	std	Y+6, r11	; 0x06
    6608:	cf 82       	std	Y+7, r12	; 0x07
    660a:	d8 86       	std	Y+8, r13	; 0x08
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
    660c:	22 20       	and	r2, r2
    660e:	11 f0       	breq	.+4      	; 0x6614 <f_mkfs+0x384>
    6610:	10 ef       	ldi	r17, 0xF0	; 240
    6612:	85 c0       	rjmp	.+266    	; 0x671e <f_mkfs+0x48e>
		DWORD n_disk = b_part + n_part;
    6614:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6616:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6618:	4d 8d       	ldd	r20, Y+29	; 0x1d
    661a:	5e 8d       	ldd	r21, Y+30	; 0x1e
    661c:	2e 0d       	add	r18, r14
    661e:	3f 1d       	adc	r19, r15
    6620:	40 1f       	adc	r20, r16
    6622:	51 1f       	adc	r21, r17

		mem_set(fs->win, 0, SS(fs));
    6624:	62 e3       	ldi	r22, 0x32	; 50
    6626:	e6 2e       	mov	r14, r22
    6628:	f1 2c       	mov	r15, r1
    662a:	e8 0c       	add	r14, r8
    662c:	f9 1c       	adc	r15, r9
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    662e:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = (char)val;
    6630:	c4 01       	movw	r24, r8
    6632:	8e 5c       	subi	r24, 0xCE	; 206
    6634:	9d 4f       	sbci	r25, 0xFD	; 253
    6636:	01 c0       	rjmp	.+2      	; 0x663a <f_mkfs+0x3aa>
    6638:	11 92       	st	Z+, r1
    663a:	e8 17       	cp	r30, r24
    663c:	f9 07       	cpc	r31, r25
    663e:	e1 f7       	brne	.-8      	; 0x6638 <f_mkfs+0x3a8>
	/* Create partition table if needed */
	if (!partition) {
		DWORD n_disk = b_part + n_part;

		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
    6640:	84 01       	movw	r16, r8
    6642:	00 51       	subi	r16, 0x10	; 16
    6644:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
    6646:	80 e8       	ldi	r24, 0x80	; 128
    6648:	91 e0       	ldi	r25, 0x01	; 1
    664a:	a1 e0       	ldi	r26, 0x01	; 1
    664c:	b0 e0       	ldi	r27, 0x00	; 0
    664e:	f8 01       	movw	r30, r16
    6650:	80 83       	st	Z, r24
    6652:	91 83       	std	Z+1, r25	; 0x01
    6654:	a2 83       	std	Z+2, r26	; 0x02
    6656:	b3 83       	std	Z+3, r27	; 0x03
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    6658:	20 30       	cpi	r18, 0x00	; 0
    665a:	f4 e0       	ldi	r31, 0x04	; 4
    665c:	3f 07       	cpc	r19, r31
    665e:	fb ef       	ldi	r31, 0xFB	; 251
    6660:	4f 07       	cpc	r20, r31
    6662:	f0 e0       	ldi	r31, 0x00	; 0
    6664:	5f 07       	cpc	r21, r31
    6666:	b0 f4       	brcc	.+44     	; 0x6694 <f_mkfs+0x404>
			n_disk = n_disk / 63 / 255;
    6668:	ca 01       	movw	r24, r20
    666a:	b9 01       	movw	r22, r18
    666c:	21 ec       	ldi	r18, 0xC1	; 193
    666e:	3e e3       	ldi	r19, 0x3E	; 62
    6670:	40 e0       	ldi	r20, 0x00	; 0
    6672:	50 e0       	ldi	r21, 0x00	; 0
    6674:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    6678:	c9 01       	movw	r24, r18
    667a:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    667c:	f8 01       	movw	r30, r16
    667e:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    6680:	22 e0       	ldi	r18, 0x02	; 2
    6682:	b6 95       	lsr	r27
    6684:	a7 95       	ror	r26
    6686:	97 95       	ror	r25
    6688:	87 95       	ror	r24
    668a:	2a 95       	dec	r18
    668c:	d1 f7       	brne	.-12     	; 0x6682 <f_mkfs+0x3f2>
    668e:	8f 63       	ori	r24, 0x3F	; 63
    6690:	86 83       	std	Z+6, r24	; 0x06
    6692:	07 c0       	rjmp	.+14     	; 0x66a2 <f_mkfs+0x412>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    6694:	8f ef       	ldi	r24, 0xFF	; 255
    6696:	9f ef       	ldi	r25, 0xFF	; 255
    6698:	d8 01       	movw	r26, r16
    669a:	16 96       	adiw	r26, 0x06	; 6
    669c:	8d 93       	st	X+, r24
    669e:	9c 93       	st	X, r25
    66a0:	17 97       	sbiw	r26, 0x07	; 7
		}
		tbl[5] = 254;
    66a2:	8e ef       	ldi	r24, 0xFE	; 254
    66a4:	f8 01       	movw	r30, r16
    66a6:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)			/* System ID */
    66a8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    66aa:	f3 30       	cpi	r31, 0x03	; 3
    66ac:	81 f0       	breq	.+32     	; 0x66ce <f_mkfs+0x43e>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
    66ae:	89 81       	ldd	r24, Y+1	; 0x01
    66b0:	9a 81       	ldd	r25, Y+2	; 0x02
    66b2:	ab 81       	ldd	r26, Y+3	; 0x03
    66b4:	bc 81       	ldd	r27, Y+4	; 0x04
    66b6:	80 50       	subi	r24, 0x00	; 0
    66b8:	90 40       	sbci	r25, 0x00	; 0
    66ba:	a1 40       	sbci	r26, 0x01	; 1
    66bc:	b0 40       	sbci	r27, 0x00	; 0
    66be:	10 f0       	brcs	.+4      	; 0x66c4 <f_mkfs+0x434>
    66c0:	86 e0       	ldi	r24, 0x06	; 6
    66c2:	01 c0       	rjmp	.+2      	; 0x66c6 <f_mkfs+0x436>
    66c4:	84 e0       	ldi	r24, 0x04	; 4
    66c6:	d8 01       	movw	r26, r16
    66c8:	14 96       	adiw	r26, 0x04	; 4
    66ca:	8c 93       	st	X, r24
    66cc:	03 c0       	rjmp	.+6      	; 0x66d4 <f_mkfs+0x444>
		else
			tbl[4] = 0x0c;
    66ce:	8c e0       	ldi	r24, 0x0C	; 12
    66d0:	f8 01       	movw	r30, r16
    66d2:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    66d4:	8f e3       	ldi	r24, 0x3F	; 63
    66d6:	90 e0       	ldi	r25, 0x00	; 0
    66d8:	a0 e0       	ldi	r26, 0x00	; 0
    66da:	b0 e0       	ldi	r27, 0x00	; 0
    66dc:	f8 01       	movw	r30, r16
    66de:	80 87       	std	Z+8, r24	; 0x08
    66e0:	91 87       	std	Z+9, r25	; 0x09
    66e2:	a2 87       	std	Z+10, r26	; 0x0a
    66e4:	b3 87       	std	Z+11, r27	; 0x0b
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
    66e6:	89 81       	ldd	r24, Y+1	; 0x01
    66e8:	9a 81       	ldd	r25, Y+2	; 0x02
    66ea:	ab 81       	ldd	r26, Y+3	; 0x03
    66ec:	bc 81       	ldd	r27, Y+4	; 0x04
    66ee:	84 87       	std	Z+12, r24	; 0x0c
    66f0:	95 87       	std	Z+13, r25	; 0x0d
    66f2:	a6 87       	std	Z+14, r26	; 0x0e
    66f4:	b7 87       	std	Z+15, r27	; 0x0f
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
    66f6:	00 5c       	subi	r16, 0xC0	; 192
    66f8:	1f 4f       	sbci	r17, 0xFF	; 255
    66fa:	85 e5       	ldi	r24, 0x55	; 85
    66fc:	9a ea       	ldi	r25, 0xAA	; 170
    66fe:	d8 01       	movw	r26, r16
    6700:	8d 93       	st	X+, r24
    6702:	9c 93       	st	X, r25
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    6704:	83 2d       	mov	r24, r3
    6706:	b7 01       	movw	r22, r14
    6708:	20 e0       	ldi	r18, 0x00	; 0
    670a:	30 e0       	ldi	r19, 0x00	; 0
    670c:	40 e0       	ldi	r20, 0x00	; 0
    670e:	50 e0       	ldi	r21, 0x00	; 0
    6710:	01 e0       	ldi	r16, 0x01	; 1
    6712:	0e 94 f7 50 	call	0xa1ee	; 0xa1ee <disk_write>
    6716:	89 2b       	or	r24, r25
    6718:	09 f0       	breq	.+2      	; 0x671c <f_mkfs+0x48c>
    671a:	1f c2       	rjmp	.+1086   	; 0x6b5a <f_mkfs+0x8ca>
    671c:	18 ef       	ldi	r17, 0xF8	; 248
	} else {
		partition = 0xF0;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
    671e:	72 e3       	ldi	r23, 0x32	; 50
    6720:	e7 2e       	mov	r14, r23
    6722:	f1 2c       	mov	r15, r1
    6724:	e8 0c       	add	r14, r8
    6726:	f9 1c       	adc	r15, r9
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    6728:	57 01       	movw	r10, r14
    672a:	f7 01       	movw	r30, r14
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    672c:	62 e3       	ldi	r22, 0x32	; 50
    672e:	c6 2e       	mov	r12, r22
    6730:	62 e0       	ldi	r22, 0x02	; 2
    6732:	d6 2e       	mov	r13, r22
    6734:	c8 0c       	add	r12, r8
    6736:	d9 1c       	adc	r13, r9
    6738:	01 c0       	rjmp	.+2      	; 0x673c <f_mkfs+0x4ac>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    673a:	11 92       	st	Z+, r1
    673c:	ec 15       	cp	r30, r12
    673e:	fd 05       	cpc	r31, r13
    6740:	e1 f7       	brne	.-8      	; 0x673a <f_mkfs+0x4aa>
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
    6742:	8b ee       	ldi	r24, 0xEB	; 235
    6744:	9e ef       	ldi	r25, 0xFE	; 254
    6746:	a0 e9       	ldi	r26, 0x90	; 144
    6748:	b0 e0       	ldi	r27, 0x00	; 0
    674a:	f4 01       	movw	r30, r8
    674c:	82 ab       	std	Z+50, r24	; 0x32
    674e:	93 ab       	std	Z+51, r25	; 0x33
    6750:	a4 ab       	std	Z+52, r26	; 0x34
    6752:	b5 ab       	std	Z+53, r27	; 0x35
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
    6754:	80 e0       	ldi	r24, 0x00	; 0
    6756:	92 e0       	ldi	r25, 0x02	; 2
    6758:	d7 01       	movw	r26, r14
    675a:	1b 96       	adiw	r26, 0x0b	; 11
    675c:	8d 93       	st	X+, r24
    675e:	9c 93       	st	X, r25
    6760:	1c 97       	sbiw	r26, 0x0c	; 12
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
    6762:	2d 88       	ldd	r2, Y+21	; 0x15
    6764:	27 ae       	std	Z+63, r2	; 0x3f
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
    6766:	f7 01       	movw	r30, r14
    6768:	46 86       	std	Z+14, r4	; 0x0e
    676a:	57 86       	std	Z+15, r5	; 0x0f
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    676c:	22 e4       	ldi	r18, 0x42	; 66
    676e:	30 e0       	ldi	r19, 0x00	; 0
    6770:	82 0e       	add	r8, r18
    6772:	93 1e       	adc	r9, r19
    6774:	81 e0       	ldi	r24, 0x01	; 1
    6776:	d4 01       	movw	r26, r8
    6778:	8c 93       	st	X, r24
    677a:	ee eb       	ldi	r30, 0xBE	; 190
    677c:	ff ef       	ldi	r31, 0xFF	; 255
    677e:	8e 0e       	add	r8, r30
    6780:	9f 1e       	adc	r9, r31
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
    6782:	8f 89       	ldd	r24, Y+23	; 0x17
    6784:	98 8d       	ldd	r25, Y+24	; 0x18
    6786:	a9 8d       	ldd	r26, Y+25	; 0x19
    6788:	ba 8d       	ldd	r27, Y+26	; 0x1a
    678a:	54 e0       	ldi	r21, 0x04	; 4
    678c:	88 0f       	add	r24, r24
    678e:	99 1f       	adc	r25, r25
    6790:	aa 1f       	adc	r26, r26
    6792:	bb 1f       	adc	r27, r27
    6794:	5a 95       	dec	r21
    6796:	d1 f7       	brne	.-12     	; 0x678c <f_mkfs+0x4fc>
    6798:	f7 01       	movw	r30, r14
    679a:	81 8b       	std	Z+17, r24	; 0x11
    679c:	92 8b       	std	Z+18, r25	; 0x12
	if (n_part < 0x10000) {						/* Number of total sectors */
    679e:	89 81       	ldd	r24, Y+1	; 0x01
    67a0:	9a 81       	ldd	r25, Y+2	; 0x02
    67a2:	ab 81       	ldd	r26, Y+3	; 0x03
    67a4:	bc 81       	ldd	r27, Y+4	; 0x04
    67a6:	80 30       	cpi	r24, 0x00	; 0
    67a8:	f0 e0       	ldi	r31, 0x00	; 0
    67aa:	9f 07       	cpc	r25, r31
    67ac:	f1 e0       	ldi	r31, 0x01	; 1
    67ae:	af 07       	cpc	r26, r31
    67b0:	f0 e0       	ldi	r31, 0x00	; 0
    67b2:	bf 07       	cpc	r27, r31
    67b4:	20 f4       	brcc	.+8      	; 0x67be <f_mkfs+0x52e>
		ST_WORD(tbl+BPB_TotSec16, n_part);
    67b6:	f7 01       	movw	r30, r14
    67b8:	83 8b       	std	Z+19, r24	; 0x13
    67ba:	94 8b       	std	Z+20, r25	; 0x14
    67bc:	05 c0       	rjmp	.+10     	; 0x67c8 <f_mkfs+0x538>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
    67be:	f7 01       	movw	r30, r14
    67c0:	80 a3       	std	Z+32, r24	; 0x20
    67c2:	91 a3       	std	Z+33, r25	; 0x21
    67c4:	a2 a3       	std	Z+34, r26	; 0x22
    67c6:	b3 a3       	std	Z+35, r27	; 0x23
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
    67c8:	27 e4       	ldi	r18, 0x47	; 71
    67ca:	30 e0       	ldi	r19, 0x00	; 0
    67cc:	82 0e       	add	r8, r18
    67ce:	93 1e       	adc	r9, r19
    67d0:	d4 01       	movw	r26, r8
    67d2:	1c 93       	st	X, r17
    67d4:	e9 eb       	ldi	r30, 0xB9	; 185
    67d6:	ff ef       	ldi	r31, 0xFF	; 255
    67d8:	8e 0e       	add	r8, r30
    67da:	9f 1e       	adc	r9, r31
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
    67dc:	8f e3       	ldi	r24, 0x3F	; 63
    67de:	90 e0       	ldi	r25, 0x00	; 0
    67e0:	d7 01       	movw	r26, r14
    67e2:	58 96       	adiw	r26, 0x18	; 24
    67e4:	8d 93       	st	X+, r24
    67e6:	9c 93       	st	X, r25
    67e8:	59 97       	sbiw	r26, 0x19	; 25
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
    67ea:	8f ef       	ldi	r24, 0xFF	; 255
    67ec:	90 e0       	ldi	r25, 0x00	; 0
    67ee:	5a 96       	adiw	r26, 0x1a	; 26
    67f0:	8d 93       	st	X+, r24
    67f2:	9c 93       	st	X, r25
    67f4:	5b 97       	sbiw	r26, 0x1b	; 27
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
    67f6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    67f8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    67fa:	4d 8d       	ldd	r20, Y+29	; 0x1d
    67fc:	5e 8d       	ldd	r21, Y+30	; 0x1e
    67fe:	5c 96       	adiw	r26, 0x1c	; 28
    6800:	2d 93       	st	X+, r18
    6802:	3d 93       	st	X+, r19
    6804:	4d 93       	st	X+, r20
    6806:	5c 93       	st	X, r21
    6808:	5f 97       	sbiw	r26, 0x1f	; 31
	n = get_fattime();							/* Use current time as a VSN */
    680a:	0e 94 7f 54 	call	0xa8fe	; 0xa8fe <get_fattime>
    680e:	6d 83       	std	Y+5, r22	; 0x05
    6810:	7e 83       	std	Y+6, r23	; 0x06
    6812:	8f 83       	std	Y+7, r24	; 0x07
    6814:	98 87       	std	Y+8, r25	; 0x08
	if (fmt != FS_FAT32) {
    6816:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6818:	b3 30       	cpi	r27, 0x03	; 3
    681a:	39 f1       	breq	.+78     	; 0x686a <f_mkfs+0x5da>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
    681c:	f7 01       	movw	r30, r14
    681e:	67 a3       	std	Z+39, r22	; 0x27
    6820:	70 a7       	std	Z+40, r23	; 0x28
    6822:	81 a7       	std	Z+41, r24	; 0x29
    6824:	92 a7       	std	Z+42, r25	; 0x2a
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
    6826:	29 85       	ldd	r18, Y+9	; 0x09
    6828:	3a 85       	ldd	r19, Y+10	; 0x0a
    682a:	26 8b       	std	Z+22, r18	; 0x16
    682c:	37 8b       	std	Z+23, r19	; 0x17
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    682e:	46 e5       	ldi	r20, 0x56	; 86
    6830:	50 e0       	ldi	r21, 0x00	; 0
    6832:	84 0e       	add	r8, r20
    6834:	95 1e       	adc	r9, r21
    6836:	80 e8       	ldi	r24, 0x80	; 128
    6838:	d4 01       	movw	r26, r8
    683a:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    683c:	e2 e0       	ldi	r30, 0x02	; 2
    683e:	f0 e0       	ldi	r31, 0x00	; 0
    6840:	8e 0e       	add	r8, r30
    6842:	9f 1e       	adc	r9, r31
    6844:	89 e2       	ldi	r24, 0x29	; 41
    6846:	d4 01       	movw	r26, r8
    6848:	8c 93       	st	X, r24
    684a:	e8 ea       	ldi	r30, 0xA8	; 168
    684c:	ff ef       	ldi	r31, 0xFF	; 255
    684e:	8e 0e       	add	r8, r30
    6850:	9f 1e       	adc	r9, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    6852:	d7 01       	movw	r26, r14
    6854:	9b 96       	adiw	r26, 0x2b	; 43
    6856:	e0 ee       	ldi	r30, 0xE0	; 224
    6858:	f3 e2       	ldi	r31, 0x23	; 35
    685a:	02 c0       	rjmp	.+4      	; 0x6860 <f_mkfs+0x5d0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    685c:	81 91       	ld	r24, Z+
    685e:	8d 93       	st	X+, r24
    6860:	23 e2       	ldi	r18, 0x23	; 35
    6862:	e3 3f       	cpi	r30, 0xF3	; 243
    6864:	f2 07       	cpc	r31, r18
    6866:	d1 f7       	brne	.-12     	; 0x685c <f_mkfs+0x5cc>
    6868:	48 c0       	rjmp	.+144    	; 0x68fa <f_mkfs+0x66a>
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
    686a:	43 e4       	ldi	r20, 0x43	; 67
    686c:	50 e0       	ldi	r21, 0x00	; 0
    686e:	e4 0e       	add	r14, r20
    6870:	f5 1e       	adc	r15, r21
    6872:	d7 01       	movw	r26, r14
    6874:	6d 93       	st	X+, r22
    6876:	7d 93       	st	X+, r23
    6878:	8d 93       	st	X+, r24
    687a:	9c 93       	st	X, r25
    687c:	13 97       	sbiw	r26, 0x03	; 3
    687e:	ed eb       	ldi	r30, 0xBD	; 189
    6880:	ff ef       	ldi	r31, 0xFF	; 255
    6882:	ee 0e       	add	r14, r30
    6884:	ff 1e       	adc	r15, r31
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
    6886:	29 85       	ldd	r18, Y+9	; 0x09
    6888:	3a 85       	ldd	r19, Y+10	; 0x0a
    688a:	4b 85       	ldd	r20, Y+11	; 0x0b
    688c:	5c 85       	ldd	r21, Y+12	; 0x0c
    688e:	d7 01       	movw	r26, r14
    6890:	94 96       	adiw	r26, 0x24	; 36
    6892:	2d 93       	st	X+, r18
    6894:	3d 93       	st	X+, r19
    6896:	4d 93       	st	X+, r20
    6898:	5c 93       	st	X, r21
    689a:	97 97       	sbiw	r26, 0x27	; 39
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
    689c:	82 e0       	ldi	r24, 0x02	; 2
    689e:	90 e0       	ldi	r25, 0x00	; 0
    68a0:	a0 e0       	ldi	r26, 0x00	; 0
    68a2:	b0 e0       	ldi	r27, 0x00	; 0
    68a4:	f7 01       	movw	r30, r14
    68a6:	84 a7       	std	Z+44, r24	; 0x2c
    68a8:	95 a7       	std	Z+45, r25	; 0x2d
    68aa:	a6 a7       	std	Z+46, r26	; 0x2e
    68ac:	b7 a7       	std	Z+47, r27	; 0x2f
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
    68ae:	81 e0       	ldi	r24, 0x01	; 1
    68b0:	90 e0       	ldi	r25, 0x00	; 0
    68b2:	80 ab       	std	Z+48, r24	; 0x30
    68b4:	91 ab       	std	Z+49, r25	; 0x31
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
    68b6:	86 e0       	ldi	r24, 0x06	; 6
    68b8:	90 e0       	ldi	r25, 0x00	; 0
    68ba:	82 ab       	std	Z+50, r24	; 0x32
    68bc:	93 ab       	std	Z+51, r25	; 0x33
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    68be:	22 e7       	ldi	r18, 0x72	; 114
    68c0:	30 e0       	ldi	r19, 0x00	; 0
    68c2:	82 0e       	add	r8, r18
    68c4:	93 1e       	adc	r9, r19
    68c6:	80 e8       	ldi	r24, 0x80	; 128
    68c8:	d4 01       	movw	r26, r8
    68ca:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    68cc:	e2 e0       	ldi	r30, 0x02	; 2
    68ce:	f0 e0       	ldi	r31, 0x00	; 0
    68d0:	8e 0e       	add	r8, r30
    68d2:	9f 1e       	adc	r9, r31
    68d4:	89 e2       	ldi	r24, 0x29	; 41
    68d6:	d4 01       	movw	r26, r8
    68d8:	8c 93       	st	X, r24
    68da:	ec e8       	ldi	r30, 0x8C	; 140
    68dc:	ff ef       	ldi	r31, 0xFF	; 255
    68de:	8e 0e       	add	r8, r30
    68e0:	9f 1e       	adc	r9, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    68e2:	d7 01       	movw	r26, r14
    68e4:	a9 5b       	subi	r26, 0xB9	; 185
    68e6:	bf 4f       	sbci	r27, 0xFF	; 255
    68e8:	e4 ef       	ldi	r30, 0xF4	; 244
    68ea:	f3 e2       	ldi	r31, 0x23	; 35
    68ec:	02 c0       	rjmp	.+4      	; 0x68f2 <f_mkfs+0x662>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    68ee:	81 91       	ld	r24, Z+
    68f0:	8d 93       	st	X+, r24
    68f2:	24 e2       	ldi	r18, 0x24	; 36
    68f4:	e7 30       	cpi	r30, 0x07	; 7
    68f6:	f2 07       	cpc	r31, r18
    68f8:	d1 f7       	brne	.-12     	; 0x68ee <f_mkfs+0x65e>
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
    68fa:	a7 01       	movw	r20, r14
    68fc:	42 50       	subi	r20, 0x02	; 2
    68fe:	5e 4f       	sbci	r21, 0xFE	; 254
    6900:	48 a3       	std	Y+32, r20	; 0x20
    6902:	59 a3       	std	Y+33, r21	; 0x21
    6904:	85 e5       	ldi	r24, 0x55	; 85
    6906:	9a ea       	ldi	r25, 0xAA	; 170
    6908:	da 01       	movw	r26, r20
    690a:	8d 93       	st	X+, r24
    690c:	9c 93       	st	X, r25
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
    690e:	83 2d       	mov	r24, r3
    6910:	b7 01       	movw	r22, r14
    6912:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6914:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6916:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6918:	5e 8d       	ldd	r21, Y+30	; 0x1e
    691a:	01 e0       	ldi	r16, 0x01	; 1
    691c:	0e 94 f7 50 	call	0xa1ee	; 0xa1ee <disk_write>
    6920:	89 2b       	or	r24, r25
    6922:	09 f0       	breq	.+2      	; 0x6926 <f_mkfs+0x696>
    6924:	1a c1       	rjmp	.+564    	; 0x6b5a <f_mkfs+0x8ca>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
    6926:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6928:	b3 30       	cpi	r27, 0x03	; 3
    692a:	61 f4       	brne	.+24     	; 0x6944 <f_mkfs+0x6b4>
		disk_write(drv, tbl, b_part+6, 1);
    692c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    692e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6930:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6932:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6934:	2a 5f       	subi	r18, 0xFA	; 250
    6936:	3f 4f       	sbci	r19, 0xFF	; 255
    6938:	4f 4f       	sbci	r20, 0xFF	; 255
    693a:	5f 4f       	sbci	r21, 0xFF	; 255
    693c:	83 2d       	mov	r24, r3
    693e:	b7 01       	movw	r22, r14
    6940:	0e 94 f7 50 	call	0xa1ee	; 0xa1ee <disk_write>
    6944:	f7 01       	movw	r30, r14
    6946:	01 c0       	rjmp	.+2      	; 0x694a <f_mkfs+0x6ba>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    6948:	11 92       	st	Z+, r1
    694a:	ec 15       	cp	r30, r12
    694c:	fd 05       	cpc	r31, r13
    694e:	e1 f7       	brne	.-8      	; 0x6948 <f_mkfs+0x6b8>
		disk_write(drv, tbl, b_part+6, 1);

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
		if (fmt != FS_FAT32) {
    6950:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6952:	e3 30       	cpi	r30, 0x03	; 3
    6954:	e9 f0       	breq	.+58     	; 0x6990 <f_mkfs+0x700>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    6956:	e1 30       	cpi	r30, 0x01	; 1
    6958:	29 f0       	breq	.+10     	; 0x6964 <f_mkfs+0x6d4>
    695a:	20 e0       	ldi	r18, 0x00	; 0
    695c:	3f ef       	ldi	r19, 0xFF	; 255
    695e:	4f ef       	ldi	r20, 0xFF	; 255
    6960:	5f ef       	ldi	r21, 0xFF	; 255
    6962:	04 c0       	rjmp	.+8      	; 0x696c <f_mkfs+0x6dc>
    6964:	20 e0       	ldi	r18, 0x00	; 0
    6966:	3f ef       	ldi	r19, 0xFF	; 255
    6968:	4f ef       	ldi	r20, 0xFF	; 255
    696a:	50 e0       	ldi	r21, 0x00	; 0
			n |= partition;
    696c:	81 2f       	mov	r24, r17
    696e:	90 e0       	ldi	r25, 0x00	; 0
    6970:	a0 e0       	ldi	r26, 0x00	; 0
    6972:	b0 e0       	ldi	r27, 0x00	; 0
    6974:	82 2b       	or	r24, r18
    6976:	93 2b       	or	r25, r19
    6978:	a4 2b       	or	r26, r20
    697a:	b5 2b       	or	r27, r21
    697c:	8d 83       	std	Y+5, r24	; 0x05
    697e:	9e 83       	std	Y+6, r25	; 0x06
    6980:	af 83       	std	Y+7, r26	; 0x07
    6982:	b8 87       	std	Y+8, r27	; 0x08
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
    6984:	f4 01       	movw	r30, r8
    6986:	82 ab       	std	Z+50, r24	; 0x32
    6988:	93 ab       	std	Z+51, r25	; 0x33
    698a:	a4 ab       	std	Z+52, r26	; 0x34
    698c:	b5 ab       	std	Z+53, r27	; 0x35
    698e:	1a c0       	rjmp	.+52     	; 0x69c4 <f_mkfs+0x734>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
    6990:	88 ef       	ldi	r24, 0xF8	; 248
    6992:	9f ef       	ldi	r25, 0xFF	; 255
    6994:	af ef       	ldi	r26, 0xFF	; 255
    6996:	bf ef       	ldi	r27, 0xFF	; 255
    6998:	f4 01       	movw	r30, r8
    699a:	82 ab       	std	Z+50, r24	; 0x32
    699c:	93 ab       	std	Z+51, r25	; 0x33
    699e:	a4 ab       	std	Z+52, r26	; 0x34
    69a0:	b5 ab       	std	Z+53, r27	; 0x35
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    69a2:	8f ef       	ldi	r24, 0xFF	; 255
    69a4:	9f ef       	ldi	r25, 0xFF	; 255
    69a6:	af ef       	ldi	r26, 0xFF	; 255
    69a8:	bf ef       	ldi	r27, 0xFF	; 255
    69aa:	f7 01       	movw	r30, r14
    69ac:	84 83       	std	Z+4, r24	; 0x04
    69ae:	95 83       	std	Z+5, r25	; 0x05
    69b0:	a6 83       	std	Z+6, r26	; 0x06
    69b2:	b7 83       	std	Z+7, r27	; 0x07
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    69b4:	8f ef       	ldi	r24, 0xFF	; 255
    69b6:	9f ef       	ldi	r25, 0xFF	; 255
    69b8:	af ef       	ldi	r26, 0xFF	; 255
    69ba:	bf e0       	ldi	r27, 0x0F	; 15
    69bc:	80 87       	std	Z+8, r24	; 0x08
    69be:	91 87       	std	Z+9, r25	; 0x09
    69c0:	a2 87       	std	Z+10, r26	; 0x0a
    69c2:	b3 87       	std	Z+11, r27	; 0x0b
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    69c4:	83 2d       	mov	r24, r3
    69c6:	b7 01       	movw	r22, r14
    69c8:	2d 85       	ldd	r18, Y+13	; 0x0d
    69ca:	3e 85       	ldd	r19, Y+14	; 0x0e
    69cc:	4f 85       	ldd	r20, Y+15	; 0x0f
    69ce:	58 89       	ldd	r21, Y+16	; 0x10
    69d0:	01 e0       	ldi	r16, 0x01	; 1
    69d2:	0e 94 f7 50 	call	0xa1ee	; 0xa1ee <disk_write>
    69d6:	89 2b       	or	r24, r25
    69d8:	21 f0       	breq	.+8      	; 0x69e2 <f_mkfs+0x752>
    69da:	bf c0       	rjmp	.+382    	; 0x6b5a <f_mkfs+0x8ca>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    69dc:	d5 01       	movw	r26, r10
    69de:	1d 92       	st	X+, r1
    69e0:	5d 01       	movw	r10, r26
    69e2:	ac 14       	cp	r10, r12
    69e4:	bd 04       	cpc	r11, r13
    69e6:	d1 f7       	brne	.-12     	; 0x69dc <f_mkfs+0x74c>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    69e8:	ad 84       	ldd	r10, Y+13	; 0x0d
    69ea:	be 84       	ldd	r11, Y+14	; 0x0e
    69ec:	cf 84       	ldd	r12, Y+15	; 0x0f
    69ee:	d8 88       	ldd	r13, Y+16	; 0x10
    69f0:	08 94       	sec
    69f2:	a1 1c       	adc	r10, r1
    69f4:	b1 1c       	adc	r11, r1
    69f6:	c1 1c       	adc	r12, r1
    69f8:	d1 1c       	adc	r13, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    69fa:	81 e0       	ldi	r24, 0x01	; 1
    69fc:	90 e0       	ldi	r25, 0x00	; 0
    69fe:	a0 e0       	ldi	r26, 0x00	; 0
    6a00:	b0 e0       	ldi	r27, 0x00	; 0
    6a02:	16 c0       	rjmp	.+44     	; 0x6a30 <f_mkfs+0x7a0>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    6a04:	83 2d       	mov	r24, r3
    6a06:	b7 01       	movw	r22, r14
    6a08:	a6 01       	movw	r20, r12
    6a0a:	95 01       	movw	r18, r10
    6a0c:	01 e0       	ldi	r16, 0x01	; 1
    6a0e:	0e 94 f7 50 	call	0xa1ee	; 0xa1ee <disk_write>
    6a12:	89 2b       	or	r24, r25
    6a14:	09 f0       	breq	.+2      	; 0x6a18 <f_mkfs+0x788>
    6a16:	a1 c0       	rjmp	.+322    	; 0x6b5a <f_mkfs+0x8ca>
    6a18:	08 94       	sec
    6a1a:	a1 1c       	adc	r10, r1
    6a1c:	b1 1c       	adc	r11, r1
    6a1e:	c1 1c       	adc	r12, r1
    6a20:	d1 1c       	adc	r13, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    6a22:	8d 81       	ldd	r24, Y+5	; 0x05
    6a24:	9e 81       	ldd	r25, Y+6	; 0x06
    6a26:	af 81       	ldd	r26, Y+7	; 0x07
    6a28:	b8 85       	ldd	r27, Y+8	; 0x08
    6a2a:	01 96       	adiw	r24, 0x01	; 1
    6a2c:	a1 1d       	adc	r26, r1
    6a2e:	b1 1d       	adc	r27, r1
    6a30:	8d 83       	std	Y+5, r24	; 0x05
    6a32:	9e 83       	std	Y+6, r25	; 0x06
    6a34:	af 83       	std	Y+7, r26	; 0x07
    6a36:	b8 87       	std	Y+8, r27	; 0x08
    6a38:	8d 81       	ldd	r24, Y+5	; 0x05
    6a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    6a3c:	af 81       	ldd	r26, Y+7	; 0x07
    6a3e:	b8 85       	ldd	r27, Y+8	; 0x08
    6a40:	29 85       	ldd	r18, Y+9	; 0x09
    6a42:	3a 85       	ldd	r19, Y+10	; 0x0a
    6a44:	4b 85       	ldd	r20, Y+11	; 0x0b
    6a46:	5c 85       	ldd	r21, Y+12	; 0x0c
    6a48:	82 17       	cp	r24, r18
    6a4a:	93 07       	cpc	r25, r19
    6a4c:	a4 07       	cpc	r26, r20
    6a4e:	b5 07       	cpc	r27, r21
    6a50:	c8 f2       	brcs	.-78     	; 0x6a04 <f_mkfs+0x774>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
    6a52:	3f 8d       	ldd	r19, Y+31	; 0x1f
    6a54:	33 30       	cpi	r19, 0x03	; 3
    6a56:	09 f0       	breq	.+2      	; 0x6a5a <f_mkfs+0x7ca>
    6a58:	2f 88       	ldd	r2, Y+23	; 0x17
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    6a5a:	25 01       	movw	r4, r10
    6a5c:	36 01       	movw	r6, r12
    6a5e:	08 94       	sec
    6a60:	41 1c       	adc	r4, r1
    6a62:	51 1c       	adc	r5, r1
    6a64:	61 1c       	adc	r6, r1
    6a66:	71 1c       	adc	r7, r1
    6a68:	83 2d       	mov	r24, r3
    6a6a:	b7 01       	movw	r22, r14
    6a6c:	a6 01       	movw	r20, r12
    6a6e:	95 01       	movw	r18, r10
    6a70:	01 e0       	ldi	r16, 0x01	; 1
    6a72:	0e 94 f7 50 	call	0xa1ee	; 0xa1ee <disk_write>
    6a76:	89 2b       	or	r24, r25
    6a78:	09 f0       	breq	.+2      	; 0x6a7c <f_mkfs+0x7ec>
    6a7a:	6f c0       	rjmp	.+222    	; 0x6b5a <f_mkfs+0x8ca>
			return FR_DISK_ERR;
	} while (--m);
    6a7c:	2a 94       	dec	r2
    6a7e:	19 f0       	breq	.+6      	; 0x6a86 <f_mkfs+0x7f6>
    6a80:	63 01       	movw	r12, r6
    6a82:	52 01       	movw	r10, r4
    6a84:	ea cf       	rjmp	.-44     	; 0x6a5a <f_mkfs+0x7ca>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    6a86:	4f 8d       	ldd	r20, Y+31	; 0x1f
    6a88:	43 30       	cpi	r20, 0x03	; 3
    6a8a:	09 f0       	breq	.+2      	; 0x6a8e <f_mkfs+0x7fe>
    6a8c:	57 c0       	rjmp	.+174    	; 0x6b3c <f_mkfs+0x8ac>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    6a8e:	85 e5       	ldi	r24, 0x55	; 85
    6a90:	9a ea       	ldi	r25, 0xAA	; 170
    6a92:	a8 a1       	ldd	r26, Y+32	; 0x20
    6a94:	b9 a1       	ldd	r27, Y+33	; 0x21
    6a96:	8d 93       	st	X+, r24
    6a98:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    6a9a:	82 e5       	ldi	r24, 0x52	; 82
    6a9c:	92 e5       	ldi	r25, 0x52	; 82
    6a9e:	a1 e6       	ldi	r26, 0x61	; 97
    6aa0:	b1 e4       	ldi	r27, 0x41	; 65
    6aa2:	f4 01       	movw	r30, r8
    6aa4:	82 ab       	std	Z+50, r24	; 0x32
    6aa6:	93 ab       	std	Z+51, r25	; 0x33
    6aa8:	a4 ab       	std	Z+52, r26	; 0x34
    6aaa:	b5 ab       	std	Z+53, r27	; 0x35
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    6aac:	24 ee       	ldi	r18, 0xE4	; 228
    6aae:	31 e0       	ldi	r19, 0x01	; 1
    6ab0:	e2 0e       	add	r14, r18
    6ab2:	f3 1e       	adc	r15, r19
    6ab4:	82 e7       	ldi	r24, 0x72	; 114
    6ab6:	92 e7       	ldi	r25, 0x72	; 114
    6ab8:	a1 e4       	ldi	r26, 0x41	; 65
    6aba:	b1 e6       	ldi	r27, 0x61	; 97
    6abc:	f7 01       	movw	r30, r14
    6abe:	81 93       	st	Z+, r24
    6ac0:	91 93       	st	Z+, r25
    6ac2:	a1 93       	st	Z+, r26
    6ac4:	b1 93       	st	Z+, r27
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    6ac6:	2a a1       	ldd	r18, Y+34	; 0x22
    6ac8:	3b a1       	ldd	r19, Y+35	; 0x23
    6aca:	4c a1       	ldd	r20, Y+36	; 0x24
    6acc:	5d a1       	ldd	r21, Y+37	; 0x25
    6ace:	21 50       	subi	r18, 0x01	; 1
    6ad0:	30 40       	sbci	r19, 0x00	; 0
    6ad2:	40 40       	sbci	r20, 0x00	; 0
    6ad4:	50 40       	sbci	r21, 0x00	; 0
    6ad6:	df 01       	movw	r26, r30
    6ad8:	2d 93       	st	X+, r18
    6ada:	3d 93       	st	X+, r19
    6adc:	4d 93       	st	X+, r20
    6ade:	5d 93       	st	X+, r21
    6ae0:	7d 01       	movw	r14, r26
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    6ae2:	8f ef       	ldi	r24, 0xFF	; 255
    6ae4:	9f ef       	ldi	r25, 0xFF	; 255
    6ae6:	af ef       	ldi	r26, 0xFF	; 255
    6ae8:	bf ef       	ldi	r27, 0xFF	; 255
    6aea:	f7 01       	movw	r30, r14
    6aec:	80 83       	st	Z, r24
    6aee:	91 83       	std	Z+1, r25	; 0x01
    6af0:	a2 83       	std	Z+2, r26	; 0x02
    6af2:	b3 83       	std	Z+3, r27	; 0x03
    6af4:	24 e1       	ldi	r18, 0x14	; 20
    6af6:	3e ef       	ldi	r19, 0xFE	; 254
    6af8:	e2 0e       	add	r14, r18
    6afa:	f3 1e       	adc	r15, r19
		disk_write(drv, tbl, b_part+1, 1);
    6afc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6afe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6b00:	ad 8d       	ldd	r26, Y+29	; 0x1d
    6b02:	be 8d       	ldd	r27, Y+30	; 0x1e
    6b04:	01 96       	adiw	r24, 0x01	; 1
    6b06:	a1 1d       	adc	r26, r1
    6b08:	b1 1d       	adc	r27, r1
    6b0a:	8b 8f       	std	Y+27, r24	; 0x1b
    6b0c:	9c 8f       	std	Y+28, r25	; 0x1c
    6b0e:	ad 8f       	std	Y+29, r26	; 0x1d
    6b10:	be 8f       	std	Y+30, r27	; 0x1e
    6b12:	83 2d       	mov	r24, r3
    6b14:	b7 01       	movw	r22, r14
    6b16:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6b18:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6b1a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6b1c:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6b1e:	01 e0       	ldi	r16, 0x01	; 1
    6b20:	0e 94 f7 50 	call	0xa1ee	; 0xa1ee <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
    6b24:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6b26:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6b28:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6b2a:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6b2c:	2a 5f       	subi	r18, 0xFA	; 250
    6b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    6b30:	4f 4f       	sbci	r20, 0xFF	; 255
    6b32:	5f 4f       	sbci	r21, 0xFF	; 255
    6b34:	83 2d       	mov	r24, r3
    6b36:	b7 01       	movw	r22, r14
    6b38:	0e 94 f7 50 	call	0xa1ee	; 0xa1ee <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
    6b3c:	83 2d       	mov	r24, r3
    6b3e:	60 e0       	ldi	r22, 0x00	; 0
    6b40:	40 e0       	ldi	r20, 0x00	; 0
    6b42:	50 e0       	ldi	r21, 0x00	; 0
    6b44:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <disk_ioctl>
    6b48:	00 97       	sbiw	r24, 0x00	; 0
    6b4a:	11 f0       	breq	.+4      	; 0x6b50 <f_mkfs+0x8c0>
    6b4c:	81 e0       	ldi	r24, 0x01	; 1
    6b4e:	90 e0       	ldi	r25, 0x00	; 0
    6b50:	9c 01       	movw	r18, r24
    6b52:	05 c0       	rjmp	.+10     	; 0x6b5e <f_mkfs+0x8ce>
    6b54:	2e e0       	ldi	r18, 0x0E	; 14
    6b56:	30 e0       	ldi	r19, 0x00	; 0
    6b58:	02 c0       	rjmp	.+4      	; 0x6b5e <f_mkfs+0x8ce>
    6b5a:	21 e0       	ldi	r18, 0x01	; 1
    6b5c:	30 e0       	ldi	r19, 0x00	; 0
}
    6b5e:	c9 01       	movw	r24, r18
    6b60:	a5 96       	adiw	r28, 0x25	; 37
    6b62:	e2 e1       	ldi	r30, 0x12	; 18
    6b64:	0c 94 c4 57 	jmp	0xaf88	; 0xaf88 <__epilogue_restores__>
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
    6b68:	7c 01       	movw	r14, r24
    6b6a:	8d 01       	movw	r16, r26
    6b6c:	ee 0c       	add	r14, r14
    6b6e:	ff 1c       	adc	r15, r15
    6b70:	00 1f       	adc	r16, r16
    6b72:	11 1f       	adc	r17, r17
    6b74:	e8 0e       	add	r14, r24
    6b76:	f9 1e       	adc	r15, r25
    6b78:	0a 1f       	adc	r16, r26
    6b7a:	1b 1f       	adc	r17, r27
    6b7c:	08 94       	sec
    6b7e:	e1 1c       	adc	r14, r1
    6b80:	f1 1c       	adc	r15, r1
    6b82:	01 1d       	adc	r16, r1
    6b84:	11 1d       	adc	r17, r1
    6b86:	16 95       	lsr	r17
    6b88:	07 95       	ror	r16
    6b8a:	f7 94       	ror	r15
    6b8c:	e7 94       	ror	r14
    6b8e:	82 e0       	ldi	r24, 0x02	; 2
    6b90:	92 e0       	ldi	r25, 0x02	; 2
    6b92:	a0 e0       	ldi	r26, 0x00	; 0
    6b94:	b0 e0       	ldi	r27, 0x00	; 0
    6b96:	e8 0e       	add	r14, r24
    6b98:	f9 1e       	adc	r15, r25
    6b9a:	0a 1f       	adc	r16, r26
    6b9c:	1b 1f       	adc	r17, r27
    6b9e:	29 e0       	ldi	r18, 0x09	; 9
    6ba0:	16 95       	lsr	r17
    6ba2:	07 95       	ror	r16
    6ba4:	f7 94       	ror	r15
    6ba6:	e7 94       	ror	r14
    6ba8:	2a 95       	dec	r18
    6baa:	d1 f7       	brne	.-12     	; 0x6ba0 <f_mkfs+0x910>
		n_rsv = 1 + partition;
    6bac:	82 2d       	mov	r24, r2
    6bae:	90 e0       	ldi	r25, 0x00	; 0
    6bb0:	01 96       	adiw	r24, 0x01	; 1
    6bb2:	2c 01       	movw	r4, r24
    6bb4:	66 24       	eor	r6, r6
    6bb6:	57 fc       	sbrc	r5, 7
    6bb8:	60 94       	com	r6
    6bba:	76 2c       	mov	r7, r6
    6bbc:	20 e2       	ldi	r18, 0x20	; 32
    6bbe:	30 e0       	ldi	r19, 0x00	; 0
    6bc0:	40 e0       	ldi	r20, 0x00	; 0
    6bc2:	50 e0       	ldi	r21, 0x00	; 0
    6bc4:	2f 8b       	std	Y+23, r18	; 0x17
    6bc6:	38 8f       	std	Y+24, r19	; 0x18
    6bc8:	49 8f       	std	Y+25, r20	; 0x19
    6bca:	5a 8f       	std	Y+26, r21	; 0x1a
    6bcc:	31 e0       	ldi	r19, 0x01	; 1
    6bce:	3f 8f       	std	Y+31, r19	; 0x1f
    6bd0:	89 cc       	rjmp	.-1774   	; 0x64e4 <f_mkfs+0x254>

00006bd2 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    6bd2:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    6bd4:	00 97       	sbiw	r24, 0x00	; 0
    6bd6:	99 f0       	breq	.+38     	; 0x6bfe <validate+0x2c>
    6bd8:	80 81       	ld	r24, Z
    6bda:	88 23       	and	r24, r24
    6bdc:	81 f0       	breq	.+32     	; 0x6bfe <validate+0x2c>
    6bde:	85 81       	ldd	r24, Z+5	; 0x05
    6be0:	96 81       	ldd	r25, Z+6	; 0x06
    6be2:	86 17       	cp	r24, r22
    6be4:	97 07       	cpc	r25, r23
    6be6:	59 f4       	brne	.+22     	; 0x6bfe <validate+0x2c>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    6be8:	81 81       	ldd	r24, Z+1	; 0x01
    6bea:	0e 94 8b 50 	call	0xa116	; 0xa116 <disk_status>
    6bee:	80 fd       	sbrc	r24, 0
    6bf0:	03 c0       	rjmp	.+6      	; 0x6bf8 <validate+0x26>
    6bf2:	20 e0       	ldi	r18, 0x00	; 0
    6bf4:	30 e0       	ldi	r19, 0x00	; 0
    6bf6:	05 c0       	rjmp	.+10     	; 0x6c02 <validate+0x30>
    6bf8:	23 e0       	ldi	r18, 0x03	; 3
    6bfa:	30 e0       	ldi	r19, 0x00	; 0
    6bfc:	02 c0       	rjmp	.+4      	; 0x6c02 <validate+0x30>
    6bfe:	29 e0       	ldi	r18, 0x09	; 9
    6c00:	30 e0       	ldi	r19, 0x00	; 0
		return FR_NOT_READY;

	return FR_OK;
}
    6c02:	c9 01       	movw	r24, r18
    6c04:	08 95       	ret

00006c06 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    6c06:	0f 93       	push	r16
    6c08:	cf 93       	push	r28
    6c0a:	df 93       	push	r29
    6c0c:	ec 01       	movw	r28, r24
    6c0e:	9a 01       	movw	r18, r20
    6c10:	ab 01       	movw	r20, r22
	static const char fatstr[] = "FAT";


	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    6c12:	bc 01       	movw	r22, r24
    6c14:	6e 5c       	subi	r22, 0xCE	; 206
    6c16:	7f 4f       	sbci	r23, 0xFF	; 255
    6c18:	89 81       	ldd	r24, Y+1	; 0x01
    6c1a:	01 e0       	ldi	r16, 0x01	; 1
    6c1c:	0e 94 92 50 	call	0xa124	; 0xa124 <disk_read>
    6c20:	89 2b       	or	r24, r25
    6c22:	11 f0       	breq	.+4      	; 0x6c28 <check_fs+0x22>
    6c24:	23 e0       	ldi	r18, 0x03	; 3
    6c26:	37 c0       	rjmp	.+110    	; 0x6c96 <check_fs+0x90>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    6c28:	c0 5d       	subi	r28, 0xD0	; 208
    6c2a:	dd 4f       	sbci	r29, 0xFD	; 253
    6c2c:	88 81       	ld	r24, Y
    6c2e:	99 81       	ldd	r25, Y+1	; 0x01
    6c30:	c0 53       	subi	r28, 0x30	; 48
    6c32:	d2 40       	sbci	r29, 0x02	; 2
    6c34:	85 55       	subi	r24, 0x55	; 85
    6c36:	9a 4a       	sbci	r25, 0xAA	; 170
    6c38:	11 f0       	breq	.+4      	; 0x6c3e <check_fs+0x38>
    6c3a:	22 e0       	ldi	r18, 0x02	; 2
    6c3c:	2c c0       	rjmp	.+88     	; 0x6c96 <check_fs+0x90>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    6c3e:	de 01       	movw	r26, r28
    6c40:	a8 59       	subi	r26, 0x98	; 152
    6c42:	bf 4f       	sbci	r27, 0xFF	; 255
    6c44:	e5 e5       	ldi	r30, 0x55	; 85
    6c46:	f4 e2       	ldi	r31, 0x24	; 36
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    6c48:	84 e2       	ldi	r24, 0x24	; 36
    6c4a:	e8 35       	cpi	r30, 0x58	; 88
    6c4c:	f8 07       	cpc	r31, r24
    6c4e:	11 f4       	brne	.+4      	; 0x6c54 <check_fs+0x4e>
    6c50:	20 e0       	ldi	r18, 0x00	; 0
    6c52:	21 c0       	rjmp	.+66     	; 0x6c96 <check_fs+0x90>
    6c54:	9c 91       	ld	r25, X
    6c56:	80 81       	ld	r24, Z
    6c58:	98 17       	cp	r25, r24
    6c5a:	19 f4       	brne	.+6      	; 0x6c62 <check_fs+0x5c>
    6c5c:	11 96       	adiw	r26, 0x01	; 1
    6c5e:	31 96       	adiw	r30, 0x01	; 1
    6c60:	f3 cf       	rjmp	.-26     	; 0x6c48 <check_fs+0x42>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    6c62:	de 01       	movw	r26, r28
    6c64:	ac 57       	subi	r26, 0x7C	; 124
    6c66:	bf 4f       	sbci	r27, 0xFF	; 255
    6c68:	e5 e5       	ldi	r30, 0x55	; 85
    6c6a:	f4 e2       	ldi	r31, 0x24	; 36
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    6c6c:	24 e2       	ldi	r18, 0x24	; 36
    6c6e:	e8 35       	cpi	r30, 0x58	; 88
    6c70:	f2 07       	cpc	r31, r18
    6c72:	49 f0       	breq	.+18     	; 0x6c86 <check_fs+0x80>
    6c74:	9c 91       	ld	r25, X
    6c76:	80 81       	ld	r24, Z
    6c78:	98 17       	cp	r25, r24
    6c7a:	11 f0       	breq	.+4      	; 0x6c80 <check_fs+0x7a>
    6c7c:	21 e0       	ldi	r18, 0x01	; 1
    6c7e:	0b c0       	rjmp	.+22     	; 0x6c96 <check_fs+0x90>
    6c80:	11 96       	adiw	r26, 0x01	; 1
    6c82:	31 96       	adiw	r30, 0x01	; 1
    6c84:	f3 cf       	rjmp	.-26     	; 0x6c6c <check_fs+0x66>
    6c86:	20 e0       	ldi	r18, 0x00	; 0
    6c88:	c6 5a       	subi	r28, 0xA6	; 166
    6c8a:	df 4f       	sbci	r29, 0xFF	; 255
    6c8c:	88 81       	ld	r24, Y
    6c8e:	87 ff       	sbrs	r24, 7
    6c90:	21 e0       	ldi	r18, 0x01	; 1
    6c92:	81 e0       	ldi	r24, 0x01	; 1
    6c94:	28 27       	eor	r18, r24
		return 0;
	if (!mem_cmp(&fs->win[BS_FilSysType32], fatstr, 3) && !(fs->win[BPB_ExtFlags] & 0x80))
		return 0;

	return 1;
}
    6c96:	82 2f       	mov	r24, r18
    6c98:	df 91       	pop	r29
    6c9a:	cf 91       	pop	r28
    6c9c:	0f 91       	pop	r16
    6c9e:	08 95       	ret

00006ca0 <auto_mount>:
FRESULT auto_mount (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    6ca0:	a0 e0       	ldi	r26, 0x00	; 0
    6ca2:	b0 e0       	ldi	r27, 0x00	; 0
    6ca4:	e6 e5       	ldi	r30, 0x56	; 86
    6ca6:	f6 e3       	ldi	r31, 0x36	; 54
    6ca8:	0c 94 ac 57 	jmp	0xaf58	; 0xaf58 <__prologue_saves__+0x8>
    6cac:	fc 01       	movw	r30, r24
    6cae:	9b 01       	movw	r18, r22
    6cb0:	f4 2e       	mov	r15, r20
	FRESULT res;
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    6cb2:	a0 81       	ld	r26, Z
    6cb4:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    6cb6:	8c 91       	ld	r24, X
    6cb8:	08 2f       	mov	r16, r24
    6cba:	11 27       	eor	r17, r17
    6cbc:	07 fd       	sbrc	r16, 7
    6cbe:	10 95       	com	r17
    6cc0:	00 53       	subi	r16, 0x30	; 48
    6cc2:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    6cc4:	0a 30       	cpi	r16, 0x0A	; 10
    6cc6:	11 05       	cpc	r17, r1
    6cc8:	48 f4       	brcc	.+18     	; 0x6cdc <auto_mount+0x3c>
    6cca:	11 96       	adiw	r26, 0x01	; 1
    6ccc:	8c 91       	ld	r24, X
    6cce:	11 97       	sbiw	r26, 0x01	; 1
    6cd0:	8a 33       	cpi	r24, 0x3A	; 58
    6cd2:	21 f4       	brne	.+8      	; 0x6cdc <auto_mount+0x3c>
		p += 2; *path = p;			/* Return pointer to the path name */
    6cd4:	12 96       	adiw	r26, 0x02	; 2
    6cd6:	a0 83       	st	Z, r26
    6cd8:	b1 83       	std	Z+1, r27	; 0x01
    6cda:	04 c0       	rjmp	.+8      	; 0x6ce4 <auto_mount+0x44>
	} else {						/* No drive number is given */
#if _FS_RPATH
		vol = Drive;				/* Use current drive */
    6cdc:	80 91 6b 25 	lds	r24, 0x256B
    6ce0:	08 2f       	mov	r16, r24
    6ce2:	10 e0       	ldi	r17, 0x00	; 0
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    6ce4:	02 30       	cpi	r16, 0x02	; 2
    6ce6:	11 05       	cpc	r17, r1
    6ce8:	18 f0       	brcs	.+6      	; 0x6cf0 <auto_mount+0x50>
    6cea:	2b e0       	ldi	r18, 0x0B	; 11
    6cec:	30 e0       	ldi	r19, 0x00	; 0
    6cee:	84 c1       	rjmp	.+776    	; 0x6ff8 <auto_mount+0x358>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    6cf0:	f8 01       	movw	r30, r16
    6cf2:	ee 0f       	add	r30, r30
    6cf4:	ff 1f       	adc	r31, r31
    6cf6:	eb 59       	subi	r30, 0x9B	; 155
    6cf8:	fa 4d       	sbci	r31, 0xDA	; 218
    6cfa:	c0 81       	ld	r28, Z
    6cfc:	d1 81       	ldd	r29, Z+1	; 0x01
    6cfe:	f9 01       	movw	r30, r18
    6d00:	c0 83       	st	Z, r28
    6d02:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object registered? */
    6d04:	20 97       	sbiw	r28, 0x00	; 0
    6d06:	19 f4       	brne	.+6      	; 0x6d0e <auto_mount+0x6e>
    6d08:	2c e0       	ldi	r18, 0x0C	; 12
    6d0a:	30 e0       	ldi	r19, 0x00	; 0
    6d0c:	75 c1       	rjmp	.+746    	; 0x6ff8 <auto_mount+0x358>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    6d0e:	88 81       	ld	r24, Y
    6d10:	88 23       	and	r24, r24
    6d12:	59 f0       	breq	.+22     	; 0x6d2a <auto_mount+0x8a>
		stat = disk_status(fs->drive);
    6d14:	89 81       	ldd	r24, Y+1	; 0x01
    6d16:	0e 94 8b 50 	call	0xa116	; 0xa116 <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    6d1a:	80 fd       	sbrc	r24, 0
    6d1c:	06 c0       	rjmp	.+12     	; 0x6d2a <auto_mount+0x8a>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    6d1e:	ff 20       	and	r15, r15
    6d20:	09 f4       	brne	.+2      	; 0x6d24 <auto_mount+0x84>
    6d22:	65 c1       	rjmp	.+714    	; 0x6fee <auto_mount+0x34e>
    6d24:	82 fd       	sbrc	r24, 2
    6d26:	60 c1       	rjmp	.+704    	; 0x6fe8 <auto_mount+0x348>
    6d28:	62 c1       	rjmp	.+708    	; 0x6fee <auto_mount+0x34e>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    6d2a:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    6d2c:	09 83       	std	Y+1, r16	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    6d2e:	80 2f       	mov	r24, r16
    6d30:	0e 94 81 53 	call	0xa702	; 0xa702 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    6d34:	80 ff       	sbrs	r24, 0
    6d36:	03 c0       	rjmp	.+6      	; 0x6d3e <auto_mount+0x9e>
    6d38:	23 e0       	ldi	r18, 0x03	; 3
    6d3a:	30 e0       	ldi	r19, 0x00	; 0
    6d3c:	5d c1       	rjmp	.+698    	; 0x6ff8 <auto_mount+0x358>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    6d3e:	ff 20       	and	r15, r15
    6d40:	11 f0       	breq	.+4      	; 0x6d46 <auto_mount+0xa6>
    6d42:	82 fd       	sbrc	r24, 2
    6d44:	51 c1       	rjmp	.+674    	; 0x6fe8 <auto_mount+0x348>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    6d46:	ce 01       	movw	r24, r28
    6d48:	40 e0       	ldi	r20, 0x00	; 0
    6d4a:	50 e0       	ldi	r21, 0x00	; 0
    6d4c:	60 e0       	ldi	r22, 0x00	; 0
    6d4e:	70 e0       	ldi	r23, 0x00	; 0
    6d50:	0e 94 03 36 	call	0x6c06	; 0x6c06 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    6d54:	81 30       	cpi	r24, 0x01	; 1
    6d56:	21 f0       	breq	.+8      	; 0x6d60 <auto_mount+0xc0>
    6d58:	66 24       	eor	r6, r6
    6d5a:	77 24       	eor	r7, r7
    6d5c:	43 01       	movw	r8, r6
    6d5e:	10 c0       	rjmp	.+32     	; 0x6d80 <auto_mount+0xe0>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    6d60:	fe 01       	movw	r30, r28
    6d62:	e0 51       	subi	r30, 0x10	; 16
    6d64:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    6d66:	84 81       	ldd	r24, Z+4	; 0x04
    6d68:	88 23       	and	r24, r24
    6d6a:	09 f4       	brne	.+2      	; 0x6d6e <auto_mount+0xce>
    6d6c:	43 c1       	rjmp	.+646    	; 0x6ff4 <auto_mount+0x354>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    6d6e:	60 84       	ldd	r6, Z+8	; 0x08
    6d70:	71 84       	ldd	r7, Z+9	; 0x09
    6d72:	82 84       	ldd	r8, Z+10	; 0x0a
    6d74:	93 84       	ldd	r9, Z+11	; 0x0b
			fmt = check_fs(fs, bsect);					/* Check the partition */
    6d76:	ce 01       	movw	r24, r28
    6d78:	b4 01       	movw	r22, r8
    6d7a:	a3 01       	movw	r20, r6
    6d7c:	0e 94 03 36 	call	0x6c06	; 0x6c06 <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    6d80:	83 30       	cpi	r24, 0x03	; 3
    6d82:	19 f4       	brne	.+6      	; 0x6d8a <auto_mount+0xea>
    6d84:	21 e0       	ldi	r18, 0x01	; 1
    6d86:	30 e0       	ldi	r19, 0x00	; 0
    6d88:	37 c1       	rjmp	.+622    	; 0x6ff8 <auto_mount+0x358>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    6d8a:	88 23       	and	r24, r24
    6d8c:	09 f0       	breq	.+2      	; 0x6d90 <auto_mount+0xf0>
    6d8e:	32 c1       	rjmp	.+612    	; 0x6ff4 <auto_mount+0x354>
    6d90:	8d ad       	ldd	r24, Y+61	; 0x3d
    6d92:	9e ad       	ldd	r25, Y+62	; 0x3e
    6d94:	80 50       	subi	r24, 0x00	; 0
    6d96:	92 40       	sbci	r25, 0x02	; 2
    6d98:	09 f0       	breq	.+2      	; 0x6d9c <auto_mount+0xfc>
    6d9a:	2c c1       	rjmp	.+600    	; 0x6ff4 <auto_mount+0x354>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    6d9c:	c8 5b       	subi	r28, 0xB8	; 184
    6d9e:	df 4f       	sbci	r29, 0xFF	; 255
    6da0:	88 81       	ld	r24, Y
    6da2:	99 81       	ldd	r25, Y+1	; 0x01
    6da4:	c8 54       	subi	r28, 0x48	; 72
    6da6:	d0 40       	sbci	r29, 0x00	; 0
    6da8:	bc 01       	movw	r22, r24
    6daa:	80 e0       	ldi	r24, 0x00	; 0
    6dac:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    6dae:	61 15       	cp	r22, r1
    6db0:	71 05       	cpc	r23, r1
    6db2:	81 05       	cpc	r24, r1
    6db4:	91 05       	cpc	r25, r1
    6db6:	41 f4       	brne	.+16     	; 0x6dc8 <auto_mount+0x128>
    6db8:	ca 5a       	subi	r28, 0xAA	; 170
    6dba:	df 4f       	sbci	r29, 0xFF	; 255
    6dbc:	68 81       	ld	r22, Y
    6dbe:	79 81       	ldd	r23, Y+1	; 0x01
    6dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    6dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    6dc4:	c6 55       	subi	r28, 0x56	; 86
    6dc6:	d0 40       	sbci	r29, 0x00	; 0
	fs->sects_fat = fsize;
    6dc8:	6a 8f       	std	Y+26, r22	; 0x1a
    6dca:	7b 8f       	std	Y+27, r23	; 0x1b
    6dcc:	8c 8f       	std	Y+28, r24	; 0x1c
    6dce:	9d 8f       	std	Y+29, r25	; 0x1d
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    6dd0:	ce 5b       	subi	r28, 0xBE	; 190
    6dd2:	df 4f       	sbci	r29, 0xFF	; 255
    6dd4:	28 81       	ld	r18, Y
    6dd6:	c2 54       	subi	r28, 0x42	; 66
    6dd8:	d0 40       	sbci	r29, 0x00	; 0
    6dda:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    6ddc:	30 e0       	ldi	r19, 0x00	; 0
    6dde:	40 e0       	ldi	r20, 0x00	; 0
    6de0:	50 e0       	ldi	r21, 0x00	; 0
    6de2:	0e 94 25 57 	call	0xae4a	; 0xae4a <__mulsi3>
    6de6:	5b 01       	movw	r10, r22
    6de8:	6c 01       	movw	r12, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    6dea:	fe 01       	movw	r30, r28
    6dec:	e0 5c       	subi	r30, 0xC0	; 192
    6dee:	ff 4f       	sbci	r31, 0xFF	; 255
    6df0:	80 81       	ld	r24, Z
    6df2:	91 81       	ldd	r25, Z+1	; 0x01
    6df4:	a0 e0       	ldi	r26, 0x00	; 0
    6df6:	b0 e0       	ldi	r27, 0x00	; 0
    6df8:	86 0d       	add	r24, r6
    6dfa:	97 1d       	adc	r25, r7
    6dfc:	a8 1d       	adc	r26, r8
    6dfe:	b9 1d       	adc	r27, r9
    6e00:	8a a3       	std	Y+34, r24	; 0x22
    6e02:	9b a3       	std	Y+35, r25	; 0x23
    6e04:	ac a3       	std	Y+36, r26	; 0x24
    6e06:	bd a3       	std	Y+37, r27	; 0x25
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    6e08:	8f ad       	ldd	r24, Y+63	; 0x3f
    6e0a:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    6e0c:	cd 5b       	subi	r28, 0xBD	; 189
    6e0e:	df 4f       	sbci	r29, 0xFF	; 255
    6e10:	28 81       	ld	r18, Y
    6e12:	39 81       	ldd	r19, Y+1	; 0x01
    6e14:	c3 54       	subi	r28, 0x43	; 67
    6e16:	d0 40       	sbci	r29, 0x00	; 0
    6e18:	2f 83       	std	Y+7, r18	; 0x07
    6e1a:	38 87       	std	Y+8, r19	; 0x08
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
    6e1c:	cb 5b       	subi	r28, 0xBB	; 187
    6e1e:	df 4f       	sbci	r29, 0xFF	; 255
    6e20:	88 81       	ld	r24, Y
    6e22:	99 81       	ldd	r25, Y+1	; 0x01
    6e24:	c5 54       	subi	r28, 0x45	; 69
    6e26:	d0 40       	sbci	r29, 0x00	; 0
    6e28:	7c 01       	movw	r14, r24
    6e2a:	00 e0       	ldi	r16, 0x00	; 0
    6e2c:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    6e2e:	e1 14       	cp	r14, r1
    6e30:	f1 04       	cpc	r15, r1
    6e32:	01 05       	cpc	r16, r1
    6e34:	11 05       	cpc	r17, r1
    6e36:	41 f4       	brne	.+16     	; 0x6e48 <auto_mount+0x1a8>
    6e38:	ce 5a       	subi	r28, 0xAE	; 174
    6e3a:	df 4f       	sbci	r29, 0xFF	; 255
    6e3c:	e8 80       	ld	r14, Y
    6e3e:	f9 80       	ldd	r15, Y+1	; 0x01
    6e40:	0a 81       	ldd	r16, Y+2	; 0x02
    6e42:	1b 81       	ldd	r17, Y+3	; 0x03
    6e44:	c2 55       	subi	r28, 0x52	; 82
    6e46:	d0 40       	sbci	r29, 0x00	; 0
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
    6e48:	80 81       	ld	r24, Z
    6e4a:	91 81       	ldd	r25, Z+1	; 0x01
    6e4c:	a0 e0       	ldi	r26, 0x00	; 0
    6e4e:	b0 e0       	ldi	r27, 0x00	; 0
    6e50:	e8 1a       	sub	r14, r24
    6e52:	f9 0a       	sbc	r15, r25
    6e54:	0a 0b       	sbc	r16, r26
    6e56:	1b 0b       	sbc	r17, r27
    6e58:	ea 18       	sub	r14, r10
    6e5a:	fb 08       	sbc	r15, r11
    6e5c:	0c 09       	sbc	r16, r12
    6e5e:	1d 09       	sbc	r17, r13
    6e60:	84 e0       	ldi	r24, 0x04	; 4
    6e62:	36 95       	lsr	r19
    6e64:	27 95       	ror	r18
    6e66:	8a 95       	dec	r24
    6e68:	e1 f7       	brne	.-8      	; 0x6e62 <auto_mount+0x1c2>
    6e6a:	c9 01       	movw	r24, r18
    6e6c:	a0 e0       	ldi	r26, 0x00	; 0
    6e6e:	b0 e0       	ldi	r27, 0x00	; 0
    6e70:	e8 1a       	sub	r14, r24
    6e72:	f9 0a       	sbc	r15, r25
    6e74:	0a 0b       	sbc	r16, r26
    6e76:	1b 0b       	sbc	r17, r27
    6e78:	2a 81       	ldd	r18, Y+2	; 0x02
    6e7a:	30 e0       	ldi	r19, 0x00	; 0
    6e7c:	40 e0       	ldi	r20, 0x00	; 0
    6e7e:	50 e0       	ldi	r21, 0x00	; 0
    6e80:	c8 01       	movw	r24, r16
    6e82:	b7 01       	movw	r22, r14
    6e84:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    6e88:	2e 5f       	subi	r18, 0xFE	; 254
    6e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    6e8c:	4f 4f       	sbci	r20, 0xFF	; 255
    6e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    6e90:	2e 8f       	std	Y+30, r18	; 0x1e
    6e92:	3f 8f       	std	Y+31, r19	; 0x1f
    6e94:	48 a3       	std	Y+32, r20	; 0x20
    6e96:	59 a3       	std	Y+33, r21	; 0x21
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    6e98:	27 3f       	cpi	r18, 0xF7	; 247
    6e9a:	8f e0       	ldi	r24, 0x0F	; 15
    6e9c:	38 07       	cpc	r19, r24
    6e9e:	80 e0       	ldi	r24, 0x00	; 0
    6ea0:	48 07       	cpc	r20, r24
    6ea2:	80 e0       	ldi	r24, 0x00	; 0
    6ea4:	58 07       	cpc	r21, r24
    6ea6:	10 f4       	brcc	.+4      	; 0x6eac <auto_mount+0x20c>
    6ea8:	11 e0       	ldi	r17, 0x01	; 1
    6eaa:	07 c0       	rjmp	.+14     	; 0x6eba <auto_mount+0x21a>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    6eac:	27 5f       	subi	r18, 0xF7	; 247
    6eae:	3f 4f       	sbci	r19, 0xFF	; 255
    6eb0:	40 40       	sbci	r20, 0x00	; 0
    6eb2:	50 40       	sbci	r21, 0x00	; 0
    6eb4:	08 f0       	brcs	.+2      	; 0x6eb8 <auto_mount+0x218>
    6eb6:	a6 c0       	rjmp	.+332    	; 0x7004 <auto_mount+0x364>
    6eb8:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    6eba:	8a a1       	ldd	r24, Y+34	; 0x22
    6ebc:	9b a1       	ldd	r25, Y+35	; 0x23
    6ebe:	ac a1       	ldd	r26, Y+36	; 0x24
    6ec0:	bd a1       	ldd	r27, Y+37	; 0x25
    6ec2:	8a 0d       	add	r24, r10
    6ec4:	9b 1d       	adc	r25, r11
    6ec6:	ac 1d       	adc	r26, r12
    6ec8:	bd 1d       	adc	r27, r13
    6eca:	8e a3       	std	Y+38, r24	; 0x26
    6ecc:	9f a3       	std	Y+39, r25	; 0x27
    6ece:	a8 a7       	std	Y+40, r26	; 0x28
    6ed0:	b9 a7       	std	Y+41, r27	; 0x29
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    6ed2:	8f 81       	ldd	r24, Y+7	; 0x07
    6ed4:	98 85       	ldd	r25, Y+8	; 0x08
    6ed6:	b4 e0       	ldi	r27, 0x04	; 4
    6ed8:	96 95       	lsr	r25
    6eda:	87 95       	ror	r24
    6edc:	ba 95       	dec	r27
    6ede:	e1 f7       	brne	.-8      	; 0x6ed8 <auto_mount+0x238>
    6ee0:	a0 e0       	ldi	r26, 0x00	; 0
    6ee2:	b0 e0       	ldi	r27, 0x00	; 0
    6ee4:	2a a1       	ldd	r18, Y+34	; 0x22
    6ee6:	3b a1       	ldd	r19, Y+35	; 0x23
    6ee8:	4c a1       	ldd	r20, Y+36	; 0x24
    6eea:	5d a1       	ldd	r21, Y+37	; 0x25
    6eec:	82 0f       	add	r24, r18
    6eee:	93 1f       	adc	r25, r19
    6ef0:	a4 1f       	adc	r26, r20
    6ef2:	b5 1f       	adc	r27, r21
    6ef4:	8a 0d       	add	r24, r10
    6ef6:	9b 1d       	adc	r25, r11
    6ef8:	ac 1d       	adc	r26, r12
    6efa:	bd 1d       	adc	r27, r13
    6efc:	8a a7       	std	Y+42, r24	; 0x2a
    6efe:	9b a7       	std	Y+43, r25	; 0x2b
    6f00:	ac a7       	std	Y+44, r26	; 0x2c
    6f02:	bd a7       	std	Y+45, r27	; 0x2d

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    6f04:	8f ef       	ldi	r24, 0xFF	; 255
    6f06:	9f ef       	ldi	r25, 0xFF	; 255
    6f08:	af ef       	ldi	r26, 0xFF	; 255
    6f0a:	bf ef       	ldi	r27, 0xFF	; 255
    6f0c:	8e 87       	std	Y+14, r24	; 0x0e
    6f0e:	9f 87       	std	Y+15, r25	; 0x0f
    6f10:	a8 8b       	std	Y+16, r26	; 0x10
    6f12:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    6f14:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    6f16:	13 30       	cpi	r17, 0x03	; 3
    6f18:	09 f0       	breq	.+2      	; 0x6f1c <auto_mount+0x27c>
    6f1a:	51 c0       	rjmp	.+162    	; 0x6fbe <auto_mount+0x31e>
	 	fs->fsi_flag = 0;
    6f1c:	19 86       	std	Y+9, r1	; 0x09
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    6f1e:	ce 59       	subi	r28, 0x9E	; 158
    6f20:	df 4f       	sbci	r29, 0xFF	; 255
    6f22:	28 81       	ld	r18, Y
    6f24:	39 81       	ldd	r19, Y+1	; 0x01
    6f26:	c2 56       	subi	r28, 0x62	; 98
    6f28:	d0 40       	sbci	r29, 0x00	; 0
    6f2a:	40 e0       	ldi	r20, 0x00	; 0
    6f2c:	50 e0       	ldi	r21, 0x00	; 0
    6f2e:	26 0d       	add	r18, r6
    6f30:	37 1d       	adc	r19, r7
    6f32:	48 1d       	adc	r20, r8
    6f34:	59 1d       	adc	r21, r9
    6f36:	2a 8b       	std	Y+18, r18	; 0x12
    6f38:	3b 8b       	std	Y+19, r19	; 0x13
    6f3a:	4c 8b       	std	Y+20, r20	; 0x14
    6f3c:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    6f3e:	be 01       	movw	r22, r28
    6f40:	6e 5c       	subi	r22, 0xCE	; 206
    6f42:	7f 4f       	sbci	r23, 0xFF	; 255
    6f44:	89 81       	ldd	r24, Y+1	; 0x01
    6f46:	01 e0       	ldi	r16, 0x01	; 1
    6f48:	0e 94 92 50 	call	0xa124	; 0xa124 <disk_read>
    6f4c:	89 2b       	or	r24, r25
    6f4e:	b9 f5       	brne	.+110    	; 0x6fbe <auto_mount+0x31e>
    6f50:	c0 5d       	subi	r28, 0xD0	; 208
    6f52:	dd 4f       	sbci	r29, 0xFD	; 253
    6f54:	88 81       	ld	r24, Y
    6f56:	99 81       	ldd	r25, Y+1	; 0x01
    6f58:	c0 53       	subi	r28, 0x30	; 48
    6f5a:	d2 40       	sbci	r29, 0x02	; 2
    6f5c:	85 55       	subi	r24, 0x55	; 85
    6f5e:	9a 4a       	sbci	r25, 0xAA	; 170
    6f60:	71 f5       	brne	.+92     	; 0x6fbe <auto_mount+0x31e>
    6f62:	8a a9       	ldd	r24, Y+50	; 0x32
    6f64:	9b a9       	ldd	r25, Y+51	; 0x33
    6f66:	ac a9       	ldd	r26, Y+52	; 0x34
    6f68:	bd a9       	ldd	r27, Y+53	; 0x35
    6f6a:	82 55       	subi	r24, 0x52	; 82
    6f6c:	92 45       	sbci	r25, 0x52	; 82
    6f6e:	a1 46       	sbci	r26, 0x61	; 97
    6f70:	b1 44       	sbci	r27, 0x41	; 65
    6f72:	29 f5       	brne	.+74     	; 0x6fbe <auto_mount+0x31e>
    6f74:	ca 5e       	subi	r28, 0xEA	; 234
    6f76:	dd 4f       	sbci	r29, 0xFD	; 253
    6f78:	88 81       	ld	r24, Y
    6f7a:	99 81       	ldd	r25, Y+1	; 0x01
    6f7c:	aa 81       	ldd	r26, Y+2	; 0x02
    6f7e:	bb 81       	ldd	r27, Y+3	; 0x03
    6f80:	c6 51       	subi	r28, 0x16	; 22
    6f82:	d2 40       	sbci	r29, 0x02	; 2
    6f84:	82 57       	subi	r24, 0x72	; 114
    6f86:	92 47       	sbci	r25, 0x72	; 114
    6f88:	a1 44       	sbci	r26, 0x41	; 65
    6f8a:	b1 46       	sbci	r27, 0x61	; 97
    6f8c:	c1 f4       	brne	.+48     	; 0x6fbe <auto_mount+0x31e>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    6f8e:	c2 5e       	subi	r28, 0xE2	; 226
    6f90:	dd 4f       	sbci	r29, 0xFD	; 253
    6f92:	88 81       	ld	r24, Y
    6f94:	99 81       	ldd	r25, Y+1	; 0x01
    6f96:	aa 81       	ldd	r26, Y+2	; 0x02
    6f98:	bb 81       	ldd	r27, Y+3	; 0x03
    6f9a:	ce 51       	subi	r28, 0x1E	; 30
    6f9c:	d2 40       	sbci	r29, 0x02	; 2
    6f9e:	8a 87       	std	Y+10, r24	; 0x0a
    6fa0:	9b 87       	std	Y+11, r25	; 0x0b
    6fa2:	ac 87       	std	Y+12, r26	; 0x0c
    6fa4:	bd 87       	std	Y+13, r27	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    6fa6:	c6 5e       	subi	r28, 0xE6	; 230
    6fa8:	dd 4f       	sbci	r29, 0xFD	; 253
    6faa:	88 81       	ld	r24, Y
    6fac:	99 81       	ldd	r25, Y+1	; 0x01
    6fae:	aa 81       	ldd	r26, Y+2	; 0x02
    6fb0:	bb 81       	ldd	r27, Y+3	; 0x03
    6fb2:	ca 51       	subi	r28, 0x1A	; 26
    6fb4:	d2 40       	sbci	r29, 0x02	; 2
    6fb6:	8e 87       	std	Y+14, r24	; 0x0e
    6fb8:	9f 87       	std	Y+15, r25	; 0x0f
    6fba:	a8 8b       	std	Y+16, r26	; 0x10
    6fbc:	b9 8b       	std	Y+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    6fbe:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    6fc0:	1e a6       	std	Y+46, r1	; 0x2e
    6fc2:	1f a6       	std	Y+47, r1	; 0x2f
    6fc4:	18 aa       	std	Y+48, r1	; 0x30
    6fc6:	19 aa       	std	Y+49, r1	; 0x31
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    6fc8:	1e 8a       	std	Y+22, r1	; 0x16
    6fca:	1f 8a       	std	Y+23, r1	; 0x17
    6fcc:	18 8e       	std	Y+24, r1	; 0x18
    6fce:	19 8e       	std	Y+25, r1	; 0x19
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    6fd0:	80 91 69 25 	lds	r24, 0x2569
    6fd4:	90 91 6a 25 	lds	r25, 0x256A
    6fd8:	01 96       	adiw	r24, 0x01	; 1
    6fda:	80 93 69 25 	sts	0x2569, r24
    6fde:	90 93 6a 25 	sts	0x256A, r25
    6fe2:	8d 83       	std	Y+5, r24	; 0x05
    6fe4:	9e 83       	std	Y+6, r25	; 0x06
    6fe6:	03 c0       	rjmp	.+6      	; 0x6fee <auto_mount+0x34e>
	res = FR_OK;

	return res;
    6fe8:	2a e0       	ldi	r18, 0x0A	; 10
    6fea:	30 e0       	ldi	r19, 0x00	; 0
    6fec:	05 c0       	rjmp	.+10     	; 0x6ff8 <auto_mount+0x358>
    6fee:	20 e0       	ldi	r18, 0x00	; 0
    6ff0:	30 e0       	ldi	r19, 0x00	; 0
    6ff2:	02 c0       	rjmp	.+4      	; 0x6ff8 <auto_mount+0x358>
    6ff4:	2d e0       	ldi	r18, 0x0D	; 13
    6ff6:	30 e0       	ldi	r19, 0x00	; 0
}
    6ff8:	c9 01       	movw	r24, r18
    6ffa:	cd b7       	in	r28, 0x3d	; 61
    6ffc:	de b7       	in	r29, 0x3e	; 62
    6ffe:	ee e0       	ldi	r30, 0x0E	; 14
    7000:	0c 94 c8 57 	jmp	0xaf90	; 0xaf90 <__epilogue_restores__+0x8>
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    7004:	c2 5a       	subi	r28, 0xA2	; 162
    7006:	df 4f       	sbci	r29, 0xFF	; 255
    7008:	88 81       	ld	r24, Y
    700a:	99 81       	ldd	r25, Y+1	; 0x01
    700c:	aa 81       	ldd	r26, Y+2	; 0x02
    700e:	bb 81       	ldd	r27, Y+3	; 0x03
    7010:	ce 55       	subi	r28, 0x5E	; 94
    7012:	d0 40       	sbci	r29, 0x00	; 0
    7014:	8e a3       	std	Y+38, r24	; 0x26
    7016:	9f a3       	std	Y+39, r25	; 0x27
    7018:	a8 a7       	std	Y+40, r26	; 0x28
    701a:	b9 a7       	std	Y+41, r27	; 0x29
    701c:	13 e0       	ldi	r17, 0x03	; 3
    701e:	59 cf       	rjmp	.-334    	; 0x6ed2 <auto_mount+0x232>

00007020 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    7020:	a0 e0       	ldi	r26, 0x00	; 0
    7022:	b0 e0       	ldi	r27, 0x00	; 0
    7024:	e6 e1       	ldi	r30, 0x16	; 22
    7026:	f8 e3       	ldi	r31, 0x38	; 56
    7028:	0c 94 ac 57 	jmp	0xaf58	; 0xaf58 <__prologue_saves__+0x8>
    702c:	ec 01       	movw	r28, r24
    702e:	4a 01       	movw	r8, r20
    7030:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    7032:	ce a4       	ldd	r12, Y+46	; 0x2e
    7034:	df a4       	ldd	r13, Y+47	; 0x2f
    7036:	e8 a8       	ldd	r14, Y+48	; 0x30
    7038:	f9 a8       	ldd	r15, Y+49	; 0x31
	if (wsect != sector) {	/* Changed current window */
    703a:	c4 16       	cp	r12, r20
    703c:	d5 06       	cpc	r13, r21
    703e:	e6 06       	cpc	r14, r22
    7040:	f7 06       	cpc	r15, r23
    7042:	09 f4       	brne	.+2      	; 0x7046 <move_window+0x26>
    7044:	4f c0       	rjmp	.+158    	; 0x70e4 <move_window+0xc4>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    7046:	8c 81       	ldd	r24, Y+4	; 0x04
    7048:	88 23       	and	r24, r24
    704a:	a1 f1       	breq	.+104    	; 0x70b4 <move_window+0x94>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    704c:	22 e3       	ldi	r18, 0x32	; 50
    704e:	62 2e       	mov	r6, r18
    7050:	71 2c       	mov	r7, r1
    7052:	6c 0e       	add	r6, r28
    7054:	7d 1e       	adc	r7, r29
    7056:	89 81       	ldd	r24, Y+1	; 0x01
    7058:	b3 01       	movw	r22, r6
    705a:	a7 01       	movw	r20, r14
    705c:	96 01       	movw	r18, r12
    705e:	01 e0       	ldi	r16, 0x01	; 1
    7060:	0e 94 f7 50 	call	0xa1ee	; 0xa1ee <disk_write>
    7064:	89 2b       	or	r24, r25
    7066:	d9 f5       	brne	.+118    	; 0x70de <move_window+0xbe>
				return FR_DISK_ERR;
			fs->wflag = 0;
    7068:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    706a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    706c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    706e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    7070:	bd 8d       	ldd	r27, Y+29	; 0x1d
    7072:	2a a1       	ldd	r18, Y+34	; 0x22
    7074:	3b a1       	ldd	r19, Y+35	; 0x23
    7076:	4c a1       	ldd	r20, Y+36	; 0x24
    7078:	5d a1       	ldd	r21, Y+37	; 0x25
    707a:	82 0f       	add	r24, r18
    707c:	93 1f       	adc	r25, r19
    707e:	a4 1f       	adc	r26, r20
    7080:	b5 1f       	adc	r27, r21
    7082:	c8 16       	cp	r12, r24
    7084:	d9 06       	cpc	r13, r25
    7086:	ea 06       	cpc	r14, r26
    7088:	fb 06       	cpc	r15, r27
    708a:	a0 f4       	brcc	.+40     	; 0x70b4 <move_window+0x94>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    708c:	1b 81       	ldd	r17, Y+3	; 0x03
    708e:	10 c0       	rjmp	.+32     	; 0x70b0 <move_window+0x90>
					wsect += fs->sects_fat;
    7090:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7092:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7094:	ac 8d       	ldd	r26, Y+28	; 0x1c
    7096:	bd 8d       	ldd	r27, Y+29	; 0x1d
    7098:	c8 0e       	add	r12, r24
    709a:	d9 1e       	adc	r13, r25
    709c:	ea 1e       	adc	r14, r26
    709e:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    70a0:	89 81       	ldd	r24, Y+1	; 0x01
    70a2:	b3 01       	movw	r22, r6
    70a4:	a7 01       	movw	r20, r14
    70a6:	96 01       	movw	r18, r12
    70a8:	01 e0       	ldi	r16, 0x01	; 1
    70aa:	0e 94 f7 50 	call	0xa1ee	; 0xa1ee <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    70ae:	11 50       	subi	r17, 0x01	; 1
    70b0:	12 30       	cpi	r17, 0x02	; 2
    70b2:	70 f7       	brcc	.-36     	; 0x7090 <move_window+0x70>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    70b4:	81 14       	cp	r8, r1
    70b6:	91 04       	cpc	r9, r1
    70b8:	a1 04       	cpc	r10, r1
    70ba:	b1 04       	cpc	r11, r1
    70bc:	99 f0       	breq	.+38     	; 0x70e4 <move_window+0xc4>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    70be:	be 01       	movw	r22, r28
    70c0:	6e 5c       	subi	r22, 0xCE	; 206
    70c2:	7f 4f       	sbci	r23, 0xFF	; 255
    70c4:	89 81       	ldd	r24, Y+1	; 0x01
    70c6:	a5 01       	movw	r20, r10
    70c8:	94 01       	movw	r18, r8
    70ca:	01 e0       	ldi	r16, 0x01	; 1
    70cc:	0e 94 92 50 	call	0xa124	; 0xa124 <disk_read>
    70d0:	89 2b       	or	r24, r25
    70d2:	29 f4       	brne	.+10     	; 0x70de <move_window+0xbe>
				return FR_DISK_ERR;
			fs->winsect = sector;
    70d4:	8e a6       	std	Y+46, r8	; 0x2e
    70d6:	9f a6       	std	Y+47, r9	; 0x2f
    70d8:	a8 aa       	std	Y+48, r10	; 0x30
    70da:	b9 aa       	std	Y+49, r11	; 0x31
    70dc:	03 c0       	rjmp	.+6      	; 0x70e4 <move_window+0xc4>
    70de:	21 e0       	ldi	r18, 0x01	; 1
    70e0:	30 e0       	ldi	r19, 0x00	; 0
    70e2:	02 c0       	rjmp	.+4      	; 0x70e8 <move_window+0xc8>
    70e4:	20 e0       	ldi	r18, 0x00	; 0
    70e6:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	return FR_OK;
}
    70e8:	c9 01       	movw	r24, r18
    70ea:	cd b7       	in	r28, 0x3d	; 61
    70ec:	de b7       	in	r29, 0x3e	; 62
    70ee:	ee e0       	ldi	r30, 0x0E	; 14
    70f0:	0c 94 c8 57 	jmp	0xaf90	; 0xaf90 <__epilogue_restores__+0x8>

000070f4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    70f4:	a0 e0       	ldi	r26, 0x00	; 0
    70f6:	b0 e0       	ldi	r27, 0x00	; 0
    70f8:	e0 e8       	ldi	r30, 0x80	; 128
    70fa:	f8 e3       	ldi	r31, 0x38	; 56
    70fc:	0c 94 ad 57 	jmp	0xaf5a	; 0xaf5a <__prologue_saves__+0xa>
    7100:	4c 01       	movw	r8, r24
    7102:	7a 01       	movw	r14, r20
    7104:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    7106:	42 30       	cpi	r20, 0x02	; 2
    7108:	51 05       	cpc	r21, r1
    710a:	61 05       	cpc	r22, r1
    710c:	71 05       	cpc	r23, r1
    710e:	08 f4       	brcc	.+2      	; 0x7112 <get_fat+0x1e>
    7110:	97 c0       	rjmp	.+302    	; 0x7240 <get_fat+0x14c>
    7112:	f4 01       	movw	r30, r8
    7114:	86 8d       	ldd	r24, Z+30	; 0x1e
    7116:	97 8d       	ldd	r25, Z+31	; 0x1f
    7118:	a0 a1       	ldd	r26, Z+32	; 0x20
    711a:	b1 a1       	ldd	r27, Z+33	; 0x21
    711c:	48 17       	cp	r20, r24
    711e:	59 07       	cpc	r21, r25
    7120:	6a 07       	cpc	r22, r26
    7122:	7b 07       	cpc	r23, r27
    7124:	08 f0       	brcs	.+2      	; 0x7128 <get_fat+0x34>
    7126:	8c c0       	rjmp	.+280    	; 0x7240 <get_fat+0x14c>
		return 1;

	fsect = fs->fatbase;
    7128:	a2 a0       	ldd	r10, Z+34	; 0x22
    712a:	b3 a0       	ldd	r11, Z+35	; 0x23
    712c:	c4 a0       	ldd	r12, Z+36	; 0x24
    712e:	d5 a0       	ldd	r13, Z+37	; 0x25
	switch (fs->fs_type) {
    7130:	80 81       	ld	r24, Z
    7132:	82 30       	cpi	r24, 0x02	; 2
    7134:	09 f4       	brne	.+2      	; 0x7138 <get_fat+0x44>
    7136:	4d c0       	rjmp	.+154    	; 0x71d2 <get_fat+0xde>
    7138:	83 30       	cpi	r24, 0x03	; 3
    713a:	09 f4       	brne	.+2      	; 0x713e <get_fat+0x4a>
    713c:	63 c0       	rjmp	.+198    	; 0x7204 <get_fat+0x110>
    713e:	81 30       	cpi	r24, 0x01	; 1
    7140:	09 f0       	breq	.+2      	; 0x7144 <get_fat+0x50>
    7142:	83 c0       	rjmp	.+262    	; 0x724a <get_fat+0x156>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    7144:	ea 01       	movw	r28, r20
    7146:	d6 95       	lsr	r29
    7148:	c7 95       	ror	r28
    714a:	c4 0f       	add	r28, r20
    714c:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    714e:	ae 01       	movw	r20, r28
    7150:	45 2f       	mov	r20, r21
    7152:	55 27       	eor	r21, r21
    7154:	46 95       	lsr	r20
    7156:	60 e0       	ldi	r22, 0x00	; 0
    7158:	70 e0       	ldi	r23, 0x00	; 0
    715a:	4a 0d       	add	r20, r10
    715c:	5b 1d       	adc	r21, r11
    715e:	6c 1d       	adc	r22, r12
    7160:	7d 1d       	adc	r23, r13
    7162:	c4 01       	movw	r24, r8
    7164:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    7168:	89 2b       	or	r24, r25
    716a:	09 f0       	breq	.+2      	; 0x716e <get_fat+0x7a>
    716c:	6e c0       	rjmp	.+220    	; 0x724a <get_fat+0x156>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    716e:	fe 01       	movw	r30, r28
    7170:	f1 70       	andi	r31, 0x01	; 1
    7172:	e8 0d       	add	r30, r8
    7174:	f9 1d       	adc	r31, r9
    7176:	72 a8       	ldd	r7, Z+50	; 0x32
    7178:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    717a:	ae 01       	movw	r20, r28
    717c:	45 2f       	mov	r20, r21
    717e:	55 27       	eor	r21, r21
    7180:	46 95       	lsr	r20
    7182:	60 e0       	ldi	r22, 0x00	; 0
    7184:	70 e0       	ldi	r23, 0x00	; 0
    7186:	4a 0d       	add	r20, r10
    7188:	5b 1d       	adc	r21, r11
    718a:	6c 1d       	adc	r22, r12
    718c:	7d 1d       	adc	r23, r13
    718e:	c4 01       	movw	r24, r8
    7190:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    7194:	89 2b       	or	r24, r25
    7196:	09 f0       	breq	.+2      	; 0x719a <get_fat+0xa6>
    7198:	58 c0       	rjmp	.+176    	; 0x724a <get_fat+0x156>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    719a:	67 2d       	mov	r22, r7
    719c:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    719e:	d1 70       	andi	r29, 0x01	; 1
    71a0:	c8 0d       	add	r28, r8
    71a2:	d9 1d       	adc	r29, r9
    71a4:	9a a9       	ldd	r25, Y+50	; 0x32
    71a6:	80 e0       	ldi	r24, 0x00	; 0
    71a8:	68 2b       	or	r22, r24
    71aa:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    71ac:	c7 01       	movw	r24, r14
    71ae:	81 70       	andi	r24, 0x01	; 1
    71b0:	90 70       	andi	r25, 0x00	; 0
    71b2:	89 2b       	or	r24, r25
    71b4:	39 f0       	breq	.+14     	; 0x71c4 <get_fat+0xd0>
    71b6:	84 e0       	ldi	r24, 0x04	; 4
    71b8:	76 95       	lsr	r23
    71ba:	67 95       	ror	r22
    71bc:	8a 95       	dec	r24
    71be:	e1 f7       	brne	.-8      	; 0x71b8 <get_fat+0xc4>
    71c0:	9b 01       	movw	r18, r22
    71c2:	1d c0       	rjmp	.+58     	; 0x71fe <get_fat+0x10a>
    71c4:	9b 01       	movw	r18, r22
    71c6:	40 e0       	ldi	r20, 0x00	; 0
    71c8:	50 e0       	ldi	r21, 0x00	; 0
    71ca:	3f 70       	andi	r19, 0x0F	; 15
    71cc:	40 70       	andi	r20, 0x00	; 0
    71ce:	50 70       	andi	r21, 0x00	; 0
    71d0:	40 c0       	rjmp	.+128    	; 0x7252 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    71d2:	45 2f       	mov	r20, r21
    71d4:	56 2f       	mov	r21, r22
    71d6:	67 2f       	mov	r22, r23
    71d8:	77 27       	eor	r23, r23
    71da:	4a 0d       	add	r20, r10
    71dc:	5b 1d       	adc	r21, r11
    71de:	6c 1d       	adc	r22, r12
    71e0:	7d 1d       	adc	r23, r13
    71e2:	c4 01       	movw	r24, r8
    71e4:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    71e8:	89 2b       	or	r24, r25
    71ea:	79 f5       	brne	.+94     	; 0x724a <get_fat+0x156>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    71ec:	f7 01       	movw	r30, r14
    71ee:	ee 0f       	add	r30, r30
    71f0:	ff 1f       	adc	r31, r31
    71f2:	f1 70       	andi	r31, 0x01	; 1
    71f4:	e8 0d       	add	r30, r8
    71f6:	f9 1d       	adc	r31, r9
    71f8:	82 a9       	ldd	r24, Z+50	; 0x32
    71fa:	93 a9       	ldd	r25, Z+51	; 0x33
    71fc:	9c 01       	movw	r18, r24
    71fe:	40 e0       	ldi	r20, 0x00	; 0
    7200:	50 e0       	ldi	r21, 0x00	; 0
    7202:	27 c0       	rjmp	.+78     	; 0x7252 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    7204:	e7 e0       	ldi	r30, 0x07	; 7
    7206:	76 95       	lsr	r23
    7208:	67 95       	ror	r22
    720a:	57 95       	ror	r21
    720c:	47 95       	ror	r20
    720e:	ea 95       	dec	r30
    7210:	d1 f7       	brne	.-12     	; 0x7206 <get_fat+0x112>
    7212:	4a 0d       	add	r20, r10
    7214:	5b 1d       	adc	r21, r11
    7216:	6c 1d       	adc	r22, r12
    7218:	7d 1d       	adc	r23, r13
    721a:	c4 01       	movw	r24, r8
    721c:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    7220:	89 2b       	or	r24, r25
    7222:	99 f4       	brne	.+38     	; 0x724a <get_fat+0x156>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    7224:	f7 01       	movw	r30, r14
    7226:	ee 0f       	add	r30, r30
    7228:	ff 1f       	adc	r31, r31
    722a:	ee 0f       	add	r30, r30
    722c:	ff 1f       	adc	r31, r31
    722e:	f1 70       	andi	r31, 0x01	; 1
    7230:	e8 0d       	add	r30, r8
    7232:	f9 1d       	adc	r31, r9
    7234:	22 a9       	ldd	r18, Z+50	; 0x32
    7236:	33 a9       	ldd	r19, Z+51	; 0x33
    7238:	44 a9       	ldd	r20, Z+52	; 0x34
    723a:	55 a9       	ldd	r21, Z+53	; 0x35
    723c:	5f 70       	andi	r21, 0x0F	; 15
    723e:	09 c0       	rjmp	.+18     	; 0x7252 <get_fat+0x15e>
    7240:	21 e0       	ldi	r18, 0x01	; 1
    7242:	30 e0       	ldi	r19, 0x00	; 0
    7244:	40 e0       	ldi	r20, 0x00	; 0
    7246:	50 e0       	ldi	r21, 0x00	; 0
    7248:	04 c0       	rjmp	.+8      	; 0x7252 <get_fat+0x15e>
    724a:	2f ef       	ldi	r18, 0xFF	; 255
    724c:	3f ef       	ldi	r19, 0xFF	; 255
    724e:	4f ef       	ldi	r20, 0xFF	; 255
    7250:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    7252:	b9 01       	movw	r22, r18
    7254:	ca 01       	movw	r24, r20
    7256:	cd b7       	in	r28, 0x3d	; 61
    7258:	de b7       	in	r29, 0x3e	; 62
    725a:	ed e0       	ldi	r30, 0x0D	; 13
    725c:	0c 94 c9 57 	jmp	0xaf92	; 0xaf92 <__epilogue_restores__+0xa>

00007260 <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    7260:	a0 e0       	ldi	r26, 0x00	; 0
    7262:	b0 e0       	ldi	r27, 0x00	; 0
    7264:	e6 e3       	ldi	r30, 0x36	; 54
    7266:	f9 e3       	ldi	r31, 0x39	; 57
    7268:	0c 94 b0 57 	jmp	0xaf60	; 0xaf60 <__prologue_saves__+0x10>
    726c:	5c 01       	movw	r10, r24
    726e:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    7270:	dc 01       	movw	r26, r24
    7272:	14 96       	adiw	r26, 0x04	; 4
    7274:	6d 93       	st	X+, r22
    7276:	7c 93       	st	X, r23
    7278:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    727a:	16 96       	adiw	r26, 0x06	; 6
    727c:	4d 91       	ld	r20, X+
    727e:	5d 91       	ld	r21, X+
    7280:	6d 91       	ld	r22, X+
    7282:	7c 91       	ld	r23, X
    7284:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    7286:	41 30       	cpi	r20, 0x01	; 1
    7288:	51 05       	cpc	r21, r1
    728a:	61 05       	cpc	r22, r1
    728c:	71 05       	cpc	r23, r1
    728e:	09 f4       	brne	.+2      	; 0x7292 <dir_seek+0x32>
    7290:	d5 c0       	rjmp	.+426    	; 0x743c <dir_seek+0x1dc>
    7292:	ed 91       	ld	r30, X+
    7294:	fc 91       	ld	r31, X
    7296:	86 8d       	ldd	r24, Z+30	; 0x1e
    7298:	97 8d       	ldd	r25, Z+31	; 0x1f
    729a:	a0 a1       	ldd	r26, Z+32	; 0x20
    729c:	b1 a1       	ldd	r27, Z+33	; 0x21
    729e:	48 17       	cp	r20, r24
    72a0:	59 07       	cpc	r21, r25
    72a2:	6a 07       	cpc	r22, r26
    72a4:	7b 07       	cpc	r23, r27
    72a6:	08 f0       	brcs	.+2      	; 0x72aa <dir_seek+0x4a>
    72a8:	c9 c0       	rjmp	.+402    	; 0x743c <dir_seek+0x1dc>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    72aa:	41 15       	cp	r20, r1
    72ac:	51 05       	cpc	r21, r1
    72ae:	61 05       	cpc	r22, r1
    72b0:	71 05       	cpc	r23, r1
    72b2:	81 f5       	brne	.+96     	; 0x7314 <dir_seek+0xb4>
    72b4:	80 81       	ld	r24, Z
    72b6:	83 30       	cpi	r24, 0x03	; 3
    72b8:	49 f4       	brne	.+18     	; 0x72cc <dir_seek+0x6c>
		clst = dj->fs->dirbase;
    72ba:	46 a1       	ldd	r20, Z+38	; 0x26
    72bc:	57 a1       	ldd	r21, Z+39	; 0x27
    72be:	60 a5       	ldd	r22, Z+40	; 0x28
    72c0:	71 a5       	ldd	r23, Z+41	; 0x29

	if (clst == 0) {	/* Static table */
    72c2:	41 15       	cp	r20, r1
    72c4:	51 05       	cpc	r21, r1
    72c6:	61 05       	cpc	r22, r1
    72c8:	71 05       	cpc	r23, r1
    72ca:	21 f5       	brne	.+72     	; 0x7314 <dir_seek+0xb4>
		dj->clust = clst;
    72cc:	f5 01       	movw	r30, r10
    72ce:	12 86       	std	Z+10, r1	; 0x0a
    72d0:	13 86       	std	Z+11, r1	; 0x0b
    72d2:	14 86       	std	Z+12, r1	; 0x0c
    72d4:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    72d6:	01 90       	ld	r0, Z+
    72d8:	f0 81       	ld	r31, Z
    72da:	e0 2d       	mov	r30, r0
    72dc:	87 81       	ldd	r24, Z+7	; 0x07
    72de:	90 85       	ldd	r25, Z+8	; 0x08
    72e0:	c8 16       	cp	r12, r24
    72e2:	d9 06       	cpc	r13, r25
    72e4:	08 f0       	brcs	.+2      	; 0x72e8 <dir_seek+0x88>
    72e6:	aa c0       	rjmp	.+340    	; 0x743c <dir_seek+0x1dc>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    72e8:	c6 01       	movw	r24, r12
    72ea:	a4 e0       	ldi	r26, 0x04	; 4
    72ec:	96 95       	lsr	r25
    72ee:	87 95       	ror	r24
    72f0:	aa 95       	dec	r26
    72f2:	e1 f7       	brne	.-8      	; 0x72ec <dir_seek+0x8c>
    72f4:	a0 e0       	ldi	r26, 0x00	; 0
    72f6:	b0 e0       	ldi	r27, 0x00	; 0
    72f8:	26 a1       	ldd	r18, Z+38	; 0x26
    72fa:	37 a1       	ldd	r19, Z+39	; 0x27
    72fc:	40 a5       	ldd	r20, Z+40	; 0x28
    72fe:	51 a5       	ldd	r21, Z+41	; 0x29
    7300:	82 0f       	add	r24, r18
    7302:	93 1f       	adc	r25, r19
    7304:	a4 1f       	adc	r26, r20
    7306:	b5 1f       	adc	r27, r21
    7308:	f5 01       	movw	r30, r10
    730a:	86 87       	std	Z+14, r24	; 0x0e
    730c:	97 87       	std	Z+15, r25	; 0x0f
    730e:	a0 8b       	std	Z+16, r26	; 0x10
    7310:	b1 8b       	std	Z+17, r27	; 0x11
    7312:	7b c0       	rjmp	.+246    	; 0x740a <dir_seek+0x1aa>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    7314:	82 81       	ldd	r24, Z+2	; 0x02
    7316:	08 2f       	mov	r16, r24
    7318:	10 e0       	ldi	r17, 0x00	; 0
    731a:	f4 e0       	ldi	r31, 0x04	; 4
    731c:	00 0f       	add	r16, r16
    731e:	11 1f       	adc	r17, r17
    7320:	fa 95       	dec	r31
    7322:	e1 f7       	brne	.-8      	; 0x731c <dir_seek+0xbc>
    7324:	25 c0       	rjmp	.+74     	; 0x7370 <dir_seek+0x110>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    7326:	ce 01       	movw	r24, r28
    7328:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <get_fat>
    732c:	ab 01       	movw	r20, r22
    732e:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    7330:	4f 3f       	cpi	r20, 0xFF	; 255
    7332:	ff ef       	ldi	r31, 0xFF	; 255
    7334:	5f 07       	cpc	r21, r31
    7336:	ff ef       	ldi	r31, 0xFF	; 255
    7338:	6f 07       	cpc	r22, r31
    733a:	ff ef       	ldi	r31, 0xFF	; 255
    733c:	7f 07       	cpc	r23, r31
    733e:	19 f4       	brne	.+6      	; 0x7346 <dir_seek+0xe6>
    7340:	21 e0       	ldi	r18, 0x01	; 1
    7342:	30 e0       	ldi	r19, 0x00	; 0
    7344:	7d c0       	rjmp	.+250    	; 0x7440 <dir_seek+0x1e0>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    7346:	42 30       	cpi	r20, 0x02	; 2
    7348:	51 05       	cpc	r21, r1
    734a:	61 05       	cpc	r22, r1
    734c:	71 05       	cpc	r23, r1
    734e:	08 f4       	brcc	.+2      	; 0x7352 <dir_seek+0xf2>
    7350:	75 c0       	rjmp	.+234    	; 0x743c <dir_seek+0x1dc>
    7352:	d5 01       	movw	r26, r10
    7354:	ed 91       	ld	r30, X+
    7356:	fc 91       	ld	r31, X
    7358:	86 8d       	ldd	r24, Z+30	; 0x1e
    735a:	97 8d       	ldd	r25, Z+31	; 0x1f
    735c:	a0 a1       	ldd	r26, Z+32	; 0x20
    735e:	b1 a1       	ldd	r27, Z+33	; 0x21
    7360:	48 17       	cp	r20, r24
    7362:	59 07       	cpc	r21, r25
    7364:	6a 07       	cpc	r22, r26
    7366:	7b 07       	cpc	r23, r27
    7368:	08 f0       	brcs	.+2      	; 0x736c <dir_seek+0x10c>
    736a:	68 c0       	rjmp	.+208    	; 0x743c <dir_seek+0x1dc>
				return FR_INT_ERR;
			idx -= ic;
    736c:	c0 1a       	sub	r12, r16
    736e:	d1 0a       	sbc	r13, r17
    7370:	f5 01       	movw	r30, r10
    7372:	c0 81       	ld	r28, Z
    7374:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    7376:	c0 16       	cp	r12, r16
    7378:	d1 06       	cpc	r13, r17
    737a:	a8 f6       	brcc	.-86     	; 0x7326 <dir_seek+0xc6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    737c:	d5 01       	movw	r26, r10
    737e:	1a 96       	adiw	r26, 0x0a	; 10
    7380:	4d 93       	st	X+, r20
    7382:	5d 93       	st	X+, r21
    7384:	6d 93       	st	X+, r22
    7386:	7c 93       	st	X, r23
    7388:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    738a:	ee ef       	ldi	r30, 0xFE	; 254
    738c:	ee 2e       	mov	r14, r30
    738e:	ef ef       	ldi	r30, 0xFF	; 255
    7390:	fe 2e       	mov	r15, r30
    7392:	ef ef       	ldi	r30, 0xFF	; 255
    7394:	0e 2f       	mov	r16, r30
    7396:	ef ef       	ldi	r30, 0xFF	; 255
    7398:	1e 2f       	mov	r17, r30
    739a:	e4 0e       	add	r14, r20
    739c:	f5 1e       	adc	r15, r21
    739e:	06 1f       	adc	r16, r22
    73a0:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    73a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    73a4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    73a6:	a8 a1       	ldd	r26, Y+32	; 0x20
    73a8:	b9 a1       	ldd	r27, Y+33	; 0x21
    73aa:	02 97       	sbiw	r24, 0x02	; 2
    73ac:	a1 09       	sbc	r26, r1
    73ae:	b1 09       	sbc	r27, r1
    73b0:	e8 16       	cp	r14, r24
    73b2:	f9 06       	cpc	r15, r25
    73b4:	0a 07       	cpc	r16, r26
    73b6:	1b 07       	cpc	r17, r27
    73b8:	28 f0       	brcs	.+10     	; 0x73c4 <dir_seek+0x164>
    73ba:	20 e0       	ldi	r18, 0x00	; 0
    73bc:	30 e0       	ldi	r19, 0x00	; 0
    73be:	40 e0       	ldi	r20, 0x00	; 0
    73c0:	50 e0       	ldi	r21, 0x00	; 0
    73c2:	12 c0       	rjmp	.+36     	; 0x73e8 <dir_seek+0x188>
	return clst * fs->csize + fs->database;
    73c4:	2a 81       	ldd	r18, Y+2	; 0x02
    73c6:	30 e0       	ldi	r19, 0x00	; 0
    73c8:	40 e0       	ldi	r20, 0x00	; 0
    73ca:	50 e0       	ldi	r21, 0x00	; 0
    73cc:	c8 01       	movw	r24, r16
    73ce:	b7 01       	movw	r22, r14
    73d0:	0e 94 25 57 	call	0xae4a	; 0xae4a <__mulsi3>
    73d4:	9b 01       	movw	r18, r22
    73d6:	ac 01       	movw	r20, r24
    73d8:	8a a5       	ldd	r24, Y+42	; 0x2a
    73da:	9b a5       	ldd	r25, Y+43	; 0x2b
    73dc:	ac a5       	ldd	r26, Y+44	; 0x2c
    73de:	bd a5       	ldd	r27, Y+45	; 0x2d
    73e0:	28 0f       	add	r18, r24
    73e2:	39 1f       	adc	r19, r25
    73e4:	4a 1f       	adc	r20, r26
    73e6:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    73e8:	c6 01       	movw	r24, r12
    73ea:	64 e0       	ldi	r22, 0x04	; 4
    73ec:	96 95       	lsr	r25
    73ee:	87 95       	ror	r24
    73f0:	6a 95       	dec	r22
    73f2:	e1 f7       	brne	.-8      	; 0x73ec <dir_seek+0x18c>
    73f4:	a0 e0       	ldi	r26, 0x00	; 0
    73f6:	b0 e0       	ldi	r27, 0x00	; 0
    73f8:	28 0f       	add	r18, r24
    73fa:	39 1f       	adc	r19, r25
    73fc:	4a 1f       	adc	r20, r26
    73fe:	5b 1f       	adc	r21, r27
    7400:	f5 01       	movw	r30, r10
    7402:	26 87       	std	Z+14, r18	; 0x0e
    7404:	37 87       	std	Z+15, r19	; 0x0f
    7406:	40 8b       	std	Z+16, r20	; 0x10
    7408:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    740a:	ff e0       	ldi	r31, 0x0F	; 15
    740c:	cf 22       	and	r12, r31
    740e:	dd 24       	eor	r13, r13
    7410:	45 e0       	ldi	r20, 0x05	; 5
    7412:	cc 0c       	add	r12, r12
    7414:	dd 1c       	adc	r13, r13
    7416:	4a 95       	dec	r20
    7418:	e1 f7       	brne	.-8      	; 0x7412 <dir_seek+0x1b2>
    741a:	82 e3       	ldi	r24, 0x32	; 50
    741c:	90 e0       	ldi	r25, 0x00	; 0
    741e:	c8 0e       	add	r12, r24
    7420:	d9 1e       	adc	r13, r25
    7422:	d5 01       	movw	r26, r10
    7424:	8d 91       	ld	r24, X+
    7426:	9c 91       	ld	r25, X
    7428:	11 97       	sbiw	r26, 0x01	; 1
    742a:	8c 0d       	add	r24, r12
    742c:	9d 1d       	adc	r25, r13
    742e:	52 96       	adiw	r26, 0x12	; 18
    7430:	8d 93       	st	X+, r24
    7432:	9c 93       	st	X, r25
    7434:	53 97       	sbiw	r26, 0x13	; 19
    7436:	20 e0       	ldi	r18, 0x00	; 0
    7438:	30 e0       	ldi	r19, 0x00	; 0
    743a:	02 c0       	rjmp	.+4      	; 0x7440 <dir_seek+0x1e0>

	return FR_OK;	/* Seek succeeded */
    743c:	22 e0       	ldi	r18, 0x02	; 2
    743e:	30 e0       	ldi	r19, 0x00	; 0
}
    7440:	c9 01       	movw	r24, r18
    7442:	cd b7       	in	r28, 0x3d	; 61
    7444:	de b7       	in	r29, 0x3e	; 62
    7446:	ea e0       	ldi	r30, 0x0A	; 10
    7448:	0c 94 cc 57 	jmp	0xaf98	; 0xaf98 <__epilogue_restores__+0x10>

0000744c <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    744c:	a0 e0       	ldi	r26, 0x00	; 0
    744e:	b0 e0       	ldi	r27, 0x00	; 0
    7450:	ec e2       	ldi	r30, 0x2C	; 44
    7452:	fa e3       	ldi	r31, 0x3A	; 58
    7454:	0c 94 a8 57 	jmp	0xaf50	; 0xaf50 <__prologue_saves__>
    7458:	5c 01       	movw	r10, r24
    745a:	6a 01       	movw	r12, r20
    745c:	7b 01       	movw	r14, r22
    745e:	38 01       	movw	r6, r16
    7460:	49 01       	movw	r8, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    7462:	42 30       	cpi	r20, 0x02	; 2
    7464:	51 05       	cpc	r21, r1
    7466:	61 05       	cpc	r22, r1
    7468:	71 05       	cpc	r23, r1
    746a:	08 f4       	brcc	.+2      	; 0x746e <put_fat+0x22>
    746c:	b1 c0       	rjmp	.+354    	; 0x75d0 <put_fat+0x184>
    746e:	f5 01       	movw	r30, r10
    7470:	86 8d       	ldd	r24, Z+30	; 0x1e
    7472:	97 8d       	ldd	r25, Z+31	; 0x1f
    7474:	a0 a1       	ldd	r26, Z+32	; 0x20
    7476:	b1 a1       	ldd	r27, Z+33	; 0x21
    7478:	48 17       	cp	r20, r24
    747a:	59 07       	cpc	r21, r25
    747c:	6a 07       	cpc	r22, r26
    747e:	7b 07       	cpc	r23, r27
    7480:	08 f0       	brcs	.+2      	; 0x7484 <put_fat+0x38>
    7482:	a6 c0       	rjmp	.+332    	; 0x75d0 <put_fat+0x184>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    7484:	22 a0       	ldd	r2, Z+34	; 0x22
    7486:	33 a0       	ldd	r3, Z+35	; 0x23
    7488:	44 a0       	ldd	r4, Z+36	; 0x24
    748a:	55 a0       	ldd	r5, Z+37	; 0x25
		switch (fs->fs_type) {
    748c:	80 81       	ld	r24, Z
    748e:	82 30       	cpi	r24, 0x02	; 2
    7490:	09 f4       	brne	.+2      	; 0x7494 <put_fat+0x48>
    7492:	66 c0       	rjmp	.+204    	; 0x7560 <put_fat+0x114>
    7494:	83 30       	cpi	r24, 0x03	; 3
    7496:	09 f4       	brne	.+2      	; 0x749a <put_fat+0x4e>
    7498:	7a c0       	rjmp	.+244    	; 0x758e <put_fat+0x142>
    749a:	81 30       	cpi	r24, 0x01	; 1
    749c:	19 f0       	breq	.+6      	; 0x74a4 <put_fat+0x58>
    749e:	42 e0       	ldi	r20, 0x02	; 2
    74a0:	50 e0       	ldi	r21, 0x00	; 0
    74a2:	92 c0       	rjmp	.+292    	; 0x75c8 <put_fat+0x17c>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    74a4:	ea 01       	movw	r28, r20
    74a6:	d6 95       	lsr	r29
    74a8:	c7 95       	ror	r28
    74aa:	c4 0f       	add	r28, r20
    74ac:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    74ae:	ae 01       	movw	r20, r28
    74b0:	45 2f       	mov	r20, r21
    74b2:	55 27       	eor	r21, r21
    74b4:	46 95       	lsr	r20
    74b6:	60 e0       	ldi	r22, 0x00	; 0
    74b8:	70 e0       	ldi	r23, 0x00	; 0
    74ba:	42 0d       	add	r20, r2
    74bc:	53 1d       	adc	r21, r3
    74be:	64 1d       	adc	r22, r4
    74c0:	75 1d       	adc	r23, r5
    74c2:	c5 01       	movw	r24, r10
    74c4:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    74c8:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    74ca:	00 97       	sbiw	r24, 0x00	; 0
    74cc:	09 f0       	breq	.+2      	; 0x74d0 <put_fat+0x84>
    74ce:	7c c0       	rjmp	.+248    	; 0x75c8 <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
    74d0:	de 01       	movw	r26, r28
    74d2:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    74d4:	86 01       	movw	r16, r12
    74d6:	01 70       	andi	r16, 0x01	; 1
    74d8:	10 70       	andi	r17, 0x00	; 0
    74da:	01 15       	cp	r16, r1
    74dc:	11 05       	cpc	r17, r1
    74de:	51 f0       	breq	.+20     	; 0x74f4 <put_fat+0xa8>
    74e0:	f5 01       	movw	r30, r10
    74e2:	ea 0f       	add	r30, r26
    74e4:	fb 1f       	adc	r31, r27
    74e6:	82 a9       	ldd	r24, Z+50	; 0x32
    74e8:	8f 70       	andi	r24, 0x0F	; 15
    74ea:	96 2d       	mov	r25, r6
    74ec:	92 95       	swap	r25
    74ee:	90 7f       	andi	r25, 0xF0	; 240
    74f0:	98 2b       	or	r25, r24
    74f2:	01 c0       	rjmp	.+2      	; 0x74f6 <put_fat+0xaa>
    74f4:	96 2d       	mov	r25, r6
    74f6:	aa 0d       	add	r26, r10
    74f8:	bb 1d       	adc	r27, r11
    74fa:	d2 96       	adiw	r26, 0x32	; 50
    74fc:	9c 93       	st	X, r25
			bc++;
    74fe:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    7500:	81 e0       	ldi	r24, 0x01	; 1
    7502:	f5 01       	movw	r30, r10
    7504:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    7506:	ae 01       	movw	r20, r28
    7508:	45 2f       	mov	r20, r21
    750a:	55 27       	eor	r21, r21
    750c:	46 95       	lsr	r20
    750e:	60 e0       	ldi	r22, 0x00	; 0
    7510:	70 e0       	ldi	r23, 0x00	; 0
    7512:	42 0d       	add	r20, r2
    7514:	53 1d       	adc	r21, r3
    7516:	64 1d       	adc	r22, r4
    7518:	75 1d       	adc	r23, r5
    751a:	c5 01       	movw	r24, r10
    751c:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    7520:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    7522:	00 97       	sbiw	r24, 0x00	; 0
    7524:	09 f0       	breq	.+2      	; 0x7528 <put_fat+0xdc>
    7526:	50 c0       	rjmp	.+160    	; 0x75c8 <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
    7528:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    752a:	01 15       	cp	r16, r1
    752c:	11 05       	cpc	r17, r1
    752e:	49 f0       	breq	.+18     	; 0x7542 <put_fat+0xf6>
    7530:	64 e0       	ldi	r22, 0x04	; 4
    7532:	96 94       	lsr	r9
    7534:	87 94       	ror	r8
    7536:	77 94       	ror	r7
    7538:	67 94       	ror	r6
    753a:	6a 95       	dec	r22
    753c:	d1 f7       	brne	.-12     	; 0x7532 <put_fat+0xe6>
    753e:	66 2d       	mov	r22, r6
    7540:	0b c0       	rjmp	.+22     	; 0x7558 <put_fat+0x10c>
    7542:	f5 01       	movw	r30, r10
    7544:	ec 0f       	add	r30, r28
    7546:	fd 1f       	adc	r31, r29
    7548:	62 a9       	ldd	r22, Z+50	; 0x32
    754a:	60 7f       	andi	r22, 0xF0	; 240
    754c:	bb 27       	eor	r27, r27
    754e:	a9 2d       	mov	r26, r9
    7550:	98 2d       	mov	r25, r8
    7552:	87 2d       	mov	r24, r7
    7554:	8f 70       	andi	r24, 0x0F	; 15
    7556:	68 2b       	or	r22, r24
    7558:	ca 0d       	add	r28, r10
    755a:	db 1d       	adc	r29, r11
    755c:	6a ab       	std	Y+50, r22	; 0x32
    755e:	34 c0       	rjmp	.+104    	; 0x75c8 <put_fat+0x17c>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    7560:	45 2f       	mov	r20, r21
    7562:	56 2f       	mov	r21, r22
    7564:	67 2f       	mov	r22, r23
    7566:	77 27       	eor	r23, r23
    7568:	42 0d       	add	r20, r2
    756a:	53 1d       	adc	r21, r3
    756c:	64 1d       	adc	r22, r4
    756e:	75 1d       	adc	r23, r5
    7570:	c5 01       	movw	r24, r10
    7572:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    7576:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    7578:	00 97       	sbiw	r24, 0x00	; 0
    757a:	31 f5       	brne	.+76     	; 0x75c8 <put_fat+0x17c>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    757c:	f6 01       	movw	r30, r12
    757e:	ee 0f       	add	r30, r30
    7580:	ff 1f       	adc	r31, r31
    7582:	f1 70       	andi	r31, 0x01	; 1
    7584:	ea 0d       	add	r30, r10
    7586:	fb 1d       	adc	r31, r11
    7588:	62 aa       	std	Z+50, r6	; 0x32
    758a:	73 aa       	std	Z+51, r7	; 0x33
    758c:	1d c0       	rjmp	.+58     	; 0x75c8 <put_fat+0x17c>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    758e:	87 e0       	ldi	r24, 0x07	; 7
    7590:	76 95       	lsr	r23
    7592:	67 95       	ror	r22
    7594:	57 95       	ror	r21
    7596:	47 95       	ror	r20
    7598:	8a 95       	dec	r24
    759a:	d1 f7       	brne	.-12     	; 0x7590 <put_fat+0x144>
    759c:	42 0d       	add	r20, r2
    759e:	53 1d       	adc	r21, r3
    75a0:	64 1d       	adc	r22, r4
    75a2:	75 1d       	adc	r23, r5
    75a4:	c5 01       	movw	r24, r10
    75a6:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    75aa:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    75ac:	00 97       	sbiw	r24, 0x00	; 0
    75ae:	61 f4       	brne	.+24     	; 0x75c8 <put_fat+0x17c>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    75b0:	f6 01       	movw	r30, r12
    75b2:	ee 0f       	add	r30, r30
    75b4:	ff 1f       	adc	r31, r31
    75b6:	ee 0f       	add	r30, r30
    75b8:	ff 1f       	adc	r31, r31
    75ba:	f1 70       	andi	r31, 0x01	; 1
    75bc:	ea 0d       	add	r30, r10
    75be:	fb 1d       	adc	r31, r11
    75c0:	62 aa       	std	Z+50, r6	; 0x32
    75c2:	73 aa       	std	Z+51, r7	; 0x33
    75c4:	84 aa       	std	Z+52, r8	; 0x34
    75c6:	95 aa       	std	Z+53, r9	; 0x35
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    75c8:	81 e0       	ldi	r24, 0x01	; 1
    75ca:	f5 01       	movw	r30, r10
    75cc:	84 83       	std	Z+4, r24	; 0x04
    75ce:	02 c0       	rjmp	.+4      	; 0x75d4 <put_fat+0x188>
    75d0:	42 e0       	ldi	r20, 0x02	; 2
    75d2:	50 e0       	ldi	r21, 0x00	; 0
	}

	return res;
}
    75d4:	ca 01       	movw	r24, r20
    75d6:	cd b7       	in	r28, 0x3d	; 61
    75d8:	de b7       	in	r29, 0x3e	; 62
    75da:	e2 e1       	ldi	r30, 0x12	; 18
    75dc:	0c 94 c4 57 	jmp	0xaf88	; 0xaf88 <__epilogue_restores__>

000075e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    75e0:	a4 e0       	ldi	r26, 0x04	; 4
    75e2:	b0 e0       	ldi	r27, 0x00	; 0
    75e4:	e6 ef       	ldi	r30, 0xF6	; 246
    75e6:	fa e3       	ldi	r31, 0x3A	; 58
    75e8:	0c 94 a8 57 	jmp	0xaf50	; 0xaf50 <__prologue_saves__>
    75ec:	1c 01       	movw	r2, r24
    75ee:	2a 01       	movw	r4, r20
    75f0:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    75f2:	dc 01       	movw	r26, r24
    75f4:	5e 96       	adiw	r26, 0x1e	; 30
    75f6:	8d 91       	ld	r24, X+
    75f8:	9d 91       	ld	r25, X+
    75fa:	0d 90       	ld	r0, X+
    75fc:	bc 91       	ld	r27, X
    75fe:	a0 2d       	mov	r26, r0
    7600:	89 83       	std	Y+1, r24	; 0x01
    7602:	9a 83       	std	Y+2, r25	; 0x02
    7604:	ab 83       	std	Y+3, r26	; 0x03
    7606:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    7608:	41 15       	cp	r20, r1
    760a:	51 05       	cpc	r21, r1
    760c:	61 05       	cpc	r22, r1
    760e:	71 05       	cpc	r23, r1
    7610:	81 f4       	brne	.+32     	; 0x7632 <create_chain+0x52>
		scl = fs->last_clust;			/* Get suggested start point */
    7612:	f1 01       	movw	r30, r2
    7614:	82 84       	ldd	r8, Z+10	; 0x0a
    7616:	93 84       	ldd	r9, Z+11	; 0x0b
    7618:	a4 84       	ldd	r10, Z+12	; 0x0c
    761a:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    761c:	81 14       	cp	r8, r1
    761e:	91 04       	cpc	r9, r1
    7620:	a1 04       	cpc	r10, r1
    7622:	b1 04       	cpc	r11, r1
    7624:	11 f1       	breq	.+68     	; 0x766a <create_chain+0x8a>
    7626:	88 16       	cp	r8, r24
    7628:	99 06       	cpc	r9, r25
    762a:	aa 06       	cpc	r10, r26
    762c:	bb 06       	cpc	r11, r27
    762e:	e8 f4       	brcc	.+58     	; 0x766a <create_chain+0x8a>
    7630:	21 c0       	rjmp	.+66     	; 0x7674 <create_chain+0x94>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    7632:	c1 01       	movw	r24, r2
    7634:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <get_fat>
    7638:	9b 01       	movw	r18, r22
    763a:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    763c:	62 30       	cpi	r22, 0x02	; 2
    763e:	71 05       	cpc	r23, r1
    7640:	81 05       	cpc	r24, r1
    7642:	91 05       	cpc	r25, r1
    7644:	28 f4       	brcc	.+10     	; 0x7650 <create_chain+0x70>
    7646:	21 e0       	ldi	r18, 0x01	; 1
    7648:	30 e0       	ldi	r19, 0x00	; 0
    764a:	40 e0       	ldi	r20, 0x00	; 0
    764c:	50 e0       	ldi	r21, 0x00	; 0
    764e:	93 c0       	rjmp	.+294    	; 0x7776 <create_chain+0x196>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    7650:	89 81       	ldd	r24, Y+1	; 0x01
    7652:	9a 81       	ldd	r25, Y+2	; 0x02
    7654:	ab 81       	ldd	r26, Y+3	; 0x03
    7656:	bc 81       	ldd	r27, Y+4	; 0x04
    7658:	28 17       	cp	r18, r24
    765a:	39 07       	cpc	r19, r25
    765c:	4a 07       	cpc	r20, r26
    765e:	5b 07       	cpc	r21, r27
    7660:	08 f4       	brcc	.+2      	; 0x7664 <create_chain+0x84>
    7662:	89 c0       	rjmp	.+274    	; 0x7776 <create_chain+0x196>
    7664:	53 01       	movw	r10, r6
    7666:	42 01       	movw	r8, r4
    7668:	05 c0       	rjmp	.+10     	; 0x7674 <create_chain+0x94>
    766a:	b1 e0       	ldi	r27, 0x01	; 1
    766c:	8b 2e       	mov	r8, r27
    766e:	91 2c       	mov	r9, r1
    7670:	a1 2c       	mov	r10, r1
    7672:	b1 2c       	mov	r11, r1
    7674:	75 01       	movw	r14, r10
    7676:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    7678:	08 94       	sec
    767a:	c1 1c       	adc	r12, r1
    767c:	d1 1c       	adc	r13, r1
    767e:	e1 1c       	adc	r14, r1
    7680:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    7682:	89 81       	ldd	r24, Y+1	; 0x01
    7684:	9a 81       	ldd	r25, Y+2	; 0x02
    7686:	ab 81       	ldd	r26, Y+3	; 0x03
    7688:	bc 81       	ldd	r27, Y+4	; 0x04
    768a:	c8 16       	cp	r12, r24
    768c:	d9 06       	cpc	r13, r25
    768e:	ea 06       	cpc	r14, r26
    7690:	fb 06       	cpc	r15, r27
    7692:	60 f0       	brcs	.+24     	; 0x76ac <create_chain+0xcc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    7694:	92 e0       	ldi	r25, 0x02	; 2
    7696:	89 16       	cp	r8, r25
    7698:	91 04       	cpc	r9, r1
    769a:	a1 04       	cpc	r10, r1
    769c:	b1 04       	cpc	r11, r1
    769e:	08 f4       	brcc	.+2      	; 0x76a2 <create_chain+0xc2>
    76a0:	61 c0       	rjmp	.+194    	; 0x7764 <create_chain+0x184>
    76a2:	a2 e0       	ldi	r26, 0x02	; 2
    76a4:	ca 2e       	mov	r12, r26
    76a6:	d1 2c       	mov	r13, r1
    76a8:	e1 2c       	mov	r14, r1
    76aa:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    76ac:	c1 01       	movw	r24, r2
    76ae:	b7 01       	movw	r22, r14
    76b0:	a6 01       	movw	r20, r12
    76b2:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <get_fat>
    76b6:	9b 01       	movw	r18, r22
    76b8:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    76ba:	61 15       	cp	r22, r1
    76bc:	71 05       	cpc	r23, r1
    76be:	81 05       	cpc	r24, r1
    76c0:	91 05       	cpc	r25, r1
    76c2:	a9 f0       	breq	.+42     	; 0x76ee <create_chain+0x10e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    76c4:	6f 3f       	cpi	r22, 0xFF	; 255
    76c6:	af ef       	ldi	r26, 0xFF	; 255
    76c8:	7a 07       	cpc	r23, r26
    76ca:	af ef       	ldi	r26, 0xFF	; 255
    76cc:	8a 07       	cpc	r24, r26
    76ce:	af ef       	ldi	r26, 0xFF	; 255
    76d0:	9a 07       	cpc	r25, r26
    76d2:	09 f4       	brne	.+2      	; 0x76d6 <create_chain+0xf6>
    76d4:	50 c0       	rjmp	.+160    	; 0x7776 <create_chain+0x196>
    76d6:	61 30       	cpi	r22, 0x01	; 1
    76d8:	71 05       	cpc	r23, r1
    76da:	81 05       	cpc	r24, r1
    76dc:	91 05       	cpc	r25, r1
    76de:	09 f4       	brne	.+2      	; 0x76e2 <create_chain+0x102>
    76e0:	4a c0       	rjmp	.+148    	; 0x7776 <create_chain+0x196>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    76e2:	c8 14       	cp	r12, r8
    76e4:	d9 04       	cpc	r13, r9
    76e6:	ea 04       	cpc	r14, r10
    76e8:	fb 04       	cpc	r15, r11
    76ea:	31 f6       	brne	.-116    	; 0x7678 <create_chain+0x98>
    76ec:	3b c0       	rjmp	.+118    	; 0x7764 <create_chain+0x184>
    76ee:	bc 2c       	mov	r11, r12
    76f0:	ad 2c       	mov	r10, r13
    76f2:	9e 2c       	mov	r9, r14
    76f4:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    76f6:	c1 01       	movw	r24, r2
    76f8:	a6 01       	movw	r20, r12
    76fa:	b7 01       	movw	r22, r14
    76fc:	0f ef       	ldi	r16, 0xFF	; 255
    76fe:	1f ef       	ldi	r17, 0xFF	; 255
    7700:	2f ef       	ldi	r18, 0xFF	; 255
    7702:	3f e0       	ldi	r19, 0x0F	; 15
    7704:	0e 94 26 3a 	call	0x744c	; 0x744c <put_fat>
    7708:	89 2b       	or	r24, r25
    770a:	89 f5       	brne	.+98     	; 0x776e <create_chain+0x18e>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    770c:	41 14       	cp	r4, r1
    770e:	51 04       	cpc	r5, r1
    7710:	61 04       	cpc	r6, r1
    7712:	71 04       	cpc	r7, r1
    7714:	49 f0       	breq	.+18     	; 0x7728 <create_chain+0x148>
		if (put_fat(fs, clst, ncl))
    7716:	c1 01       	movw	r24, r2
    7718:	b3 01       	movw	r22, r6
    771a:	a2 01       	movw	r20, r4
    771c:	86 01       	movw	r16, r12
    771e:	97 01       	movw	r18, r14
    7720:	0e 94 26 3a 	call	0x744c	; 0x744c <put_fat>
    7724:	89 2b       	or	r24, r25
    7726:	19 f5       	brne	.+70     	; 0x776e <create_chain+0x18e>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    7728:	f1 01       	movw	r30, r2
    772a:	b2 86       	std	Z+10, r11	; 0x0a
    772c:	a3 86       	std	Z+11, r10	; 0x0b
    772e:	94 86       	std	Z+12, r9	; 0x0c
    7730:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    7732:	86 85       	ldd	r24, Z+14	; 0x0e
    7734:	97 85       	ldd	r25, Z+15	; 0x0f
    7736:	a0 89       	ldd	r26, Z+16	; 0x10
    7738:	b1 89       	ldd	r27, Z+17	; 0x11
    773a:	8f 3f       	cpi	r24, 0xFF	; 255
    773c:	ff ef       	ldi	r31, 0xFF	; 255
    773e:	9f 07       	cpc	r25, r31
    7740:	ff ef       	ldi	r31, 0xFF	; 255
    7742:	af 07       	cpc	r26, r31
    7744:	ff ef       	ldi	r31, 0xFF	; 255
    7746:	bf 07       	cpc	r27, r31
    7748:	51 f0       	breq	.+20     	; 0x775e <create_chain+0x17e>
		fs->free_clust--;
    774a:	01 97       	sbiw	r24, 0x01	; 1
    774c:	a1 09       	sbc	r26, r1
    774e:	b1 09       	sbc	r27, r1
    7750:	f1 01       	movw	r30, r2
    7752:	86 87       	std	Z+14, r24	; 0x0e
    7754:	97 87       	std	Z+15, r25	; 0x0f
    7756:	a0 8b       	std	Z+16, r26	; 0x10
    7758:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    775a:	81 e0       	ldi	r24, 0x01	; 1
    775c:	81 87       	std	Z+9, r24	; 0x09
    775e:	a7 01       	movw	r20, r14
    7760:	96 01       	movw	r18, r12
    7762:	09 c0       	rjmp	.+18     	; 0x7776 <create_chain+0x196>
    7764:	20 e0       	ldi	r18, 0x00	; 0
    7766:	30 e0       	ldi	r19, 0x00	; 0
    7768:	40 e0       	ldi	r20, 0x00	; 0
    776a:	50 e0       	ldi	r21, 0x00	; 0
    776c:	04 c0       	rjmp	.+8      	; 0x7776 <create_chain+0x196>
    776e:	2f ef       	ldi	r18, 0xFF	; 255
    7770:	3f ef       	ldi	r19, 0xFF	; 255
    7772:	4f ef       	ldi	r20, 0xFF	; 255
    7774:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    7776:	b9 01       	movw	r22, r18
    7778:	ca 01       	movw	r24, r20
    777a:	24 96       	adiw	r28, 0x04	; 4
    777c:	e2 e1       	ldi	r30, 0x12	; 18
    777e:	0c 94 c4 57 	jmp	0xaf88	; 0xaf88 <__epilogue_restores__>

00007782 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    7782:	a6 e0       	ldi	r26, 0x06	; 6
    7784:	b0 e0       	ldi	r27, 0x00	; 0
    7786:	e7 ec       	ldi	r30, 0xC7	; 199
    7788:	fb e3       	ldi	r31, 0x3B	; 59
    778a:	0c 94 a8 57 	jmp	0xaf50	; 0xaf50 <__prologue_saves__>
    778e:	8d 83       	std	Y+5, r24	; 0x05
    7790:	9e 83       	std	Y+6, r25	; 0x06
    7792:	3a 01       	movw	r6, r20
    7794:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    7796:	dc 01       	movw	r26, r24
    7798:	12 96       	adiw	r26, 0x02	; 2
    779a:	6d 91       	ld	r22, X+
    779c:	7c 91       	ld	r23, X
    779e:	13 97       	sbiw	r26, 0x03	; 3
    77a0:	8d 91       	ld	r24, X+
    77a2:	9c 91       	ld	r25, X
    77a4:	0e 94 e9 35 	call	0x6bd2	; 0x6bd2 <validate>
    77a8:	8b 83       	std	Y+3, r24	; 0x03
    77aa:	9c 83       	std	Y+4, r25	; 0x04
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    77ac:	89 2b       	or	r24, r25
    77ae:	09 f0       	breq	.+2      	; 0x77b2 <f_lseek+0x30>
    77b0:	c7 c1       	rjmp	.+910    	; 0x7b40 <f_lseek+0x3be>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    77b2:	ed 81       	ldd	r30, Y+5	; 0x05
    77b4:	fe 81       	ldd	r31, Y+6	; 0x06
    77b6:	84 81       	ldd	r24, Z+4	; 0x04
    77b8:	87 fd       	sbrc	r24, 7
    77ba:	92 c0       	rjmp	.+292    	; 0x78e0 <f_lseek+0x15e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    77bc:	ad 81       	ldd	r26, Y+5	; 0x05
    77be:	be 81       	ldd	r27, Y+6	; 0x06
    77c0:	1a 96       	adiw	r26, 0x0a	; 10
    77c2:	ad 90       	ld	r10, X+
    77c4:	bd 90       	ld	r11, X+
    77c6:	cd 90       	ld	r12, X+
    77c8:	dc 90       	ld	r13, X
    77ca:	1d 97       	sbiw	r26, 0x0d	; 13
    77cc:	a6 14       	cp	r10, r6
    77ce:	b7 04       	cpc	r11, r7
    77d0:	c8 04       	cpc	r12, r8
    77d2:	d9 04       	cpc	r13, r9
    77d4:	10 f4       	brcc	.+4      	; 0x77da <f_lseek+0x58>
    77d6:	81 ff       	sbrs	r24, 1
    77d8:	02 c0       	rjmp	.+4      	; 0x77de <f_lseek+0x5c>
    77da:	64 01       	movw	r12, r8
    77dc:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    77de:	ed 81       	ldd	r30, Y+5	; 0x05
    77e0:	fe 81       	ldd	r31, Y+6	; 0x06
    77e2:	26 81       	ldd	r18, Z+6	; 0x06
    77e4:	37 81       	ldd	r19, Z+7	; 0x07
    77e6:	40 85       	ldd	r20, Z+8	; 0x08
    77e8:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    77ea:	16 82       	std	Z+6, r1	; 0x06
    77ec:	17 82       	std	Z+7, r1	; 0x07
    77ee:	10 86       	std	Z+8, r1	; 0x08
    77f0:	11 86       	std	Z+9, r1	; 0x09
    77f2:	8f ef       	ldi	r24, 0xFF	; 255
    77f4:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    77f6:	a1 14       	cp	r10, r1
    77f8:	b1 04       	cpc	r11, r1
    77fa:	c1 04       	cpc	r12, r1
    77fc:	d1 04       	cpc	r13, r1
    77fe:	09 f4       	brne	.+2      	; 0x7802 <f_lseek+0x80>
    7800:	6b c1       	rjmp	.+726    	; 0x7ad8 <f_lseek+0x356>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    7802:	01 90       	ld	r0, Z+
    7804:	f0 81       	ld	r31, Z
    7806:	e0 2d       	mov	r30, r0
    7808:	e9 83       	std	Y+1, r30	; 0x01
    780a:	fa 83       	std	Y+2, r31	; 0x02
    780c:	82 81       	ldd	r24, Z+2	; 0x02
    780e:	68 2e       	mov	r6, r24
    7810:	77 24       	eor	r7, r7
    7812:	88 24       	eor	r8, r8
    7814:	99 24       	eor	r9, r9
    7816:	69 e0       	ldi	r22, 0x09	; 9
    7818:	66 0c       	add	r6, r6
    781a:	77 1c       	adc	r7, r7
    781c:	88 1c       	adc	r8, r8
    781e:	99 1c       	adc	r9, r9
    7820:	6a 95       	dec	r22
    7822:	d1 f7       	brne	.-12     	; 0x7818 <f_lseek+0x96>
		if (ifptr > 0 &&
    7824:	21 15       	cp	r18, r1
    7826:	31 05       	cpc	r19, r1
    7828:	41 05       	cpc	r20, r1
    782a:	51 05       	cpc	r21, r1
    782c:	c1 f1       	breq	.+112    	; 0x789e <f_lseek+0x11c>
    782e:	19 01       	movw	r2, r18
    7830:	2a 01       	movw	r4, r20
    7832:	08 94       	sec
    7834:	21 08       	sbc	r2, r1
    7836:	31 08       	sbc	r3, r1
    7838:	41 08       	sbc	r4, r1
    783a:	51 08       	sbc	r5, r1
    783c:	c6 01       	movw	r24, r12
    783e:	b5 01       	movw	r22, r10
    7840:	61 50       	subi	r22, 0x01	; 1
    7842:	70 40       	sbci	r23, 0x00	; 0
    7844:	80 40       	sbci	r24, 0x00	; 0
    7846:	90 40       	sbci	r25, 0x00	; 0
    7848:	a4 01       	movw	r20, r8
    784a:	93 01       	movw	r18, r6
    784c:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    7850:	79 01       	movw	r14, r18
    7852:	8a 01       	movw	r16, r20
    7854:	c2 01       	movw	r24, r4
    7856:	b1 01       	movw	r22, r2
    7858:	a4 01       	movw	r20, r8
    785a:	93 01       	movw	r18, r6
    785c:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    7860:	e2 16       	cp	r14, r18
    7862:	f3 06       	cpc	r15, r19
    7864:	04 07       	cpc	r16, r20
    7866:	15 07       	cpc	r17, r21
    7868:	d0 f0       	brcs	.+52     	; 0x789e <f_lseek+0x11c>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    786a:	88 27       	eor	r24, r24
    786c:	99 27       	eor	r25, r25
    786e:	dc 01       	movw	r26, r24
    7870:	86 19       	sub	r24, r6
    7872:	97 09       	sbc	r25, r7
    7874:	a8 09       	sbc	r26, r8
    7876:	b9 09       	sbc	r27, r9
    7878:	82 21       	and	r24, r2
    787a:	93 21       	and	r25, r3
    787c:	a4 21       	and	r26, r4
    787e:	b5 21       	and	r27, r5
    7880:	ed 81       	ldd	r30, Y+5	; 0x05
    7882:	fe 81       	ldd	r31, Y+6	; 0x06
    7884:	86 83       	std	Z+6, r24	; 0x06
    7886:	97 83       	std	Z+7, r25	; 0x07
    7888:	a0 87       	std	Z+8, r26	; 0x08
    788a:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    788c:	a8 1a       	sub	r10, r24
    788e:	b9 0a       	sbc	r11, r25
    7890:	ca 0a       	sbc	r12, r26
    7892:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    7894:	42 89       	ldd	r20, Z+18	; 0x12
    7896:	53 89       	ldd	r21, Z+19	; 0x13
    7898:	64 89       	ldd	r22, Z+20	; 0x14
    789a:	75 89       	ldd	r23, Z+21	; 0x15
    789c:	47 c0       	rjmp	.+142    	; 0x792c <f_lseek+0x1aa>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    789e:	ad 81       	ldd	r26, Y+5	; 0x05
    78a0:	be 81       	ldd	r27, Y+6	; 0x06
    78a2:	1e 96       	adiw	r26, 0x0e	; 14
    78a4:	4d 91       	ld	r20, X+
    78a6:	5d 91       	ld	r21, X+
    78a8:	6d 91       	ld	r22, X+
    78aa:	7c 91       	ld	r23, X
    78ac:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    78ae:	41 15       	cp	r20, r1
    78b0:	51 05       	cpc	r21, r1
    78b2:	61 05       	cpc	r22, r1
    78b4:	71 05       	cpc	r23, r1
    78b6:	a1 f5       	brne	.+104    	; 0x7920 <f_lseek+0x19e>
				clst = create_chain(fp->fs, 0);
    78b8:	89 81       	ldd	r24, Y+1	; 0x01
    78ba:	9a 81       	ldd	r25, Y+2	; 0x02
    78bc:	40 e0       	ldi	r20, 0x00	; 0
    78be:	50 e0       	ldi	r21, 0x00	; 0
    78c0:	60 e0       	ldi	r22, 0x00	; 0
    78c2:	70 e0       	ldi	r23, 0x00	; 0
    78c4:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <create_chain>
    78c8:	ab 01       	movw	r20, r22
    78ca:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    78cc:	41 30       	cpi	r20, 0x01	; 1
    78ce:	51 05       	cpc	r21, r1
    78d0:	61 05       	cpc	r22, r1
    78d2:	71 05       	cpc	r23, r1
    78d4:	51 f4       	brne	.+20     	; 0x78ea <f_lseek+0x168>
    78d6:	ed 81       	ldd	r30, Y+5	; 0x05
    78d8:	fe 81       	ldd	r31, Y+6	; 0x06
    78da:	84 81       	ldd	r24, Z+4	; 0x04
    78dc:	80 68       	ori	r24, 0x80	; 128
    78de:	84 83       	std	Z+4, r24	; 0x04
    78e0:	82 e0       	ldi	r24, 0x02	; 2
    78e2:	90 e0       	ldi	r25, 0x00	; 0
    78e4:	8b 83       	std	Y+3, r24	; 0x03
    78e6:	9c 83       	std	Y+4, r25	; 0x04
    78e8:	2b c1       	rjmp	.+598    	; 0x7b40 <f_lseek+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    78ea:	4f 3f       	cpi	r20, 0xFF	; 255
    78ec:	9f ef       	ldi	r25, 0xFF	; 255
    78ee:	59 07       	cpc	r21, r25
    78f0:	9f ef       	ldi	r25, 0xFF	; 255
    78f2:	69 07       	cpc	r22, r25
    78f4:	9f ef       	ldi	r25, 0xFF	; 255
    78f6:	79 07       	cpc	r23, r25
    78f8:	59 f4       	brne	.+22     	; 0x7910 <f_lseek+0x18e>
    78fa:	ad 81       	ldd	r26, Y+5	; 0x05
    78fc:	be 81       	ldd	r27, Y+6	; 0x06
    78fe:	14 96       	adiw	r26, 0x04	; 4
    7900:	8c 91       	ld	r24, X
    7902:	14 97       	sbiw	r26, 0x04	; 4
    7904:	80 68       	ori	r24, 0x80	; 128
    7906:	14 96       	adiw	r26, 0x04	; 4
    7908:	8c 93       	st	X, r24
    790a:	e1 e0       	ldi	r30, 0x01	; 1
    790c:	f0 e0       	ldi	r31, 0x00	; 0
    790e:	d7 c0       	rjmp	.+430    	; 0x7abe <f_lseek+0x33c>
				fp->org_clust = clst;
    7910:	ad 81       	ldd	r26, Y+5	; 0x05
    7912:	be 81       	ldd	r27, Y+6	; 0x06
    7914:	1e 96       	adiw	r26, 0x0e	; 14
    7916:	4d 93       	st	X+, r20
    7918:	5d 93       	st	X+, r21
    791a:	6d 93       	st	X+, r22
    791c:	7c 93       	st	X, r23
    791e:	51 97       	sbiw	r26, 0x11	; 17
			}
#endif
			fp->curr_clust = clst;
    7920:	ed 81       	ldd	r30, Y+5	; 0x05
    7922:	fe 81       	ldd	r31, Y+6	; 0x06
    7924:	42 8b       	std	Z+18, r20	; 0x12
    7926:	53 8b       	std	Z+19, r21	; 0x13
    7928:	64 8b       	std	Z+20, r22	; 0x14
    792a:	75 8b       	std	Z+21, r23	; 0x15
		}
		if (clst != 0) {
    792c:	41 15       	cp	r20, r1
    792e:	51 05       	cpc	r21, r1
    7930:	61 05       	cpc	r22, r1
    7932:	71 05       	cpc	r23, r1
    7934:	09 f0       	breq	.+2      	; 0x7938 <f_lseek+0x1b6>
    7936:	59 c0       	rjmp	.+178    	; 0x79ea <f_lseek+0x268>
    7938:	cf c0       	rjmp	.+414    	; 0x7ad8 <f_lseek+0x356>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    793a:	ad 81       	ldd	r26, Y+5	; 0x05
    793c:	be 81       	ldd	r27, Y+6	; 0x06
    793e:	14 96       	adiw	r26, 0x04	; 4
    7940:	8c 91       	ld	r24, X
    7942:	14 97       	sbiw	r26, 0x04	; 4
    7944:	2d 91       	ld	r18, X+
    7946:	3c 91       	ld	r19, X
    7948:	81 ff       	sbrs	r24, 1
    794a:	0d c0       	rjmp	.+26     	; 0x7966 <f_lseek+0x1e4>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    794c:	c9 01       	movw	r24, r18
    794e:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <create_chain>
    7952:	ab 01       	movw	r20, r22
    7954:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    7956:	41 15       	cp	r20, r1
    7958:	51 05       	cpc	r21, r1
    795a:	61 05       	cpc	r22, r1
    795c:	71 05       	cpc	r23, r1
    795e:	41 f4       	brne	.+16     	; 0x7970 <f_lseek+0x1ee>
    7960:	64 01       	movw	r12, r8
    7962:	53 01       	movw	r10, r6
    7964:	48 c0       	rjmp	.+144    	; 0x79f6 <f_lseek+0x274>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    7966:	c9 01       	movw	r24, r18
    7968:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <get_fat>
    796c:	ab 01       	movw	r20, r22
    796e:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    7970:	4f 3f       	cpi	r20, 0xFF	; 255
    7972:	bf ef       	ldi	r27, 0xFF	; 255
    7974:	5b 07       	cpc	r21, r27
    7976:	bf ef       	ldi	r27, 0xFF	; 255
    7978:	6b 07       	cpc	r22, r27
    797a:	bf ef       	ldi	r27, 0xFF	; 255
    797c:	7b 07       	cpc	r23, r27
    797e:	41 f4       	brne	.+16     	; 0x7990 <f_lseek+0x20e>
    7980:	ed 81       	ldd	r30, Y+5	; 0x05
    7982:	fe 81       	ldd	r31, Y+6	; 0x06
    7984:	84 81       	ldd	r24, Z+4	; 0x04
    7986:	80 68       	ori	r24, 0x80	; 128
    7988:	84 83       	std	Z+4, r24	; 0x04
    798a:	81 e0       	ldi	r24, 0x01	; 1
    798c:	90 e0       	ldi	r25, 0x00	; 0
    798e:	aa cf       	rjmp	.-172    	; 0x78e4 <f_lseek+0x162>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    7990:	42 30       	cpi	r20, 0x02	; 2
    7992:	51 05       	cpc	r21, r1
    7994:	61 05       	cpc	r22, r1
    7996:	71 05       	cpc	r23, r1
    7998:	08 f4       	brcc	.+2      	; 0x799c <f_lseek+0x21a>
    799a:	9d cf       	rjmp	.-198    	; 0x78d6 <f_lseek+0x154>
    799c:	ad 81       	ldd	r26, Y+5	; 0x05
    799e:	be 81       	ldd	r27, Y+6	; 0x06
    79a0:	ed 91       	ld	r30, X+
    79a2:	fc 91       	ld	r31, X
    79a4:	86 8d       	ldd	r24, Z+30	; 0x1e
    79a6:	97 8d       	ldd	r25, Z+31	; 0x1f
    79a8:	a0 a1       	ldd	r26, Z+32	; 0x20
    79aa:	b1 a1       	ldd	r27, Z+33	; 0x21
    79ac:	48 17       	cp	r20, r24
    79ae:	59 07       	cpc	r21, r25
    79b0:	6a 07       	cpc	r22, r26
    79b2:	7b 07       	cpc	r23, r27
    79b4:	08 f0       	brcs	.+2      	; 0x79b8 <f_lseek+0x236>
    79b6:	8f cf       	rjmp	.-226    	; 0x78d6 <f_lseek+0x154>
				fp->curr_clust = clst;
    79b8:	ad 81       	ldd	r26, Y+5	; 0x05
    79ba:	be 81       	ldd	r27, Y+6	; 0x06
    79bc:	52 96       	adiw	r26, 0x12	; 18
    79be:	4d 93       	st	X+, r20
    79c0:	5d 93       	st	X+, r21
    79c2:	6d 93       	st	X+, r22
    79c4:	7c 93       	st	X, r23
    79c6:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    79c8:	fd 01       	movw	r30, r26
    79ca:	86 81       	ldd	r24, Z+6	; 0x06
    79cc:	97 81       	ldd	r25, Z+7	; 0x07
    79ce:	a0 85       	ldd	r26, Z+8	; 0x08
    79d0:	b1 85       	ldd	r27, Z+9	; 0x09
    79d2:	86 0d       	add	r24, r6
    79d4:	97 1d       	adc	r25, r7
    79d6:	a8 1d       	adc	r26, r8
    79d8:	b9 1d       	adc	r27, r9
    79da:	86 83       	std	Z+6, r24	; 0x06
    79dc:	97 83       	std	Z+7, r25	; 0x07
    79de:	a0 87       	std	Z+8, r26	; 0x08
    79e0:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    79e2:	a6 18       	sub	r10, r6
    79e4:	b7 08       	sbc	r11, r7
    79e6:	c8 08       	sbc	r12, r8
    79e8:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    79ea:	6a 14       	cp	r6, r10
    79ec:	7b 04       	cpc	r7, r11
    79ee:	8c 04       	cpc	r8, r12
    79f0:	9d 04       	cpc	r9, r13
    79f2:	08 f4       	brcc	.+2      	; 0x79f6 <f_lseek+0x274>
    79f4:	a2 cf       	rjmp	.-188    	; 0x793a <f_lseek+0x1b8>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    79f6:	ed 81       	ldd	r30, Y+5	; 0x05
    79f8:	fe 81       	ldd	r31, Y+6	; 0x06
    79fa:	86 81       	ldd	r24, Z+6	; 0x06
    79fc:	97 81       	ldd	r25, Z+7	; 0x07
    79fe:	a0 85       	ldd	r26, Z+8	; 0x08
    7a00:	b1 85       	ldd	r27, Z+9	; 0x09
    7a02:	8a 0d       	add	r24, r10
    7a04:	9b 1d       	adc	r25, r11
    7a06:	ac 1d       	adc	r26, r12
    7a08:	bd 1d       	adc	r27, r13
    7a0a:	86 83       	std	Z+6, r24	; 0x06
    7a0c:	97 83       	std	Z+7, r25	; 0x07
    7a0e:	a0 87       	std	Z+8, r26	; 0x08
    7a10:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    7a12:	d6 01       	movw	r26, r12
    7a14:	c5 01       	movw	r24, r10
    7a16:	29 e0       	ldi	r18, 0x09	; 9
    7a18:	b6 95       	lsr	r27
    7a1a:	a7 95       	ror	r26
    7a1c:	97 95       	ror	r25
    7a1e:	87 95       	ror	r24
    7a20:	2a 95       	dec	r18
    7a22:	d1 f7       	brne	.-12     	; 0x7a18 <f_lseek+0x296>
    7a24:	e8 2e       	mov	r14, r24
    7a26:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    7a28:	8f ef       	ldi	r24, 0xFF	; 255
    7a2a:	91 e0       	ldi	r25, 0x01	; 1
    7a2c:	a0 e0       	ldi	r26, 0x00	; 0
    7a2e:	b0 e0       	ldi	r27, 0x00	; 0
    7a30:	a8 22       	and	r10, r24
    7a32:	b9 22       	and	r11, r25
    7a34:	ca 22       	and	r12, r26
    7a36:	db 22       	and	r13, r27
    7a38:	a1 14       	cp	r10, r1
    7a3a:	b1 04       	cpc	r11, r1
    7a3c:	c1 04       	cpc	r12, r1
    7a3e:	d1 04       	cpc	r13, r1
    7a40:	09 f4       	brne	.+2      	; 0x7a44 <f_lseek+0x2c2>
    7a42:	4a c0       	rjmp	.+148    	; 0x7ad8 <f_lseek+0x356>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    7a44:	80 80       	ld	r8, Z
    7a46:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    7a48:	8e ef       	ldi	r24, 0xFE	; 254
    7a4a:	a8 2e       	mov	r10, r24
    7a4c:	8f ef       	ldi	r24, 0xFF	; 255
    7a4e:	b8 2e       	mov	r11, r24
    7a50:	8f ef       	ldi	r24, 0xFF	; 255
    7a52:	c8 2e       	mov	r12, r24
    7a54:	8f ef       	ldi	r24, 0xFF	; 255
    7a56:	d8 2e       	mov	r13, r24
    7a58:	a4 0e       	add	r10, r20
    7a5a:	b5 1e       	adc	r11, r21
    7a5c:	c6 1e       	adc	r12, r22
    7a5e:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    7a60:	f4 01       	movw	r30, r8
    7a62:	86 8d       	ldd	r24, Z+30	; 0x1e
    7a64:	97 8d       	ldd	r25, Z+31	; 0x1f
    7a66:	a0 a1       	ldd	r26, Z+32	; 0x20
    7a68:	b1 a1       	ldd	r27, Z+33	; 0x21
    7a6a:	02 97       	sbiw	r24, 0x02	; 2
    7a6c:	a1 09       	sbc	r26, r1
    7a6e:	b1 09       	sbc	r27, r1
    7a70:	a8 16       	cp	r10, r24
    7a72:	b9 06       	cpc	r11, r25
    7a74:	ca 06       	cpc	r12, r26
    7a76:	db 06       	cpc	r13, r27
    7a78:	c0 f4       	brcc	.+48     	; 0x7aaa <f_lseek+0x328>
	return clst * fs->csize + fs->database;
    7a7a:	22 81       	ldd	r18, Z+2	; 0x02
    7a7c:	30 e0       	ldi	r19, 0x00	; 0
    7a7e:	40 e0       	ldi	r20, 0x00	; 0
    7a80:	50 e0       	ldi	r21, 0x00	; 0
    7a82:	c6 01       	movw	r24, r12
    7a84:	b5 01       	movw	r22, r10
    7a86:	0e 94 25 57 	call	0xae4a	; 0xae4a <__mulsi3>
    7a8a:	9b 01       	movw	r18, r22
    7a8c:	ac 01       	movw	r20, r24
    7a8e:	f4 01       	movw	r30, r8
    7a90:	82 a5       	ldd	r24, Z+42	; 0x2a
    7a92:	93 a5       	ldd	r25, Z+43	; 0x2b
    7a94:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7a96:	b5 a5       	ldd	r27, Z+45	; 0x2d
    7a98:	28 0f       	add	r18, r24
    7a9a:	39 1f       	adc	r19, r25
    7a9c:	4a 1f       	adc	r20, r26
    7a9e:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    7aa0:	21 15       	cp	r18, r1
    7aa2:	31 05       	cpc	r19, r1
    7aa4:	41 05       	cpc	r20, r1
    7aa6:	51 05       	cpc	r21, r1
    7aa8:	69 f4       	brne	.+26     	; 0x7ac4 <f_lseek+0x342>
    7aaa:	ad 81       	ldd	r26, Y+5	; 0x05
    7aac:	be 81       	ldd	r27, Y+6	; 0x06
    7aae:	14 96       	adiw	r26, 0x04	; 4
    7ab0:	8c 91       	ld	r24, X
    7ab2:	14 97       	sbiw	r26, 0x04	; 4
    7ab4:	80 68       	ori	r24, 0x80	; 128
    7ab6:	14 96       	adiw	r26, 0x04	; 4
    7ab8:	8c 93       	st	X, r24
    7aba:	e2 e0       	ldi	r30, 0x02	; 2
    7abc:	f0 e0       	ldi	r31, 0x00	; 0
    7abe:	eb 83       	std	Y+3, r30	; 0x03
    7ac0:	fc 83       	std	Y+4, r31	; 0x04
    7ac2:	3e c0       	rjmp	.+124    	; 0x7b40 <f_lseek+0x3be>
				nsect += fp->csect;
    7ac4:	2e 0d       	add	r18, r14
    7ac6:	31 1d       	adc	r19, r1
    7ac8:	41 1d       	adc	r20, r1
    7aca:	51 1d       	adc	r21, r1
				fp->csect++;
    7acc:	e3 94       	inc	r14
    7ace:	ad 81       	ldd	r26, Y+5	; 0x05
    7ad0:	be 81       	ldd	r27, Y+6	; 0x06
    7ad2:	15 96       	adiw	r26, 0x05	; 5
    7ad4:	ec 92       	st	X, r14
    7ad6:	04 c0       	rjmp	.+8      	; 0x7ae0 <f_lseek+0x35e>
    7ad8:	20 e0       	ldi	r18, 0x00	; 0
    7ada:	30 e0       	ldi	r19, 0x00	; 0
    7adc:	40 e0       	ldi	r20, 0x00	; 0
    7ade:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    7ae0:	ed 81       	ldd	r30, Y+5	; 0x05
    7ae2:	fe 81       	ldd	r31, Y+6	; 0x06
    7ae4:	86 81       	ldd	r24, Z+6	; 0x06
    7ae6:	97 81       	ldd	r25, Z+7	; 0x07
    7ae8:	a0 85       	ldd	r26, Z+8	; 0x08
    7aea:	b1 85       	ldd	r27, Z+9	; 0x09
    7aec:	91 70       	andi	r25, 0x01	; 1
    7aee:	a0 70       	andi	r26, 0x00	; 0
    7af0:	b0 70       	andi	r27, 0x00	; 0
    7af2:	00 97       	sbiw	r24, 0x00	; 0
    7af4:	a1 05       	cpc	r26, r1
    7af6:	b1 05       	cpc	r27, r1
    7af8:	69 f0       	breq	.+26     	; 0x7b14 <f_lseek+0x392>
    7afa:	86 89       	ldd	r24, Z+22	; 0x16
    7afc:	97 89       	ldd	r25, Z+23	; 0x17
    7afe:	a0 8d       	ldd	r26, Z+24	; 0x18
    7b00:	b1 8d       	ldd	r27, Z+25	; 0x19
    7b02:	28 17       	cp	r18, r24
    7b04:	39 07       	cpc	r19, r25
    7b06:	4a 07       	cpc	r20, r26
    7b08:	5b 07       	cpc	r21, r27
    7b0a:	21 f0       	breq	.+8      	; 0x7b14 <f_lseek+0x392>
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
			ABORT(fp->fs, FR_DISK_ERR);
#endif
		fp->dsect = nsect;
    7b0c:	26 8b       	std	Z+22, r18	; 0x16
    7b0e:	37 8b       	std	Z+23, r19	; 0x17
    7b10:	40 8f       	std	Z+24, r20	; 0x18
    7b12:	51 8f       	std	Z+25, r21	; 0x19
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    7b14:	ed 81       	ldd	r30, Y+5	; 0x05
    7b16:	fe 81       	ldd	r31, Y+6	; 0x06
    7b18:	26 81       	ldd	r18, Z+6	; 0x06
    7b1a:	37 81       	ldd	r19, Z+7	; 0x07
    7b1c:	40 85       	ldd	r20, Z+8	; 0x08
    7b1e:	51 85       	ldd	r21, Z+9	; 0x09
    7b20:	82 85       	ldd	r24, Z+10	; 0x0a
    7b22:	93 85       	ldd	r25, Z+11	; 0x0b
    7b24:	a4 85       	ldd	r26, Z+12	; 0x0c
    7b26:	b5 85       	ldd	r27, Z+13	; 0x0d
    7b28:	82 17       	cp	r24, r18
    7b2a:	93 07       	cpc	r25, r19
    7b2c:	a4 07       	cpc	r26, r20
    7b2e:	b5 07       	cpc	r27, r21
    7b30:	38 f4       	brcc	.+14     	; 0x7b40 <f_lseek+0x3be>
		fp->fsize = fp->fptr;
    7b32:	22 87       	std	Z+10, r18	; 0x0a
    7b34:	33 87       	std	Z+11, r19	; 0x0b
    7b36:	44 87       	std	Z+12, r20	; 0x0c
    7b38:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    7b3a:	84 81       	ldd	r24, Z+4	; 0x04
    7b3c:	80 62       	ori	r24, 0x20	; 32
    7b3e:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    7b40:	8b 81       	ldd	r24, Y+3	; 0x03
    7b42:	9c 81       	ldd	r25, Y+4	; 0x04
    7b44:	26 96       	adiw	r28, 0x06	; 6
    7b46:	e2 e1       	ldi	r30, 0x12	; 18
    7b48:	0c 94 c4 57 	jmp	0xaf88	; 0xaf88 <__epilogue_restores__>

00007b4c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    7b4c:	a0 e0       	ldi	r26, 0x00	; 0
    7b4e:	b0 e0       	ldi	r27, 0x00	; 0
    7b50:	ec ea       	ldi	r30, 0xAC	; 172
    7b52:	fd e3       	ldi	r31, 0x3D	; 61
    7b54:	0c 94 af 57 	jmp	0xaf5e	; 0xaf5e <__prologue_saves__+0xe>
    7b58:	ec 01       	movw	r28, r24
    7b5a:	7a 01       	movw	r14, r20
    7b5c:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    7b5e:	42 30       	cpi	r20, 0x02	; 2
    7b60:	51 05       	cpc	r21, r1
    7b62:	61 05       	cpc	r22, r1
    7b64:	71 05       	cpc	r23, r1
    7b66:	08 f4       	brcc	.+2      	; 0x7b6a <remove_chain+0x1e>
    7b68:	5a c0       	rjmp	.+180    	; 0x7c1e <remove_chain+0xd2>
    7b6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7b6c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7b6e:	a8 a1       	ldd	r26, Y+32	; 0x20
    7b70:	b9 a1       	ldd	r27, Y+33	; 0x21
    7b72:	48 17       	cp	r20, r24
    7b74:	59 07       	cpc	r21, r25
    7b76:	6a 07       	cpc	r22, r26
    7b78:	7b 07       	cpc	r23, r27
    7b7a:	08 f4       	brcc	.+2      	; 0x7b7e <remove_chain+0x32>
    7b7c:	43 c0       	rjmp	.+134    	; 0x7c04 <remove_chain+0xb8>
    7b7e:	4f c0       	rjmp	.+158    	; 0x7c1e <remove_chain+0xd2>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    7b80:	ce 01       	movw	r24, r28
    7b82:	b8 01       	movw	r22, r16
    7b84:	a7 01       	movw	r20, r14
    7b86:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <get_fat>
    7b8a:	5b 01       	movw	r10, r22
    7b8c:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    7b8e:	61 15       	cp	r22, r1
    7b90:	71 05       	cpc	r23, r1
    7b92:	81 05       	cpc	r24, r1
    7b94:	91 05       	cpc	r25, r1
    7b96:	09 f4       	brne	.+2      	; 0x7b9a <remove_chain+0x4e>
    7b98:	45 c0       	rjmp	.+138    	; 0x7c24 <remove_chain+0xd8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7b9a:	81 e0       	ldi	r24, 0x01	; 1
    7b9c:	a8 16       	cp	r10, r24
    7b9e:	b1 04       	cpc	r11, r1
    7ba0:	c1 04       	cpc	r12, r1
    7ba2:	d1 04       	cpc	r13, r1
    7ba4:	e1 f1       	breq	.+120    	; 0x7c1e <remove_chain+0xd2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7ba6:	2f ef       	ldi	r18, 0xFF	; 255
    7ba8:	a2 16       	cp	r10, r18
    7baa:	2f ef       	ldi	r18, 0xFF	; 255
    7bac:	b2 06       	cpc	r11, r18
    7bae:	2f ef       	ldi	r18, 0xFF	; 255
    7bb0:	c2 06       	cpc	r12, r18
    7bb2:	2f ef       	ldi	r18, 0xFF	; 255
    7bb4:	d2 06       	cpc	r13, r18
    7bb6:	19 f4       	brne	.+6      	; 0x7bbe <remove_chain+0x72>
    7bb8:	21 e0       	ldi	r18, 0x01	; 1
    7bba:	30 e0       	ldi	r19, 0x00	; 0
    7bbc:	35 c0       	rjmp	.+106    	; 0x7c28 <remove_chain+0xdc>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    7bbe:	ce 01       	movw	r24, r28
    7bc0:	b8 01       	movw	r22, r16
    7bc2:	a7 01       	movw	r20, r14
    7bc4:	00 e0       	ldi	r16, 0x00	; 0
    7bc6:	10 e0       	ldi	r17, 0x00	; 0
    7bc8:	20 e0       	ldi	r18, 0x00	; 0
    7bca:	30 e0       	ldi	r19, 0x00	; 0
    7bcc:	0e 94 26 3a 	call	0x744c	; 0x744c <put_fat>
    7bd0:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    7bd2:	00 97       	sbiw	r24, 0x00	; 0
    7bd4:	49 f5       	brne	.+82     	; 0x7c28 <remove_chain+0xdc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    7bd6:	8e 85       	ldd	r24, Y+14	; 0x0e
    7bd8:	9f 85       	ldd	r25, Y+15	; 0x0f
    7bda:	a8 89       	ldd	r26, Y+16	; 0x10
    7bdc:	b9 89       	ldd	r27, Y+17	; 0x11
    7bde:	8f 3f       	cpi	r24, 0xFF	; 255
    7be0:	2f ef       	ldi	r18, 0xFF	; 255
    7be2:	92 07       	cpc	r25, r18
    7be4:	2f ef       	ldi	r18, 0xFF	; 255
    7be6:	a2 07       	cpc	r26, r18
    7be8:	2f ef       	ldi	r18, 0xFF	; 255
    7bea:	b2 07       	cpc	r27, r18
    7bec:	41 f0       	breq	.+16     	; 0x7bfe <remove_chain+0xb2>
				fs->free_clust++;
    7bee:	01 96       	adiw	r24, 0x01	; 1
    7bf0:	a1 1d       	adc	r26, r1
    7bf2:	b1 1d       	adc	r27, r1
    7bf4:	8e 87       	std	Y+14, r24	; 0x0e
    7bf6:	9f 87       	std	Y+15, r25	; 0x0f
    7bf8:	a8 8b       	std	Y+16, r26	; 0x10
    7bfa:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    7bfc:	99 86       	std	Y+9, r9	; 0x09
    7bfe:	86 01       	movw	r16, r12
    7c00:	75 01       	movw	r14, r10
    7c02:	02 c0       	rjmp	.+4      	; 0x7c08 <remove_chain+0xbc>
    7c04:	99 24       	eor	r9, r9
    7c06:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    7c08:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7c0a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7c0c:	a8 a1       	ldd	r26, Y+32	; 0x20
    7c0e:	b9 a1       	ldd	r27, Y+33	; 0x21
    7c10:	e8 16       	cp	r14, r24
    7c12:	f9 06       	cpc	r15, r25
    7c14:	0a 07       	cpc	r16, r26
    7c16:	1b 07       	cpc	r17, r27
    7c18:	08 f4       	brcc	.+2      	; 0x7c1c <remove_chain+0xd0>
    7c1a:	b2 cf       	rjmp	.-156    	; 0x7b80 <remove_chain+0x34>
    7c1c:	03 c0       	rjmp	.+6      	; 0x7c24 <remove_chain+0xd8>
    7c1e:	22 e0       	ldi	r18, 0x02	; 2
    7c20:	30 e0       	ldi	r19, 0x00	; 0
    7c22:	02 c0       	rjmp	.+4      	; 0x7c28 <remove_chain+0xdc>
    7c24:	20 e0       	ldi	r18, 0x00	; 0
    7c26:	30 e0       	ldi	r19, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    7c28:	c9 01       	movw	r24, r18
    7c2a:	cd b7       	in	r28, 0x3d	; 61
    7c2c:	de b7       	in	r29, 0x3e	; 62
    7c2e:	eb e0       	ldi	r30, 0x0B	; 11
    7c30:	0c 94 cb 57 	jmp	0xaf96	; 0xaf96 <__epilogue_restores__+0xe>

00007c34 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    7c34:	a0 e0       	ldi	r26, 0x00	; 0
    7c36:	b0 e0       	ldi	r27, 0x00	; 0
    7c38:	e0 e2       	ldi	r30, 0x20	; 32
    7c3a:	fe e3       	ldi	r31, 0x3E	; 62
    7c3c:	0c 94 b2 57 	jmp	0xaf64	; 0xaf64 <__prologue_saves__+0x14>
    7c40:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    7c42:	6a 81       	ldd	r22, Y+2	; 0x02
    7c44:	7b 81       	ldd	r23, Y+3	; 0x03
    7c46:	88 81       	ld	r24, Y
    7c48:	99 81       	ldd	r25, Y+1	; 0x01
    7c4a:	0e 94 e9 35 	call	0x6bd2	; 0x6bd2 <validate>
    7c4e:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    7c50:	00 97       	sbiw	r24, 0x00	; 0
    7c52:	09 f0       	breq	.+2      	; 0x7c56 <f_truncate+0x22>
    7c54:	72 c0       	rjmp	.+228    	; 0x7d3a <f_truncate+0x106>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    7c56:	6c 81       	ldd	r22, Y+4	; 0x04
    7c58:	67 ff       	sbrs	r22, 7
    7c5a:	03 c0       	rjmp	.+6      	; 0x7c62 <f_truncate+0x2e>
    7c5c:	02 e0       	ldi	r16, 0x02	; 2
    7c5e:	10 e0       	ldi	r17, 0x00	; 0
    7c60:	6c c0       	rjmp	.+216    	; 0x7d3a <f_truncate+0x106>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    7c62:	61 fd       	sbrc	r22, 1
    7c64:	03 c0       	rjmp	.+6      	; 0x7c6c <f_truncate+0x38>
    7c66:	07 e0       	ldi	r16, 0x07	; 7
    7c68:	10 e0       	ldi	r17, 0x00	; 0
    7c6a:	67 c0       	rjmp	.+206    	; 0x7d3a <f_truncate+0x106>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    7c6c:	2e 81       	ldd	r18, Y+6	; 0x06
    7c6e:	3f 81       	ldd	r19, Y+7	; 0x07
    7c70:	48 85       	ldd	r20, Y+8	; 0x08
    7c72:	59 85       	ldd	r21, Y+9	; 0x09
    7c74:	8a 85       	ldd	r24, Y+10	; 0x0a
    7c76:	9b 85       	ldd	r25, Y+11	; 0x0b
    7c78:	ac 85       	ldd	r26, Y+12	; 0x0c
    7c7a:	bd 85       	ldd	r27, Y+13	; 0x0d
    7c7c:	28 17       	cp	r18, r24
    7c7e:	39 07       	cpc	r19, r25
    7c80:	4a 07       	cpc	r20, r26
    7c82:	5b 07       	cpc	r21, r27
    7c84:	08 f0       	brcs	.+2      	; 0x7c88 <f_truncate+0x54>
    7c86:	59 c0       	rjmp	.+178    	; 0x7d3a <f_truncate+0x106>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    7c88:	2a 87       	std	Y+10, r18	; 0x0a
    7c8a:	3b 87       	std	Y+11, r19	; 0x0b
    7c8c:	4c 87       	std	Y+12, r20	; 0x0c
    7c8e:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    7c90:	60 62       	ori	r22, 0x20	; 32
    7c92:	6c 83       	std	Y+4, r22	; 0x04
    7c94:	88 81       	ld	r24, Y
    7c96:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    7c98:	21 15       	cp	r18, r1
    7c9a:	31 05       	cpc	r19, r1
    7c9c:	41 05       	cpc	r20, r1
    7c9e:	51 05       	cpc	r21, r1
    7ca0:	61 f4       	brne	.+24     	; 0x7cba <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    7ca2:	4e 85       	ldd	r20, Y+14	; 0x0e
    7ca4:	5f 85       	ldd	r21, Y+15	; 0x0f
    7ca6:	68 89       	ldd	r22, Y+16	; 0x10
    7ca8:	79 89       	ldd	r23, Y+17	; 0x11
    7caa:	0e 94 a6 3d 	call	0x7b4c	; 0x7b4c <remove_chain>
    7cae:	8c 01       	movw	r16, r24
			fp->org_clust = 0;
    7cb0:	1e 86       	std	Y+14, r1	; 0x0e
    7cb2:	1f 86       	std	Y+15, r1	; 0x0f
    7cb4:	18 8a       	std	Y+16, r1	; 0x10
    7cb6:	19 8a       	std	Y+17, r1	; 0x11
    7cb8:	3a c0       	rjmp	.+116    	; 0x7d2e <f_truncate+0xfa>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    7cba:	4a 89       	ldd	r20, Y+18	; 0x12
    7cbc:	5b 89       	ldd	r21, Y+19	; 0x13
    7cbe:	6c 89       	ldd	r22, Y+20	; 0x14
    7cc0:	7d 89       	ldd	r23, Y+21	; 0x15
    7cc2:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <get_fat>
    7cc6:	6b 01       	movw	r12, r22
    7cc8:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    7cca:	8f ef       	ldi	r24, 0xFF	; 255
    7ccc:	c8 16       	cp	r12, r24
    7cce:	8f ef       	ldi	r24, 0xFF	; 255
    7cd0:	d8 06       	cpc	r13, r24
    7cd2:	8f ef       	ldi	r24, 0xFF	; 255
    7cd4:	e8 06       	cpc	r14, r24
    7cd6:	8f ef       	ldi	r24, 0xFF	; 255
    7cd8:	f8 06       	cpc	r15, r24
    7cda:	a9 f1       	breq	.+106    	; 0x7d46 <f_truncate+0x112>
			if (ncl == 1) res = FR_INT_ERR;
    7cdc:	81 e0       	ldi	r24, 0x01	; 1
    7cde:	c8 16       	cp	r12, r24
    7ce0:	d1 04       	cpc	r13, r1
    7ce2:	e1 04       	cpc	r14, r1
    7ce4:	f1 04       	cpc	r15, r1
    7ce6:	19 f4       	brne	.+6      	; 0x7cee <f_truncate+0xba>
    7ce8:	02 e0       	ldi	r16, 0x02	; 2
    7cea:	10 e0       	ldi	r17, 0x00	; 0
    7cec:	23 c0       	rjmp	.+70     	; 0x7d34 <f_truncate+0x100>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    7cee:	e8 81       	ld	r30, Y
    7cf0:	f9 81       	ldd	r31, Y+1	; 0x01
    7cf2:	86 8d       	ldd	r24, Z+30	; 0x1e
    7cf4:	97 8d       	ldd	r25, Z+31	; 0x1f
    7cf6:	a0 a1       	ldd	r26, Z+32	; 0x20
    7cf8:	b1 a1       	ldd	r27, Z+33	; 0x21
    7cfa:	c8 16       	cp	r12, r24
    7cfc:	d9 06       	cpc	r13, r25
    7cfe:	ea 06       	cpc	r14, r26
    7d00:	fb 06       	cpc	r15, r27
    7d02:	d8 f4       	brcc	.+54     	; 0x7d3a <f_truncate+0x106>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    7d04:	4a 89       	ldd	r20, Y+18	; 0x12
    7d06:	5b 89       	ldd	r21, Y+19	; 0x13
    7d08:	6c 89       	ldd	r22, Y+20	; 0x14
    7d0a:	7d 89       	ldd	r23, Y+21	; 0x15
    7d0c:	cf 01       	movw	r24, r30
    7d0e:	0f ef       	ldi	r16, 0xFF	; 255
    7d10:	1f ef       	ldi	r17, 0xFF	; 255
    7d12:	2f ef       	ldi	r18, 0xFF	; 255
    7d14:	3f e0       	ldi	r19, 0x0F	; 15
    7d16:	0e 94 26 3a 	call	0x744c	; 0x744c <put_fat>
    7d1a:	8c 01       	movw	r16, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    7d1c:	00 97       	sbiw	r24, 0x00	; 0
    7d1e:	51 f4       	brne	.+20     	; 0x7d34 <f_truncate+0x100>
    7d20:	88 81       	ld	r24, Y
    7d22:	99 81       	ldd	r25, Y+1	; 0x01
    7d24:	b7 01       	movw	r22, r14
    7d26:	a6 01       	movw	r20, r12
    7d28:	0e 94 a6 3d 	call	0x7b4c	; 0x7b4c <remove_chain>
    7d2c:	8c 01       	movw	r16, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    7d2e:	01 15       	cp	r16, r1
    7d30:	11 05       	cpc	r17, r1
    7d32:	19 f0       	breq	.+6      	; 0x7d3a <f_truncate+0x106>
    7d34:	8c 81       	ldd	r24, Y+4	; 0x04
    7d36:	80 68       	ori	r24, 0x80	; 128
    7d38:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    7d3a:	c8 01       	movw	r24, r16
    7d3c:	cd b7       	in	r28, 0x3d	; 61
    7d3e:	de b7       	in	r29, 0x3e	; 62
    7d40:	e8 e0       	ldi	r30, 0x08	; 8
    7d42:	0c 94 ce 57 	jmp	0xaf9c	; 0xaf9c <__epilogue_restores__+0x14>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    7d46:	01 e0       	ldi	r16, 0x01	; 1
    7d48:	10 e0       	ldi	r17, 0x00	; 0
    7d4a:	f4 cf       	rjmp	.-24     	; 0x7d34 <f_truncate+0x100>

00007d4c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    7d4c:	a0 e0       	ldi	r26, 0x00	; 0
    7d4e:	b0 e0       	ldi	r27, 0x00	; 0
    7d50:	ec ea       	ldi	r30, 0xAC	; 172
    7d52:	fe e3       	ldi	r31, 0x3E	; 62
    7d54:	0c 94 aa 57 	jmp	0xaf54	; 0xaf54 <__prologue_saves__+0x4>
    7d58:	ec 01       	movw	r28, r24
    7d5a:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    7d5c:	6c 80       	ldd	r6, Y+4	; 0x04
    7d5e:	7d 80       	ldd	r7, Y+5	; 0x05
    7d60:	08 94       	sec
    7d62:	61 1c       	adc	r6, r1
    7d64:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    7d66:	61 14       	cp	r6, r1
    7d68:	71 04       	cpc	r7, r1
    7d6a:	09 f4       	brne	.+2      	; 0x7d6e <dir_next+0x22>
    7d6c:	4d c1       	rjmp	.+666    	; 0x8008 <dir_next+0x2bc>
    7d6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    7d70:	9f 85       	ldd	r25, Y+15	; 0x0f
    7d72:	a8 89       	ldd	r26, Y+16	; 0x10
    7d74:	b9 89       	ldd	r27, Y+17	; 0x11
    7d76:	00 97       	sbiw	r24, 0x00	; 0
    7d78:	a1 05       	cpc	r26, r1
    7d7a:	b1 05       	cpc	r27, r1
    7d7c:	09 f4       	brne	.+2      	; 0x7d80 <dir_next+0x34>
    7d7e:	44 c1       	rjmp	.+648    	; 0x8008 <dir_next+0x2bc>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    7d80:	2f e0       	ldi	r18, 0x0F	; 15
    7d82:	42 2e       	mov	r4, r18
    7d84:	51 2c       	mov	r5, r1
    7d86:	46 20       	and	r4, r6
    7d88:	57 20       	and	r5, r7
    7d8a:	41 14       	cp	r4, r1
    7d8c:	51 04       	cpc	r5, r1
    7d8e:	09 f0       	breq	.+2      	; 0x7d92 <dir_next+0x46>
    7d90:	27 c1       	rjmp	.+590    	; 0x7fe0 <dir_next+0x294>
		dj->sect++;					/* Next sector */
    7d92:	01 96       	adiw	r24, 0x01	; 1
    7d94:	a1 1d       	adc	r26, r1
    7d96:	b1 1d       	adc	r27, r1
    7d98:	8e 87       	std	Y+14, r24	; 0x0e
    7d9a:	9f 87       	std	Y+15, r25	; 0x0f
    7d9c:	a8 8b       	std	Y+16, r26	; 0x10
    7d9e:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    7da0:	4a 85       	ldd	r20, Y+10	; 0x0a
    7da2:	5b 85       	ldd	r21, Y+11	; 0x0b
    7da4:	6c 85       	ldd	r22, Y+12	; 0x0c
    7da6:	7d 85       	ldd	r23, Y+13	; 0x0d
    7da8:	e8 81       	ld	r30, Y
    7daa:	f9 81       	ldd	r31, Y+1	; 0x01
    7dac:	41 15       	cp	r20, r1
    7dae:	51 05       	cpc	r21, r1
    7db0:	61 05       	cpc	r22, r1
    7db2:	71 05       	cpc	r23, r1
    7db4:	39 f4       	brne	.+14     	; 0x7dc4 <dir_next+0x78>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    7db6:	87 81       	ldd	r24, Z+7	; 0x07
    7db8:	90 85       	ldd	r25, Z+8	; 0x08
    7dba:	68 16       	cp	r6, r24
    7dbc:	79 06       	cpc	r7, r25
    7dbe:	08 f4       	brcc	.+2      	; 0x7dc2 <dir_next+0x76>
    7dc0:	0f c1       	rjmp	.+542    	; 0x7fe0 <dir_next+0x294>
    7dc2:	22 c1       	rjmp	.+580    	; 0x8008 <dir_next+0x2bc>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    7dc4:	82 81       	ldd	r24, Z+2	; 0x02
    7dc6:	90 e0       	ldi	r25, 0x00	; 0
    7dc8:	01 97       	sbiw	r24, 0x01	; 1
    7dca:	93 01       	movw	r18, r6
    7dcc:	a4 e0       	ldi	r26, 0x04	; 4
    7dce:	36 95       	lsr	r19
    7dd0:	27 95       	ror	r18
    7dd2:	aa 95       	dec	r26
    7dd4:	e1 f7       	brne	.-8      	; 0x7dce <dir_next+0x82>
    7dd6:	82 23       	and	r24, r18
    7dd8:	93 23       	and	r25, r19
    7dda:	89 2b       	or	r24, r25
    7ddc:	09 f0       	breq	.+2      	; 0x7de0 <dir_next+0x94>
    7dde:	00 c1       	rjmp	.+512    	; 0x7fe0 <dir_next+0x294>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    7de0:	cf 01       	movw	r24, r30
    7de2:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <get_fat>
    7de6:	7b 01       	movw	r14, r22
    7de8:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    7dea:	82 e0       	ldi	r24, 0x02	; 2
    7dec:	e8 16       	cp	r14, r24
    7dee:	f1 04       	cpc	r15, r1
    7df0:	01 05       	cpc	r16, r1
    7df2:	11 05       	cpc	r17, r1
    7df4:	08 f4       	brcc	.+2      	; 0x7df8 <dir_next+0xac>
    7df6:	0b c1       	rjmp	.+534    	; 0x800e <dir_next+0x2c2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7df8:	9f ef       	ldi	r25, 0xFF	; 255
    7dfa:	e9 16       	cp	r14, r25
    7dfc:	9f ef       	ldi	r25, 0xFF	; 255
    7dfe:	f9 06       	cpc	r15, r25
    7e00:	9f ef       	ldi	r25, 0xFF	; 255
    7e02:	09 07       	cpc	r16, r25
    7e04:	9f ef       	ldi	r25, 0xFF	; 255
    7e06:	19 07       	cpc	r17, r25
    7e08:	09 f4       	brne	.+2      	; 0x7e0c <dir_next+0xc0>
    7e0a:	04 c1       	rjmp	.+520    	; 0x8014 <dir_next+0x2c8>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    7e0c:	e8 81       	ld	r30, Y
    7e0e:	f9 81       	ldd	r31, Y+1	; 0x01
    7e10:	86 8d       	ldd	r24, Z+30	; 0x1e
    7e12:	97 8d       	ldd	r25, Z+31	; 0x1f
    7e14:	a0 a1       	ldd	r26, Z+32	; 0x20
    7e16:	b1 a1       	ldd	r27, Z+33	; 0x21
    7e18:	e8 16       	cp	r14, r24
    7e1a:	f9 06       	cpc	r15, r25
    7e1c:	0a 07       	cpc	r16, r26
    7e1e:	1b 07       	cpc	r17, r27
    7e20:	08 f4       	brcc	.+2      	; 0x7e24 <dir_next+0xd8>
    7e22:	a5 c0       	rjmp	.+330    	; 0x7f6e <dir_next+0x222>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    7e24:	c1 14       	cp	r12, r1
    7e26:	d1 04       	cpc	r13, r1
    7e28:	09 f4       	brne	.+2      	; 0x7e2c <dir_next+0xe0>
    7e2a:	ee c0       	rjmp	.+476    	; 0x8008 <dir_next+0x2bc>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    7e2c:	4a 85       	ldd	r20, Y+10	; 0x0a
    7e2e:	5b 85       	ldd	r21, Y+11	; 0x0b
    7e30:	6c 85       	ldd	r22, Y+12	; 0x0c
    7e32:	7d 85       	ldd	r23, Y+13	; 0x0d
    7e34:	cf 01       	movw	r24, r30
    7e36:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <create_chain>
    7e3a:	7b 01       	movw	r14, r22
    7e3c:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    7e3e:	61 15       	cp	r22, r1
    7e40:	71 05       	cpc	r23, r1
    7e42:	81 05       	cpc	r24, r1
    7e44:	91 05       	cpc	r25, r1
    7e46:	19 f4       	brne	.+6      	; 0x7e4e <dir_next+0x102>
    7e48:	27 e0       	ldi	r18, 0x07	; 7
    7e4a:	30 e0       	ldi	r19, 0x00	; 0
    7e4c:	e5 c0       	rjmp	.+458    	; 0x8018 <dir_next+0x2cc>
					if (clst == 1) return FR_INT_ERR;
    7e4e:	61 30       	cpi	r22, 0x01	; 1
    7e50:	71 05       	cpc	r23, r1
    7e52:	81 05       	cpc	r24, r1
    7e54:	91 05       	cpc	r25, r1
    7e56:	09 f4       	brne	.+2      	; 0x7e5a <dir_next+0x10e>
    7e58:	da c0       	rjmp	.+436    	; 0x800e <dir_next+0x2c2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7e5a:	6f 3f       	cpi	r22, 0xFF	; 255
    7e5c:	bf ef       	ldi	r27, 0xFF	; 255
    7e5e:	7b 07       	cpc	r23, r27
    7e60:	bf ef       	ldi	r27, 0xFF	; 255
    7e62:	8b 07       	cpc	r24, r27
    7e64:	bf ef       	ldi	r27, 0xFF	; 255
    7e66:	9b 07       	cpc	r25, r27
    7e68:	09 f4       	brne	.+2      	; 0x7e6c <dir_next+0x120>
    7e6a:	d4 c0       	rjmp	.+424    	; 0x8014 <dir_next+0x2c8>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    7e6c:	88 81       	ld	r24, Y
    7e6e:	99 81       	ldd	r25, Y+1	; 0x01
    7e70:	40 e0       	ldi	r20, 0x00	; 0
    7e72:	50 e0       	ldi	r21, 0x00	; 0
    7e74:	60 e0       	ldi	r22, 0x00	; 0
    7e76:	70 e0       	ldi	r23, 0x00	; 0
    7e78:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    7e7c:	89 2b       	or	r24, r25
    7e7e:	09 f0       	breq	.+2      	; 0x7e82 <dir_next+0x136>
    7e80:	c9 c0       	rjmp	.+402    	; 0x8014 <dir_next+0x2c8>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    7e82:	88 81       	ld	r24, Y
    7e84:	99 81       	ldd	r25, Y+1	; 0x01
    7e86:	fc 01       	movw	r30, r24
    7e88:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = (char)val;
    7e8a:	8e 5c       	subi	r24, 0xCE	; 206
    7e8c:	9d 4f       	sbci	r25, 0xFD	; 253
    7e8e:	01 c0       	rjmp	.+2      	; 0x7e92 <dir_next+0x146>
    7e90:	11 92       	st	Z+, r1
    7e92:	e8 17       	cp	r30, r24
    7e94:	f9 07       	cpc	r31, r25
    7e96:	e1 f7       	brne	.-8      	; 0x7e90 <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    7e98:	88 80       	ld	r8, Y
    7e9a:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    7e9c:	ee ef       	ldi	r30, 0xFE	; 254
    7e9e:	ae 2e       	mov	r10, r30
    7ea0:	ef ef       	ldi	r30, 0xFF	; 255
    7ea2:	be 2e       	mov	r11, r30
    7ea4:	ef ef       	ldi	r30, 0xFF	; 255
    7ea6:	ce 2e       	mov	r12, r30
    7ea8:	ef ef       	ldi	r30, 0xFF	; 255
    7eaa:	de 2e       	mov	r13, r30
    7eac:	ae 0c       	add	r10, r14
    7eae:	bf 1c       	adc	r11, r15
    7eb0:	c0 1e       	adc	r12, r16
    7eb2:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    7eb4:	f4 01       	movw	r30, r8
    7eb6:	86 8d       	ldd	r24, Z+30	; 0x1e
    7eb8:	97 8d       	ldd	r25, Z+31	; 0x1f
    7eba:	a0 a1       	ldd	r26, Z+32	; 0x20
    7ebc:	b1 a1       	ldd	r27, Z+33	; 0x21
    7ebe:	02 97       	sbiw	r24, 0x02	; 2
    7ec0:	a1 09       	sbc	r26, r1
    7ec2:	b1 09       	sbc	r27, r1
    7ec4:	a8 16       	cp	r10, r24
    7ec6:	b9 06       	cpc	r11, r25
    7ec8:	ca 06       	cpc	r12, r26
    7eca:	db 06       	cpc	r13, r27
    7ecc:	28 f0       	brcs	.+10     	; 0x7ed8 <dir_next+0x18c>
    7ece:	20 e0       	ldi	r18, 0x00	; 0
    7ed0:	30 e0       	ldi	r19, 0x00	; 0
    7ed2:	40 e0       	ldi	r20, 0x00	; 0
    7ed4:	50 e0       	ldi	r21, 0x00	; 0
    7ed6:	15 c0       	rjmp	.+42     	; 0x7f02 <dir_next+0x1b6>
	return clst * fs->csize + fs->database;
    7ed8:	d4 01       	movw	r26, r8
    7eda:	12 96       	adiw	r26, 0x02	; 2
    7edc:	2c 91       	ld	r18, X
    7ede:	30 e0       	ldi	r19, 0x00	; 0
    7ee0:	40 e0       	ldi	r20, 0x00	; 0
    7ee2:	50 e0       	ldi	r21, 0x00	; 0
    7ee4:	c6 01       	movw	r24, r12
    7ee6:	b5 01       	movw	r22, r10
    7ee8:	0e 94 25 57 	call	0xae4a	; 0xae4a <__mulsi3>
    7eec:	9b 01       	movw	r18, r22
    7eee:	ac 01       	movw	r20, r24
    7ef0:	f4 01       	movw	r30, r8
    7ef2:	82 a5       	ldd	r24, Z+42	; 0x2a
    7ef4:	93 a5       	ldd	r25, Z+43	; 0x2b
    7ef6:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7ef8:	b5 a5       	ldd	r27, Z+45	; 0x2d
    7efa:	28 0f       	add	r18, r24
    7efc:	39 1f       	adc	r19, r25
    7efe:	4a 1f       	adc	r20, r26
    7f00:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    7f02:	d4 01       	movw	r26, r8
    7f04:	9e 96       	adiw	r26, 0x2e	; 46
    7f06:	2d 93       	st	X+, r18
    7f08:	3d 93       	st	X+, r19
    7f0a:	4d 93       	st	X+, r20
    7f0c:	5c 93       	st	X, r21
    7f0e:	d1 97       	sbiw	r26, 0x31	; 49
    7f10:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    7f12:	cc 24       	eor	r12, r12
    7f14:	c3 94       	inc	r12
    7f16:	1a c0       	rjmp	.+52     	; 0x7f4c <dir_next+0x200>
    7f18:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    7f1a:	88 81       	ld	r24, Y
    7f1c:	99 81       	ldd	r25, Y+1	; 0x01
    7f1e:	40 e0       	ldi	r20, 0x00	; 0
    7f20:	50 e0       	ldi	r21, 0x00	; 0
    7f22:	60 e0       	ldi	r22, 0x00	; 0
    7f24:	70 e0       	ldi	r23, 0x00	; 0
    7f26:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    7f2a:	89 2b       	or	r24, r25
    7f2c:	09 f0       	breq	.+2      	; 0x7f30 <dir_next+0x1e4>
    7f2e:	72 c0       	rjmp	.+228    	; 0x8014 <dir_next+0x2c8>
						dj->fs->winsect++;
    7f30:	e8 81       	ld	r30, Y
    7f32:	f9 81       	ldd	r31, Y+1	; 0x01
    7f34:	86 a5       	ldd	r24, Z+46	; 0x2e
    7f36:	97 a5       	ldd	r25, Z+47	; 0x2f
    7f38:	a0 a9       	ldd	r26, Z+48	; 0x30
    7f3a:	b1 a9       	ldd	r27, Z+49	; 0x31
    7f3c:	01 96       	adiw	r24, 0x01	; 1
    7f3e:	a1 1d       	adc	r26, r1
    7f40:	b1 1d       	adc	r27, r1
    7f42:	86 a7       	std	Z+46, r24	; 0x2e
    7f44:	97 a7       	std	Z+47, r25	; 0x2f
    7f46:	a0 ab       	std	Z+48, r26	; 0x30
    7f48:	b1 ab       	std	Z+49, r27	; 0x31
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7f4a:	d3 94       	inc	r13
    7f4c:	e8 81       	ld	r30, Y
    7f4e:	f9 81       	ldd	r31, Y+1	; 0x01
    7f50:	82 81       	ldd	r24, Z+2	; 0x02
    7f52:	d8 16       	cp	r13, r24
    7f54:	08 f3       	brcs	.-62     	; 0x7f18 <dir_next+0x1cc>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    7f56:	86 a5       	ldd	r24, Z+46	; 0x2e
    7f58:	97 a5       	ldd	r25, Z+47	; 0x2f
    7f5a:	a0 a9       	ldd	r26, Z+48	; 0x30
    7f5c:	b1 a9       	ldd	r27, Z+49	; 0x31
    7f5e:	8d 19       	sub	r24, r13
    7f60:	91 09       	sbc	r25, r1
    7f62:	a1 09       	sbc	r26, r1
    7f64:	b1 09       	sbc	r27, r1
    7f66:	86 a7       	std	Z+46, r24	; 0x2e
    7f68:	97 a7       	std	Z+47, r25	; 0x2f
    7f6a:	a0 ab       	std	Z+48, r26	; 0x30
    7f6c:	b1 ab       	std	Z+49, r27	; 0x31
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    7f6e:	ea 86       	std	Y+10, r14	; 0x0a
    7f70:	fb 86       	std	Y+11, r15	; 0x0b
    7f72:	0c 87       	std	Y+12, r16	; 0x0c
    7f74:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    7f76:	c8 80       	ld	r12, Y
    7f78:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    7f7a:	8e ef       	ldi	r24, 0xFE	; 254
    7f7c:	9f ef       	ldi	r25, 0xFF	; 255
    7f7e:	af ef       	ldi	r26, 0xFF	; 255
    7f80:	bf ef       	ldi	r27, 0xFF	; 255
    7f82:	e8 0e       	add	r14, r24
    7f84:	f9 1e       	adc	r15, r25
    7f86:	0a 1f       	adc	r16, r26
    7f88:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    7f8a:	f6 01       	movw	r30, r12
    7f8c:	86 8d       	ldd	r24, Z+30	; 0x1e
    7f8e:	97 8d       	ldd	r25, Z+31	; 0x1f
    7f90:	a0 a1       	ldd	r26, Z+32	; 0x20
    7f92:	b1 a1       	ldd	r27, Z+33	; 0x21
    7f94:	02 97       	sbiw	r24, 0x02	; 2
    7f96:	a1 09       	sbc	r26, r1
    7f98:	b1 09       	sbc	r27, r1
    7f9a:	e8 16       	cp	r14, r24
    7f9c:	f9 06       	cpc	r15, r25
    7f9e:	0a 07       	cpc	r16, r26
    7fa0:	1b 07       	cpc	r17, r27
    7fa2:	28 f0       	brcs	.+10     	; 0x7fae <dir_next+0x262>
    7fa4:	20 e0       	ldi	r18, 0x00	; 0
    7fa6:	30 e0       	ldi	r19, 0x00	; 0
    7fa8:	40 e0       	ldi	r20, 0x00	; 0
    7faa:	50 e0       	ldi	r21, 0x00	; 0
    7fac:	15 c0       	rjmp	.+42     	; 0x7fd8 <dir_next+0x28c>
	return clst * fs->csize + fs->database;
    7fae:	d6 01       	movw	r26, r12
    7fb0:	12 96       	adiw	r26, 0x02	; 2
    7fb2:	2c 91       	ld	r18, X
    7fb4:	30 e0       	ldi	r19, 0x00	; 0
    7fb6:	40 e0       	ldi	r20, 0x00	; 0
    7fb8:	50 e0       	ldi	r21, 0x00	; 0
    7fba:	c8 01       	movw	r24, r16
    7fbc:	b7 01       	movw	r22, r14
    7fbe:	0e 94 25 57 	call	0xae4a	; 0xae4a <__mulsi3>
    7fc2:	9b 01       	movw	r18, r22
    7fc4:	ac 01       	movw	r20, r24
    7fc6:	f6 01       	movw	r30, r12
    7fc8:	82 a5       	ldd	r24, Z+42	; 0x2a
    7fca:	93 a5       	ldd	r25, Z+43	; 0x2b
    7fcc:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7fce:	b5 a5       	ldd	r27, Z+45	; 0x2d
    7fd0:	28 0f       	add	r18, r24
    7fd2:	39 1f       	adc	r19, r25
    7fd4:	4a 1f       	adc	r20, r26
    7fd6:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    7fd8:	2e 87       	std	Y+14, r18	; 0x0e
    7fda:	3f 87       	std	Y+15, r19	; 0x0f
    7fdc:	48 8b       	std	Y+16, r20	; 0x10
    7fde:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    7fe0:	6c 82       	std	Y+4, r6	; 0x04
    7fe2:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    7fe4:	75 e0       	ldi	r23, 0x05	; 5
    7fe6:	44 0c       	add	r4, r4
    7fe8:	55 1c       	adc	r5, r5
    7fea:	7a 95       	dec	r23
    7fec:	e1 f7       	brne	.-8      	; 0x7fe6 <dir_next+0x29a>
    7fee:	82 e3       	ldi	r24, 0x32	; 50
    7ff0:	90 e0       	ldi	r25, 0x00	; 0
    7ff2:	48 0e       	add	r4, r24
    7ff4:	59 1e       	adc	r5, r25
    7ff6:	88 81       	ld	r24, Y
    7ff8:	99 81       	ldd	r25, Y+1	; 0x01
    7ffa:	84 0d       	add	r24, r4
    7ffc:	95 1d       	adc	r25, r5
    7ffe:	8a 8b       	std	Y+18, r24	; 0x12
    8000:	9b 8b       	std	Y+19, r25	; 0x13
    8002:	20 e0       	ldi	r18, 0x00	; 0
    8004:	30 e0       	ldi	r19, 0x00	; 0
    8006:	08 c0       	rjmp	.+16     	; 0x8018 <dir_next+0x2cc>

	return FR_OK;
    8008:	24 e0       	ldi	r18, 0x04	; 4
    800a:	30 e0       	ldi	r19, 0x00	; 0
    800c:	05 c0       	rjmp	.+10     	; 0x8018 <dir_next+0x2cc>
    800e:	22 e0       	ldi	r18, 0x02	; 2
    8010:	30 e0       	ldi	r19, 0x00	; 0
    8012:	02 c0       	rjmp	.+4      	; 0x8018 <dir_next+0x2cc>
    8014:	21 e0       	ldi	r18, 0x01	; 1
    8016:	30 e0       	ldi	r19, 0x00	; 0
}
    8018:	c9 01       	movw	r24, r18
    801a:	cd b7       	in	r28, 0x3d	; 61
    801c:	de b7       	in	r29, 0x3e	; 62
    801e:	e0 e1       	ldi	r30, 0x10	; 16
    8020:	0c 94 c6 57 	jmp	0xaf8c	; 0xaf8c <__epilogue_restores__+0x4>

00008024 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    8024:	a0 e0       	ldi	r26, 0x00	; 0
    8026:	b0 e0       	ldi	r27, 0x00	; 0
    8028:	e8 e1       	ldi	r30, 0x18	; 24
    802a:	f0 e4       	ldi	r31, 0x40	; 64
    802c:	0c 94 b0 57 	jmp	0xaf60	; 0xaf60 <__prologue_saves__+0x10>
    8030:	ec 01       	movw	r28, r24
    8032:	7b 01       	movw	r14, r22
	FRESULT res;
	BYTE *dir, last;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    8034:	fb 01       	movw	r30, r22
    8036:	80 81       	ld	r24, Z
    8038:	8f 32       	cpi	r24, 0x2F	; 47
    803a:	11 f0       	breq	.+4      	; 0x8040 <follow_path+0x1c>
    803c:	8c 35       	cpi	r24, 0x5C	; 92
    803e:	41 f4       	brne	.+16     	; 0x8050 <follow_path+0x2c>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    8040:	08 94       	sec
    8042:	e1 1c       	adc	r14, r1
    8044:	f1 1c       	adc	r15, r1
    8046:	1e 82       	std	Y+6, r1	; 0x06
    8048:	1f 82       	std	Y+7, r1	; 0x07
    804a:	18 86       	std	Y+8, r1	; 0x08
    804c:	19 86       	std	Y+9, r1	; 0x09
    804e:	0a c0       	rjmp	.+20     	; 0x8064 <follow_path+0x40>
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    8050:	e8 81       	ld	r30, Y
    8052:	f9 81       	ldd	r31, Y+1	; 0x01
    8054:	86 89       	ldd	r24, Z+22	; 0x16
    8056:	97 89       	ldd	r25, Z+23	; 0x17
    8058:	a0 8d       	ldd	r26, Z+24	; 0x18
    805a:	b1 8d       	ldd	r27, Z+25	; 0x19
    805c:	8e 83       	std	Y+6, r24	; 0x06
    805e:	9f 83       	std	Y+7, r25	; 0x07
    8060:	a8 87       	std	Y+8, r26	; 0x08
    8062:	b9 87       	std	Y+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    8064:	f7 01       	movw	r30, r14
    8066:	80 81       	ld	r24, Z
    8068:	80 32       	cpi	r24, 0x20	; 32
    806a:	48 f4       	brcc	.+18     	; 0x807e <follow_path+0x5a>
		res = dir_seek(dj, 0);
    806c:	ce 01       	movw	r24, r28
    806e:	60 e0       	ldi	r22, 0x00	; 0
    8070:	70 e0       	ldi	r23, 0x00	; 0
    8072:	0e 94 30 39 	call	0x7260	; 0x7260 <dir_seek>
    8076:	9c 01       	movw	r18, r24
		dj->dir = NULL;
    8078:	1a 8a       	std	Y+18, r1	; 0x12
    807a:	1b 8a       	std	Y+19, r1	; 0x13
    807c:	02 c1       	rjmp	.+516    	; 0x8282 <follow_path+0x25e>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    807e:	50 e2       	ldi	r21, 0x20	; 32
    8080:	b5 2e       	mov	r11, r21
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    8082:	45 e0       	ldi	r20, 0x05	; 5
    8084:	a4 2e       	mov	r10, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    8086:	0c 89       	ldd	r16, Y+20	; 0x14
    8088:	1d 89       	ldd	r17, Y+21	; 0x15
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    808a:	f8 01       	movw	r30, r16
	while (cnt--) *d++ = (char)val;
    808c:	c8 01       	movw	r24, r16
    808e:	0b 96       	adiw	r24, 0x0b	; 11
    8090:	01 c0       	rjmp	.+2      	; 0x8094 <follow_path+0x70>
    8092:	b1 92       	st	Z+, r11
    8094:	e8 17       	cp	r30, r24
    8096:	f9 07       	cpc	r31, r25
    8098:	e1 f7       	brne	.-8      	; 0x8092 <follow_path+0x6e>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    809a:	f7 01       	movw	r30, r14
    809c:	80 81       	ld	r24, Z
    809e:	8e 32       	cpi	r24, 0x2E	; 46
    80a0:	41 f0       	breq	.+16     	; 0x80b2 <follow_path+0x8e>
    80a2:	60 e0       	ldi	r22, 0x00	; 0
    80a4:	70 e0       	ldi	r23, 0x00	; 0
    80a6:	cc 24       	eor	r12, r12
    80a8:	dd 24       	eor	r13, r13
    80aa:	a8 e0       	ldi	r26, 0x08	; 8
    80ac:	b0 e0       	ldi	r27, 0x00	; 0
    80ae:	30 e0       	ldi	r19, 0x00	; 0
    80b0:	21 c0       	rjmp	.+66     	; 0x80f4 <follow_path+0xd0>
    80b2:	d8 01       	movw	r26, r16
    80b4:	80 e0       	ldi	r24, 0x00	; 0
    80b6:	90 e0       	ldi	r25, 0x00	; 0
		for (;;) {
			c = p[si++];
    80b8:	f7 01       	movw	r30, r14
    80ba:	e8 0f       	add	r30, r24
    80bc:	f9 1f       	adc	r31, r25
    80be:	e0 81       	ld	r30, Z
    80c0:	01 96       	adiw	r24, 0x01	; 1
			if (c != '.' || si >= 3) break;
    80c2:	ee 32       	cpi	r30, 0x2E	; 46
    80c4:	31 f4       	brne	.+12     	; 0x80d2 <follow_path+0xae>
    80c6:	83 30       	cpi	r24, 0x03	; 3
    80c8:	91 05       	cpc	r25, r1
    80ca:	09 f4       	brne	.+2      	; 0x80ce <follow_path+0xaa>
    80cc:	d3 c0       	rjmp	.+422    	; 0x8274 <follow_path+0x250>
			sfn[i++] = c;
    80ce:	ed 93       	st	X+, r30
    80d0:	f3 cf       	rjmp	.-26     	; 0x80b8 <follow_path+0x94>
		}
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
    80d2:	ef 32       	cpi	r30, 0x2F	; 47
    80d4:	29 f0       	breq	.+10     	; 0x80e0 <follow_path+0xbc>
    80d6:	ec 35       	cpi	r30, 0x5C	; 92
    80d8:	39 f0       	breq	.+14     	; 0x80e8 <follow_path+0xc4>
    80da:	e0 32       	cpi	r30, 0x20	; 32
    80dc:	08 f0       	brcs	.+2      	; 0x80e0 <follow_path+0xbc>
    80de:	ca c0       	rjmp	.+404    	; 0x8274 <follow_path+0x250>
		*path = &p[si];									/* Rerurn pointer to the next segment */
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    80e0:	e0 32       	cpi	r30, 0x20	; 32
    80e2:	10 f4       	brcc	.+4      	; 0x80e8 <follow_path+0xc4>
    80e4:	24 e2       	ldi	r18, 0x24	; 36
    80e6:	01 c0       	rjmp	.+2      	; 0x80ea <follow_path+0xc6>
    80e8:	20 e2       	ldi	r18, 0x20	; 32
			c = p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Rerurn pointer to the next segment */
    80ea:	e8 0e       	add	r14, r24
    80ec:	f9 1e       	adc	r15, r25
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    80ee:	f8 01       	movw	r30, r16
    80f0:	23 87       	std	Z+11, r18	; 0x0b
    80f2:	cd c0       	rjmp	.+410    	; 0x828e <follow_path+0x26a>
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    80f4:	f7 01       	movw	r30, r14
    80f6:	ec 0d       	add	r30, r12
    80f8:	fd 1d       	adc	r31, r13
    80fa:	20 81       	ld	r18, Z
    80fc:	08 94       	sec
    80fe:	c1 1c       	adc	r12, r1
    8100:	d1 1c       	adc	r13, r1
		if (c < ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    8102:	20 32       	cpi	r18, 0x20	; 32
    8104:	08 f4       	brcc	.+2      	; 0x8108 <follow_path+0xe4>
    8106:	42 c0       	rjmp	.+132    	; 0x818c <follow_path+0x168>
    8108:	2f 32       	cpi	r18, 0x2F	; 47
    810a:	09 f4       	brne	.+2      	; 0x810e <follow_path+0xea>
    810c:	ca c0       	rjmp	.+404    	; 0x82a2 <follow_path+0x27e>
    810e:	2c 35       	cpi	r18, 0x5C	; 92
    8110:	09 f4       	brne	.+2      	; 0x8114 <follow_path+0xf0>
    8112:	c7 c0       	rjmp	.+398    	; 0x82a2 <follow_path+0x27e>
		if (c == '.' || i >= ni) {
    8114:	2e 32       	cpi	r18, 0x2E	; 46
    8116:	19 f0       	breq	.+6      	; 0x811e <follow_path+0xfa>
    8118:	6a 17       	cp	r22, r26
    811a:	7b 07       	cpc	r23, r27
    811c:	6c f0       	brlt	.+26     	; 0x8138 <follow_path+0x114>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    811e:	18 97       	sbiw	r26, 0x08	; 8
    8120:	09 f0       	breq	.+2      	; 0x8124 <follow_path+0x100>
    8122:	a8 c0       	rjmp	.+336    	; 0x8274 <follow_path+0x250>
    8124:	2e 32       	cpi	r18, 0x2E	; 46
    8126:	09 f0       	breq	.+2      	; 0x812a <follow_path+0x106>
    8128:	a5 c0       	rjmp	.+330    	; 0x8274 <follow_path+0x250>
			i = 8; ni = 11;
			b <<= 2; continue;
    812a:	33 0f       	add	r19, r19
    812c:	33 0f       	add	r19, r19
    812e:	68 e0       	ldi	r22, 0x08	; 8
    8130:	70 e0       	ldi	r23, 0x00	; 0
    8132:	ab e0       	ldi	r26, 0x0B	; 11
    8134:	b0 e0       	ldi	r27, 0x00	; 0
    8136:	de cf       	rjmp	.-68     	; 0x80f4 <follow_path+0xd0>
		}
		if (c >= 0x80) {				/* Extended char */
    8138:	27 ff       	sbrs	r18, 7
    813a:	05 c0       	rjmp	.+10     	; 0x8146 <follow_path+0x122>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
    813c:	e2 2f       	mov	r30, r18
    813e:	f0 e0       	ldi	r31, 0x00	; 0
    8140:	e7 52       	subi	r30, 0x27	; 39
    8142:	fc 4d       	sbci	r31, 0xDC	; 220
    8144:	20 81       	ld	r18, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
    8146:	42 2f       	mov	r20, r18
    8148:	50 e0       	ldi	r21, 0x00	; 0
    814a:	e8 e0       	ldi	r30, 0x08	; 8
    814c:	f4 e2       	ldi	r31, 0x24	; 36
    814e:	01 c0       	rjmp	.+2      	; 0x8152 <follow_path+0x12e>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    8150:	31 96       	adiw	r30, 0x01	; 1
    8152:	80 81       	ld	r24, Z
    8154:	88 23       	and	r24, r24
    8156:	39 f0       	breq	.+14     	; 0x8166 <follow_path+0x142>
    8158:	99 27       	eor	r25, r25
    815a:	87 fd       	sbrc	r24, 7
    815c:	90 95       	com	r25
    815e:	84 17       	cp	r24, r20
    8160:	95 07       	cpc	r25, r21
    8162:	b1 f7       	brne	.-20     	; 0x8150 <follow_path+0x12c>
    8164:	87 c0       	rjmp	.+270    	; 0x8274 <follow_path+0x250>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {
    8166:	82 2f       	mov	r24, r18
    8168:	81 54       	subi	r24, 0x41	; 65
    816a:	8a 31       	cpi	r24, 0x1A	; 26
    816c:	10 f4       	brcc	.+4      	; 0x8172 <follow_path+0x14e>
				b |= 2;
    816e:	32 60       	ori	r19, 0x02	; 2
    8170:	06 c0       	rjmp	.+12     	; 0x817e <follow_path+0x15a>
			} else {
				if (IsLower(c)) {
    8172:	82 2f       	mov	r24, r18
    8174:	81 56       	subi	r24, 0x61	; 97
    8176:	8a 31       	cpi	r24, 0x1A	; 26
    8178:	10 f4       	brcc	.+4      	; 0x817e <follow_path+0x15a>
					b |= 1; c -= 0x20;
    817a:	31 60       	ori	r19, 0x01	; 1
    817c:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    817e:	f8 01       	movw	r30, r16
    8180:	e6 0f       	add	r30, r22
    8182:	f7 1f       	adc	r31, r23
    8184:	20 83       	st	Z, r18
    8186:	6f 5f       	subi	r22, 0xFF	; 255
    8188:	7f 4f       	sbci	r23, 0xFF	; 255
    818a:	b4 cf       	rjmp	.-152    	; 0x80f4 <follow_path+0xd0>
    818c:	44 e0       	ldi	r20, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    818e:	67 2b       	or	r22, r23
    8190:	09 f4       	brne	.+2      	; 0x8194 <follow_path+0x170>
    8192:	70 c0       	rjmp	.+224    	; 0x8274 <follow_path+0x250>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    8194:	f8 01       	movw	r30, r16
    8196:	80 81       	ld	r24, Z
    8198:	85 3e       	cpi	r24, 0xE5	; 229
    819a:	09 f4       	brne	.+2      	; 0x819e <follow_path+0x17a>
    819c:	a0 82       	st	Z, r10

	if (ni == 8) b <<= 2;
    819e:	18 97       	sbiw	r26, 0x08	; 8
    81a0:	11 f4       	brne	.+4      	; 0x81a6 <follow_path+0x182>
    81a2:	33 0f       	add	r19, r19
    81a4:	33 0f       	add	r19, r19
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    81a6:	23 2f       	mov	r18, r19
    81a8:	30 e0       	ldi	r19, 0x00	; 0
    81aa:	c9 01       	movw	r24, r18
    81ac:	83 70       	andi	r24, 0x03	; 3
    81ae:	90 70       	andi	r25, 0x00	; 0
    81b0:	01 97       	sbiw	r24, 0x01	; 1
    81b2:	09 f4       	brne	.+2      	; 0x81b6 <follow_path+0x192>
    81b4:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    81b6:	2c 70       	andi	r18, 0x0C	; 12
    81b8:	30 70       	andi	r19, 0x00	; 0
    81ba:	24 30       	cpi	r18, 0x04	; 4
    81bc:	31 05       	cpc	r19, r1
    81be:	09 f4       	brne	.+2      	; 0x81c2 <follow_path+0x19e>
    81c0:	48 60       	ori	r20, 0x08	; 8
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    81c2:	ec 0c       	add	r14, r12
    81c4:	fd 1c       	adc	r15, r13

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */

	sfn[11] = c;		/* Store NT flag, File name is created */
    81c6:	f8 01       	movw	r30, r16
    81c8:	43 87       	std	Z+11, r20	; 0x0b
    81ca:	61 c0       	rjmp	.+194    	; 0x828e <follow_path+0x26a>

#if _USE_LFN
	ord = sum = 0xFF; lfen = *(dj->fn+11) & NS_LOSS;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    81cc:	4e 85       	ldd	r20, Y+14	; 0x0e
    81ce:	5f 85       	ldd	r21, Y+15	; 0x0f
    81d0:	68 89       	ldd	r22, Y+16	; 0x10
    81d2:	79 89       	ldd	r23, Y+17	; 0x11
    81d4:	88 81       	ld	r24, Y
    81d6:	99 81       	ldd	r25, Y+1	; 0x01
    81d8:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    81dc:	ac 01       	movw	r20, r24
		if (res != FR_OK) break;
    81de:	00 97       	sbiw	r24, 0x00	; 0
    81e0:	01 f5       	brne	.+64     	; 0x8222 <follow_path+0x1fe>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    81e2:	ea 89       	ldd	r30, Y+18	; 0x12
    81e4:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    81e6:	80 81       	ld	r24, Z
    81e8:	88 23       	and	r24, r24
    81ea:	19 f4       	brne	.+6      	; 0x81f2 <follow_path+0x1ce>
    81ec:	44 e0       	ldi	r20, 0x04	; 4
    81ee:	50 e0       	ldi	r21, 0x00	; 0
    81f0:	18 c0       	rjmp	.+48     	; 0x8222 <follow_path+0x1fe>
				}
				ord = 0xFF;
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    81f2:	83 85       	ldd	r24, Z+11	; 0x0b
    81f4:	83 fd       	sbrc	r24, 3
    81f6:	0f c0       	rjmp	.+30     	; 0x8216 <follow_path+0x1f2>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    81f8:	ac 89       	ldd	r26, Y+20	; 0x14
    81fa:	bd 89       	ldd	r27, Y+21	; 0x15
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    81fc:	9f 01       	movw	r18, r30
    81fe:	25 5f       	subi	r18, 0xF5	; 245
    8200:	3f 4f       	sbci	r19, 0xFF	; 255
    8202:	e2 17       	cp	r30, r18
    8204:	f3 07       	cpc	r31, r19
    8206:	69 f0       	breq	.+26     	; 0x8222 <follow_path+0x1fe>
    8208:	90 81       	ld	r25, Z
    820a:	8c 91       	ld	r24, X
    820c:	98 17       	cp	r25, r24
    820e:	19 f4       	brne	.+6      	; 0x8216 <follow_path+0x1f2>
    8210:	31 96       	adiw	r30, 0x01	; 1
    8212:	11 96       	adiw	r26, 0x01	; 1
    8214:	f6 cf       	rjmp	.-20     	; 0x8202 <follow_path+0x1de>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    8216:	ce 01       	movw	r24, r28
    8218:	60 e0       	ldi	r22, 0x00	; 0
    821a:	70 e0       	ldi	r23, 0x00	; 0
    821c:	0e 94 a6 3e 	call	0x7d4c	; 0x7d4c <dir_next>
    8220:	3b c0       	rjmp	.+118    	; 0x8298 <follow_path+0x274>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+11) & NS_LAST;
    8222:	ec 89       	ldd	r30, Y+20	; 0x14
    8224:	fd 89       	ldd	r31, Y+21	; 0x15
    8226:	83 85       	ldd	r24, Z+11	; 0x0b
    8228:	84 70       	andi	r24, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    822a:	41 15       	cp	r20, r1
    822c:	51 05       	cpc	r21, r1
    822e:	39 f0       	breq	.+14     	; 0x823e <follow_path+0x21a>
    8230:	9a 01       	movw	r18, r20
				if (res == FR_NO_FILE && !last)
    8232:	44 30       	cpi	r20, 0x04	; 4
    8234:	51 05       	cpc	r21, r1
    8236:	09 f5       	brne	.+66     	; 0x827a <follow_path+0x256>
    8238:	88 23       	and	r24, r24
    823a:	09 f1       	breq	.+66     	; 0x827e <follow_path+0x25a>
    823c:	22 c0       	rjmp	.+68     	; 0x8282 <follow_path+0x25e>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    823e:	88 23       	and	r24, r24
    8240:	e1 f4       	brne	.+56     	; 0x827a <follow_path+0x256>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    8242:	ea 89       	ldd	r30, Y+18	; 0x12
    8244:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    8246:	83 85       	ldd	r24, Z+11	; 0x0b
    8248:	84 ff       	sbrs	r24, 4
    824a:	19 c0       	rjmp	.+50     	; 0x827e <follow_path+0x25a>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    824c:	84 89       	ldd	r24, Z+20	; 0x14
    824e:	95 89       	ldd	r25, Z+21	; 0x15
    8250:	a0 e0       	ldi	r26, 0x00	; 0
    8252:	b0 e0       	ldi	r27, 0x00	; 0
    8254:	dc 01       	movw	r26, r24
    8256:	99 27       	eor	r25, r25
    8258:	88 27       	eor	r24, r24
    825a:	22 8d       	ldd	r18, Z+26	; 0x1a
    825c:	33 8d       	ldd	r19, Z+27	; 0x1b
    825e:	40 e0       	ldi	r20, 0x00	; 0
    8260:	50 e0       	ldi	r21, 0x00	; 0
    8262:	82 2b       	or	r24, r18
    8264:	93 2b       	or	r25, r19
    8266:	a4 2b       	or	r26, r20
    8268:	b5 2b       	or	r27, r21
    826a:	8e 83       	std	Y+6, r24	; 0x06
    826c:	9f 83       	std	Y+7, r25	; 0x07
    826e:	a8 87       	std	Y+8, r26	; 0x08
    8270:	b9 87       	std	Y+9, r27	; 0x09
    8272:	09 cf       	rjmp	.-494    	; 0x8086 <follow_path+0x62>
		}
    8274:	26 e0       	ldi	r18, 0x06	; 6
    8276:	30 e0       	ldi	r19, 0x00	; 0
    8278:	04 c0       	rjmp	.+8      	; 0x8282 <follow_path+0x25e>
    827a:	9a 01       	movw	r18, r20
    827c:	02 c0       	rjmp	.+4      	; 0x8282 <follow_path+0x25e>
    827e:	25 e0       	ldi	r18, 0x05	; 5
    8280:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
    8282:	c9 01       	movw	r24, r18
    8284:	cd b7       	in	r28, 0x3d	; 61
    8286:	de b7       	in	r29, 0x3e	; 62
    8288:	ea e0       	ldi	r30, 0x0A	; 10
    828a:	0c 94 cc 57 	jmp	0xaf98	; 0xaf98 <__epilogue_restores__+0x10>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, lfen, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    828e:	ce 01       	movw	r24, r28
    8290:	60 e0       	ldi	r22, 0x00	; 0
    8292:	70 e0       	ldi	r23, 0x00	; 0
    8294:	0e 94 30 39 	call	0x7260	; 0x7260 <dir_seek>
    8298:	ac 01       	movw	r20, r24
	if (res != FR_OK) return res;
    829a:	00 97       	sbiw	r24, 0x00	; 0
    829c:	09 f4       	brne	.+2      	; 0x82a0 <follow_path+0x27c>
    829e:	96 cf       	rjmp	.-212    	; 0x81cc <follow_path+0x1a8>
    82a0:	c0 cf       	rjmp	.-128    	; 0x8222 <follow_path+0x1fe>
    82a2:	40 e0       	ldi	r20, 0x00	; 0
    82a4:	74 cf       	rjmp	.-280    	; 0x818e <follow_path+0x16a>

000082a6 <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    82a6:	a4 e2       	ldi	r26, 0x24	; 36
    82a8:	b0 e0       	ldi	r27, 0x00	; 0
    82aa:	e9 e5       	ldi	r30, 0x59	; 89
    82ac:	f1 e4       	ldi	r31, 0x41	; 65
    82ae:	0c 94 b2 57 	jmp	0xaf64	; 0xaf64 <__prologue_saves__+0x14>
    82b2:	8b a3       	std	Y+35, r24	; 0x23
    82b4:	9c a3       	std	Y+36, r25	; 0x24
    82b6:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = auto_mount(&path, &dj.fs, 0);
    82b8:	6d e0       	ldi	r22, 0x0D	; 13
    82ba:	e6 2e       	mov	r14, r22
    82bc:	f1 2c       	mov	r15, r1
    82be:	ec 0e       	add	r14, r28
    82c0:	fd 1e       	adc	r15, r29
    82c2:	ce 01       	movw	r24, r28
    82c4:	83 96       	adiw	r24, 0x23	; 35
    82c6:	b7 01       	movw	r22, r14
    82c8:	40 e0       	ldi	r20, 0x00	; 0
    82ca:	0e 94 50 36 	call	0x6ca0	; 0x6ca0 <auto_mount>
    82ce:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    82d0:	00 97       	sbiw	r24, 0x00	; 0
    82d2:	b9 f4       	brne	.+46     	; 0x8302 <f_stat+0x5c>
		INITBUF(dj, sfn, lfn);
    82d4:	ce 01       	movw	r24, r28
    82d6:	01 96       	adiw	r24, 0x01	; 1
    82d8:	89 a3       	std	Y+33, r24	; 0x21
    82da:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    82dc:	6b a1       	ldd	r22, Y+35	; 0x23
    82de:	7c a1       	ldd	r23, Y+36	; 0x24
    82e0:	c7 01       	movw	r24, r14
    82e2:	0e 94 12 40 	call	0x8024	; 0x8024 <follow_path>
    82e6:	8c 01       	movw	r16, r24
		if (res == FR_OK) {				/* Follwo completed */
    82e8:	00 97       	sbiw	r24, 0x00	; 0
    82ea:	59 f4       	brne	.+22     	; 0x8302 <f_stat+0x5c>
			if (dj.dir)	/* Found an object */
    82ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    82ee:	98 a1       	ldd	r25, Y+32	; 0x20
    82f0:	89 2b       	or	r24, r25
    82f2:	19 f4       	brne	.+6      	; 0x82fa <f_stat+0x54>
    82f4:	06 e0       	ldi	r16, 0x06	; 6
    82f6:	10 e0       	ldi	r17, 0x00	; 0
    82f8:	04 c0       	rjmp	.+8      	; 0x8302 <f_stat+0x5c>
				get_fileinfo(&dj, fno);
    82fa:	c7 01       	movw	r24, r14
    82fc:	b6 01       	movw	r22, r12
    82fe:	0e 94 9f 30 	call	0x613e	; 0x613e <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    8302:	c8 01       	movw	r24, r16
    8304:	a4 96       	adiw	r28, 0x24	; 36
    8306:	e8 e0       	ldi	r30, 0x08	; 8
    8308:	0c 94 ce 57 	jmp	0xaf9c	; 0xaf9c <__epilogue_restores__+0x14>

0000830c <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    830c:	ae e0       	ldi	r26, 0x0E	; 14
    830e:	b0 e0       	ldi	r27, 0x00	; 0
    8310:	ec e8       	ldi	r30, 0x8C	; 140
    8312:	f1 e4       	ldi	r31, 0x41	; 65
    8314:	0c 94 b6 57 	jmp	0xaf6c	; 0xaf6c <__prologue_saves__+0x1c>
    8318:	8c 01       	movw	r16, r24
    831a:	6d 87       	std	Y+13, r22	; 0x0d
    831c:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj->fs, 0);
    831e:	ce 01       	movw	r24, r28
    8320:	0d 96       	adiw	r24, 0x0d	; 13
    8322:	b8 01       	movw	r22, r16
    8324:	40 e0       	ldi	r20, 0x00	; 0
    8326:	0e 94 50 36 	call	0x6ca0	; 0x6ca0 <auto_mount>
    832a:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    832c:	00 97       	sbiw	r24, 0x00	; 0
    832e:	09 f0       	breq	.+2      	; 0x8332 <f_opendir+0x26>
    8330:	42 c0       	rjmp	.+132    	; 0x83b6 <f_opendir+0xaa>
		INITBUF((*dj), sfn, lfn);
    8332:	ce 01       	movw	r24, r28
    8334:	01 96       	adiw	r24, 0x01	; 1
    8336:	d8 01       	movw	r26, r16
    8338:	54 96       	adiw	r26, 0x14	; 20
    833a:	8d 93       	st	X+, r24
    833c:	9c 93       	st	X, r25
    833e:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    8340:	6d 85       	ldd	r22, Y+13	; 0x0d
    8342:	7e 85       	ldd	r23, Y+14	; 0x0e
    8344:	c8 01       	movw	r24, r16
    8346:	0e 94 12 40 	call	0x8024	; 0x8024 <follow_path>
    834a:	9c 01       	movw	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    834c:	00 97       	sbiw	r24, 0x00	; 0
    834e:	71 f5       	brne	.+92     	; 0x83ac <f_opendir+0xa0>
			dir = dj->dir;
    8350:	d8 01       	movw	r26, r16
    8352:	52 96       	adiw	r26, 0x12	; 18
    8354:	ed 91       	ld	r30, X+
    8356:	fc 91       	ld	r31, X
    8358:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    835a:	30 97       	sbiw	r30, 0x00	; 0
    835c:	b9 f0       	breq	.+46     	; 0x838c <f_opendir+0x80>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    835e:	83 85       	ldd	r24, Z+11	; 0x0b
    8360:	84 ff       	sbrs	r24, 4
    8362:	27 c0       	rjmp	.+78     	; 0x83b2 <f_opendir+0xa6>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    8364:	84 89       	ldd	r24, Z+20	; 0x14
    8366:	95 89       	ldd	r25, Z+21	; 0x15
    8368:	a0 e0       	ldi	r26, 0x00	; 0
    836a:	b0 e0       	ldi	r27, 0x00	; 0
    836c:	dc 01       	movw	r26, r24
    836e:	99 27       	eor	r25, r25
    8370:	88 27       	eor	r24, r24
    8372:	22 8d       	ldd	r18, Z+26	; 0x1a
    8374:	33 8d       	ldd	r19, Z+27	; 0x1b
    8376:	40 e0       	ldi	r20, 0x00	; 0
    8378:	50 e0       	ldi	r21, 0x00	; 0
    837a:	82 2b       	or	r24, r18
    837c:	93 2b       	or	r25, r19
    837e:	a4 2b       	or	r26, r20
    8380:	b5 2b       	or	r27, r21
    8382:	f8 01       	movw	r30, r16
    8384:	86 83       	std	Z+6, r24	; 0x06
    8386:	97 83       	std	Z+7, r25	; 0x07
    8388:	a0 87       	std	Z+8, r26	; 0x08
    838a:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    838c:	d8 01       	movw	r26, r16
    838e:	ed 91       	ld	r30, X+
    8390:	fc 91       	ld	r31, X
    8392:	11 97       	sbiw	r26, 0x01	; 1
    8394:	85 81       	ldd	r24, Z+5	; 0x05
    8396:	96 81       	ldd	r25, Z+6	; 0x06
    8398:	12 96       	adiw	r26, 0x02	; 2
    839a:	8d 93       	st	X+, r24
    839c:	9c 93       	st	X, r25
    839e:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    83a0:	c8 01       	movw	r24, r16
    83a2:	60 e0       	ldi	r22, 0x00	; 0
    83a4:	70 e0       	ldi	r23, 0x00	; 0
    83a6:	0e 94 30 39 	call	0x7260	; 0x7260 <dir_seek>
    83aa:	9c 01       	movw	r18, r24
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    83ac:	24 30       	cpi	r18, 0x04	; 4
    83ae:	31 05       	cpc	r19, r1
    83b0:	11 f4       	brne	.+4      	; 0x83b6 <f_opendir+0xaa>
    83b2:	25 e0       	ldi	r18, 0x05	; 5
    83b4:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj->fs, res);
}
    83b6:	c9 01       	movw	r24, r18
    83b8:	2e 96       	adiw	r28, 0x0e	; 14
    83ba:	e4 e0       	ldi	r30, 0x04	; 4
    83bc:	0c 94 d2 57 	jmp	0xafa4	; 0xafa4 <__epilogue_restores__+0x1c>

000083c0 <f_chdir>:


FRESULT f_chdir (
	const XCHAR *path	/* Pointer to the directory path */
)
{
    83c0:	a4 e2       	ldi	r26, 0x24	; 36
    83c2:	b0 e0       	ldi	r27, 0x00	; 0
    83c4:	e6 ee       	ldi	r30, 0xE6	; 230
    83c6:	f1 e4       	ldi	r31, 0x41	; 65
    83c8:	0c 94 b6 57 	jmp	0xaf6c	; 0xaf6c <__prologue_saves__+0x1c>
    83cc:	8b a3       	std	Y+35, r24	; 0x23
    83ce:	9c a3       	std	Y+36, r25	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 0);
    83d0:	8e 01       	movw	r16, r28
    83d2:	03 5f       	subi	r16, 0xF3	; 243
    83d4:	1f 4f       	sbci	r17, 0xFF	; 255
    83d6:	ce 01       	movw	r24, r28
    83d8:	83 96       	adiw	r24, 0x23	; 35
    83da:	b8 01       	movw	r22, r16
    83dc:	40 e0       	ldi	r20, 0x00	; 0
    83de:	0e 94 50 36 	call	0x6ca0	; 0x6ca0 <auto_mount>
    83e2:	bc 01       	movw	r22, r24
	if (res == FR_OK) {
    83e4:	00 97       	sbiw	r24, 0x00	; 0
    83e6:	e9 f5       	brne	.+122    	; 0x8462 <f_chdir+0xa2>
		INITBUF(dj, sfn, lfn);
    83e8:	ce 01       	movw	r24, r28
    83ea:	01 96       	adiw	r24, 0x01	; 1
    83ec:	89 a3       	std	Y+33, r24	; 0x21
    83ee:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    83f0:	6b a1       	ldd	r22, Y+35	; 0x23
    83f2:	7c a1       	ldd	r23, Y+36	; 0x24
    83f4:	c8 01       	movw	r24, r16
    83f6:	0e 94 12 40 	call	0x8024	; 0x8024 <follow_path>
    83fa:	bc 01       	movw	r22, r24
		if (res == FR_OK) {					/* Follow completed */
    83fc:	00 97       	sbiw	r24, 0x00	; 0
    83fe:	61 f5       	brne	.+88     	; 0x8458 <f_chdir+0x98>
			dir = dj.dir;					/* Pointer to the entry */
    8400:	2f 8d       	ldd	r18, Y+31	; 0x1f
    8402:	38 a1       	ldd	r19, Y+32	; 0x20
			if (!dir) {
    8404:	21 15       	cp	r18, r1
    8406:	31 05       	cpc	r19, r1
    8408:	39 f4       	brne	.+14     	; 0x8418 <f_chdir+0x58>
				dj.fs->cdir = 0;			/* No entry (root dir) */
    840a:	ed 85       	ldd	r30, Y+13	; 0x0d
    840c:	fe 85       	ldd	r31, Y+14	; 0x0e
    840e:	16 8a       	std	Z+22, r1	; 0x16
    8410:	17 8a       	std	Z+23, r1	; 0x17
    8412:	10 8e       	std	Z+24, r1	; 0x18
    8414:	11 8e       	std	Z+25, r1	; 0x19
    8416:	25 c0       	rjmp	.+74     	; 0x8462 <f_chdir+0xa2>
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the dir */
    8418:	d9 01       	movw	r26, r18
    841a:	1b 96       	adiw	r26, 0x0b	; 11
    841c:	8c 91       	ld	r24, X
    841e:	1b 97       	sbiw	r26, 0x0b	; 11
    8420:	84 ff       	sbrs	r24, 4
    8422:	1d c0       	rjmp	.+58     	; 0x845e <f_chdir+0x9e>
					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    8424:	0d 85       	ldd	r16, Y+13	; 0x0d
    8426:	1e 85       	ldd	r17, Y+14	; 0x0e
    8428:	54 96       	adiw	r26, 0x14	; 20
    842a:	8d 91       	ld	r24, X+
    842c:	9c 91       	ld	r25, X
    842e:	55 97       	sbiw	r26, 0x15	; 21
    8430:	a0 e0       	ldi	r26, 0x00	; 0
    8432:	b0 e0       	ldi	r27, 0x00	; 0
    8434:	dc 01       	movw	r26, r24
    8436:	99 27       	eor	r25, r25
    8438:	88 27       	eor	r24, r24
    843a:	f9 01       	movw	r30, r18
    843c:	22 8d       	ldd	r18, Z+26	; 0x1a
    843e:	33 8d       	ldd	r19, Z+27	; 0x1b
    8440:	40 e0       	ldi	r20, 0x00	; 0
    8442:	50 e0       	ldi	r21, 0x00	; 0
    8444:	82 2b       	or	r24, r18
    8446:	93 2b       	or	r25, r19
    8448:	a4 2b       	or	r26, r20
    844a:	b5 2b       	or	r27, r21
    844c:	f8 01       	movw	r30, r16
    844e:	86 8b       	std	Z+22, r24	; 0x16
    8450:	97 8b       	std	Z+23, r25	; 0x17
    8452:	a0 8f       	std	Z+24, r26	; 0x18
    8454:	b1 8f       	std	Z+25, r27	; 0x19
    8456:	05 c0       	rjmp	.+10     	; 0x8462 <f_chdir+0xa2>
				else
					res = FR_NO_PATH;		/* Could not reach the dir (it is a file) */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    8458:	84 30       	cpi	r24, 0x04	; 4
    845a:	91 05       	cpc	r25, r1
    845c:	11 f4       	brne	.+4      	; 0x8462 <f_chdir+0xa2>
    845e:	65 e0       	ldi	r22, 0x05	; 5
    8460:	70 e0       	ldi	r23, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    8462:	cb 01       	movw	r24, r22
    8464:	a4 96       	adiw	r28, 0x24	; 36
    8466:	e4 e0       	ldi	r30, 0x04	; 4
    8468:	0c 94 d2 57 	jmp	0xafa4	; 0xafa4 <__epilogue_restores__+0x1c>

0000846c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    846c:	0f 93       	push	r16
    846e:	1f 93       	push	r17
    8470:	cf 93       	push	r28
    8472:	df 93       	push	r29
    8474:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    8476:	60 e0       	ldi	r22, 0x00	; 0
    8478:	70 e0       	ldi	r23, 0x00	; 0
    847a:	0e 94 30 39 	call	0x7260	; 0x7260 <dir_seek>
    847e:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8480:	00 97       	sbiw	r24, 0x00	; 0
    8482:	e1 f5       	brne	.+120    	; 0x84fc <dir_register+0x90>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    8484:	4e 85       	ldd	r20, Y+14	; 0x0e
    8486:	5f 85       	ldd	r21, Y+15	; 0x0f
    8488:	68 89       	ldd	r22, Y+16	; 0x10
    848a:	79 89       	ldd	r23, Y+17	; 0x11
    848c:	88 81       	ld	r24, Y
    848e:	99 81       	ldd	r25, Y+1	; 0x01
    8490:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    8494:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    8496:	00 97       	sbiw	r24, 0x00	; 0
    8498:	89 f5       	brne	.+98     	; 0x84fc <dir_register+0x90>
			c = *dj->dir;
    849a:	ea 89       	ldd	r30, Y+18	; 0x12
    849c:	fb 89       	ldd	r31, Y+19	; 0x13
    849e:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    84a0:	e5 3e       	cpi	r30, 0xE5	; 229
    84a2:	91 f1       	breq	.+100    	; 0x8508 <dir_register+0x9c>
    84a4:	ee 23       	and	r30, r30
    84a6:	81 f1       	breq	.+96     	; 0x8508 <dir_register+0x9c>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    84a8:	ce 01       	movw	r24, r28
    84aa:	61 e0       	ldi	r22, 0x01	; 1
    84ac:	70 e0       	ldi	r23, 0x00	; 0
    84ae:	0e 94 a6 3e 	call	0x7d4c	; 0x7d4c <dir_next>
    84b2:	e5 cf       	rjmp	.-54     	; 0x847e <dir_register+0x12>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    84b4:	aa 89       	ldd	r26, Y+18	; 0x12
    84b6:	bb 89       	ldd	r27, Y+19	; 0x13
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    84b8:	bd 01       	movw	r22, r26
    84ba:	fd 01       	movw	r30, r26
	while (cnt--) *d++ = (char)val;
    84bc:	cd 01       	movw	r24, r26
    84be:	80 96       	adiw	r24, 0x20	; 32
    84c0:	01 c0       	rjmp	.+2      	; 0x84c4 <dir_register+0x58>
    84c2:	11 92       	st	Z+, r1
    84c4:	e8 17       	cp	r30, r24
    84c6:	f9 07       	cpc	r31, r25
    84c8:	e1 f7       	brne	.-8      	; 0x84c2 <dir_register+0x56>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    84ca:	0c 89       	ldd	r16, Y+20	; 0x14
    84cc:	1d 89       	ldd	r17, Y+21	; 0x15
	while (cnt--) *d++ = *s++;
    84ce:	a8 01       	movw	r20, r16
    84d0:	45 5f       	subi	r20, 0xF5	; 245
    84d2:	5f 4f       	sbci	r21, 0xFF	; 255
    84d4:	06 c0       	rjmp	.+12     	; 0x84e2 <dir_register+0x76>
    84d6:	f8 01       	movw	r30, r16
    84d8:	81 91       	ld	r24, Z+
    84da:	8f 01       	movw	r16, r30
    84dc:	fb 01       	movw	r30, r22
    84de:	81 93       	st	Z+, r24
    84e0:	bf 01       	movw	r22, r30
    84e2:	04 17       	cp	r16, r20
    84e4:	15 07       	cpc	r17, r21
    84e6:	b9 f7       	brne	.-18     	; 0x84d6 <dir_register+0x6a>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+11) & 0x18;	/* Put NT flag */
    84e8:	ec 89       	ldd	r30, Y+20	; 0x14
    84ea:	fd 89       	ldd	r31, Y+21	; 0x15
    84ec:	83 85       	ldd	r24, Z+11	; 0x0b
    84ee:	88 71       	andi	r24, 0x18	; 24
    84f0:	1c 96       	adiw	r26, 0x0c	; 12
    84f2:	8c 93       	st	X, r24
			dj->fs->wflag = 1;
    84f4:	e8 81       	ld	r30, Y
    84f6:	f9 81       	ldd	r31, Y+1	; 0x01
    84f8:	81 e0       	ldi	r24, 0x01	; 1
    84fa:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    84fc:	c9 01       	movw	r24, r18
    84fe:	df 91       	pop	r29
    8500:	cf 91       	pop	r28
    8502:	1f 91       	pop	r17
    8504:	0f 91       	pop	r16
    8506:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    8508:	4e 85       	ldd	r20, Y+14	; 0x0e
    850a:	5f 85       	ldd	r21, Y+15	; 0x0f
    850c:	68 89       	ldd	r22, Y+16	; 0x10
    850e:	79 89       	ldd	r23, Y+17	; 0x11
    8510:	88 81       	ld	r24, Y
    8512:	99 81       	ldd	r25, Y+1	; 0x01
    8514:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    8518:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    851a:	00 97       	sbiw	r24, 0x00	; 0
    851c:	59 f2       	breq	.-106    	; 0x84b4 <dir_register+0x48>
    851e:	ee cf       	rjmp	.-36     	; 0x84fc <dir_register+0x90>

00008520 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    8520:	cf 93       	push	r28
    8522:	df 93       	push	r29
    8524:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    8526:	6c 81       	ldd	r22, Y+4	; 0x04
    8528:	7d 81       	ldd	r23, Y+5	; 0x05
    852a:	0e 94 30 39 	call	0x7260	; 0x7260 <dir_seek>
    852e:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8530:	00 97       	sbiw	r24, 0x00	; 0
    8532:	99 f4       	brne	.+38     	; 0x855a <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    8534:	4e 85       	ldd	r20, Y+14	; 0x0e
    8536:	5f 85       	ldd	r21, Y+15	; 0x0f
    8538:	68 89       	ldd	r22, Y+16	; 0x10
    853a:	79 89       	ldd	r23, Y+17	; 0x11
    853c:	88 81       	ld	r24, Y
    853e:	99 81       	ldd	r25, Y+1	; 0x01
    8540:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    8544:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    8546:	00 97       	sbiw	r24, 0x00	; 0
    8548:	41 f4       	brne	.+16     	; 0x855a <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    854a:	ea 89       	ldd	r30, Y+18	; 0x12
    854c:	fb 89       	ldd	r31, Y+19	; 0x13
    854e:	85 ee       	ldi	r24, 0xE5	; 229
    8550:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    8552:	e8 81       	ld	r30, Y
    8554:	f9 81       	ldd	r31, Y+1	; 0x01
    8556:	81 e0       	ldi	r24, 0x01	; 1
    8558:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    855a:	c9 01       	movw	r24, r18
    855c:	df 91       	pop	r29
    855e:	cf 91       	pop	r28
    8560:	08 95       	ret

00008562 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    8562:	0f 93       	push	r16
    8564:	cf 93       	push	r28
    8566:	df 93       	push	r29
    8568:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    856a:	40 e0       	ldi	r20, 0x00	; 0
    856c:	50 e0       	ldi	r21, 0x00	; 0
    856e:	60 e0       	ldi	r22, 0x00	; 0
    8570:	70 e0       	ldi	r23, 0x00	; 0
    8572:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    8576:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8578:	00 97       	sbiw	r24, 0x00	; 0
    857a:	09 f0       	breq	.+2      	; 0x857e <sync+0x1c>
    857c:	60 c0       	rjmp	.+192    	; 0x863e <sync+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    857e:	88 81       	ld	r24, Y
    8580:	83 30       	cpi	r24, 0x03	; 3
    8582:	09 f0       	breq	.+2      	; 0x8586 <sync+0x24>
    8584:	51 c0       	rjmp	.+162    	; 0x8628 <sync+0xc6>
    8586:	89 85       	ldd	r24, Y+9	; 0x09
    8588:	88 23       	and	r24, r24
    858a:	09 f4       	brne	.+2      	; 0x858e <sync+0x2c>
    858c:	4d c0       	rjmp	.+154    	; 0x8628 <sync+0xc6>
			fs->winsect = 0;
    858e:	1e a6       	std	Y+46, r1	; 0x2e
    8590:	1f a6       	std	Y+47, r1	; 0x2f
    8592:	18 aa       	std	Y+48, r1	; 0x30
    8594:	19 aa       	std	Y+49, r1	; 0x31
			mem_set(fs->win, 0, 512);
    8596:	be 01       	movw	r22, r28
    8598:	6e 5c       	subi	r22, 0xCE	; 206
    859a:	7f 4f       	sbci	r23, 0xFF	; 255
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    859c:	fb 01       	movw	r30, r22
	while (cnt--) *d++ = (char)val;
    859e:	ce 01       	movw	r24, r28
    85a0:	8e 5c       	subi	r24, 0xCE	; 206
    85a2:	9d 4f       	sbci	r25, 0xFD	; 253
    85a4:	01 c0       	rjmp	.+2      	; 0x85a8 <sync+0x46>
    85a6:	11 92       	st	Z+, r1
    85a8:	e8 17       	cp	r30, r24
    85aa:	f9 07       	cpc	r31, r25
    85ac:	e1 f7       	brne	.-8      	; 0x85a6 <sync+0x44>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    85ae:	c0 5d       	subi	r28, 0xD0	; 208
    85b0:	dd 4f       	sbci	r29, 0xFD	; 253
    85b2:	85 e5       	ldi	r24, 0x55	; 85
    85b4:	9a ea       	ldi	r25, 0xAA	; 170
    85b6:	88 83       	st	Y, r24
    85b8:	99 83       	std	Y+1, r25	; 0x01
    85ba:	c0 53       	subi	r28, 0x30	; 48
    85bc:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    85be:	82 e5       	ldi	r24, 0x52	; 82
    85c0:	92 e5       	ldi	r25, 0x52	; 82
    85c2:	a1 e6       	ldi	r26, 0x61	; 97
    85c4:	b1 e4       	ldi	r27, 0x41	; 65
    85c6:	8a ab       	std	Y+50, r24	; 0x32
    85c8:	9b ab       	std	Y+51, r25	; 0x33
    85ca:	ac ab       	std	Y+52, r26	; 0x34
    85cc:	bd ab       	std	Y+53, r27	; 0x35
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    85ce:	ca 5e       	subi	r28, 0xEA	; 234
    85d0:	dd 4f       	sbci	r29, 0xFD	; 253
    85d2:	82 e7       	ldi	r24, 0x72	; 114
    85d4:	92 e7       	ldi	r25, 0x72	; 114
    85d6:	a1 e4       	ldi	r26, 0x41	; 65
    85d8:	b1 e6       	ldi	r27, 0x61	; 97
    85da:	88 83       	st	Y, r24
    85dc:	99 83       	std	Y+1, r25	; 0x01
    85de:	aa 83       	std	Y+2, r26	; 0x02
    85e0:	bb 83       	std	Y+3, r27	; 0x03
    85e2:	c6 51       	subi	r28, 0x16	; 22
    85e4:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    85e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    85e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    85ea:	a8 89       	ldd	r26, Y+16	; 0x10
    85ec:	b9 89       	ldd	r27, Y+17	; 0x11
    85ee:	c6 5e       	subi	r28, 0xE6	; 230
    85f0:	dd 4f       	sbci	r29, 0xFD	; 253
    85f2:	88 83       	st	Y, r24
    85f4:	99 83       	std	Y+1, r25	; 0x01
    85f6:	aa 83       	std	Y+2, r26	; 0x02
    85f8:	bb 83       	std	Y+3, r27	; 0x03
    85fa:	ca 51       	subi	r28, 0x1A	; 26
    85fc:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    85fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    8600:	9b 85       	ldd	r25, Y+11	; 0x0b
    8602:	ac 85       	ldd	r26, Y+12	; 0x0c
    8604:	bd 85       	ldd	r27, Y+13	; 0x0d
    8606:	c2 5e       	subi	r28, 0xE2	; 226
    8608:	dd 4f       	sbci	r29, 0xFD	; 253
    860a:	88 83       	st	Y, r24
    860c:	99 83       	std	Y+1, r25	; 0x01
    860e:	aa 83       	std	Y+2, r26	; 0x02
    8610:	bb 83       	std	Y+3, r27	; 0x03
    8612:	ce 51       	subi	r28, 0x1E	; 30
    8614:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    8616:	2a 89       	ldd	r18, Y+18	; 0x12
    8618:	3b 89       	ldd	r19, Y+19	; 0x13
    861a:	4c 89       	ldd	r20, Y+20	; 0x14
    861c:	5d 89       	ldd	r21, Y+21	; 0x15
    861e:	89 81       	ldd	r24, Y+1	; 0x01
    8620:	01 e0       	ldi	r16, 0x01	; 1
    8622:	0e 94 f7 50 	call	0xa1ee	; 0xa1ee <disk_write>
			fs->fsi_flag = 0;
    8626:	19 86       	std	Y+9, r1	; 0x09
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    8628:	89 81       	ldd	r24, Y+1	; 0x01
    862a:	60 e0       	ldi	r22, 0x00	; 0
    862c:	40 e0       	ldi	r20, 0x00	; 0
    862e:	50 e0       	ldi	r21, 0x00	; 0
    8630:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <disk_ioctl>
    8634:	00 97       	sbiw	r24, 0x00	; 0
    8636:	11 f0       	breq	.+4      	; 0x863c <sync+0xda>
    8638:	81 e0       	ldi	r24, 0x01	; 1
    863a:	90 e0       	ldi	r25, 0x00	; 0
    863c:	9c 01       	movw	r18, r24
			res = FR_DISK_ERR;
	}

	return res;
}
    863e:	c9 01       	movw	r24, r18
    8640:	df 91       	pop	r29
    8642:	cf 91       	pop	r28
    8644:	0f 91       	pop	r16
    8646:	08 95       	ret

00008648 <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    8648:	a4 e2       	ldi	r26, 0x24	; 36
    864a:	b0 e0       	ldi	r27, 0x00	; 0
    864c:	ea e2       	ldi	r30, 0x2A	; 42
    864e:	f3 e4       	ldi	r31, 0x43	; 67
    8650:	0c 94 b4 57 	jmp	0xaf68	; 0xaf68 <__prologue_saves__+0x18>
    8654:	8b a3       	std	Y+35, r24	; 0x23
    8656:	9c a3       	std	Y+36, r25	; 0x24
    8658:	7b 01       	movw	r14, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
    865a:	8e 01       	movw	r16, r28
    865c:	03 5f       	subi	r16, 0xF3	; 243
    865e:	1f 4f       	sbci	r17, 0xFF	; 255
    8660:	ce 01       	movw	r24, r28
    8662:	83 96       	adiw	r24, 0x23	; 35
    8664:	b8 01       	movw	r22, r16
    8666:	41 e0       	ldi	r20, 0x01	; 1
    8668:	0e 94 50 36 	call	0x6ca0	; 0x6ca0 <auto_mount>
    866c:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    866e:	00 97       	sbiw	r24, 0x00	; 0
    8670:	69 f5       	brne	.+90     	; 0x86cc <f_utime+0x84>
		INITBUF(dj, sfn, lfn);
    8672:	ce 01       	movw	r24, r28
    8674:	01 96       	adiw	r24, 0x01	; 1
    8676:	89 a3       	std	Y+33, r24	; 0x21
    8678:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    867a:	6b a1       	ldd	r22, Y+35	; 0x23
    867c:	7c a1       	ldd	r23, Y+36	; 0x24
    867e:	c8 01       	movw	r24, r16
    8680:	0e 94 12 40 	call	0x8024	; 0x8024 <follow_path>
    8684:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    8686:	00 97       	sbiw	r24, 0x00	; 0
    8688:	09 f5       	brne	.+66     	; 0x86cc <f_utime+0x84>
    868a:	e9 a1       	ldd	r30, Y+33	; 0x21
    868c:	fa a1       	ldd	r31, Y+34	; 0x22
    868e:	83 85       	ldd	r24, Z+11	; 0x0b
    8690:	85 fd       	sbrc	r24, 5
    8692:	1a c0       	rjmp	.+52     	; 0x86c8 <f_utime+0x80>
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    8694:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8696:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    8698:	30 97       	sbiw	r30, 0x00	; 0
    869a:	b1 f0       	breq	.+44     	; 0x86c8 <f_utime+0x80>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    869c:	d7 01       	movw	r26, r14
    869e:	16 96       	adiw	r26, 0x06	; 6
    86a0:	8d 91       	ld	r24, X+
    86a2:	9c 91       	ld	r25, X
    86a4:	17 97       	sbiw	r26, 0x07	; 7
    86a6:	86 8b       	std	Z+22, r24	; 0x16
    86a8:	97 8b       	std	Z+23, r25	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    86aa:	14 96       	adiw	r26, 0x04	; 4
    86ac:	8d 91       	ld	r24, X+
    86ae:	9c 91       	ld	r25, X
    86b0:	15 97       	sbiw	r26, 0x05	; 5
    86b2:	80 8f       	std	Z+24, r24	; 0x18
    86b4:	91 8f       	std	Z+25, r25	; 0x19
				dj.fs->wflag = 1;
    86b6:	ed 85       	ldd	r30, Y+13	; 0x0d
    86b8:	fe 85       	ldd	r31, Y+14	; 0x0e
    86ba:	81 e0       	ldi	r24, 0x01	; 1
    86bc:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    86be:	cf 01       	movw	r24, r30
    86c0:	0e 94 b1 42 	call	0x8562	; 0x8562 <sync>
    86c4:	9c 01       	movw	r18, r24
    86c6:	02 c0       	rjmp	.+4      	; 0x86cc <f_utime+0x84>
    86c8:	26 e0       	ldi	r18, 0x06	; 6
    86ca:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    86cc:	c9 01       	movw	r24, r18
    86ce:	a4 96       	adiw	r28, 0x24	; 36
    86d0:	e6 e0       	ldi	r30, 0x06	; 6
    86d2:	0c 94 d0 57 	jmp	0xafa0	; 0xafa0 <__epilogue_restores__+0x18>

000086d6 <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    86d6:	a4 e2       	ldi	r26, 0x24	; 36
    86d8:	b0 e0       	ldi	r27, 0x00	; 0
    86da:	e1 e7       	ldi	r30, 0x71	; 113
    86dc:	f3 e4       	ldi	r31, 0x43	; 67
    86de:	0c 94 b4 57 	jmp	0xaf68	; 0xaf68 <__prologue_saves__+0x18>
    86e2:	8b a3       	std	Y+35, r24	; 0x23
    86e4:	9c a3       	std	Y+36, r25	; 0x24
    86e6:	e6 2e       	mov	r14, r22
    86e8:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
    86ea:	8e 01       	movw	r16, r28
    86ec:	03 5f       	subi	r16, 0xF3	; 243
    86ee:	1f 4f       	sbci	r17, 0xFF	; 255
    86f0:	ce 01       	movw	r24, r28
    86f2:	83 96       	adiw	r24, 0x23	; 35
    86f4:	b8 01       	movw	r22, r16
    86f6:	41 e0       	ldi	r20, 0x01	; 1
    86f8:	0e 94 50 36 	call	0x6ca0	; 0x6ca0 <auto_mount>
    86fc:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    86fe:	00 97       	sbiw	r24, 0x00	; 0
    8700:	49 f5       	brne	.+82     	; 0x8754 <f_chmod+0x7e>
		INITBUF(dj, sfn, lfn);
    8702:	ce 01       	movw	r24, r28
    8704:	01 96       	adiw	r24, 0x01	; 1
    8706:	89 a3       	std	Y+33, r24	; 0x21
    8708:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    870a:	6b a1       	ldd	r22, Y+35	; 0x23
    870c:	7c a1       	ldd	r23, Y+36	; 0x24
    870e:	c8 01       	movw	r24, r16
    8710:	0e 94 12 40 	call	0x8024	; 0x8024 <follow_path>
    8714:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    8716:	00 97       	sbiw	r24, 0x00	; 0
    8718:	e9 f4       	brne	.+58     	; 0x8754 <f_chmod+0x7e>
    871a:	e9 a1       	ldd	r30, Y+33	; 0x21
    871c:	fa a1       	ldd	r31, Y+34	; 0x22
    871e:	83 85       	ldd	r24, Z+11	; 0x0b
    8720:	85 fd       	sbrc	r24, 5
    8722:	16 c0       	rjmp	.+44     	; 0x8750 <f_chmod+0x7a>
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    8724:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8726:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    8728:	30 97       	sbiw	r30, 0x00	; 0
    872a:	91 f0       	breq	.+36     	; 0x8750 <f_chmod+0x7a>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    872c:	9f 2d       	mov	r25, r15
    872e:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    8730:	89 2f       	mov	r24, r25
    8732:	80 95       	com	r24
    8734:	23 85       	ldd	r18, Z+11	; 0x0b
    8736:	82 23       	and	r24, r18
    8738:	9e 21       	and	r25, r14
    873a:	89 2b       	or	r24, r25
    873c:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    873e:	ed 85       	ldd	r30, Y+13	; 0x0d
    8740:	fe 85       	ldd	r31, Y+14	; 0x0e
    8742:	81 e0       	ldi	r24, 0x01	; 1
    8744:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    8746:	cf 01       	movw	r24, r30
    8748:	0e 94 b1 42 	call	0x8562	; 0x8562 <sync>
    874c:	9c 01       	movw	r18, r24
    874e:	02 c0       	rjmp	.+4      	; 0x8754 <f_chmod+0x7e>
    8750:	26 e0       	ldi	r18, 0x06	; 6
    8752:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    8754:	c9 01       	movw	r24, r18
    8756:	a4 96       	adiw	r28, 0x24	; 36
    8758:	e6 e0       	ldi	r30, 0x06	; 6
    875a:	0c 94 d0 57 	jmp	0xafa0	; 0xafa0 <__epilogue_restores__+0x18>

0000875e <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    875e:	af e4       	ldi	r26, 0x4F	; 79
    8760:	b0 e0       	ldi	r27, 0x00	; 0
    8762:	e5 eb       	ldi	r30, 0xB5	; 181
    8764:	f3 e4       	ldi	r31, 0x43	; 67
    8766:	0c 94 b2 57 	jmp	0xaf64	; 0xaf64 <__prologue_saves__+0x14>
    876a:	8e 01       	movw	r16, r28
    876c:	02 5b       	subi	r16, 0xB2	; 178
    876e:	1f 4f       	sbci	r17, 0xFF	; 255
    8770:	d8 01       	movw	r26, r16
    8772:	8d 93       	st	X+, r24
    8774:	9c 93       	st	X, r25
    8776:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    8778:	ce 01       	movw	r24, r28
    877a:	01 96       	adiw	r24, 0x01	; 1
    877c:	8e ab       	std	Y+54, r24	; 0x36
    877e:	9f ab       	std	Y+55, r25	; 0x37
	res = auto_mount(&path_old, &dj_old.fs, 1);
    8780:	32 e2       	ldi	r19, 0x22	; 34
    8782:	e3 2e       	mov	r14, r19
    8784:	f1 2c       	mov	r15, r1
    8786:	ec 0e       	add	r14, r28
    8788:	fd 1e       	adc	r15, r29
    878a:	c8 01       	movw	r24, r16
    878c:	b7 01       	movw	r22, r14
    878e:	41 e0       	ldi	r20, 0x01	; 1
    8790:	0e 94 50 36 	call	0x6ca0	; 0x6ca0 <auto_mount>
    8794:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8796:	00 97       	sbiw	r24, 0x00	; 0
    8798:	09 f0       	breq	.+2      	; 0x879c <f_rename+0x3e>
    879a:	f0 c0       	rjmp	.+480    	; 0x897c <f_rename+0x21e>
		dj_new.fs = dj_old.fs;
    879c:	8a a1       	ldd	r24, Y+34	; 0x22
    879e:	9b a1       	ldd	r25, Y+35	; 0x23
    87a0:	88 af       	std	Y+56, r24	; 0x38
    87a2:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    87a4:	f8 01       	movw	r30, r16
    87a6:	60 81       	ld	r22, Z
    87a8:	71 81       	ldd	r23, Z+1	; 0x01
    87aa:	c7 01       	movw	r24, r14
    87ac:	0e 94 12 40 	call	0x8024	; 0x8024 <follow_path>
    87b0:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[11] & NS_DOT))
    87b2:	00 97       	sbiw	r24, 0x00	; 0
    87b4:	09 f0       	breq	.+2      	; 0x87b8 <f_rename+0x5a>
    87b6:	e2 c0       	rjmp	.+452    	; 0x897c <f_rename+0x21e>
    87b8:	ee a9       	ldd	r30, Y+54	; 0x36
    87ba:	ff a9       	ldd	r31, Y+55	; 0x37
    87bc:	83 85       	ldd	r24, Z+11	; 0x0b
    87be:	85 ff       	sbrs	r24, 5
    87c0:	03 c0       	rjmp	.+6      	; 0x87c8 <f_rename+0x6a>
    87c2:	26 e0       	ldi	r18, 0x06	; 6
    87c4:	30 e0       	ldi	r19, 0x00	; 0
    87c6:	da c0       	rjmp	.+436    	; 0x897c <f_rename+0x21e>
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    87c8:	8c a9       	ldd	r24, Y+52	; 0x34
    87ca:	9d a9       	ldd	r25, Y+53	; 0x35
    87cc:	00 97       	sbiw	r24, 0x00	; 0
    87ce:	19 f4       	brne	.+6      	; 0x87d6 <f_rename+0x78>
    87d0:	24 e0       	ldi	r18, 0x04	; 4
    87d2:	30 e0       	ldi	r19, 0x00	; 0
    87d4:	d3 c0       	rjmp	.+422    	; 0x897c <f_rename+0x21e>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    87d6:	de 01       	movw	r26, r28
    87d8:	1d 96       	adiw	r26, 0x0d	; 13
    87da:	fc 01       	movw	r30, r24
    87dc:	02 c0       	rjmp	.+4      	; 0x87e2 <f_rename+0x84>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    87de:	82 85       	ldd	r24, Z+10	; 0x0a
    87e0:	8d 93       	st	X+, r24
    87e2:	31 96       	adiw	r30, 0x01	; 1
    87e4:	ae 15       	cp	r26, r14
    87e6:	bf 05       	cpc	r27, r15
    87e8:	d1 f7       	brne	.-12     	; 0x87de <f_rename+0x80>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    87ea:	de 01       	movw	r26, r28
    87ec:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    87ee:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    87f0:	9d 01       	movw	r18, r26
    87f2:	02 c0       	rjmp	.+4      	; 0x87f8 <f_rename+0x9a>
    87f4:	81 91       	ld	r24, Z+
    87f6:	8d 93       	st	X+, r24
    87f8:	e2 17       	cp	r30, r18
    87fa:	f3 07       	cpc	r31, r19
    87fc:	d9 f7       	brne	.-10     	; 0x87f4 <f_rename+0x96>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    87fe:	8e 01       	movw	r16, r28
    8800:	08 5c       	subi	r16, 0xC8	; 200
    8802:	1f 4f       	sbci	r17, 0xFF	; 255
    8804:	c8 01       	movw	r24, r16
    8806:	b6 01       	movw	r22, r12
    8808:	0e 94 12 40 	call	0x8024	; 0x8024 <follow_path>
    880c:	9c 01       	movw	r18, r24
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    880e:	00 97       	sbiw	r24, 0x00	; 0
    8810:	19 f4       	brne	.+6      	; 0x8818 <f_rename+0xba>
    8812:	28 e0       	ldi	r18, 0x08	; 8
    8814:	30 e0       	ldi	r19, 0x00	; 0
    8816:	b2 c0       	rjmp	.+356    	; 0x897c <f_rename+0x21e>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    8818:	84 30       	cpi	r24, 0x04	; 4
    881a:	91 05       	cpc	r25, r1
    881c:	09 f0       	breq	.+2      	; 0x8820 <f_rename+0xc2>
    881e:	ae c0       	rjmp	.+348    	; 0x897c <f_rename+0x21e>
		res = dir_register(&dj_new);			/* Register the new object */
    8820:	c8 01       	movw	r24, r16
    8822:	0e 94 36 42 	call	0x846c	; 0x846c <dir_register>
    8826:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    8828:	00 97       	sbiw	r24, 0x00	; 0
    882a:	09 f0       	breq	.+2      	; 0x882e <f_rename+0xd0>
    882c:	a7 c0       	rjmp	.+334    	; 0x897c <f_rename+0x21e>
			dir = dj_new.dir;					/* Copy object information into new entry */
    882e:	fe 01       	movw	r30, r28
    8830:	e6 5b       	subi	r30, 0xB6	; 182
    8832:	ff 4f       	sbci	r31, 0xFF	; 255
    8834:	20 81       	ld	r18, Z
    8836:	31 81       	ldd	r19, Z+1	; 0x01

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    8838:	de 01       	movw	r26, r28
    883a:	1f 96       	adiw	r26, 0x0f	; 15
    883c:	f9 01       	movw	r30, r18
    883e:	02 c0       	rjmp	.+4      	; 0x8844 <f_rename+0xe6>
	while (cnt--) *d++ = *s++;
    8840:	8d 91       	ld	r24, X+
    8842:	84 87       	std	Z+12, r24	; 0x0c
    8844:	31 96       	adiw	r30, 0x01	; 1
    8846:	ae 15       	cp	r26, r14
    8848:	bf 05       	cpc	r27, r15
    884a:	d1 f7       	brne	.-12     	; 0x8840 <f_rename+0xe2>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    884c:	8d 85       	ldd	r24, Y+13	; 0x0d
    884e:	80 62       	ori	r24, 0x20	; 32
    8850:	d9 01       	movw	r26, r18
    8852:	1b 96       	adiw	r26, 0x0b	; 11
    8854:	8c 93       	st	X, r24
    8856:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    8858:	ea a1       	ldd	r30, Y+34	; 0x22
    885a:	fb a1       	ldd	r31, Y+35	; 0x23
    885c:	81 e0       	ldi	r24, 0x01	; 1
    885e:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    8860:	1b 96       	adiw	r26, 0x0b	; 11
    8862:	8c 91       	ld	r24, X
    8864:	1b 97       	sbiw	r26, 0x0b	; 11
    8866:	84 ff       	sbrs	r24, 4
    8868:	7a c0       	rjmp	.+244    	; 0x895e <f_rename+0x200>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    886a:	c8 ac       	ldd	r12, Y+56	; 0x38
    886c:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    886e:	5a 96       	adiw	r26, 0x1a	; 26
    8870:	8d 91       	ld	r24, X+
    8872:	9c 91       	ld	r25, X
    8874:	5b 97       	sbiw	r26, 0x1b	; 27
    8876:	54 96       	adiw	r26, 0x14	; 20
    8878:	2d 91       	ld	r18, X+
    887a:	3c 91       	ld	r19, X
    887c:	55 97       	sbiw	r26, 0x15	; 21
    887e:	82 2b       	or	r24, r18
    8880:	93 2b       	or	r25, r19
    8882:	7c 01       	movw	r14, r24
    8884:	00 e0       	ldi	r16, 0x00	; 0
    8886:	10 e0       	ldi	r17, 0x00	; 0
    8888:	8e ef       	ldi	r24, 0xFE	; 254
    888a:	9f ef       	ldi	r25, 0xFF	; 255
    888c:	af ef       	ldi	r26, 0xFF	; 255
    888e:	bf ef       	ldi	r27, 0xFF	; 255
    8890:	e8 0e       	add	r14, r24
    8892:	f9 1e       	adc	r15, r25
    8894:	0a 1f       	adc	r16, r26
    8896:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    8898:	f6 01       	movw	r30, r12
    889a:	86 8d       	ldd	r24, Z+30	; 0x1e
    889c:	97 8d       	ldd	r25, Z+31	; 0x1f
    889e:	a0 a1       	ldd	r26, Z+32	; 0x20
    88a0:	b1 a1       	ldd	r27, Z+33	; 0x21
    88a2:	02 97       	sbiw	r24, 0x02	; 2
    88a4:	a1 09       	sbc	r26, r1
    88a6:	b1 09       	sbc	r27, r1
    88a8:	e8 16       	cp	r14, r24
    88aa:	f9 06       	cpc	r15, r25
    88ac:	0a 07       	cpc	r16, r26
    88ae:	1b 07       	cpc	r17, r27
    88b0:	08 f0       	brcs	.+2      	; 0x88b4 <f_rename+0x156>
    88b2:	62 c0       	rjmp	.+196    	; 0x8978 <f_rename+0x21a>
	return clst * fs->csize + fs->database;
    88b4:	22 81       	ldd	r18, Z+2	; 0x02
    88b6:	30 e0       	ldi	r19, 0x00	; 0
    88b8:	40 e0       	ldi	r20, 0x00	; 0
    88ba:	50 e0       	ldi	r21, 0x00	; 0
    88bc:	c8 01       	movw	r24, r16
    88be:	b7 01       	movw	r22, r14
    88c0:	0e 94 25 57 	call	0xae4a	; 0xae4a <__mulsi3>
    88c4:	ab 01       	movw	r20, r22
    88c6:	bc 01       	movw	r22, r24
    88c8:	f6 01       	movw	r30, r12
    88ca:	82 a5       	ldd	r24, Z+42	; 0x2a
    88cc:	93 a5       	ldd	r25, Z+43	; 0x2b
    88ce:	a4 a5       	ldd	r26, Z+44	; 0x2c
    88d0:	b5 a5       	ldd	r27, Z+45	; 0x2d
    88d2:	48 0f       	add	r20, r24
    88d4:	59 1f       	adc	r21, r25
    88d6:	6a 1f       	adc	r22, r26
    88d8:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    88da:	41 15       	cp	r20, r1
    88dc:	51 05       	cpc	r21, r1
    88de:	61 05       	cpc	r22, r1
    88e0:	71 05       	cpc	r23, r1
    88e2:	09 f4       	brne	.+2      	; 0x88e6 <f_rename+0x188>
    88e4:	49 c0       	rjmp	.+146    	; 0x8978 <f_rename+0x21a>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    88e6:	c6 01       	movw	r24, r12
    88e8:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    88ec:	9c 01       	movw	r18, r24
					dir = dj_new.fs->win+32;
    88ee:	08 ad       	ldd	r16, Y+56	; 0x38
    88f0:	19 ad       	ldd	r17, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    88f2:	00 97       	sbiw	r24, 0x00	; 0
    88f4:	09 f0       	breq	.+2      	; 0x88f8 <f_rename+0x19a>
    88f6:	42 c0       	rjmp	.+132    	; 0x897c <f_rename+0x21e>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    88f8:	b8 01       	movw	r22, r16
    88fa:	6e 5a       	subi	r22, 0xAE	; 174
    88fc:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    88fe:	db 01       	movw	r26, r22
    8900:	11 96       	adiw	r26, 0x01	; 1
    8902:	8c 91       	ld	r24, X
    8904:	8e 32       	cpi	r24, 0x2E	; 46
    8906:	59 f5       	brne	.+86     	; 0x895e <f_rename+0x200>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    8908:	f8 01       	movw	r30, r16
    890a:	80 81       	ld	r24, Z
    890c:	83 30       	cpi	r24, 0x03	; 3
    890e:	a9 f4       	brne	.+42     	; 0x893a <f_rename+0x1dc>
    8910:	fe 01       	movw	r30, r28
    8912:	fe 96       	adiw	r30, 0x3e	; 62
    8914:	20 81       	ld	r18, Z
    8916:	31 81       	ldd	r19, Z+1	; 0x01
    8918:	42 81       	ldd	r20, Z+2	; 0x02
    891a:	53 81       	ldd	r21, Z+3	; 0x03
    891c:	f8 01       	movw	r30, r16
    891e:	86 a1       	ldd	r24, Z+38	; 0x26
    8920:	97 a1       	ldd	r25, Z+39	; 0x27
    8922:	a0 a5       	ldd	r26, Z+40	; 0x28
    8924:	b1 a5       	ldd	r27, Z+41	; 0x29
    8926:	28 17       	cp	r18, r24
    8928:	39 07       	cpc	r19, r25
    892a:	4a 07       	cpc	r20, r26
    892c:	5b 07       	cpc	r21, r27
    892e:	29 f4       	brne	.+10     	; 0x893a <f_rename+0x1dc>
    8930:	80 e0       	ldi	r24, 0x00	; 0
    8932:	90 e0       	ldi	r25, 0x00	; 0
    8934:	a0 e0       	ldi	r26, 0x00	; 0
    8936:	b0 e0       	ldi	r27, 0x00	; 0
    8938:	06 c0       	rjmp	.+12     	; 0x8946 <f_rename+0x1e8>
    893a:	fe 01       	movw	r30, r28
    893c:	fe 96       	adiw	r30, 0x3e	; 62
    893e:	80 81       	ld	r24, Z
    8940:	91 81       	ldd	r25, Z+1	; 0x01
    8942:	a2 81       	ldd	r26, Z+2	; 0x02
    8944:	b3 81       	ldd	r27, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    8946:	fb 01       	movw	r30, r22
    8948:	82 8f       	std	Z+26, r24	; 0x1a
    894a:	93 8f       	std	Z+27, r25	; 0x1b
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    894c:	cd 01       	movw	r24, r26
    894e:	aa 27       	eor	r26, r26
    8950:	bb 27       	eor	r27, r27
    8952:	84 8b       	std	Z+20, r24	; 0x14
    8954:	95 8b       	std	Z+21, r25	; 0x15
						dj_new.fs->wflag = 1;
    8956:	81 e0       	ldi	r24, 0x01	; 1
    8958:	d8 01       	movw	r26, r16
    895a:	14 96       	adiw	r26, 0x04	; 4
    895c:	8c 93       	st	X, r24
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    895e:	ce 01       	movw	r24, r28
    8960:	82 96       	adiw	r24, 0x22	; 34
    8962:	0e 94 90 42 	call	0x8520	; 0x8520 <dir_remove>
    8966:	9c 01       	movw	r18, r24
				if (res == FR_OK)
    8968:	00 97       	sbiw	r24, 0x00	; 0
    896a:	41 f4       	brne	.+16     	; 0x897c <f_rename+0x21e>
					res = sync(dj_old.fs);
    896c:	8a a1       	ldd	r24, Y+34	; 0x22
    896e:	9b a1       	ldd	r25, Y+35	; 0x23
    8970:	0e 94 b1 42 	call	0x8562	; 0x8562 <sync>
    8974:	9c 01       	movw	r18, r24
    8976:	02 c0       	rjmp	.+4      	; 0x897c <f_rename+0x21e>
    8978:	22 e0       	ldi	r18, 0x02	; 2
    897a:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    897c:	c9 01       	movw	r24, r18
    897e:	c1 5b       	subi	r28, 0xB1	; 177
    8980:	df 4f       	sbci	r29, 0xFF	; 255
    8982:	e8 e0       	ldi	r30, 0x08	; 8
    8984:	0c 94 ce 57 	jmp	0xaf9c	; 0xaf9c <__epilogue_restores__+0x14>

00008988 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    8988:	ae e2       	ldi	r26, 0x2E	; 46
    898a:	b0 e0       	ldi	r27, 0x00	; 0
    898c:	ea ec       	ldi	r30, 0xCA	; 202
    898e:	f4 e4       	ldi	r31, 0x44	; 68
    8990:	0c 94 a8 57 	jmp	0xaf50	; 0xaf50 <__prologue_saves__>
    8994:	8b a3       	std	Y+35, r24	; 0x23
    8996:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = auto_mount(&path, &dj.fs, 1);
    8998:	ad e0       	ldi	r26, 0x0D	; 13
    899a:	ea 2e       	mov	r14, r26
    899c:	f1 2c       	mov	r15, r1
    899e:	ec 0e       	add	r14, r28
    89a0:	fd 1e       	adc	r15, r29
    89a2:	ce 01       	movw	r24, r28
    89a4:	83 96       	adiw	r24, 0x23	; 35
    89a6:	b7 01       	movw	r22, r14
    89a8:	41 e0       	ldi	r20, 0x01	; 1
    89aa:	0e 94 50 36 	call	0x6ca0	; 0x6ca0 <auto_mount>
    89ae:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    89b0:	00 97       	sbiw	r24, 0x00	; 0
    89b2:	09 f0       	breq	.+2      	; 0x89b6 <f_mkdir+0x2e>
    89b4:	3a c1       	rjmp	.+628    	; 0x8c2a <f_mkdir+0x2a2>

	INITBUF(dj, sfn, lfn);
    89b6:	ce 01       	movw	r24, r28
    89b8:	01 96       	adiw	r24, 0x01	; 1
    89ba:	89 a3       	std	Y+33, r24	; 0x21
    89bc:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    89be:	6b a1       	ldd	r22, Y+35	; 0x23
    89c0:	7c a1       	ldd	r23, Y+36	; 0x24
    89c2:	c7 01       	movw	r24, r14
    89c4:	0e 94 12 40 	call	0x8024	; 0x8024 <follow_path>
    89c8:	8c 01       	movw	r16, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    89ca:	00 97       	sbiw	r24, 0x00	; 0
    89cc:	61 f0       	breq	.+24     	; 0x89e6 <f_mkdir+0x5e>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[11] & NS_DOT))
    89ce:	84 30       	cpi	r24, 0x04	; 4
    89d0:	91 05       	cpc	r25, r1
    89d2:	09 f0       	breq	.+2      	; 0x89d6 <f_mkdir+0x4e>
    89d4:	2a c1       	rjmp	.+596    	; 0x8c2a <f_mkdir+0x2a2>
    89d6:	e9 a1       	ldd	r30, Y+33	; 0x21
    89d8:	fa a1       	ldd	r31, Y+34	; 0x22
    89da:	83 85       	ldd	r24, Z+11	; 0x0b
    89dc:	85 ff       	sbrs	r24, 5
    89de:	06 c0       	rjmp	.+12     	; 0x89ec <f_mkdir+0x64>
    89e0:	06 e0       	ldi	r16, 0x06	; 6
    89e2:	10 e0       	ldi	r17, 0x00	; 0
    89e4:	22 c1       	rjmp	.+580    	; 0x8c2a <f_mkdir+0x2a2>
    89e6:	08 e0       	ldi	r16, 0x08	; 8
    89e8:	10 e0       	ldi	r17, 0x00	; 0
    89ea:	1f c1       	rjmp	.+574    	; 0x8c2a <f_mkdir+0x2a2>
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    89ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    89ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    89f0:	40 e0       	ldi	r20, 0x00	; 0
    89f2:	50 e0       	ldi	r21, 0x00	; 0
    89f4:	60 e0       	ldi	r22, 0x00	; 0
    89f6:	70 e0       	ldi	r23, 0x00	; 0
    89f8:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <create_chain>
    89fc:	3b 01       	movw	r6, r22
    89fe:	4c 01       	movw	r8, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    8a00:	61 15       	cp	r22, r1
    8a02:	71 05       	cpc	r23, r1
    8a04:	81 05       	cpc	r24, r1
    8a06:	91 05       	cpc	r25, r1
    8a08:	19 f4       	brne	.+6      	; 0x8a10 <f_mkdir+0x88>
    8a0a:	07 e0       	ldi	r16, 0x07	; 7
    8a0c:	10 e0       	ldi	r17, 0x00	; 0
    8a0e:	0d c1       	rjmp	.+538    	; 0x8c2a <f_mkdir+0x2a2>
	if (dclst == 1) res = FR_INT_ERR;
    8a10:	61 30       	cpi	r22, 0x01	; 1
    8a12:	71 05       	cpc	r23, r1
    8a14:	81 05       	cpc	r24, r1
    8a16:	91 05       	cpc	r25, r1
    8a18:	19 f4       	brne	.+6      	; 0x8a20 <f_mkdir+0x98>
    8a1a:	02 e0       	ldi	r16, 0x02	; 2
    8a1c:	10 e0       	ldi	r17, 0x00	; 0
    8a1e:	05 c1       	rjmp	.+522    	; 0x8c2a <f_mkdir+0x2a2>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    8a20:	6f 3f       	cpi	r22, 0xFF	; 255
    8a22:	3f ef       	ldi	r19, 0xFF	; 255
    8a24:	73 07       	cpc	r23, r19
    8a26:	3f ef       	ldi	r19, 0xFF	; 255
    8a28:	83 07       	cpc	r24, r19
    8a2a:	3f ef       	ldi	r19, 0xFF	; 255
    8a2c:	93 07       	cpc	r25, r19
    8a2e:	09 f4       	brne	.+2      	; 0x8a32 <f_mkdir+0xaa>
    8a30:	01 c1       	rjmp	.+514    	; 0x8c34 <f_mkdir+0x2ac>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    8a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    8a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    8a36:	40 e0       	ldi	r20, 0x00	; 0
    8a38:	50 e0       	ldi	r21, 0x00	; 0
    8a3a:	60 e0       	ldi	r22, 0x00	; 0
    8a3c:	70 e0       	ldi	r23, 0x00	; 0
    8a3e:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    8a42:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    8a44:	00 97       	sbiw	r24, 0x00	; 0
    8a46:	09 f0       	breq	.+2      	; 0x8a4a <f_mkdir+0xc2>
    8a48:	f0 c0       	rjmp	.+480    	; 0x8c2a <f_mkdir+0x2a2>
	dsect = clust2sect(dj.fs, dclst);
    8a4a:	cd 84       	ldd	r12, Y+13	; 0x0d
    8a4c:	de 84       	ldd	r13, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    8a4e:	fe ef       	ldi	r31, 0xFE	; 254
    8a50:	ef 2e       	mov	r14, r31
    8a52:	ff ef       	ldi	r31, 0xFF	; 255
    8a54:	ff 2e       	mov	r15, r31
    8a56:	ff ef       	ldi	r31, 0xFF	; 255
    8a58:	0f 2f       	mov	r16, r31
    8a5a:	ff ef       	ldi	r31, 0xFF	; 255
    8a5c:	1f 2f       	mov	r17, r31
    8a5e:	e6 0c       	add	r14, r6
    8a60:	f7 1c       	adc	r15, r7
    8a62:	08 1d       	adc	r16, r8
    8a64:	19 1d       	adc	r17, r9
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    8a66:	f6 01       	movw	r30, r12
    8a68:	86 8d       	ldd	r24, Z+30	; 0x1e
    8a6a:	97 8d       	ldd	r25, Z+31	; 0x1f
    8a6c:	a0 a1       	ldd	r26, Z+32	; 0x20
    8a6e:	b1 a1       	ldd	r27, Z+33	; 0x21
    8a70:	02 97       	sbiw	r24, 0x02	; 2
    8a72:	a1 09       	sbc	r26, r1
    8a74:	b1 09       	sbc	r27, r1
    8a76:	e8 16       	cp	r14, r24
    8a78:	f9 06       	cpc	r15, r25
    8a7a:	0a 07       	cpc	r16, r26
    8a7c:	1b 07       	cpc	r17, r27
    8a7e:	20 f0       	brcs	.+8      	; 0x8a88 <f_mkdir+0x100>
    8a80:	22 24       	eor	r2, r2
    8a82:	33 24       	eor	r3, r3
    8a84:	21 01       	movw	r4, r2
    8a86:	15 c0       	rjmp	.+42     	; 0x8ab2 <f_mkdir+0x12a>
	return clst * fs->csize + fs->database;
    8a88:	d6 01       	movw	r26, r12
    8a8a:	12 96       	adiw	r26, 0x02	; 2
    8a8c:	2c 91       	ld	r18, X
    8a8e:	30 e0       	ldi	r19, 0x00	; 0
    8a90:	40 e0       	ldi	r20, 0x00	; 0
    8a92:	50 e0       	ldi	r21, 0x00	; 0
    8a94:	c8 01       	movw	r24, r16
    8a96:	b7 01       	movw	r22, r14
    8a98:	0e 94 25 57 	call	0xae4a	; 0xae4a <__mulsi3>
    8a9c:	1b 01       	movw	r2, r22
    8a9e:	2c 01       	movw	r4, r24
    8aa0:	f6 01       	movw	r30, r12
    8aa2:	82 a5       	ldd	r24, Z+42	; 0x2a
    8aa4:	93 a5       	ldd	r25, Z+43	; 0x2b
    8aa6:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8aa8:	b5 a5       	ldd	r27, Z+45	; 0x2d
    8aaa:	28 0e       	add	r2, r24
    8aac:	39 1e       	adc	r3, r25
    8aae:	4a 1e       	adc	r4, r26
    8ab0:	5b 1e       	adc	r5, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    8ab2:	e2 e3       	ldi	r30, 0x32	; 50
    8ab4:	ae 2e       	mov	r10, r30
    8ab6:	b1 2c       	mov	r11, r1
    8ab8:	ac 0c       	add	r10, r12
    8aba:	bd 1c       	adc	r11, r13
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    8abc:	ad a2       	std	Y+37, r10	; 0x25
    8abe:	be a2       	std	Y+38, r11	; 0x26
	while (cnt--) *d++ = (char)val;
    8ac0:	c6 01       	movw	r24, r12
    8ac2:	8e 5c       	subi	r24, 0xCE	; 206
    8ac4:	9d 4f       	sbci	r25, 0xFD	; 253
    8ac6:	05 c0       	rjmp	.+10     	; 0x8ad2 <f_mkdir+0x14a>
    8ac8:	ad a1       	ldd	r26, Y+37	; 0x25
    8aca:	be a1       	ldd	r27, Y+38	; 0x26
    8acc:	1d 92       	st	X+, r1
    8ace:	ad a3       	std	Y+37, r26	; 0x25
    8ad0:	be a3       	std	Y+38, r27	; 0x26
    8ad2:	ed a1       	ldd	r30, Y+37	; 0x25
    8ad4:	fe a1       	ldd	r31, Y+38	; 0x26
    8ad6:	e8 17       	cp	r30, r24
    8ad8:	f9 07       	cpc	r31, r25
    8ada:	b1 f7       	brne	.-20     	; 0x8ac8 <f_mkdir+0x140>
    8adc:	f5 01       	movw	r30, r10
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    8ade:	c5 01       	movw	r24, r10
    8ae0:	0b 96       	adiw	r24, 0x0b	; 11
    8ae2:	20 e2       	ldi	r18, 0x20	; 32
    8ae4:	01 c0       	rjmp	.+2      	; 0x8ae8 <f_mkdir+0x160>
    8ae6:	21 93       	st	Z+, r18
    8ae8:	e8 17       	cp	r30, r24
    8aea:	f9 07       	cpc	r31, r25
    8aec:	e1 f7       	brne	.-8      	; 0x8ae6 <f_mkdir+0x15e>
    8aee:	8e e2       	ldi	r24, 0x2E	; 46
    8af0:	d6 01       	movw	r26, r12
    8af2:	d2 96       	adiw	r26, 0x32	; 50
    8af4:	8c 93       	st	X, r24
    8af6:	d2 97       	sbiw	r26, 0x32	; 50
	dir[DIR_Attr] = AM_DIR;
    8af8:	80 e1       	ldi	r24, 0x10	; 16
    8afa:	dd 96       	adiw	r26, 0x3d	; 61
    8afc:	8c 93       	st	X, r24
	tim = get_fattime();
    8afe:	0e 94 7f 54 	call	0xa8fe	; 0xa8fe <get_fattime>
    8b02:	6f a3       	std	Y+39, r22	; 0x27
    8b04:	78 a7       	std	Y+40, r23	; 0x28
    8b06:	89 a7       	std	Y+41, r24	; 0x29
    8b08:	9a a7       	std	Y+42, r25	; 0x2a
	ST_DWORD(dir+DIR_WrtTime, tim);
    8b0a:	f5 01       	movw	r30, r10
    8b0c:	66 8b       	std	Z+22, r22	; 0x16
    8b0e:	77 8b       	std	Z+23, r23	; 0x17
    8b10:	80 8f       	std	Z+24, r24	; 0x18
    8b12:	91 8f       	std	Z+25, r25	; 0x19
	ST_WORD(dir+DIR_FstClusLO, dclst);
    8b14:	6d a6       	std	Y+45, r6	; 0x2d
    8b16:	7e a6       	std	Y+46, r7	; 0x2e
    8b18:	62 8e       	std	Z+26, r6	; 0x1a
    8b1a:	73 8e       	std	Z+27, r7	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    8b1c:	c4 01       	movw	r24, r8
    8b1e:	aa 27       	eor	r26, r26
    8b20:	bb 27       	eor	r27, r27
    8b22:	8b a7       	std	Y+43, r24	; 0x2b
    8b24:	9c a7       	std	Y+44, r25	; 0x2c
    8b26:	84 8b       	std	Z+20, r24	; 0x14
    8b28:	95 8b       	std	Z+21, r25	; 0x15
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    8b2a:	95 01       	movw	r18, r10
    8b2c:	20 5e       	subi	r18, 0xE0	; 224
    8b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    8b30:	03 c0       	rjmp	.+6      	; 0x8b38 <f_mkdir+0x1b0>
    8b32:	80 81       	ld	r24, Z
    8b34:	80 a3       	std	Z+32, r24	; 0x20
    8b36:	31 96       	adiw	r30, 0x01	; 1
    8b38:	e2 17       	cp	r30, r18
    8b3a:	f3 07       	cpc	r31, r19
    8b3c:	d1 f7       	brne	.-12     	; 0x8b32 <f_mkdir+0x1aa>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    8b3e:	23 e5       	ldi	r18, 0x53	; 83
    8b40:	30 e0       	ldi	r19, 0x00	; 0
    8b42:	c2 0e       	add	r12, r18
    8b44:	d3 1e       	adc	r13, r19
    8b46:	8e e2       	ldi	r24, 0x2E	; 46
    8b48:	d6 01       	movw	r26, r12
    8b4a:	8c 93       	st	X, r24
	pclst = dj.sclust;
    8b4c:	2b 89       	ldd	r18, Y+19	; 0x13
    8b4e:	3c 89       	ldd	r19, Y+20	; 0x14
    8b50:	4d 89       	ldd	r20, Y+21	; 0x15
    8b52:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    8b54:	ed 85       	ldd	r30, Y+13	; 0x0d
    8b56:	fe 85       	ldd	r31, Y+14	; 0x0e
    8b58:	80 81       	ld	r24, Z
    8b5a:	83 30       	cpi	r24, 0x03	; 3
    8b5c:	69 f4       	brne	.+26     	; 0x8b78 <f_mkdir+0x1f0>
    8b5e:	86 a1       	ldd	r24, Z+38	; 0x26
    8b60:	97 a1       	ldd	r25, Z+39	; 0x27
    8b62:	a0 a5       	ldd	r26, Z+40	; 0x28
    8b64:	b1 a5       	ldd	r27, Z+41	; 0x29
    8b66:	28 17       	cp	r18, r24
    8b68:	39 07       	cpc	r19, r25
    8b6a:	4a 07       	cpc	r20, r26
    8b6c:	5b 07       	cpc	r21, r27
    8b6e:	21 f4       	brne	.+8      	; 0x8b78 <f_mkdir+0x1f0>
    8b70:	20 e0       	ldi	r18, 0x00	; 0
    8b72:	30 e0       	ldi	r19, 0x00	; 0
    8b74:	40 e0       	ldi	r20, 0x00	; 0
    8b76:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    8b78:	f5 01       	movw	r30, r10
    8b7a:	22 af       	std	Z+58, r18	; 0x3a
    8b7c:	33 af       	std	Z+59, r19	; 0x3b
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    8b7e:	ca 01       	movw	r24, r20
    8b80:	aa 27       	eor	r26, r26
    8b82:	bb 27       	eor	r27, r27
    8b84:	84 ab       	std	Z+52, r24	; 0x34
    8b86:	95 ab       	std	Z+53, r25	; 0x35
    8b88:	72 01       	movw	r14, r4
    8b8a:	61 01       	movw	r12, r2
    8b8c:	1d c0       	rjmp	.+58     	; 0x8bc8 <f_mkdir+0x240>
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    8b8e:	c6 a6       	std	Z+46, r12	; 0x2e
    8b90:	d7 a6       	std	Z+47, r13	; 0x2f
    8b92:	e0 aa       	std	Z+48, r14	; 0x30
    8b94:	f1 aa       	std	Z+49, r15	; 0x31
		dj.fs->wflag = 1;
    8b96:	21 e0       	ldi	r18, 0x01	; 1
    8b98:	24 83       	std	Z+4, r18	; 0x04
		res = move_window(dj.fs, 0);
    8b9a:	cf 01       	movw	r24, r30
    8b9c:	40 e0       	ldi	r20, 0x00	; 0
    8b9e:	50 e0       	ldi	r21, 0x00	; 0
    8ba0:	60 e0       	ldi	r22, 0x00	; 0
    8ba2:	70 e0       	ldi	r23, 0x00	; 0
    8ba4:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    8ba8:	8c 01       	movw	r16, r24
		if (res) LEAVE_FF(dj.fs, res);
    8baa:	00 97       	sbiw	r24, 0x00	; 0
    8bac:	f1 f5       	brne	.+124    	; 0x8c2a <f_mkdir+0x2a2>
    8bae:	f5 01       	movw	r30, r10
    8bb0:	01 c0       	rjmp	.+2      	; 0x8bb4 <f_mkdir+0x22c>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    8bb2:	11 92       	st	Z+, r1
    8bb4:	8d a1       	ldd	r24, Y+37	; 0x25
    8bb6:	9e a1       	ldd	r25, Y+38	; 0x26
    8bb8:	e8 17       	cp	r30, r24
    8bba:	f9 07       	cpc	r31, r25
    8bbc:	d1 f7       	brne	.-12     	; 0x8bb2 <f_mkdir+0x22a>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    8bbe:	08 94       	sec
    8bc0:	c1 1c       	adc	r12, r1
    8bc2:	d1 1c       	adc	r13, r1
    8bc4:	e1 1c       	adc	r14, r1
    8bc6:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    8bc8:	ed 85       	ldd	r30, Y+13	; 0x0d
    8bca:	fe 85       	ldd	r31, Y+14	; 0x0e
    8bcc:	9c 2d       	mov	r25, r12
    8bce:	92 19       	sub	r25, r2
    8bd0:	82 81       	ldd	r24, Z+2	; 0x02
    8bd2:	98 17       	cp	r25, r24
    8bd4:	e0 f2       	brcs	.-72     	; 0x8b8e <f_mkdir+0x206>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    8bd6:	ce 01       	movw	r24, r28
    8bd8:	0d 96       	adiw	r24, 0x0d	; 13
    8bda:	0e 94 36 42 	call	0x846c	; 0x846c <dir_register>
    8bde:	8c 01       	movw	r16, r24
	if (res != FR_OK) {
    8be0:	00 97       	sbiw	r24, 0x00	; 0
    8be2:	39 f0       	breq	.+14     	; 0x8bf2 <f_mkdir+0x26a>
		remove_chain(dj.fs, dclst);
    8be4:	8d 85       	ldd	r24, Y+13	; 0x0d
    8be6:	9e 85       	ldd	r25, Y+14	; 0x0e
    8be8:	b4 01       	movw	r22, r8
    8bea:	a3 01       	movw	r20, r6
    8bec:	0e 94 a6 3d 	call	0x7b4c	; 0x7b4c <remove_chain>
    8bf0:	1c c0       	rjmp	.+56     	; 0x8c2a <f_mkdir+0x2a2>
	} else {
		dir = dj.dir;
    8bf2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8bf4:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    8bf6:	80 e1       	ldi	r24, 0x10	; 16
    8bf8:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    8bfa:	8f a1       	ldd	r24, Y+39	; 0x27
    8bfc:	98 a5       	ldd	r25, Y+40	; 0x28
    8bfe:	a9 a5       	ldd	r26, Y+41	; 0x29
    8c00:	ba a5       	ldd	r27, Y+42	; 0x2a
    8c02:	86 8b       	std	Z+22, r24	; 0x16
    8c04:	97 8b       	std	Z+23, r25	; 0x17
    8c06:	a0 8f       	std	Z+24, r26	; 0x18
    8c08:	b1 8f       	std	Z+25, r27	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    8c0a:	ad a5       	ldd	r26, Y+45	; 0x2d
    8c0c:	be a5       	ldd	r27, Y+46	; 0x2e
    8c0e:	a2 8f       	std	Z+26, r26	; 0x1a
    8c10:	b3 8f       	std	Z+27, r27	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    8c12:	2b a5       	ldd	r18, Y+43	; 0x2b
    8c14:	3c a5       	ldd	r19, Y+44	; 0x2c
    8c16:	24 8b       	std	Z+20, r18	; 0x14
    8c18:	35 8b       	std	Z+21, r19	; 0x15
		dj.fs->wflag = 1;
    8c1a:	ed 85       	ldd	r30, Y+13	; 0x0d
    8c1c:	fe 85       	ldd	r31, Y+14	; 0x0e
    8c1e:	81 e0       	ldi	r24, 0x01	; 1
    8c20:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    8c22:	cf 01       	movw	r24, r30
    8c24:	0e 94 b1 42 	call	0x8562	; 0x8562 <sync>
    8c28:	8c 01       	movw	r16, r24
	}

	LEAVE_FF(dj.fs, res);
}
    8c2a:	c8 01       	movw	r24, r16
    8c2c:	ae 96       	adiw	r28, 0x2e	; 46
    8c2e:	e2 e1       	ldi	r30, 0x12	; 18
    8c30:	0c 94 c4 57 	jmp	0xaf88	; 0xaf88 <__epilogue_restores__>
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    8c34:	01 e0       	ldi	r16, 0x01	; 1
    8c36:	10 e0       	ldi	r17, 0x00	; 0
    8c38:	f8 cf       	rjmp	.-16     	; 0x8c2a <f_mkdir+0x2a2>

00008c3a <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    8c3a:	cf 93       	push	r28
    8c3c:	df 93       	push	r29
    8c3e:	ec 01       	movw	r28, r24
    8c40:	24 e0       	ldi	r18, 0x04	; 4
    8c42:	30 e0       	ldi	r19, 0x00	; 0
    8c44:	19 c0       	rjmp	.+50     	; 0x8c78 <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    8c46:	88 81       	ld	r24, Y
    8c48:	99 81       	ldd	r25, Y+1	; 0x01
    8c4a:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    8c4e:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    8c50:	00 97       	sbiw	r24, 0x00	; 0
    8c52:	f1 f4       	brne	.+60     	; 0x8c90 <dir_read+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    8c54:	ea 89       	ldd	r30, Y+18	; 0x12
    8c56:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    8c58:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    8c5a:	88 23       	and	r24, r24
    8c5c:	09 f1       	breq	.+66     	; 0x8ca0 <dir_read+0x66>
					dj->lfn_idx = 0xFFFF;		/* No LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    8c5e:	85 3e       	cpi	r24, 0xE5	; 229
    8c60:	19 f0       	breq	.+6      	; 0x8c68 <dir_read+0x2e>
    8c62:	83 85       	ldd	r24, Z+11	; 0x0b
    8c64:	83 ff       	sbrs	r24, 3
    8c66:	18 c0       	rjmp	.+48     	; 0x8c98 <dir_read+0x5e>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    8c68:	ce 01       	movw	r24, r28
    8c6a:	60 e0       	ldi	r22, 0x00	; 0
    8c6c:	70 e0       	ldi	r23, 0x00	; 0
    8c6e:	0e 94 a6 3e 	call	0x7d4c	; 0x7d4c <dir_next>
    8c72:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    8c74:	00 97       	sbiw	r24, 0x00	; 0
    8c76:	61 f4       	brne	.+24     	; 0x8c90 <dir_read+0x56>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    8c78:	4e 85       	ldd	r20, Y+14	; 0x0e
    8c7a:	5f 85       	ldd	r21, Y+15	; 0x0f
    8c7c:	68 89       	ldd	r22, Y+16	; 0x10
    8c7e:	79 89       	ldd	r23, Y+17	; 0x11
    8c80:	41 15       	cp	r20, r1
    8c82:	51 05       	cpc	r21, r1
    8c84:	61 05       	cpc	r22, r1
    8c86:	71 05       	cpc	r23, r1
    8c88:	f1 f6       	brne	.-68     	; 0x8c46 <dir_read+0xc>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    8c8a:	21 15       	cp	r18, r1
    8c8c:	31 05       	cpc	r19, r1
    8c8e:	21 f0       	breq	.+8      	; 0x8c98 <dir_read+0x5e>
    8c90:	1e 86       	std	Y+14, r1	; 0x0e
    8c92:	1f 86       	std	Y+15, r1	; 0x0f
    8c94:	18 8a       	std	Y+16, r1	; 0x10
    8c96:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    8c98:	c9 01       	movw	r24, r18
    8c9a:	df 91       	pop	r29
    8c9c:	cf 91       	pop	r28
    8c9e:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    8ca0:	24 e0       	ldi	r18, 0x04	; 4
    8ca2:	30 e0       	ldi	r19, 0x00	; 0
    8ca4:	f5 cf       	rjmp	.-22     	; 0x8c90 <dir_read+0x56>

00008ca6 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    8ca6:	aa e3       	ldi	r26, 0x3A	; 58
    8ca8:	b0 e0       	ldi	r27, 0x00	; 0
    8caa:	e9 e5       	ldi	r30, 0x59	; 89
    8cac:	f6 e4       	ldi	r31, 0x46	; 70
    8cae:	0c 94 b2 57 	jmp	0xaf64	; 0xaf64 <__prologue_saves__+0x14>
    8cb2:	89 af       	std	Y+57, r24	; 0x39
    8cb4:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = auto_mount(&path, &dj.fs, 1);
    8cb6:	8d e0       	ldi	r24, 0x0D	; 13
    8cb8:	c8 2e       	mov	r12, r24
    8cba:	d1 2c       	mov	r13, r1
    8cbc:	cc 0e       	add	r12, r28
    8cbe:	dd 1e       	adc	r13, r29
    8cc0:	ce 01       	movw	r24, r28
    8cc2:	c9 96       	adiw	r24, 0x39	; 57
    8cc4:	b6 01       	movw	r22, r12
    8cc6:	41 e0       	ldi	r20, 0x01	; 1
    8cc8:	0e 94 50 36 	call	0x6ca0	; 0x6ca0 <auto_mount>
    8ccc:	9c 01       	movw	r18, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    8cce:	00 97       	sbiw	r24, 0x00	; 0
    8cd0:	09 f0       	breq	.+2      	; 0x8cd4 <f_unlink+0x2e>
    8cd2:	79 c0       	rjmp	.+242    	; 0x8dc6 <f_unlink+0x120>

	INITBUF(dj, sfn, lfn);
    8cd4:	ce 01       	movw	r24, r28
    8cd6:	01 96       	adiw	r24, 0x01	; 1
    8cd8:	89 a3       	std	Y+33, r24	; 0x21
    8cda:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    8cdc:	69 ad       	ldd	r22, Y+57	; 0x39
    8cde:	7a ad       	ldd	r23, Y+58	; 0x3a
    8ce0:	c6 01       	movw	r24, r12
    8ce2:	0e 94 12 40 	call	0x8024	; 0x8024 <follow_path>
    8ce6:	9c 01       	movw	r18, r24
	if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    8ce8:	00 97       	sbiw	r24, 0x00	; 0
    8cea:	09 f0       	breq	.+2      	; 0x8cee <f_unlink+0x48>
    8cec:	6c c0       	rjmp	.+216    	; 0x8dc6 <f_unlink+0x120>
    8cee:	e9 a1       	ldd	r30, Y+33	; 0x21
    8cf0:	fa a1       	ldd	r31, Y+34	; 0x22
    8cf2:	83 85       	ldd	r24, Z+11	; 0x0b
    8cf4:	85 fd       	sbrc	r24, 5
    8cf6:	62 c0       	rjmp	.+196    	; 0x8dbc <f_unlink+0x116>
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */

	dir = dj.dir;
    8cf8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8cfa:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    8cfc:	30 97       	sbiw	r30, 0x00	; 0
    8cfe:	09 f4       	brne	.+2      	; 0x8d02 <f_unlink+0x5c>
    8d00:	5d c0       	rjmp	.+186    	; 0x8dbc <f_unlink+0x116>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    8d02:	83 85       	ldd	r24, Z+11	; 0x0b
    8d04:	28 2f       	mov	r18, r24
    8d06:	80 fd       	sbrc	r24, 0
    8d08:	5c c0       	rjmp	.+184    	; 0x8dc2 <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    8d0a:	84 89       	ldd	r24, Z+20	; 0x14
    8d0c:	95 89       	ldd	r25, Z+21	; 0x15
    8d0e:	a0 e0       	ldi	r26, 0x00	; 0
    8d10:	b0 e0       	ldi	r27, 0x00	; 0
    8d12:	8c 01       	movw	r16, r24
    8d14:	ff 24       	eor	r15, r15
    8d16:	ee 24       	eor	r14, r14
    8d18:	82 8d       	ldd	r24, Z+26	; 0x1a
    8d1a:	93 8d       	ldd	r25, Z+27	; 0x1b
    8d1c:	a0 e0       	ldi	r26, 0x00	; 0
    8d1e:	b0 e0       	ldi	r27, 0x00	; 0
    8d20:	e8 2a       	or	r14, r24
    8d22:	f9 2a       	or	r15, r25
    8d24:	0a 2b       	or	r16, r26
    8d26:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    8d28:	24 ff       	sbrs	r18, 4
    8d2a:	2d c0       	rjmp	.+90     	; 0x8d86 <f_unlink+0xe0>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    8d2c:	82 e0       	ldi	r24, 0x02	; 2
    8d2e:	e8 16       	cp	r14, r24
    8d30:	f1 04       	cpc	r15, r1
    8d32:	01 05       	cpc	r16, r1
    8d34:	11 05       	cpc	r17, r1
    8d36:	18 f4       	brcc	.+6      	; 0x8d3e <f_unlink+0x98>
    8d38:	22 e0       	ldi	r18, 0x02	; 2
    8d3a:	30 e0       	ldi	r19, 0x00	; 0
    8d3c:	44 c0       	rjmp	.+136    	; 0x8dc6 <f_unlink+0x120>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    8d3e:	de 01       	movw	r26, r28
    8d40:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    8d42:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    8d44:	9d 01       	movw	r18, r26
    8d46:	02 c0       	rjmp	.+4      	; 0x8d4c <f_unlink+0xa6>
    8d48:	81 91       	ld	r24, Z+
    8d4a:	8d 93       	st	X+, r24
    8d4c:	e2 17       	cp	r30, r18
    8d4e:	f3 07       	cpc	r31, r19
    8d50:	d9 f7       	brne	.-10     	; 0x8d48 <f_unlink+0xa2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    8d52:	e9 a6       	std	Y+41, r14	; 0x29
    8d54:	fa a6       	std	Y+42, r15	; 0x2a
    8d56:	0b a7       	std	Y+43, r16	; 0x2b
    8d58:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    8d5a:	b3 e2       	ldi	r27, 0x23	; 35
    8d5c:	cb 2e       	mov	r12, r27
    8d5e:	d1 2c       	mov	r13, r1
    8d60:	cc 0e       	add	r12, r28
    8d62:	dd 1e       	adc	r13, r29
    8d64:	c6 01       	movw	r24, r12
    8d66:	62 e0       	ldi	r22, 0x02	; 2
    8d68:	70 e0       	ldi	r23, 0x00	; 0
    8d6a:	0e 94 30 39 	call	0x7260	; 0x7260 <dir_seek>
    8d6e:	9c 01       	movw	r18, r24
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    8d70:	00 97       	sbiw	r24, 0x00	; 0
    8d72:	49 f5       	brne	.+82     	; 0x8dc6 <f_unlink+0x120>
		res = dir_read(&sdj);
    8d74:	c6 01       	movw	r24, r12
    8d76:	0e 94 1d 46 	call	0x8c3a	; 0x8c3a <dir_read>
    8d7a:	9c 01       	movw	r18, r24
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    8d7c:	00 97       	sbiw	r24, 0x00	; 0
    8d7e:	09 f1       	breq	.+66     	; 0x8dc2 <f_unlink+0x11c>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    8d80:	84 30       	cpi	r24, 0x04	; 4
    8d82:	91 05       	cpc	r25, r1
    8d84:	01 f5       	brne	.+64     	; 0x8dc6 <f_unlink+0x120>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    8d86:	ce 01       	movw	r24, r28
    8d88:	0d 96       	adiw	r24, 0x0d	; 13
    8d8a:	0e 94 90 42 	call	0x8520	; 0x8520 <dir_remove>
    8d8e:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8d90:	00 97       	sbiw	r24, 0x00	; 0
    8d92:	c9 f4       	brne	.+50     	; 0x8dc6 <f_unlink+0x120>
		if (dclst)
    8d94:	e1 14       	cp	r14, r1
    8d96:	f1 04       	cpc	r15, r1
    8d98:	01 05       	cpc	r16, r1
    8d9a:	11 05       	cpc	r17, r1
    8d9c:	49 f0       	breq	.+18     	; 0x8db0 <f_unlink+0x10a>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    8d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    8da2:	b8 01       	movw	r22, r16
    8da4:	a7 01       	movw	r20, r14
    8da6:	0e 94 a6 3d 	call	0x7b4c	; 0x7b4c <remove_chain>
    8daa:	9c 01       	movw	r18, r24
		if (res == FR_OK) res = sync(dj.fs);
    8dac:	00 97       	sbiw	r24, 0x00	; 0
    8dae:	59 f4       	brne	.+22     	; 0x8dc6 <f_unlink+0x120>
    8db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    8db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    8db4:	0e 94 b1 42 	call	0x8562	; 0x8562 <sync>
    8db8:	9c 01       	movw	r18, r24
    8dba:	05 c0       	rjmp	.+10     	; 0x8dc6 <f_unlink+0x120>
    8dbc:	26 e0       	ldi	r18, 0x06	; 6
    8dbe:	30 e0       	ldi	r19, 0x00	; 0
    8dc0:	02 c0       	rjmp	.+4      	; 0x8dc6 <f_unlink+0x120>
    8dc2:	27 e0       	ldi	r18, 0x07	; 7
    8dc4:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    8dc6:	c9 01       	movw	r24, r18
    8dc8:	ea 96       	adiw	r28, 0x3a	; 58
    8dca:	e8 e0       	ldi	r30, 0x08	; 8
    8dcc:	0c 94 ce 57 	jmp	0xaf9c	; 0xaf9c <__epilogue_restores__+0x14>

00008dd0 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    8dd0:	ac e0       	ldi	r26, 0x0C	; 12
    8dd2:	b0 e0       	ldi	r27, 0x00	; 0
    8dd4:	ee ee       	ldi	r30, 0xEE	; 238
    8dd6:	f6 e4       	ldi	r31, 0x46	; 70
    8dd8:	0c 94 b4 57 	jmp	0xaf68	; 0xaf68 <__prologue_saves__+0x18>
    8ddc:	8c 01       	movw	r16, r24
    8dde:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    8de0:	fc 01       	movw	r30, r24
    8de2:	62 81       	ldd	r22, Z+2	; 0x02
    8de4:	73 81       	ldd	r23, Z+3	; 0x03
    8de6:	80 81       	ld	r24, Z
    8de8:	91 81       	ldd	r25, Z+1	; 0x01
    8dea:	0e 94 e9 35 	call	0x6bd2	; 0x6bd2 <validate>
	if (res == FR_OK) {
    8dee:	00 97       	sbiw	r24, 0x00	; 0
    8df0:	69 f4       	brne	.+26     	; 0x8e0c <f_readdir+0x3c>
		INITBUF((*dj), sfn, lfn);
    8df2:	ce 01       	movw	r24, r28
    8df4:	01 96       	adiw	r24, 0x01	; 1
    8df6:	f8 01       	movw	r30, r16
    8df8:	84 8b       	std	Z+20, r24	; 0x14
    8dfa:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    8dfc:	e1 14       	cp	r14, r1
    8dfe:	f1 04       	cpc	r15, r1
    8e00:	39 f4       	brne	.+14     	; 0x8e10 <f_readdir+0x40>
			res = dir_seek(dj, 0);
    8e02:	c8 01       	movw	r24, r16
    8e04:	60 e0       	ldi	r22, 0x00	; 0
    8e06:	70 e0       	ldi	r23, 0x00	; 0
    8e08:	0e 94 30 39 	call	0x7260	; 0x7260 <dir_seek>
    8e0c:	9c 01       	movw	r18, r24
    8e0e:	23 c0       	rjmp	.+70     	; 0x8e56 <f_readdir+0x86>
		} else {
			res = dir_read(dj);
    8e10:	c8 01       	movw	r24, r16
    8e12:	0e 94 1d 46 	call	0x8c3a	; 0x8c3a <dir_read>
    8e16:	9c 01       	movw	r18, r24
			if (res == FR_NO_FILE) {
    8e18:	84 30       	cpi	r24, 0x04	; 4
    8e1a:	91 05       	cpc	r25, r1
    8e1c:	31 f4       	brne	.+12     	; 0x8e2a <f_readdir+0x5a>
				dj->sect = 0;
    8e1e:	f8 01       	movw	r30, r16
    8e20:	16 86       	std	Z+14, r1	; 0x0e
    8e22:	17 86       	std	Z+15, r1	; 0x0f
    8e24:	10 8a       	std	Z+16, r1	; 0x10
    8e26:	11 8a       	std	Z+17, r1	; 0x11
    8e28:	02 c0       	rjmp	.+4      	; 0x8e2e <f_readdir+0x5e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    8e2a:	00 97       	sbiw	r24, 0x00	; 0
    8e2c:	a1 f4       	brne	.+40     	; 0x8e56 <f_readdir+0x86>
				get_fileinfo(dj, fno);		/* Get the object information */
    8e2e:	c8 01       	movw	r24, r16
    8e30:	b7 01       	movw	r22, r14
    8e32:	0e 94 9f 30 	call	0x613e	; 0x613e <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    8e36:	c8 01       	movw	r24, r16
    8e38:	60 e0       	ldi	r22, 0x00	; 0
    8e3a:	70 e0       	ldi	r23, 0x00	; 0
    8e3c:	0e 94 a6 3e 	call	0x7d4c	; 0x7d4c <dir_next>
    8e40:	9c 01       	movw	r18, r24
				if (res == FR_NO_FILE) {
    8e42:	84 30       	cpi	r24, 0x04	; 4
    8e44:	91 05       	cpc	r25, r1
    8e46:	39 f4       	brne	.+14     	; 0x8e56 <f_readdir+0x86>
					dj->sect = 0;
    8e48:	f8 01       	movw	r30, r16
    8e4a:	16 86       	std	Z+14, r1	; 0x0e
    8e4c:	17 86       	std	Z+15, r1	; 0x0f
    8e4e:	10 8a       	std	Z+16, r1	; 0x10
    8e50:	11 8a       	std	Z+17, r1	; 0x11
    8e52:	20 e0       	ldi	r18, 0x00	; 0
    8e54:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    8e56:	c9 01       	movw	r24, r18
    8e58:	2c 96       	adiw	r28, 0x0c	; 12
    8e5a:	e6 e0       	ldi	r30, 0x06	; 6
    8e5c:	0c 94 d0 57 	jmp	0xafa0	; 0xafa0 <__epilogue_restores__+0x18>

00008e60 <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    8e60:	a4 e0       	ldi	r26, 0x04	; 4
    8e62:	b0 e0       	ldi	r27, 0x00	; 0
    8e64:	e6 e3       	ldi	r30, 0x36	; 54
    8e66:	f7 e4       	ldi	r31, 0x47	; 71
    8e68:	0c 94 a9 57 	jmp	0xaf52	; 0xaf52 <__prologue_saves__+0x2>
    8e6c:	89 83       	std	Y+1, r24	; 0x01
    8e6e:	9a 83       	std	Y+2, r25	; 0x02
    8e70:	6b 83       	std	Y+3, r22	; 0x03
    8e72:	7c 83       	std	Y+4, r23	; 0x04
    8e74:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = auto_mount(&path, fatfs, 0);
    8e76:	ce 01       	movw	r24, r28
    8e78:	01 96       	adiw	r24, 0x01	; 1
    8e7a:	ba 01       	movw	r22, r20
    8e7c:	40 e0       	ldi	r20, 0x00	; 0
    8e7e:	0e 94 50 36 	call	0x6ca0	; 0x6ca0 <auto_mount>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    8e82:	00 97       	sbiw	r24, 0x00	; 0
    8e84:	11 f0       	breq	.+4      	; 0x8e8a <f_getfree+0x2a>
    8e86:	9c 01       	movw	r18, r24
    8e88:	c1 c0       	rjmp	.+386    	; 0x900c <f_getfree+0x1ac>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    8e8a:	d2 01       	movw	r26, r4
    8e8c:	ed 91       	ld	r30, X+
    8e8e:	fc 91       	ld	r31, X
    8e90:	26 85       	ldd	r18, Z+14	; 0x0e
    8e92:	37 85       	ldd	r19, Z+15	; 0x0f
    8e94:	40 89       	ldd	r20, Z+16	; 0x10
    8e96:	51 89       	ldd	r21, Z+17	; 0x11
    8e98:	e6 8c       	ldd	r14, Z+30	; 0x1e
    8e9a:	f7 8c       	ldd	r15, Z+31	; 0x1f
    8e9c:	00 a1       	ldd	r16, Z+32	; 0x20
    8e9e:	11 a1       	ldd	r17, Z+33	; 0x21
    8ea0:	d8 01       	movw	r26, r16
    8ea2:	c7 01       	movw	r24, r14
    8ea4:	02 97       	sbiw	r24, 0x02	; 2
    8ea6:	a1 09       	sbc	r26, r1
    8ea8:	b1 09       	sbc	r27, r1
    8eaa:	82 17       	cp	r24, r18
    8eac:	93 07       	cpc	r25, r19
    8eae:	a4 07       	cpc	r26, r20
    8eb0:	b5 07       	cpc	r27, r21
    8eb2:	38 f0       	brcs	.+14     	; 0x8ec2 <f_getfree+0x62>
		*nclst = (*fatfs)->free_clust;
    8eb4:	eb 81       	ldd	r30, Y+3	; 0x03
    8eb6:	fc 81       	ldd	r31, Y+4	; 0x04
    8eb8:	20 83       	st	Z, r18
    8eba:	31 83       	std	Z+1, r19	; 0x01
    8ebc:	42 83       	std	Z+2, r20	; 0x02
    8ebe:	53 83       	std	Z+3, r21	; 0x03
    8ec0:	a3 c0       	rjmp	.+326    	; 0x9008 <f_getfree+0x1a8>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    8ec2:	30 80       	ld	r3, Z
	n = 0;
	if (fat == FS_FAT12) {
    8ec4:	21 e0       	ldi	r18, 0x01	; 1
    8ec6:	32 16       	cp	r3, r18
    8ec8:	f1 f5       	brne	.+124    	; 0x8f46 <f_getfree+0xe6>
    8eca:	aa 24       	eor	r10, r10
    8ecc:	bb 24       	eor	r11, r11
    8ece:	65 01       	movw	r12, r10
    8ed0:	92 e0       	ldi	r25, 0x02	; 2
    8ed2:	e9 2e       	mov	r14, r25
    8ed4:	f1 2c       	mov	r15, r1
    8ed6:	01 2d       	mov	r16, r1
    8ed8:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    8eda:	d2 01       	movw	r26, r4
    8edc:	8d 91       	ld	r24, X+
    8ede:	9c 91       	ld	r25, X
    8ee0:	b8 01       	movw	r22, r16
    8ee2:	a7 01       	movw	r20, r14
    8ee4:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    8ee8:	6f 3f       	cpi	r22, 0xFF	; 255
    8eea:	bf ef       	ldi	r27, 0xFF	; 255
    8eec:	7b 07       	cpc	r23, r27
    8eee:	bf ef       	ldi	r27, 0xFF	; 255
    8ef0:	8b 07       	cpc	r24, r27
    8ef2:	bf ef       	ldi	r27, 0xFF	; 255
    8ef4:	9b 07       	cpc	r25, r27
    8ef6:	19 f4       	brne	.+6      	; 0x8efe <f_getfree+0x9e>
    8ef8:	21 e0       	ldi	r18, 0x01	; 1
    8efa:	30 e0       	ldi	r19, 0x00	; 0
    8efc:	87 c0       	rjmp	.+270    	; 0x900c <f_getfree+0x1ac>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    8efe:	61 30       	cpi	r22, 0x01	; 1
    8f00:	71 05       	cpc	r23, r1
    8f02:	81 05       	cpc	r24, r1
    8f04:	91 05       	cpc	r25, r1
    8f06:	19 f4       	brne	.+6      	; 0x8f0e <f_getfree+0xae>
    8f08:	22 e0       	ldi	r18, 0x02	; 2
    8f0a:	30 e0       	ldi	r19, 0x00	; 0
    8f0c:	7f c0       	rjmp	.+254    	; 0x900c <f_getfree+0x1ac>
			if (stat == 0) n++;
    8f0e:	61 15       	cp	r22, r1
    8f10:	71 05       	cpc	r23, r1
    8f12:	81 05       	cpc	r24, r1
    8f14:	91 05       	cpc	r25, r1
    8f16:	29 f4       	brne	.+10     	; 0x8f22 <f_getfree+0xc2>
    8f18:	08 94       	sec
    8f1a:	a1 1c       	adc	r10, r1
    8f1c:	b1 1c       	adc	r11, r1
    8f1e:	c1 1c       	adc	r12, r1
    8f20:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    8f22:	08 94       	sec
    8f24:	e1 1c       	adc	r14, r1
    8f26:	f1 1c       	adc	r15, r1
    8f28:	01 1d       	adc	r16, r1
    8f2a:	11 1d       	adc	r17, r1
    8f2c:	d2 01       	movw	r26, r4
    8f2e:	ed 91       	ld	r30, X+
    8f30:	fc 91       	ld	r31, X
    8f32:	86 8d       	ldd	r24, Z+30	; 0x1e
    8f34:	97 8d       	ldd	r25, Z+31	; 0x1f
    8f36:	a0 a1       	ldd	r26, Z+32	; 0x20
    8f38:	b1 a1       	ldd	r27, Z+33	; 0x21
    8f3a:	e8 16       	cp	r14, r24
    8f3c:	f9 06       	cpc	r15, r25
    8f3e:	0a 07       	cpc	r16, r26
    8f40:	1b 07       	cpc	r17, r27
    8f42:	58 f2       	brcs	.-106    	; 0x8eda <f_getfree+0x7a>
    8f44:	4f c0       	rjmp	.+158    	; 0x8fe4 <f_getfree+0x184>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    8f46:	62 a0       	ldd	r6, Z+34	; 0x22
    8f48:	73 a0       	ldd	r7, Z+35	; 0x23
    8f4a:	84 a0       	ldd	r8, Z+36	; 0x24
    8f4c:	95 a0       	ldd	r9, Z+37	; 0x25
    8f4e:	aa 24       	eor	r10, r10
    8f50:	bb 24       	eor	r11, r11
    8f52:	65 01       	movw	r12, r10
    8f54:	20 e0       	ldi	r18, 0x00	; 0
    8f56:	30 e0       	ldi	r19, 0x00	; 0
    8f58:	e0 e0       	ldi	r30, 0x00	; 0
    8f5a:	f0 e0       	ldi	r31, 0x00	; 0
		i = 0; p = 0;
		do {
			if (!i) {
    8f5c:	21 15       	cp	r18, r1
    8f5e:	31 05       	cpc	r19, r1
    8f60:	b1 f4       	brne	.+44     	; 0x8f8e <f_getfree+0x12e>
				res = move_window(*fatfs, sect++);
    8f62:	f2 01       	movw	r30, r4
    8f64:	80 81       	ld	r24, Z
    8f66:	91 81       	ldd	r25, Z+1	; 0x01
    8f68:	b4 01       	movw	r22, r8
    8f6a:	a3 01       	movw	r20, r6
    8f6c:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    8f70:	9c 01       	movw	r18, r24
				if (res != FR_OK)
    8f72:	00 97       	sbiw	r24, 0x00	; 0
    8f74:	09 f0       	breq	.+2      	; 0x8f78 <f_getfree+0x118>
    8f76:	4a c0       	rjmp	.+148    	; 0x900c <f_getfree+0x1ac>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    8f78:	08 94       	sec
    8f7a:	61 1c       	adc	r6, r1
    8f7c:	71 1c       	adc	r7, r1
    8f7e:	81 1c       	adc	r8, r1
    8f80:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    8f82:	d2 01       	movw	r26, r4
    8f84:	ed 91       	ld	r30, X+
    8f86:	fc 91       	ld	r31, X
    8f88:	f2 96       	adiw	r30, 0x32	; 50
    8f8a:	20 e0       	ldi	r18, 0x00	; 0
    8f8c:	32 e0       	ldi	r19, 0x02	; 2
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    8f8e:	b2 e0       	ldi	r27, 0x02	; 2
    8f90:	3b 16       	cp	r3, r27
    8f92:	69 f4       	brne	.+26     	; 0x8fae <f_getfree+0x14e>
				if (LD_WORD(p) == 0) n++;
    8f94:	80 81       	ld	r24, Z
    8f96:	91 81       	ldd	r25, Z+1	; 0x01
    8f98:	89 2b       	or	r24, r25
    8f9a:	29 f4       	brne	.+10     	; 0x8fa6 <f_getfree+0x146>
    8f9c:	08 94       	sec
    8f9e:	a1 1c       	adc	r10, r1
    8fa0:	b1 1c       	adc	r11, r1
    8fa2:	c1 1c       	adc	r12, r1
    8fa4:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    8fa6:	32 96       	adiw	r30, 0x02	; 2
    8fa8:	22 50       	subi	r18, 0x02	; 2
    8faa:	30 40       	sbci	r19, 0x00	; 0
    8fac:	10 c0       	rjmp	.+32     	; 0x8fce <f_getfree+0x16e>
			} else {
				if (LD_DWORD(p) == 0) n++;
    8fae:	80 81       	ld	r24, Z
    8fb0:	91 81       	ldd	r25, Z+1	; 0x01
    8fb2:	a2 81       	ldd	r26, Z+2	; 0x02
    8fb4:	b3 81       	ldd	r27, Z+3	; 0x03
    8fb6:	00 97       	sbiw	r24, 0x00	; 0
    8fb8:	a1 05       	cpc	r26, r1
    8fba:	b1 05       	cpc	r27, r1
    8fbc:	29 f4       	brne	.+10     	; 0x8fc8 <f_getfree+0x168>
    8fbe:	08 94       	sec
    8fc0:	a1 1c       	adc	r10, r1
    8fc2:	b1 1c       	adc	r11, r1
    8fc4:	c1 1c       	adc	r12, r1
    8fc6:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    8fc8:	34 96       	adiw	r30, 0x04	; 4
    8fca:	24 50       	subi	r18, 0x04	; 4
    8fcc:	30 40       	sbci	r19, 0x00	; 0
			}
		} while (--clst);
    8fce:	08 94       	sec
    8fd0:	e1 08       	sbc	r14, r1
    8fd2:	f1 08       	sbc	r15, r1
    8fd4:	01 09       	sbc	r16, r1
    8fd6:	11 09       	sbc	r17, r1
    8fd8:	e1 14       	cp	r14, r1
    8fda:	f1 04       	cpc	r15, r1
    8fdc:	01 05       	cpc	r16, r1
    8fde:	11 05       	cpc	r17, r1
    8fe0:	09 f0       	breq	.+2      	; 0x8fe4 <f_getfree+0x184>
    8fe2:	bc cf       	rjmp	.-136    	; 0x8f5c <f_getfree+0xfc>
	}
	(*fatfs)->free_clust = n;
    8fe4:	d2 01       	movw	r26, r4
    8fe6:	ed 91       	ld	r30, X+
    8fe8:	fc 91       	ld	r31, X
    8fea:	a6 86       	std	Z+14, r10	; 0x0e
    8fec:	b7 86       	std	Z+15, r11	; 0x0f
    8fee:	c0 8a       	std	Z+16, r12	; 0x10
    8ff0:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    8ff2:	b3 e0       	ldi	r27, 0x03	; 3
    8ff4:	3b 16       	cp	r3, r27
    8ff6:	11 f4       	brne	.+4      	; 0x8ffc <f_getfree+0x19c>
    8ff8:	81 e0       	ldi	r24, 0x01	; 1
    8ffa:	81 87       	std	Z+9, r24	; 0x09
	*nclst = n;
    8ffc:	eb 81       	ldd	r30, Y+3	; 0x03
    8ffe:	fc 81       	ldd	r31, Y+4	; 0x04
    9000:	a0 82       	st	Z, r10
    9002:	b1 82       	std	Z+1, r11	; 0x01
    9004:	c2 82       	std	Z+2, r12	; 0x02
    9006:	d3 82       	std	Z+3, r13	; 0x03
    9008:	20 e0       	ldi	r18, 0x00	; 0
    900a:	30 e0       	ldi	r19, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    900c:	c9 01       	movw	r24, r18
    900e:	24 96       	adiw	r28, 0x04	; 4
    9010:	e1 e1       	ldi	r30, 0x11	; 17
    9012:	0c 94 c5 57 	jmp	0xaf8a	; 0xaf8a <__epilogue_restores__+0x2>

00009016 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    9016:	0f 93       	push	r16
    9018:	1f 93       	push	r17
    901a:	cf 93       	push	r28
    901c:	df 93       	push	r29
    901e:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    9020:	6a 81       	ldd	r22, Y+2	; 0x02
    9022:	7b 81       	ldd	r23, Y+3	; 0x03
    9024:	88 81       	ld	r24, Y
    9026:	99 81       	ldd	r25, Y+1	; 0x01
    9028:	0e 94 e9 35 	call	0x6bd2	; 0x6bd2 <validate>
    902c:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    902e:	00 97       	sbiw	r24, 0x00	; 0
    9030:	e1 f5       	brne	.+120    	; 0x90aa <f_sync+0x94>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    9032:	8c 81       	ldd	r24, Y+4	; 0x04
    9034:	85 ff       	sbrs	r24, 5
    9036:	39 c0       	rjmp	.+114    	; 0x90aa <f_sync+0x94>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    9038:	4a 8d       	ldd	r20, Y+26	; 0x1a
    903a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    903c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    903e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    9040:	88 81       	ld	r24, Y
    9042:	99 81       	ldd	r25, Y+1	; 0x01
    9044:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    9048:	9c 01       	movw	r18, r24
			if (res == FR_OK) {
    904a:	00 97       	sbiw	r24, 0x00	; 0
    904c:	71 f5       	brne	.+92     	; 0x90aa <f_sync+0x94>
				dir = fp->dir_ptr;
    904e:	0e 8d       	ldd	r16, Y+30	; 0x1e
    9050:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    9052:	f8 01       	movw	r30, r16
    9054:	83 85       	ldd	r24, Z+11	; 0x0b
    9056:	80 62       	ori	r24, 0x20	; 32
    9058:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    905a:	8a 85       	ldd	r24, Y+10	; 0x0a
    905c:	9b 85       	ldd	r25, Y+11	; 0x0b
    905e:	ac 85       	ldd	r26, Y+12	; 0x0c
    9060:	bd 85       	ldd	r27, Y+13	; 0x0d
    9062:	84 8f       	std	Z+28, r24	; 0x1c
    9064:	95 8f       	std	Z+29, r25	; 0x1d
    9066:	a6 8f       	std	Z+30, r26	; 0x1e
    9068:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    906a:	8e 85       	ldd	r24, Y+14	; 0x0e
    906c:	9f 85       	ldd	r25, Y+15	; 0x0f
    906e:	82 8f       	std	Z+26, r24	; 0x1a
    9070:	93 8f       	std	Z+27, r25	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    9072:	8e 85       	ldd	r24, Y+14	; 0x0e
    9074:	9f 85       	ldd	r25, Y+15	; 0x0f
    9076:	a8 89       	ldd	r26, Y+16	; 0x10
    9078:	b9 89       	ldd	r27, Y+17	; 0x11
    907a:	cd 01       	movw	r24, r26
    907c:	aa 27       	eor	r26, r26
    907e:	bb 27       	eor	r27, r27
    9080:	84 8b       	std	Z+20, r24	; 0x14
    9082:	95 8b       	std	Z+21, r25	; 0x15
				tim = get_fattime();			/* Updated time */
    9084:	0e 94 7f 54 	call	0xa8fe	; 0xa8fe <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    9088:	f8 01       	movw	r30, r16
    908a:	66 8b       	std	Z+22, r22	; 0x16
    908c:	77 8b       	std	Z+23, r23	; 0x17
    908e:	80 8f       	std	Z+24, r24	; 0x18
    9090:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    9092:	8c 81       	ldd	r24, Y+4	; 0x04
    9094:	8f 7d       	andi	r24, 0xDF	; 223
    9096:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    9098:	e8 81       	ld	r30, Y
    909a:	f9 81       	ldd	r31, Y+1	; 0x01
    909c:	81 e0       	ldi	r24, 0x01	; 1
    909e:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    90a0:	88 81       	ld	r24, Y
    90a2:	99 81       	ldd	r25, Y+1	; 0x01
    90a4:	0e 94 b1 42 	call	0x8562	; 0x8562 <sync>
    90a8:	9c 01       	movw	r18, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    90aa:	c9 01       	movw	r24, r18
    90ac:	df 91       	pop	r29
    90ae:	cf 91       	pop	r28
    90b0:	1f 91       	pop	r17
    90b2:	0f 91       	pop	r16
    90b4:	08 95       	ret

000090b6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    90b6:	cf 93       	push	r28
    90b8:	df 93       	push	r29
    90ba:	ec 01       	movw	r28, r24
#if _FS_READONLY
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fp->fs, res);
#else
	res = f_sync(fp);
    90bc:	0e 94 0b 48 	call	0x9016	; 0x9016 <f_sync>
    90c0:	9c 01       	movw	r18, r24
	if (res == FR_OK) fp->fs = NULL;
    90c2:	00 97       	sbiw	r24, 0x00	; 0
    90c4:	11 f4       	brne	.+4      	; 0x90ca <f_close+0x14>
    90c6:	18 82       	st	Y, r1
    90c8:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    90ca:	c9 01       	movw	r24, r18
    90cc:	df 91       	pop	r29
    90ce:	cf 91       	pop	r28
    90d0:	08 95       	ret

000090d2 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    90d2:	a4 e0       	ldi	r26, 0x04	; 4
    90d4:	b0 e0       	ldi	r27, 0x00	; 0
    90d6:	ef e6       	ldi	r30, 0x6F	; 111
    90d8:	f8 e4       	ldi	r31, 0x48	; 72
    90da:	0c 94 a8 57 	jmp	0xaf50	; 0xaf50 <__prologue_saves__>
    90de:	8b 83       	std	Y+3, r24	; 0x03
    90e0:	9c 83       	std	Y+4, r25	; 0x04
    90e2:	16 2f       	mov	r17, r22
    90e4:	07 2f       	mov	r16, r23
    90e6:	3a 01       	movw	r6, r20
    90e8:	29 83       	std	Y+1, r18	; 0x01
    90ea:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;
    90ec:	d9 01       	movw	r26, r18
    90ee:	1d 92       	st	X+, r1
    90f0:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    90f2:	fc 01       	movw	r30, r24
    90f4:	62 81       	ldd	r22, Z+2	; 0x02
    90f6:	73 81       	ldd	r23, Z+3	; 0x03
    90f8:	80 81       	ld	r24, Z
    90fa:	91 81       	ldd	r25, Z+1	; 0x01
    90fc:	0e 94 e9 35 	call	0x6bd2	; 0x6bd2 <validate>
    9100:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    9102:	00 97       	sbiw	r24, 0x00	; 0
    9104:	09 f0       	breq	.+2      	; 0x9108 <f_write+0x36>
    9106:	09 c2       	rjmp	.+1042   	; 0x951a <f_write+0x448>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    9108:	ab 81       	ldd	r26, Y+3	; 0x03
    910a:	bc 81       	ldd	r27, Y+4	; 0x04
    910c:	14 96       	adiw	r26, 0x04	; 4
    910e:	8c 91       	ld	r24, X
    9110:	87 fd       	sbrc	r24, 7
    9112:	78 c0       	rjmp	.+240    	; 0x9204 <f_write+0x132>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    9114:	81 fd       	sbrc	r24, 1
    9116:	04 c0       	rjmp	.+8      	; 0x9120 <f_write+0x4e>
    9118:	f7 e0       	ldi	r31, 0x07	; 7
    911a:	8f 2e       	mov	r8, r31
    911c:	91 2c       	mov	r9, r1
    911e:	fd c1       	rjmp	.+1018   	; 0x951a <f_write+0x448>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    9120:	eb 81       	ldd	r30, Y+3	; 0x03
    9122:	fc 81       	ldd	r31, Y+4	; 0x04
    9124:	22 85       	ldd	r18, Z+10	; 0x0a
    9126:	33 85       	ldd	r19, Z+11	; 0x0b
    9128:	44 85       	ldd	r20, Z+12	; 0x0c
    912a:	55 85       	ldd	r21, Z+13	; 0x0d
    912c:	c3 01       	movw	r24, r6
    912e:	a0 e0       	ldi	r26, 0x00	; 0
    9130:	b0 e0       	ldi	r27, 0x00	; 0
    9132:	82 0f       	add	r24, r18
    9134:	93 1f       	adc	r25, r19
    9136:	a4 1f       	adc	r26, r20
    9138:	b5 1f       	adc	r27, r21
    913a:	82 17       	cp	r24, r18
    913c:	93 07       	cpc	r25, r19
    913e:	a4 07       	cpc	r26, r20
    9140:	b5 07       	cpc	r27, r21
    9142:	10 f4       	brcc	.+4      	; 0x9148 <f_write+0x76>
    9144:	66 24       	eor	r6, r6
    9146:	77 24       	eor	r7, r7
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    9148:	81 2f       	mov	r24, r17
    914a:	90 2f       	mov	r25, r16
    914c:	9c 01       	movw	r18, r24
    914e:	29 01       	movw	r4, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    9150:	22 24       	eor	r2, r2
    9152:	23 94       	inc	r2
    9154:	bd c1       	rjmp	.+890    	; 0x94d0 <f_write+0x3fe>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    9156:	ab 81       	ldd	r26, Y+3	; 0x03
    9158:	bc 81       	ldd	r27, Y+4	; 0x04
    915a:	16 96       	adiw	r26, 0x06	; 6
    915c:	2d 91       	ld	r18, X+
    915e:	3d 91       	ld	r19, X+
    9160:	4d 91       	ld	r20, X+
    9162:	5c 91       	ld	r21, X
    9164:	19 97       	sbiw	r26, 0x09	; 9
    9166:	da 01       	movw	r26, r20
    9168:	c9 01       	movw	r24, r18
    916a:	91 70       	andi	r25, 0x01	; 1
    916c:	a0 70       	andi	r26, 0x00	; 0
    916e:	b0 70       	andi	r27, 0x00	; 0
    9170:	00 97       	sbiw	r24, 0x00	; 0
    9172:	a1 05       	cpc	r26, r1
    9174:	b1 05       	cpc	r27, r1
    9176:	09 f0       	breq	.+2      	; 0x917a <f_write+0xa8>
    9178:	4a c1       	rjmp	.+660    	; 0x940e <f_write+0x33c>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    917a:	ab 81       	ldd	r26, Y+3	; 0x03
    917c:	bc 81       	ldd	r27, Y+4	; 0x04
    917e:	ed 91       	ld	r30, X+
    9180:	fc 91       	ld	r31, X
    9182:	11 97       	sbiw	r26, 0x01	; 1
    9184:	15 96       	adiw	r26, 0x05	; 5
    9186:	9c 91       	ld	r25, X
    9188:	15 97       	sbiw	r26, 0x05	; 5
    918a:	82 81       	ldd	r24, Z+2	; 0x02
    918c:	98 17       	cp	r25, r24
    918e:	08 f4       	brcc	.+2      	; 0x9192 <f_write+0xc0>
    9190:	55 c0       	rjmp	.+170    	; 0x923c <f_write+0x16a>
				if (fp->fptr == 0) {				/* On the top of the file? */
    9192:	21 15       	cp	r18, r1
    9194:	31 05       	cpc	r19, r1
    9196:	41 05       	cpc	r20, r1
    9198:	51 05       	cpc	r21, r1
    919a:	c9 f4       	brne	.+50     	; 0x91ce <f_write+0xfc>
					clst = fp->org_clust;			/* Follow from the origin */
    919c:	1e 96       	adiw	r26, 0x0e	; 14
    919e:	6d 91       	ld	r22, X+
    91a0:	7d 91       	ld	r23, X+
    91a2:	8d 91       	ld	r24, X+
    91a4:	9c 91       	ld	r25, X
    91a6:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    91a8:	61 15       	cp	r22, r1
    91aa:	71 05       	cpc	r23, r1
    91ac:	81 05       	cpc	r24, r1
    91ae:	91 05       	cpc	r25, r1
    91b0:	f9 f4       	brne	.+62     	; 0x91f0 <f_write+0x11e>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    91b2:	cf 01       	movw	r24, r30
    91b4:	40 e0       	ldi	r20, 0x00	; 0
    91b6:	50 e0       	ldi	r21, 0x00	; 0
    91b8:	60 e0       	ldi	r22, 0x00	; 0
    91ba:	70 e0       	ldi	r23, 0x00	; 0
    91bc:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <create_chain>
    91c0:	eb 81       	ldd	r30, Y+3	; 0x03
    91c2:	fc 81       	ldd	r31, Y+4	; 0x04
    91c4:	66 87       	std	Z+14, r22	; 0x0e
    91c6:	77 87       	std	Z+15, r23	; 0x0f
    91c8:	80 8b       	std	Z+16, r24	; 0x10
    91ca:	91 8b       	std	Z+17, r25	; 0x11
    91cc:	0b c0       	rjmp	.+22     	; 0x91e4 <f_write+0x112>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    91ce:	ab 81       	ldd	r26, Y+3	; 0x03
    91d0:	bc 81       	ldd	r27, Y+4	; 0x04
    91d2:	52 96       	adiw	r26, 0x12	; 18
    91d4:	4d 91       	ld	r20, X+
    91d6:	5d 91       	ld	r21, X+
    91d8:	6d 91       	ld	r22, X+
    91da:	7c 91       	ld	r23, X
    91dc:	55 97       	sbiw	r26, 0x15	; 21
    91de:	cf 01       	movw	r24, r30
    91e0:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    91e4:	61 15       	cp	r22, r1
    91e6:	71 05       	cpc	r23, r1
    91e8:	81 05       	cpc	r24, r1
    91ea:	91 05       	cpc	r25, r1
    91ec:	09 f4       	brne	.+2      	; 0x91f0 <f_write+0x11e>
    91ee:	74 c1       	rjmp	.+744    	; 0x94d8 <f_write+0x406>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    91f0:	61 30       	cpi	r22, 0x01	; 1
    91f2:	71 05       	cpc	r23, r1
    91f4:	81 05       	cpc	r24, r1
    91f6:	91 05       	cpc	r25, r1
    91f8:	49 f4       	brne	.+18     	; 0x920c <f_write+0x13a>
    91fa:	eb 81       	ldd	r30, Y+3	; 0x03
    91fc:	fc 81       	ldd	r31, Y+4	; 0x04
    91fe:	84 81       	ldd	r24, Z+4	; 0x04
    9200:	80 68       	ori	r24, 0x80	; 128
    9202:	84 83       	std	Z+4, r24	; 0x04
    9204:	e2 e0       	ldi	r30, 0x02	; 2
    9206:	8e 2e       	mov	r8, r30
    9208:	91 2c       	mov	r9, r1
    920a:	87 c1       	rjmp	.+782    	; 0x951a <f_write+0x448>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    920c:	6f 3f       	cpi	r22, 0xFF	; 255
    920e:	ff ef       	ldi	r31, 0xFF	; 255
    9210:	7f 07       	cpc	r23, r31
    9212:	ff ef       	ldi	r31, 0xFF	; 255
    9214:	8f 07       	cpc	r24, r31
    9216:	ff ef       	ldi	r31, 0xFF	; 255
    9218:	9f 07       	cpc	r25, r31
    921a:	49 f4       	brne	.+18     	; 0x922e <f_write+0x15c>
    921c:	ab 81       	ldd	r26, Y+3	; 0x03
    921e:	bc 81       	ldd	r27, Y+4	; 0x04
    9220:	14 96       	adiw	r26, 0x04	; 4
    9222:	8c 91       	ld	r24, X
    9224:	14 97       	sbiw	r26, 0x04	; 4
    9226:	80 68       	ori	r24, 0x80	; 128
    9228:	14 96       	adiw	r26, 0x04	; 4
    922a:	8c 93       	st	X, r24
    922c:	09 c1       	rjmp	.+530    	; 0x9440 <f_write+0x36e>
				fp->curr_clust = clst;				/* Update current cluster */
    922e:	eb 81       	ldd	r30, Y+3	; 0x03
    9230:	fc 81       	ldd	r31, Y+4	; 0x04
    9232:	62 8b       	std	Z+18, r22	; 0x12
    9234:	73 8b       	std	Z+19, r23	; 0x13
    9236:	84 8b       	std	Z+20, r24	; 0x14
    9238:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    923a:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
    923c:	ab 81       	ldd	r26, Y+3	; 0x03
    923e:	bc 81       	ldd	r27, Y+4	; 0x04
    9240:	ed 91       	ld	r30, X+
    9242:	fc 91       	ld	r31, X
    9244:	11 97       	sbiw	r26, 0x01	; 1
    9246:	26 a5       	ldd	r18, Z+46	; 0x2e
    9248:	37 a5       	ldd	r19, Z+47	; 0x2f
    924a:	40 a9       	ldd	r20, Z+48	; 0x30
    924c:	51 a9       	ldd	r21, Z+49	; 0x31
    924e:	56 96       	adiw	r26, 0x16	; 22
    9250:	ed 90       	ld	r14, X+
    9252:	fd 90       	ld	r15, X+
    9254:	0d 91       	ld	r16, X+
    9256:	1c 91       	ld	r17, X
    9258:	59 97       	sbiw	r26, 0x19	; 25
    925a:	2e 15       	cp	r18, r14
    925c:	3f 05       	cpc	r19, r15
    925e:	40 07       	cpc	r20, r16
    9260:	51 07       	cpc	r21, r17
    9262:	51 f4       	brne	.+20     	; 0x9278 <f_write+0x1a6>
    9264:	cf 01       	movw	r24, r30
    9266:	40 e0       	ldi	r20, 0x00	; 0
    9268:	50 e0       	ldi	r21, 0x00	; 0
    926a:	60 e0       	ldi	r22, 0x00	; 0
    926c:	70 e0       	ldi	r23, 0x00	; 0
    926e:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    9272:	89 2b       	or	r24, r25
    9274:	09 f0       	breq	.+2      	; 0x9278 <f_write+0x1a6>
    9276:	df c0       	rjmp	.+446    	; 0x9436 <f_write+0x364>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    9278:	ab 81       	ldd	r26, Y+3	; 0x03
    927a:	bc 81       	ldd	r27, Y+4	; 0x04
    927c:	0d 91       	ld	r16, X+
    927e:	1c 91       	ld	r17, X
    9280:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    9282:	52 96       	adiw	r26, 0x12	; 18
    9284:	2d 91       	ld	r18, X+
    9286:	3d 91       	ld	r19, X+
    9288:	4d 91       	ld	r20, X+
    928a:	5c 91       	ld	r21, X
    928c:	55 97       	sbiw	r26, 0x15	; 21
    928e:	22 50       	subi	r18, 0x02	; 2
    9290:	30 40       	sbci	r19, 0x00	; 0
    9292:	40 40       	sbci	r20, 0x00	; 0
    9294:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    9296:	f8 01       	movw	r30, r16
    9298:	86 8d       	ldd	r24, Z+30	; 0x1e
    929a:	97 8d       	ldd	r25, Z+31	; 0x1f
    929c:	a0 a1       	ldd	r26, Z+32	; 0x20
    929e:	b1 a1       	ldd	r27, Z+33	; 0x21
    92a0:	02 97       	sbiw	r24, 0x02	; 2
    92a2:	a1 09       	sbc	r26, r1
    92a4:	b1 09       	sbc	r27, r1
    92a6:	28 17       	cp	r18, r24
    92a8:	39 07       	cpc	r19, r25
    92aa:	4a 07       	cpc	r20, r26
    92ac:	5b 07       	cpc	r21, r27
    92ae:	b8 f4       	brcc	.+46     	; 0x92de <f_write+0x20c>
	return clst * fs->csize + fs->database;
    92b0:	32 80       	ldd	r3, Z+2	; 0x02
    92b2:	63 2d       	mov	r22, r3
    92b4:	70 e0       	ldi	r23, 0x00	; 0
    92b6:	80 e0       	ldi	r24, 0x00	; 0
    92b8:	90 e0       	ldi	r25, 0x00	; 0
    92ba:	0e 94 25 57 	call	0xae4a	; 0xae4a <__mulsi3>
    92be:	9b 01       	movw	r18, r22
    92c0:	ac 01       	movw	r20, r24
    92c2:	f8 01       	movw	r30, r16
    92c4:	82 a5       	ldd	r24, Z+42	; 0x2a
    92c6:	93 a5       	ldd	r25, Z+43	; 0x2b
    92c8:	a4 a5       	ldd	r26, Z+44	; 0x2c
    92ca:	b5 a5       	ldd	r27, Z+45	; 0x2d
    92cc:	28 0f       	add	r18, r24
    92ce:	39 1f       	adc	r19, r25
    92d0:	4a 1f       	adc	r20, r26
    92d2:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    92d4:	21 15       	cp	r18, r1
    92d6:	31 05       	cpc	r19, r1
    92d8:	41 05       	cpc	r20, r1
    92da:	51 05       	cpc	r21, r1
    92dc:	49 f4       	brne	.+18     	; 0x92f0 <f_write+0x21e>
    92de:	ab 81       	ldd	r26, Y+3	; 0x03
    92e0:	bc 81       	ldd	r27, Y+4	; 0x04
    92e2:	14 96       	adiw	r26, 0x04	; 4
    92e4:	8c 91       	ld	r24, X
    92e6:	14 97       	sbiw	r26, 0x04	; 4
    92e8:	80 68       	ori	r24, 0x80	; 128
    92ea:	14 96       	adiw	r26, 0x04	; 4
    92ec:	8c 93       	st	X, r24
    92ee:	8a cf       	rjmp	.-236    	; 0x9204 <f_write+0x132>
			sect += fp->csect;
    92f0:	eb 81       	ldd	r30, Y+3	; 0x03
    92f2:	fc 81       	ldd	r31, Y+4	; 0x04
    92f4:	85 81       	ldd	r24, Z+5	; 0x05
    92f6:	59 01       	movw	r10, r18
    92f8:	6a 01       	movw	r12, r20
    92fa:	a8 0e       	add	r10, r24
    92fc:	b1 1c       	adc	r11, r1
    92fe:	c1 1c       	adc	r12, r1
    9300:	d1 1c       	adc	r13, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    9302:	73 01       	movw	r14, r6
    9304:	ef 2c       	mov	r14, r15
    9306:	ff 24       	eor	r15, r15
    9308:	e6 94       	lsr	r14
			if (cc) {								/* Write maximum contiguous sectors directly */
    930a:	e1 14       	cp	r14, r1
    930c:	f1 04       	cpc	r15, r1
    930e:	09 f4       	brne	.+2      	; 0x9312 <f_write+0x240>
    9310:	51 c0       	rjmp	.+162    	; 0x93b4 <f_write+0x2e2>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    9312:	28 2f       	mov	r18, r24
    9314:	30 e0       	ldi	r19, 0x00	; 0
    9316:	c7 01       	movw	r24, r14
    9318:	82 0f       	add	r24, r18
    931a:	93 1f       	adc	r25, r19
    931c:	63 2d       	mov	r22, r3
    931e:	70 e0       	ldi	r23, 0x00	; 0
    9320:	68 17       	cp	r22, r24
    9322:	79 07       	cpc	r23, r25
    9324:	18 f4       	brcc	.+6      	; 0x932c <f_write+0x25a>
					cc = fp->fs->csize - fp->csect;
    9326:	7b 01       	movw	r14, r22
    9328:	e2 1a       	sub	r14, r18
    932a:	f3 0a       	sbc	r15, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    932c:	d8 01       	movw	r26, r16
    932e:	11 96       	adiw	r26, 0x01	; 1
    9330:	8c 91       	ld	r24, X
    9332:	b2 01       	movw	r22, r4
    9334:	a6 01       	movw	r20, r12
    9336:	95 01       	movw	r18, r10
    9338:	0e 2d       	mov	r16, r14
    933a:	0e 94 f7 50 	call	0xa1ee	; 0xa1ee <disk_write>
    933e:	89 2b       	or	r24, r25
    9340:	09 f0       	breq	.+2      	; 0x9344 <f_write+0x272>
    9342:	79 c0       	rjmp	.+242    	; 0x9436 <f_write+0x364>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
    9344:	ab 81       	ldd	r26, Y+3	; 0x03
    9346:	bc 81       	ldd	r27, Y+4	; 0x04
    9348:	ed 91       	ld	r30, X+
    934a:	fc 91       	ld	r31, X
    934c:	26 a5       	ldd	r18, Z+46	; 0x2e
    934e:	37 a5       	ldd	r19, Z+47	; 0x2f
    9350:	40 a9       	ldd	r20, Z+48	; 0x30
    9352:	51 a9       	ldd	r21, Z+49	; 0x31
    9354:	2a 19       	sub	r18, r10
    9356:	3b 09       	sbc	r19, r11
    9358:	4c 09       	sbc	r20, r12
    935a:	5d 09       	sbc	r21, r13
    935c:	c7 01       	movw	r24, r14
    935e:	a0 e0       	ldi	r26, 0x00	; 0
    9360:	b0 e0       	ldi	r27, 0x00	; 0
    9362:	28 17       	cp	r18, r24
    9364:	39 07       	cpc	r19, r25
    9366:	4a 07       	cpc	r20, r26
    9368:	5b 07       	cpc	r21, r27
    936a:	d0 f4       	brcc	.+52     	; 0x93a0 <f_write+0x2ce>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    936c:	df 01       	movw	r26, r30
    936e:	d2 96       	adiw	r26, 0x32	; 50
	const char *s = (const char *)src;
    9370:	69 e0       	ldi	r22, 0x09	; 9
    9372:	22 0f       	add	r18, r18
    9374:	33 1f       	adc	r19, r19
    9376:	44 1f       	adc	r20, r20
    9378:	55 1f       	adc	r21, r21
    937a:	6a 95       	dec	r22
    937c:	d1 f7       	brne	.-12     	; 0x9372 <f_write+0x2a0>
    937e:	f2 01       	movw	r30, r4
    9380:	e2 0f       	add	r30, r18
    9382:	f3 1f       	adc	r31, r19
	while (cnt--) *d++ = *s++;
    9384:	9f 01       	movw	r18, r30
    9386:	20 50       	subi	r18, 0x00	; 0
    9388:	3e 4f       	sbci	r19, 0xFE	; 254
    938a:	02 c0       	rjmp	.+4      	; 0x9390 <f_write+0x2be>
    938c:	81 91       	ld	r24, Z+
    938e:	8d 93       	st	X+, r24
    9390:	e2 17       	cp	r30, r18
    9392:	f3 07       	cpc	r31, r19
    9394:	d9 f7       	brne	.-10     	; 0x938c <f_write+0x2ba>
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
    9396:	ab 81       	ldd	r26, Y+3	; 0x03
    9398:	bc 81       	ldd	r27, Y+4	; 0x04
    939a:	ed 91       	ld	r30, X+
    939c:	fc 91       	ld	r31, X
    939e:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    93a0:	eb 81       	ldd	r30, Y+3	; 0x03
    93a2:	fc 81       	ldd	r31, Y+4	; 0x04
    93a4:	85 81       	ldd	r24, Z+5	; 0x05
    93a6:	8e 0d       	add	r24, r14
    93a8:	85 83       	std	Z+5, r24	; 0x05
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    93aa:	b7 01       	movw	r22, r14
    93ac:	76 2f       	mov	r23, r22
    93ae:	66 27       	eor	r22, r22
    93b0:	77 0f       	add	r23, r23
    93b2:	71 c0       	rjmp	.+226    	; 0x9496 <f_write+0x3c4>
				continue;
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
    93b4:	ab 81       	ldd	r26, Y+3	; 0x03
    93b6:	bc 81       	ldd	r27, Y+4	; 0x04
    93b8:	16 96       	adiw	r26, 0x06	; 6
    93ba:	2d 91       	ld	r18, X+
    93bc:	3d 91       	ld	r19, X+
    93be:	4d 91       	ld	r20, X+
    93c0:	5c 91       	ld	r21, X
    93c2:	19 97       	sbiw	r26, 0x09	; 9
    93c4:	1a 96       	adiw	r26, 0x0a	; 10
    93c6:	8d 91       	ld	r24, X+
    93c8:	9d 91       	ld	r25, X+
    93ca:	0d 90       	ld	r0, X+
    93cc:	bc 91       	ld	r27, X
    93ce:	a0 2d       	mov	r26, r0
    93d0:	28 17       	cp	r18, r24
    93d2:	39 07       	cpc	r19, r25
    93d4:	4a 07       	cpc	r20, r26
    93d6:	5b 07       	cpc	r21, r27
    93d8:	88 f0       	brcs	.+34     	; 0x93fc <f_write+0x32a>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    93da:	c8 01       	movw	r24, r16
    93dc:	40 e0       	ldi	r20, 0x00	; 0
    93de:	50 e0       	ldi	r21, 0x00	; 0
    93e0:	60 e0       	ldi	r22, 0x00	; 0
    93e2:	70 e0       	ldi	r23, 0x00	; 0
    93e4:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    93e8:	89 2b       	or	r24, r25
    93ea:	29 f5       	brne	.+74     	; 0x9436 <f_write+0x364>
				fp->fs->winsect = sect;
    93ec:	ab 81       	ldd	r26, Y+3	; 0x03
    93ee:	bc 81       	ldd	r27, Y+4	; 0x04
    93f0:	ed 91       	ld	r30, X+
    93f2:	fc 91       	ld	r31, X
    93f4:	a6 a6       	std	Z+46, r10	; 0x2e
    93f6:	b7 a6       	std	Z+47, r11	; 0x2f
    93f8:	c0 aa       	std	Z+48, r12	; 0x30
    93fa:	d1 aa       	std	Z+49, r13	; 0x31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    93fc:	eb 81       	ldd	r30, Y+3	; 0x03
    93fe:	fc 81       	ldd	r31, Y+4	; 0x04
    9400:	a6 8a       	std	Z+22, r10	; 0x16
    9402:	b7 8a       	std	Z+23, r11	; 0x17
    9404:	c0 8e       	std	Z+24, r12	; 0x18
    9406:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    9408:	85 81       	ldd	r24, Z+5	; 0x05
    940a:	8f 5f       	subi	r24, 0xFF	; 255
    940c:	85 83       	std	Z+5, r24	; 0x05
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    940e:	ab 81       	ldd	r26, Y+3	; 0x03
    9410:	bc 81       	ldd	r27, Y+4	; 0x04
    9412:	16 96       	adiw	r26, 0x06	; 6
    9414:	cd 90       	ld	r12, X+
    9416:	dd 90       	ld	r13, X+
    9418:	ed 90       	ld	r14, X+
    941a:	fc 90       	ld	r15, X
    941c:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    941e:	56 96       	adiw	r26, 0x16	; 22
    9420:	4d 91       	ld	r20, X+
    9422:	5d 91       	ld	r21, X+
    9424:	6d 91       	ld	r22, X+
    9426:	7c 91       	ld	r23, X
    9428:	59 97       	sbiw	r26, 0x19	; 25
    942a:	8d 91       	ld	r24, X+
    942c:	9c 91       	ld	r25, X
    942e:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    9432:	89 2b       	or	r24, r25
    9434:	49 f0       	breq	.+18     	; 0x9448 <f_write+0x376>
			ABORT(fp->fs, FR_DISK_ERR);
    9436:	eb 81       	ldd	r30, Y+3	; 0x03
    9438:	fc 81       	ldd	r31, Y+4	; 0x04
    943a:	84 81       	ldd	r24, Z+4	; 0x04
    943c:	80 68       	ori	r24, 0x80	; 128
    943e:	84 83       	std	Z+4, r24	; 0x04
    9440:	31 e0       	ldi	r19, 0x01	; 1
    9442:	83 2e       	mov	r8, r19
    9444:	91 2c       	mov	r9, r1
    9446:	69 c0       	rjmp	.+210    	; 0x951a <f_write+0x448>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    9448:	c6 01       	movw	r24, r12
    944a:	91 70       	andi	r25, 0x01	; 1
    944c:	20 e0       	ldi	r18, 0x00	; 0
    944e:	32 e0       	ldi	r19, 0x02	; 2
    9450:	28 1b       	sub	r18, r24
    9452:	39 0b       	sbc	r19, r25
    9454:	b3 01       	movw	r22, r6
    9456:	26 15       	cp	r18, r6
    9458:	37 05       	cpc	r19, r7
    945a:	08 f4       	brcc	.+2      	; 0x945e <f_write+0x38c>
    945c:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    945e:	ab 81       	ldd	r26, Y+3	; 0x03
    9460:	bc 81       	ldd	r27, Y+4	; 0x04
    9462:	16 96       	adiw	r26, 0x06	; 6
    9464:	8d 91       	ld	r24, X+
    9466:	9c 91       	ld	r25, X
    9468:	17 97       	sbiw	r26, 0x07	; 7
    946a:	91 70       	andi	r25, 0x01	; 1
    946c:	c2 96       	adiw	r24, 0x32	; 50
    946e:	0d 90       	ld	r0, X+
    9470:	bc 91       	ld	r27, X
    9472:	a0 2d       	mov	r26, r0
    9474:	a8 0f       	add	r26, r24
    9476:	b9 1f       	adc	r27, r25
	const char *s = (const char *)src;
    9478:	f2 01       	movw	r30, r4
	while (cnt--) *d++ = *s++;
    947a:	92 01       	movw	r18, r4
    947c:	26 0f       	add	r18, r22
    947e:	37 1f       	adc	r19, r23
    9480:	02 c0       	rjmp	.+4      	; 0x9486 <f_write+0x3b4>
    9482:	81 91       	ld	r24, Z+
    9484:	8d 93       	st	X+, r24
    9486:	e2 17       	cp	r30, r18
    9488:	f3 07       	cpc	r31, r19
    948a:	d9 f7       	brne	.-10     	; 0x9482 <f_write+0x3b0>
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    948c:	ab 81       	ldd	r26, Y+3	; 0x03
    948e:	bc 81       	ldd	r27, Y+4	; 0x04
    9490:	ed 91       	ld	r30, X+
    9492:	fc 91       	ld	r31, X
    9494:	24 82       	std	Z+4, r2	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    9496:	46 0e       	add	r4, r22
    9498:	57 1e       	adc	r5, r23
    949a:	cb 01       	movw	r24, r22
    949c:	a0 e0       	ldi	r26, 0x00	; 0
    949e:	b0 e0       	ldi	r27, 0x00	; 0
    94a0:	eb 81       	ldd	r30, Y+3	; 0x03
    94a2:	fc 81       	ldd	r31, Y+4	; 0x04
    94a4:	26 81       	ldd	r18, Z+6	; 0x06
    94a6:	37 81       	ldd	r19, Z+7	; 0x07
    94a8:	40 85       	ldd	r20, Z+8	; 0x08
    94aa:	51 85       	ldd	r21, Z+9	; 0x09
    94ac:	28 0f       	add	r18, r24
    94ae:	39 1f       	adc	r19, r25
    94b0:	4a 1f       	adc	r20, r26
    94b2:	5b 1f       	adc	r21, r27
    94b4:	26 83       	std	Z+6, r18	; 0x06
    94b6:	37 83       	std	Z+7, r19	; 0x07
    94b8:	40 87       	std	Z+8, r20	; 0x08
    94ba:	51 87       	std	Z+9, r21	; 0x09
    94bc:	e9 81       	ldd	r30, Y+1	; 0x01
    94be:	fa 81       	ldd	r31, Y+2	; 0x02
    94c0:	80 81       	ld	r24, Z
    94c2:	91 81       	ldd	r25, Z+1	; 0x01
    94c4:	86 0f       	add	r24, r22
    94c6:	97 1f       	adc	r25, r23
    94c8:	80 83       	st	Z, r24
    94ca:	91 83       	std	Z+1, r25	; 0x01
    94cc:	66 1a       	sub	r6, r22
    94ce:	77 0a       	sbc	r7, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    94d0:	61 14       	cp	r6, r1
    94d2:	71 04       	cpc	r7, r1
    94d4:	09 f0       	breq	.+2      	; 0x94d8 <f_write+0x406>
    94d6:	3f ce       	rjmp	.-898    	; 0x9156 <f_write+0x84>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    94d8:	ab 81       	ldd	r26, Y+3	; 0x03
    94da:	bc 81       	ldd	r27, Y+4	; 0x04
    94dc:	16 96       	adiw	r26, 0x06	; 6
    94de:	2d 91       	ld	r18, X+
    94e0:	3d 91       	ld	r19, X+
    94e2:	4d 91       	ld	r20, X+
    94e4:	5c 91       	ld	r21, X
    94e6:	19 97       	sbiw	r26, 0x09	; 9
    94e8:	1a 96       	adiw	r26, 0x0a	; 10
    94ea:	8d 91       	ld	r24, X+
    94ec:	9d 91       	ld	r25, X+
    94ee:	0d 90       	ld	r0, X+
    94f0:	bc 91       	ld	r27, X
    94f2:	a0 2d       	mov	r26, r0
    94f4:	82 17       	cp	r24, r18
    94f6:	93 07       	cpc	r25, r19
    94f8:	a4 07       	cpc	r26, r20
    94fa:	b5 07       	cpc	r27, r21
    94fc:	30 f4       	brcc	.+12     	; 0x950a <f_write+0x438>
    94fe:	eb 81       	ldd	r30, Y+3	; 0x03
    9500:	fc 81       	ldd	r31, Y+4	; 0x04
    9502:	22 87       	std	Z+10, r18	; 0x0a
    9504:	33 87       	std	Z+11, r19	; 0x0b
    9506:	44 87       	std	Z+12, r20	; 0x0c
    9508:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    950a:	ab 81       	ldd	r26, Y+3	; 0x03
    950c:	bc 81       	ldd	r27, Y+4	; 0x04
    950e:	14 96       	adiw	r26, 0x04	; 4
    9510:	8c 91       	ld	r24, X
    9512:	14 97       	sbiw	r26, 0x04	; 4
    9514:	80 62       	ori	r24, 0x20	; 32
    9516:	14 96       	adiw	r26, 0x04	; 4
    9518:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    951a:	c4 01       	movw	r24, r8
    951c:	24 96       	adiw	r28, 0x04	; 4
    951e:	e2 e1       	ldi	r30, 0x12	; 18
    9520:	0c 94 c4 57 	jmp	0xaf88	; 0xaf88 <__epilogue_restores__>

00009524 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    9524:	a3 e0       	ldi	r26, 0x03	; 3
    9526:	b0 e0       	ldi	r27, 0x00	; 0
    9528:	e8 e9       	ldi	r30, 0x98	; 152
    952a:	fa e4       	ldi	r31, 0x4A	; 74
    952c:	0c 94 b4 57 	jmp	0xaf68	; 0xaf68 <__prologue_saves__+0x18>
    9530:	7c 01       	movw	r14, r24
    9532:	8b 01       	movw	r16, r22
	UINT bw;
	char c;


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
    9534:	8a e0       	ldi	r24, 0x0A	; 10
    9536:	e8 16       	cp	r14, r24
    9538:	f1 04       	cpc	r15, r1
    953a:	21 f4       	brne	.+8      	; 0x9544 <f_putc+0x20>
    953c:	8d e0       	ldi	r24, 0x0D	; 13
    953e:	90 e0       	ldi	r25, 0x00	; 0
    9540:	0e 94 92 4a 	call	0x9524	; 0x9524 <f_putc>
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    9544:	01 15       	cp	r16, r1
    9546:	11 05       	cpc	r17, r1
    9548:	99 f0       	breq	.+38     	; 0x9570 <f_putc+0x4c>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    954a:	e9 82       	std	Y+1, r14	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    954c:	c8 01       	movw	r24, r16
    954e:	be 01       	movw	r22, r28
    9550:	6f 5f       	subi	r22, 0xFF	; 255
    9552:	7f 4f       	sbci	r23, 0xFF	; 255
    9554:	41 e0       	ldi	r20, 0x01	; 1
    9556:	50 e0       	ldi	r21, 0x00	; 0
    9558:	9e 01       	movw	r18, r28
    955a:	2e 5f       	subi	r18, 0xFE	; 254
    955c:	3f 4f       	sbci	r19, 0xFF	; 255
    955e:	0e 94 69 48 	call	0x90d2	; 0x90d2 <f_write>
	return bw ? chr : EOF;		/* Return the result */
    9562:	8a 81       	ldd	r24, Y+2	; 0x02
    9564:	9b 81       	ldd	r25, Y+3	; 0x03
    9566:	89 2b       	or	r24, r25
    9568:	19 f4       	brne	.+6      	; 0x9570 <f_putc+0x4c>
    956a:	ee 24       	eor	r14, r14
    956c:	ea 94       	dec	r14
    956e:	fe 2c       	mov	r15, r14
}
    9570:	c7 01       	movw	r24, r14
    9572:	23 96       	adiw	r28, 0x03	; 3
    9574:	e6 e0       	ldi	r30, 0x06	; 6
    9576:	0c 94 d0 57 	jmp	0xafa0	; 0xafa0 <__epilogue_restores__+0x18>

0000957a <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    957a:	ef 92       	push	r14
    957c:	ff 92       	push	r15
    957e:	0f 93       	push	r16
    9580:	1f 93       	push	r17
    9582:	cf 93       	push	r28
    9584:	df 93       	push	r29
    9586:	8c 01       	movw	r16, r24
    9588:	7b 01       	movw	r14, r22
    958a:	c0 e0       	ldi	r28, 0x00	; 0
    958c:	d0 e0       	ldi	r29, 0x00	; 0
    958e:	0f c0       	rjmp	.+30     	; 0x95ae <f_puts+0x34>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    9590:	99 27       	eor	r25, r25
    9592:	87 fd       	sbrc	r24, 7
    9594:	90 95       	com	r25
    9596:	b7 01       	movw	r22, r14
    9598:	0e 94 92 4a 	call	0x9524	; 0x9524 <f_putc>
    959c:	8f 5f       	subi	r24, 0xFF	; 255
    959e:	9f 4f       	sbci	r25, 0xFF	; 255
    95a0:	19 f4       	brne	.+6      	; 0x95a8 <f_puts+0x2e>
    95a2:	cf ef       	ldi	r28, 0xFF	; 255
    95a4:	df ef       	ldi	r29, 0xFF	; 255
    95a6:	07 c0       	rjmp	.+14     	; 0x95b6 <f_puts+0x3c>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    95a8:	0f 5f       	subi	r16, 0xFF	; 255
    95aa:	1f 4f       	sbci	r17, 0xFF	; 255
    95ac:	21 96       	adiw	r28, 0x01	; 1
    95ae:	f8 01       	movw	r30, r16
    95b0:	80 81       	ld	r24, Z
    95b2:	88 23       	and	r24, r24
    95b4:	69 f7       	brne	.-38     	; 0x9590 <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    95b6:	ce 01       	movw	r24, r28
    95b8:	cd b7       	in	r28, 0x3d	; 61
    95ba:	de b7       	in	r29, 0x3e	; 62
    95bc:	e6 e0       	ldi	r30, 0x06	; 6
    95be:	0c 94 d0 57 	jmp	0xafa0	; 0xafa0 <__epilogue_restores__+0x18>

000095c2 <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    95c2:	a3 e1       	ldi	r26, 0x13	; 19
    95c4:	b0 e0       	ldi	r27, 0x00	; 0
    95c6:	e7 ee       	ldi	r30, 0xE7	; 231
    95c8:	fa e4       	ldi	r31, 0x4A	; 74
    95ca:	0c 94 a8 57 	jmp	0xaf50	; 0xaf50 <__prologue_saves__>
    95ce:	6b a4       	ldd	r6, Y+43	; 0x2b
    95d0:	7c a4       	ldd	r7, Y+44	; 0x2c
    95d2:	8e 01       	movw	r16, r28
    95d4:	03 5d       	subi	r16, 0xD3	; 211
    95d6:	1f 4f       	sbci	r17, 0xFF	; 255
    95d8:	19 8a       	std	Y+17, r1	; 0x11
    95da:	1a 8a       	std	Y+18, r1	; 0x12
    95dc:	20 e0       	ldi	r18, 0x00	; 0
    95de:	30 e0       	ldi	r19, 0x00	; 0


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    95e0:	d3 01       	movw	r26, r6
    95e2:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    95e4:	88 23       	and	r24, r24
    95e6:	09 f4       	brne	.+2      	; 0x95ea <f_printf+0x28>
    95e8:	17 c1       	rjmp	.+558    	; 0x9818 <f_printf+0x256>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    95ea:	08 94       	sec
    95ec:	61 1c       	adc	r6, r1
    95ee:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    95f0:	85 32       	cpi	r24, 0x25	; 37
    95f2:	71 f0       	breq	.+28     	; 0x9610 <f_printf+0x4e>
			cc = f_putc(c, fil);
    95f4:	90 e0       	ldi	r25, 0x00	; 0
    95f6:	69 a5       	ldd	r22, Y+41	; 0x29
    95f8:	7a a5       	ldd	r23, Y+42	; 0x2a
    95fa:	0e 94 92 4a 	call	0x9524	; 0x9524 <f_putc>
    95fe:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    9600:	bf ef       	ldi	r27, 0xFF	; 255
    9602:	8f 3f       	cpi	r24, 0xFF	; 255
    9604:	9b 07       	cpc	r25, r27
    9606:	11 f4       	brne	.+4      	; 0x960c <f_printf+0x4a>
    9608:	48 01       	movw	r8, r16
    960a:	fa c0       	rjmp	.+500    	; 0x9800 <f_printf+0x23e>
    960c:	48 01       	movw	r8, r16
    960e:	4c c0       	rjmp	.+152    	; 0x96a8 <f_printf+0xe6>
			continue;
		}
		w = f = 0;
		c = *str++;
    9610:	d3 01       	movw	r26, r6
    9612:	ed 91       	ld	r30, X+
    9614:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    9616:	e0 33       	cpi	r30, 0x30	; 48
    9618:	11 f0       	breq	.+4      	; 0x961e <f_printf+0x5c>
    961a:	1b 8a       	std	Y+19, r1	; 0x13
    961c:	04 c0       	rjmp	.+8      	; 0x9626 <f_printf+0x64>
			f = 1; c = *str++;
    961e:	ed 91       	ld	r30, X+
    9620:	3d 01       	movw	r6, r26
    9622:	b1 e0       	ldi	r27, 0x01	; 1
    9624:	bb 8b       	std	Y+19, r27	; 0x13
    9626:	aa 24       	eor	r10, r10
    9628:	bb 24       	eor	r11, r11
    962a:	13 c0       	rjmp	.+38     	; 0x9652 <f_printf+0x90>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    962c:	c5 01       	movw	r24, r10
    962e:	53 e0       	ldi	r21, 0x03	; 3
    9630:	88 0f       	add	r24, r24
    9632:	99 1f       	adc	r25, r25
    9634:	5a 95       	dec	r21
    9636:	e1 f7       	brne	.-8      	; 0x9630 <f_printf+0x6e>
    9638:	aa 0c       	add	r10, r10
    963a:	bb 1c       	adc	r11, r11
    963c:	a8 0e       	add	r10, r24
    963e:	b9 1e       	adc	r11, r25
    9640:	ae 0e       	add	r10, r30
    9642:	b1 1c       	adc	r11, r1
    9644:	e0 ed       	ldi	r30, 0xD0	; 208
    9646:	ff ef       	ldi	r31, 0xFF	; 255
    9648:	ae 0e       	add	r10, r30
    964a:	bf 1e       	adc	r11, r31
			c = *str++;
    964c:	d3 01       	movw	r26, r6
    964e:	ed 91       	ld	r30, X+
    9650:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    9652:	8e 2f       	mov	r24, r30
    9654:	80 53       	subi	r24, 0x30	; 48
    9656:	8a 30       	cpi	r24, 0x0A	; 10
    9658:	48 f3       	brcs	.-46     	; 0x962c <f_printf+0x6a>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    965a:	ec 36       	cpi	r30, 0x6C	; 108
    965c:	31 f4       	brne	.+12     	; 0x966a <f_printf+0xa8>
			f |= 2; c = *str++;
    965e:	bb 89       	ldd	r27, Y+19	; 0x13
    9660:	b2 60       	ori	r27, 0x02	; 2
    9662:	bb 8b       	std	Y+19, r27	; 0x13
    9664:	d3 01       	movw	r26, r6
    9666:	ed 91       	ld	r30, X+
    9668:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    966a:	e3 37       	cpi	r30, 0x73	; 115
    966c:	49 f4       	brne	.+18     	; 0x9680 <f_printf+0xbe>
			cc = f_puts(va_arg(arp, char*), fil);
    966e:	92 e0       	ldi	r25, 0x02	; 2
    9670:	89 2e       	mov	r8, r25
    9672:	91 2c       	mov	r9, r1
    9674:	80 0e       	add	r8, r16
    9676:	91 1e       	adc	r9, r17
    9678:	f8 01       	movw	r30, r16
    967a:	80 81       	ld	r24, Z
    967c:	91 81       	ldd	r25, Z+1	; 0x01
    967e:	bb c0       	rjmp	.+374    	; 0x97f6 <f_printf+0x234>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    9680:	e3 36       	cpi	r30, 0x63	; 99
    9682:	a9 f4       	brne	.+42     	; 0x96ae <f_printf+0xec>
			cc = f_putc(va_arg(arp, int), fil);
    9684:	82 e0       	ldi	r24, 0x02	; 2
    9686:	88 2e       	mov	r8, r24
    9688:	91 2c       	mov	r9, r1
    968a:	80 0e       	add	r8, r16
    968c:	91 1e       	adc	r9, r17
    968e:	d8 01       	movw	r26, r16
    9690:	8d 91       	ld	r24, X+
    9692:	9c 91       	ld	r25, X
    9694:	69 a5       	ldd	r22, Y+41	; 0x29
    9696:	7a a5       	ldd	r23, Y+42	; 0x2a
    9698:	0e 94 92 4a 	call	0x9524	; 0x9524 <f_putc>
    969c:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    969e:	bf ef       	ldi	r27, 0xFF	; 255
    96a0:	8f 3f       	cpi	r24, 0xFF	; 255
    96a2:	9b 07       	cpc	r25, r27
    96a4:	09 f4       	brne	.+2      	; 0x96a8 <f_printf+0xe6>
    96a6:	ac c0       	rjmp	.+344    	; 0x9800 <f_printf+0x23e>
    96a8:	21 e0       	ldi	r18, 0x01	; 1
    96aa:	30 e0       	ldi	r19, 0x00	; 0
    96ac:	a9 c0       	rjmp	.+338    	; 0x9800 <f_printf+0x23e>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    96ae:	e4 36       	cpi	r30, 0x64	; 100
    96b0:	39 f0       	breq	.+14     	; 0x96c0 <f_printf+0xfe>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    96b2:	e5 37       	cpi	r30, 0x75	; 117
    96b4:	29 f0       	breq	.+10     	; 0x96c0 <f_printf+0xfe>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    96b6:	e8 35       	cpi	r30, 0x58	; 88
    96b8:	09 f0       	breq	.+2      	; 0x96bc <f_printf+0xfa>
    96ba:	ae c0       	rjmp	.+348    	; 0x9818 <f_printf+0x256>
    96bc:	20 e1       	ldi	r18, 0x10	; 16
    96be:	01 c0       	rjmp	.+2      	; 0x96c2 <f_printf+0x100>
    96c0:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    96c2:	fb 89       	ldd	r31, Y+19	; 0x13
    96c4:	f1 ff       	sbrs	r31, 1
    96c6:	0d c0       	rjmp	.+26     	; 0x96e2 <f_printf+0x120>
			val = (ULONG)va_arg(arp, long);
    96c8:	b4 e0       	ldi	r27, 0x04	; 4
    96ca:	8b 2e       	mov	r8, r27
    96cc:	91 2c       	mov	r9, r1
    96ce:	80 0e       	add	r8, r16
    96d0:	91 1e       	adc	r9, r17
    96d2:	d8 01       	movw	r26, r16
    96d4:	ed 90       	ld	r14, X+
    96d6:	fd 90       	ld	r15, X+
    96d8:	0d 91       	ld	r16, X+
    96da:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    96dc:	e4 36       	cpi	r30, 0x64	; 100
    96de:	09 f5       	brne	.+66     	; 0x9722 <f_printf+0x160>
    96e0:	13 c0       	rjmp	.+38     	; 0x9708 <f_printf+0x146>
    96e2:	c8 01       	movw	r24, r16
    96e4:	02 96       	adiw	r24, 0x02	; 2
    96e6:	d8 01       	movw	r26, r16
    96e8:	6d 91       	ld	r22, X+
    96ea:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    96ec:	e4 36       	cpi	r30, 0x64	; 100
    96ee:	39 f4       	brne	.+14     	; 0x96fe <f_printf+0x13c>
    96f0:	4c 01       	movw	r8, r24
    96f2:	7b 01       	movw	r14, r22
    96f4:	00 27       	eor	r16, r16
    96f6:	f7 fc       	sbrc	r15, 7
    96f8:	00 95       	com	r16
    96fa:	10 2f       	mov	r17, r16
    96fc:	05 c0       	rjmp	.+10     	; 0x9708 <f_printf+0x146>
    96fe:	4c 01       	movw	r8, r24
    9700:	7b 01       	movw	r14, r22
    9702:	00 e0       	ldi	r16, 0x00	; 0
    9704:	10 e0       	ldi	r17, 0x00	; 0
    9706:	0d c0       	rjmp	.+26     	; 0x9722 <f_printf+0x160>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    9708:	17 ff       	sbrs	r17, 7
    970a:	0b c0       	rjmp	.+22     	; 0x9722 <f_printf+0x160>
				val = 0 - val;
    970c:	10 95       	com	r17
    970e:	00 95       	com	r16
    9710:	f0 94       	com	r15
    9712:	e0 94       	com	r14
    9714:	e1 1c       	adc	r14, r1
    9716:	f1 1c       	adc	r15, r1
    9718:	01 1d       	adc	r16, r1
    971a:	11 1d       	adc	r17, r1
				f |= 4;
    971c:	bb 89       	ldd	r27, Y+19	; 0x13
    971e:	b4 60       	ori	r27, 0x04	; 4
    9720:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    9722:	18 8a       	std	Y+16, r1	; 0x10
    9724:	af e0       	ldi	r26, 0x0F	; 15
    9726:	ca 2e       	mov	r12, r26
    9728:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    972a:	22 2e       	mov	r2, r18
    972c:	33 24       	eor	r3, r3
    972e:	44 24       	eor	r4, r4
    9730:	55 24       	eor	r5, r5
    9732:	c8 01       	movw	r24, r16
    9734:	b7 01       	movw	r22, r14
    9736:	a2 01       	movw	r20, r4
    9738:	91 01       	movw	r18, r2
    973a:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    973e:	86 2f       	mov	r24, r22
    9740:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    9742:	8a 33       	cpi	r24, 0x3A	; 58
    9744:	08 f0       	brcs	.+2      	; 0x9748 <f_printf+0x186>
    9746:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    9748:	08 94       	sec
    974a:	c1 08       	sbc	r12, r1
    974c:	d1 08       	sbc	r13, r1
    974e:	e1 e0       	ldi	r30, 0x01	; 1
    9750:	f0 e0       	ldi	r31, 0x00	; 0
    9752:	ec 0f       	add	r30, r28
    9754:	fd 1f       	adc	r31, r29
    9756:	ec 0d       	add	r30, r12
    9758:	fd 1d       	adc	r31, r13
    975a:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    975c:	c1 14       	cp	r12, r1
    975e:	d1 04       	cpc	r13, r1
    9760:	e9 f0       	breq	.+58     	; 0x979c <f_printf+0x1da>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    9762:	c8 01       	movw	r24, r16
    9764:	b7 01       	movw	r22, r14
    9766:	a2 01       	movw	r20, r4
    9768:	91 01       	movw	r18, r2
    976a:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    976e:	c9 01       	movw	r24, r18
    9770:	da 01       	movw	r26, r20
    9772:	7c 01       	movw	r14, r24
    9774:	8d 01       	movw	r16, r26
		} while (i && val);
    9776:	e1 14       	cp	r14, r1
    9778:	f1 04       	cpc	r15, r1
    977a:	01 05       	cpc	r16, r1
    977c:	11 05       	cpc	r17, r1
    977e:	c9 f6       	brne	.-78     	; 0x9732 <f_printf+0x170>
		if (i && (f & 4)) s[--i] = '-';
    9780:	eb 89       	ldd	r30, Y+19	; 0x13
    9782:	e2 ff       	sbrs	r30, 2
    9784:	0b c0       	rjmp	.+22     	; 0x979c <f_printf+0x1da>
    9786:	08 94       	sec
    9788:	c1 08       	sbc	r12, r1
    978a:	d1 08       	sbc	r13, r1
    978c:	e1 e0       	ldi	r30, 0x01	; 1
    978e:	f0 e0       	ldi	r31, 0x00	; 0
    9790:	ec 0f       	add	r30, r28
    9792:	fd 1f       	adc	r31, r29
    9794:	ec 0d       	add	r30, r12
    9796:	fd 1d       	adc	r31, r13
    9798:	4d e2       	ldi	r20, 0x2D	; 45
    979a:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    979c:	8f e0       	ldi	r24, 0x0F	; 15
    979e:	90 e0       	ldi	r25, 0x00	; 0
    97a0:	8a 19       	sub	r24, r10
    97a2:	9b 09       	sbc	r25, r11
    97a4:	08 94       	sec
    97a6:	c1 08       	sbc	r12, r1
    97a8:	d1 08       	sbc	r13, r1
    97aa:	e1 e0       	ldi	r30, 0x01	; 1
    97ac:	f0 e0       	ldi	r31, 0x00	; 0
    97ae:	ec 0f       	add	r30, r28
    97b0:	fd 1f       	adc	r31, r29
    97b2:	ec 0d       	add	r30, r12
    97b4:	fd 1d       	adc	r31, r13
    97b6:	08 94       	sec
    97b8:	c1 1c       	adc	r12, r1
    97ba:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    97bc:	ab 89       	ldd	r26, Y+19	; 0x13
    97be:	2a 2f       	mov	r18, r26
    97c0:	30 e0       	ldi	r19, 0x00	; 0
    97c2:	21 70       	andi	r18, 0x01	; 1
    97c4:	30 70       	andi	r19, 0x00	; 0
    97c6:	0b c0       	rjmp	.+22     	; 0x97de <f_printf+0x21c>
    97c8:	08 94       	sec
    97ca:	c1 08       	sbc	r12, r1
    97cc:	d1 08       	sbc	r13, r1
    97ce:	21 15       	cp	r18, r1
    97d0:	31 05       	cpc	r19, r1
    97d2:	11 f4       	brne	.+4      	; 0x97d8 <f_printf+0x216>
    97d4:	40 e2       	ldi	r20, 0x20	; 32
    97d6:	01 c0       	rjmp	.+2      	; 0x97da <f_printf+0x218>
    97d8:	40 e3       	ldi	r20, 0x30	; 48
    97da:	40 83       	st	Z, r20
    97dc:	31 97       	sbiw	r30, 0x01	; 1
    97de:	c1 14       	cp	r12, r1
    97e0:	d1 04       	cpc	r13, r1
    97e2:	19 f0       	breq	.+6      	; 0x97ea <f_printf+0x228>
    97e4:	8c 15       	cp	r24, r12
    97e6:	9d 05       	cpc	r25, r13
    97e8:	7c f3       	brlt	.-34     	; 0x97c8 <f_printf+0x206>
		cc = f_puts(&s[i], fil);
    97ea:	81 e0       	ldi	r24, 0x01	; 1
    97ec:	90 e0       	ldi	r25, 0x00	; 0
    97ee:	8c 0f       	add	r24, r28
    97f0:	9d 1f       	adc	r25, r29
    97f2:	8c 0d       	add	r24, r12
    97f4:	9d 1d       	adc	r25, r13
    97f6:	69 a5       	ldd	r22, Y+41	; 0x29
    97f8:	7a a5       	ldd	r23, Y+42	; 0x2a
    97fa:	0e 94 bd 4a 	call	0x957a	; 0x957a <f_puts>
    97fe:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    9800:	e9 89       	ldd	r30, Y+17	; 0x11
    9802:	fa 89       	ldd	r31, Y+18	; 0x12
    9804:	e2 0f       	add	r30, r18
    9806:	f3 1f       	adc	r31, r19
    9808:	e9 8b       	std	Y+17, r30	; 0x11
    980a:	fa 8b       	std	Y+18, r31	; 0x12
    980c:	ff ef       	ldi	r31, 0xFF	; 255
    980e:	2f 3f       	cpi	r18, 0xFF	; 255
    9810:	3f 07       	cpc	r19, r31
    9812:	41 f0       	breq	.+16     	; 0x9824 <f_printf+0x262>
    9814:	84 01       	movw	r16, r8
    9816:	e4 ce       	rjmp	.-568    	; 0x95e0 <f_printf+0x1e>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    9818:	4f ef       	ldi	r20, 0xFF	; 255
    981a:	2f 3f       	cpi	r18, 0xFF	; 255
    981c:	34 07       	cpc	r19, r20
    981e:	11 f0       	breq	.+4      	; 0x9824 <f_printf+0x262>
    9820:	29 89       	ldd	r18, Y+17	; 0x11
    9822:	3a 89       	ldd	r19, Y+18	; 0x12
}
    9824:	c9 01       	movw	r24, r18
    9826:	63 96       	adiw	r28, 0x13	; 19
    9828:	e2 e1       	ldi	r30, 0x12	; 18
    982a:	0c 94 c4 57 	jmp	0xaf88	; 0xaf88 <__epilogue_restores__>

0000982e <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    982e:	a4 e2       	ldi	r26, 0x24	; 36
    9830:	b0 e0       	ldi	r27, 0x00	; 0
    9832:	ed e1       	ldi	r30, 0x1D	; 29
    9834:	fc e4       	ldi	r31, 0x4C	; 76
    9836:	0c 94 ab 57 	jmp	0xaf56	; 0xaf56 <__prologue_saves__+0x6>
    983a:	5c 01       	movw	r10, r24
    983c:	6b a3       	std	Y+35, r22	; 0x23
    983e:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    9840:	dc 01       	movw	r26, r24
    9842:	1d 92       	st	X+, r1
    9844:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    9846:	0f e1       	ldi	r16, 0x1F	; 31
    9848:	50 2e       	mov	r5, r16
    984a:	54 22       	and	r5, r20
	res = auto_mount(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    984c:	8e 01       	movw	r16, r28
    984e:	03 5f       	subi	r16, 0xF3	; 243
    9850:	1f 4f       	sbci	r17, 0xFF	; 255
    9852:	4e 71       	andi	r20, 0x1E	; 30
    9854:	ce 01       	movw	r24, r28
    9856:	83 96       	adiw	r24, 0x23	; 35
    9858:	b8 01       	movw	r22, r16
    985a:	0e 94 50 36 	call	0x6ca0	; 0x6ca0 <auto_mount>
#else
	mode &= FA_READ;
	res = auto_mount(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    985e:	00 97       	sbiw	r24, 0x00	; 0
    9860:	11 f0       	breq	.+4      	; 0x9866 <f_open+0x38>
    9862:	9c 01       	movw	r18, r24
    9864:	f6 c0       	rjmp	.+492    	; 0x9a52 <f_open+0x224>
	INITBUF(dj, sfn, lfn);
    9866:	ce 01       	movw	r24, r28
    9868:	01 96       	adiw	r24, 0x01	; 1
    986a:	89 a3       	std	Y+33, r24	; 0x21
    986c:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    986e:	6b a1       	ldd	r22, Y+35	; 0x23
    9870:	7c a1       	ldd	r23, Y+36	; 0x24
    9872:	c8 01       	movw	r24, r16
    9874:	0e 94 12 40 	call	0x8024	; 0x8024 <follow_path>
    9878:	9c 01       	movw	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    987a:	45 2d       	mov	r20, r5
    987c:	50 e0       	ldi	r21, 0x00	; 0
    987e:	ca 01       	movw	r24, r20
    9880:	8c 71       	andi	r24, 0x1C	; 28
    9882:	90 70       	andi	r25, 0x00	; 0
    9884:	89 2b       	or	r24, r25
    9886:	09 f4       	brne	.+2      	; 0x988a <f_open+0x5c>
    9888:	7e c0       	rjmp	.+252    	; 0x9986 <f_open+0x158>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    988a:	21 15       	cp	r18, r1
    988c:	31 05       	cpc	r19, r1
    988e:	81 f0       	breq	.+32     	; 0x98b0 <f_open+0x82>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    9890:	24 30       	cpi	r18, 0x04	; 4
    9892:	31 05       	cpc	r19, r1
    9894:	09 f0       	breq	.+2      	; 0x9898 <f_open+0x6a>
    9896:	dd c0       	rjmp	.+442    	; 0x9a52 <f_open+0x224>
				res = dir_register(&dj);
    9898:	c8 01       	movw	r24, r16
    989a:	0e 94 36 42 	call	0x846c	; 0x846c <dir_register>
    989e:	9c 01       	movw	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    98a0:	00 97       	sbiw	r24, 0x00	; 0
    98a2:	09 f0       	breq	.+2      	; 0x98a6 <f_open+0x78>
    98a4:	d6 c0       	rjmp	.+428    	; 0x9a52 <f_open+0x224>
			mode |= FA_CREATE_ALWAYS;
    98a6:	b8 e0       	ldi	r27, 0x08	; 8
    98a8:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    98aa:	cf 8c       	ldd	r12, Y+31	; 0x1f
    98ac:	d8 a0       	ldd	r13, Y+32	; 0x20
    98ae:	57 c0       	rjmp	.+174    	; 0x995e <f_open+0x130>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    98b0:	52 fe       	sbrs	r5, 2
    98b2:	03 c0       	rjmp	.+6      	; 0x98ba <f_open+0x8c>
    98b4:	28 e0       	ldi	r18, 0x08	; 8
    98b6:	30 e0       	ldi	r19, 0x00	; 0
    98b8:	cc c0       	rjmp	.+408    	; 0x9a52 <f_open+0x224>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    98ba:	cf 8c       	ldd	r12, Y+31	; 0x1f
    98bc:	d8 a0       	ldd	r13, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    98be:	c1 14       	cp	r12, r1
    98c0:	d1 04       	cpc	r13, r1
    98c2:	09 f4       	brne	.+2      	; 0x98c6 <f_open+0x98>
    98c4:	c1 c0       	rjmp	.+386    	; 0x9a48 <f_open+0x21a>
    98c6:	f6 01       	movw	r30, r12
    98c8:	83 85       	ldd	r24, Z+11	; 0x0b
    98ca:	81 71       	andi	r24, 0x11	; 17
    98cc:	09 f0       	breq	.+2      	; 0x98d0 <f_open+0xa2>
    98ce:	bc c0       	rjmp	.+376    	; 0x9a48 <f_open+0x21a>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    98d0:	53 fe       	sbrs	r5, 3
    98d2:	45 c0       	rjmp	.+138    	; 0x995e <f_open+0x130>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    98d4:	84 89       	ldd	r24, Z+20	; 0x14
    98d6:	95 89       	ldd	r25, Z+21	; 0x15
    98d8:	a0 e0       	ldi	r26, 0x00	; 0
    98da:	b0 e0       	ldi	r27, 0x00	; 0
    98dc:	8c 01       	movw	r16, r24
    98de:	ff 24       	eor	r15, r15
    98e0:	ee 24       	eor	r14, r14
    98e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    98e4:	93 8d       	ldd	r25, Z+27	; 0x1b
    98e6:	a0 e0       	ldi	r26, 0x00	; 0
    98e8:	b0 e0       	ldi	r27, 0x00	; 0
    98ea:	e8 2a       	or	r14, r24
    98ec:	f9 2a       	or	r15, r25
    98ee:	0a 2b       	or	r16, r26
    98f0:	1b 2b       	or	r17, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    98f2:	14 8a       	std	Z+20, r1	; 0x14
    98f4:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    98f6:	12 8e       	std	Z+26, r1	; 0x1a
    98f8:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    98fa:	d6 01       	movw	r26, r12
    98fc:	5c 96       	adiw	r26, 0x1c	; 28
    98fe:	1d 92       	st	X+, r1
    9900:	1d 92       	st	X+, r1
    9902:	1d 92       	st	X+, r1
    9904:	1c 92       	st	X, r1
    9906:	5f 97       	sbiw	r26, 0x1f	; 31
				dj.fs->wflag = 1;
    9908:	ed 85       	ldd	r30, Y+13	; 0x0d
    990a:	fe 85       	ldd	r31, Y+14	; 0x0e
    990c:	81 e0       	ldi	r24, 0x01	; 1
    990e:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    9910:	66 a4       	ldd	r6, Z+46	; 0x2e
    9912:	77 a4       	ldd	r7, Z+47	; 0x2f
    9914:	80 a8       	ldd	r8, Z+48	; 0x30
    9916:	91 a8       	ldd	r9, Z+49	; 0x31
				if (cl) {
    9918:	e1 14       	cp	r14, r1
    991a:	f1 04       	cpc	r15, r1
    991c:	01 05       	cpc	r16, r1
    991e:	11 05       	cpc	r17, r1
    9920:	a1 f0       	breq	.+40     	; 0x994a <f_open+0x11c>
					res = remove_chain(dj.fs, cl);
    9922:	cf 01       	movw	r24, r30
    9924:	b8 01       	movw	r22, r16
    9926:	a7 01       	movw	r20, r14
    9928:	0e 94 a6 3d 	call	0x7b4c	; 0x7b4c <remove_chain>
    992c:	9c 01       	movw	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    992e:	00 97       	sbiw	r24, 0x00	; 0
    9930:	09 f0       	breq	.+2      	; 0x9934 <f_open+0x106>
    9932:	8f c0       	rjmp	.+286    	; 0x9a52 <f_open+0x224>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    9934:	ed 85       	ldd	r30, Y+13	; 0x0d
    9936:	fe 85       	ldd	r31, Y+14	; 0x0e
    9938:	08 94       	sec
    993a:	e1 08       	sbc	r14, r1
    993c:	f1 08       	sbc	r15, r1
    993e:	01 09       	sbc	r16, r1
    9940:	11 09       	sbc	r17, r1
    9942:	e2 86       	std	Z+10, r14	; 0x0a
    9944:	f3 86       	std	Z+11, r15	; 0x0b
    9946:	04 87       	std	Z+12, r16	; 0x0c
    9948:	15 87       	std	Z+13, r17	; 0x0d
				}
				res = move_window(dj.fs, ps);
    994a:	8d 85       	ldd	r24, Y+13	; 0x0d
    994c:	9e 85       	ldd	r25, Y+14	; 0x0e
    994e:	b4 01       	movw	r22, r8
    9950:	a3 01       	movw	r20, r6
    9952:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    9956:	9c 01       	movw	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    9958:	00 97       	sbiw	r24, 0x00	; 0
    995a:	09 f0       	breq	.+2      	; 0x995e <f_open+0x130>
    995c:	7a c0       	rjmp	.+244    	; 0x9a52 <f_open+0x224>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    995e:	53 fe       	sbrs	r5, 3
    9960:	24 c0       	rjmp	.+72     	; 0x99aa <f_open+0x17c>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    9962:	f6 01       	movw	r30, r12
    9964:	13 86       	std	Z+11, r1	; 0x0b
			ps = get_fattime();
    9966:	0e 94 7f 54 	call	0xa8fe	; 0xa8fe <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    996a:	d6 01       	movw	r26, r12
    996c:	1e 96       	adiw	r26, 0x0e	; 14
    996e:	6d 93       	st	X+, r22
    9970:	7d 93       	st	X+, r23
    9972:	8d 93       	st	X+, r24
    9974:	9c 93       	st	X, r25
    9976:	51 97       	sbiw	r26, 0x11	; 17
			dj.fs->wflag = 1;
    9978:	ed 85       	ldd	r30, Y+13	; 0x0d
    997a:	fe 85       	ldd	r31, Y+14	; 0x0e
    997c:	81 e0       	ldi	r24, 0x01	; 1
    997e:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    9980:	b0 e2       	ldi	r27, 0x20	; 32
    9982:	5b 2a       	or	r5, r27
    9984:	12 c0       	rjmp	.+36     	; 0x99aa <f_open+0x17c>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    9986:	21 15       	cp	r18, r1
    9988:	31 05       	cpc	r19, r1
    998a:	09 f0       	breq	.+2      	; 0x998e <f_open+0x160>
    998c:	62 c0       	rjmp	.+196    	; 0x9a52 <f_open+0x224>
		dir = dj.dir;
    998e:	cf 8c       	ldd	r12, Y+31	; 0x1f
    9990:	d8 a0       	ldd	r13, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    9992:	c1 14       	cp	r12, r1
    9994:	d1 04       	cpc	r13, r1
    9996:	09 f4       	brne	.+2      	; 0x999a <f_open+0x16c>
    9998:	5a c0       	rjmp	.+180    	; 0x9a4e <f_open+0x220>
    999a:	f6 01       	movw	r30, r12
    999c:	83 85       	ldd	r24, Z+11	; 0x0b
    999e:	84 fd       	sbrc	r24, 4
    99a0:	56 c0       	rjmp	.+172    	; 0x9a4e <f_open+0x220>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    99a2:	51 fe       	sbrs	r5, 1
    99a4:	02 c0       	rjmp	.+4      	; 0x99aa <f_open+0x17c>
    99a6:	80 fd       	sbrc	r24, 0
    99a8:	4f c0       	rjmp	.+158    	; 0x9a48 <f_open+0x21a>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    99aa:	6d 85       	ldd	r22, Y+13	; 0x0d
    99ac:	7e 85       	ldd	r23, Y+14	; 0x0e
    99ae:	db 01       	movw	r26, r22
    99b0:	9e 96       	adiw	r26, 0x2e	; 46
    99b2:	2d 91       	ld	r18, X+
    99b4:	3d 91       	ld	r19, X+
    99b6:	4d 91       	ld	r20, X+
    99b8:	5c 91       	ld	r21, X
    99ba:	d1 97       	sbiw	r26, 0x31	; 49
    99bc:	f5 01       	movw	r30, r10
    99be:	22 8f       	std	Z+26, r18	; 0x1a
    99c0:	33 8f       	std	Z+27, r19	; 0x1b
    99c2:	44 8f       	std	Z+28, r20	; 0x1c
    99c4:	55 8f       	std	Z+29, r21	; 0x1d
	fp->dir_ptr = dj.dir;
    99c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    99c8:	98 a1       	ldd	r25, Y+32	; 0x20
    99ca:	86 8f       	std	Z+30, r24	; 0x1e
    99cc:	97 8f       	std	Z+31, r25	; 0x1f
#endif
	fp->flag = mode;					/* File access mode */
    99ce:	54 82       	std	Z+4, r5	; 0x04
	fp->org_clust =						/* File start cluster */
    99d0:	d6 01       	movw	r26, r12
    99d2:	54 96       	adiw	r26, 0x14	; 20
    99d4:	8d 91       	ld	r24, X+
    99d6:	9c 91       	ld	r25, X
    99d8:	55 97       	sbiw	r26, 0x15	; 21
    99da:	a0 e0       	ldi	r26, 0x00	; 0
    99dc:	b0 e0       	ldi	r27, 0x00	; 0
    99de:	dc 01       	movw	r26, r24
    99e0:	99 27       	eor	r25, r25
    99e2:	88 27       	eor	r24, r24
    99e4:	f6 01       	movw	r30, r12
    99e6:	22 8d       	ldd	r18, Z+26	; 0x1a
    99e8:	33 8d       	ldd	r19, Z+27	; 0x1b
    99ea:	40 e0       	ldi	r20, 0x00	; 0
    99ec:	50 e0       	ldi	r21, 0x00	; 0
    99ee:	82 2b       	or	r24, r18
    99f0:	93 2b       	or	r25, r19
    99f2:	a4 2b       	or	r26, r20
    99f4:	b5 2b       	or	r27, r21
    99f6:	f5 01       	movw	r30, r10
    99f8:	86 87       	std	Z+14, r24	; 0x0e
    99fa:	97 87       	std	Z+15, r25	; 0x0f
    99fc:	a0 8b       	std	Z+16, r26	; 0x10
    99fe:	b1 8b       	std	Z+17, r27	; 0x11
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    9a00:	f6 01       	movw	r30, r12
    9a02:	84 8d       	ldd	r24, Z+28	; 0x1c
    9a04:	95 8d       	ldd	r25, Z+29	; 0x1d
    9a06:	a6 8d       	ldd	r26, Z+30	; 0x1e
    9a08:	b7 8d       	ldd	r27, Z+31	; 0x1f
    9a0a:	f5 01       	movw	r30, r10
    9a0c:	82 87       	std	Z+10, r24	; 0x0a
    9a0e:	93 87       	std	Z+11, r25	; 0x0b
    9a10:	a4 87       	std	Z+12, r26	; 0x0c
    9a12:	b5 87       	std	Z+13, r27	; 0x0d
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    9a14:	d5 01       	movw	r26, r10
    9a16:	16 96       	adiw	r26, 0x06	; 6
    9a18:	1d 92       	st	X+, r1
    9a1a:	1d 92       	st	X+, r1
    9a1c:	1d 92       	st	X+, r1
    9a1e:	1c 92       	st	X, r1
    9a20:	19 97       	sbiw	r26, 0x09	; 9
    9a22:	8f ef       	ldi	r24, 0xFF	; 255
    9a24:	15 96       	adiw	r26, 0x05	; 5
    9a26:	8c 93       	st	X, r24
	fp->dsect = 0;
    9a28:	16 8a       	std	Z+22, r1	; 0x16
    9a2a:	17 8a       	std	Z+23, r1	; 0x17
    9a2c:	10 8e       	std	Z+24, r1	; 0x18
    9a2e:	11 8e       	std	Z+25, r1	; 0x19
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    9a30:	60 83       	st	Z, r22
    9a32:	71 83       	std	Z+1, r23	; 0x01
    9a34:	db 01       	movw	r26, r22
    9a36:	15 96       	adiw	r26, 0x05	; 5
    9a38:	8d 91       	ld	r24, X+
    9a3a:	9c 91       	ld	r25, X
    9a3c:	16 97       	sbiw	r26, 0x06	; 6
    9a3e:	82 83       	std	Z+2, r24	; 0x02
    9a40:	93 83       	std	Z+3, r25	; 0x03
    9a42:	20 e0       	ldi	r18, 0x00	; 0
    9a44:	30 e0       	ldi	r19, 0x00	; 0
    9a46:	05 c0       	rjmp	.+10     	; 0x9a52 <f_open+0x224>

	LEAVE_FF(dj.fs, FR_OK);
    9a48:	27 e0       	ldi	r18, 0x07	; 7
    9a4a:	30 e0       	ldi	r19, 0x00	; 0
    9a4c:	02 c0       	rjmp	.+4      	; 0x9a52 <f_open+0x224>
    9a4e:	24 e0       	ldi	r18, 0x04	; 4
    9a50:	30 e0       	ldi	r19, 0x00	; 0
}
    9a52:	c9 01       	movw	r24, r18
    9a54:	a4 96       	adiw	r28, 0x24	; 36
    9a56:	ef e0       	ldi	r30, 0x0F	; 15
    9a58:	0c 94 c7 57 	jmp	0xaf8e	; 0xaf8e <__epilogue_restores__+0x6>

00009a5c <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    9a5c:	a4 e0       	ldi	r26, 0x04	; 4
    9a5e:	b0 e0       	ldi	r27, 0x00	; 0
    9a60:	e4 e3       	ldi	r30, 0x34	; 52
    9a62:	fd e4       	ldi	r31, 0x4D	; 77
    9a64:	0c 94 a9 57 	jmp	0xaf52	; 0xaf52 <__prologue_saves__+0x2>
    9a68:	8b 83       	std	Y+3, r24	; 0x03
    9a6a:	9c 83       	std	Y+4, r25	; 0x04
    9a6c:	16 2f       	mov	r17, r22
    9a6e:	07 2f       	mov	r16, r23
    9a70:	3a 01       	movw	r6, r20
    9a72:	29 83       	std	Y+1, r18	; 0x01
    9a74:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;
    9a76:	d9 01       	movw	r26, r18
    9a78:	1d 92       	st	X+, r1
    9a7a:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    9a7c:	fc 01       	movw	r30, r24
    9a7e:	62 81       	ldd	r22, Z+2	; 0x02
    9a80:	73 81       	ldd	r23, Z+3	; 0x03
    9a82:	80 81       	ld	r24, Z
    9a84:	91 81       	ldd	r25, Z+1	; 0x01
    9a86:	0e 94 e9 35 	call	0x6bd2	; 0x6bd2 <validate>
    9a8a:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    9a8c:	00 97       	sbiw	r24, 0x00	; 0
    9a8e:	09 f0       	breq	.+2      	; 0x9a92 <f_read+0x36>
    9a90:	8a c1       	rjmp	.+788    	; 0x9da6 <f_read+0x34a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    9a92:	ab 81       	ldd	r26, Y+3	; 0x03
    9a94:	bc 81       	ldd	r27, Y+4	; 0x04
    9a96:	14 96       	adiw	r26, 0x04	; 4
    9a98:	8c 91       	ld	r24, X
    9a9a:	87 fd       	sbrc	r24, 7
    9a9c:	60 c0       	rjmp	.+192    	; 0x9b5e <f_read+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    9a9e:	80 fd       	sbrc	r24, 0
    9aa0:	04 c0       	rjmp	.+8      	; 0x9aaa <f_read+0x4e>
    9aa2:	97 e0       	ldi	r25, 0x07	; 7
    9aa4:	89 2e       	mov	r8, r25
    9aa6:	91 2c       	mov	r9, r1
    9aa8:	7e c1       	rjmp	.+764    	; 0x9da6 <f_read+0x34a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    9aaa:	eb 81       	ldd	r30, Y+3	; 0x03
    9aac:	fc 81       	ldd	r31, Y+4	; 0x04
    9aae:	22 85       	ldd	r18, Z+10	; 0x0a
    9ab0:	33 85       	ldd	r19, Z+11	; 0x0b
    9ab2:	44 85       	ldd	r20, Z+12	; 0x0c
    9ab4:	55 85       	ldd	r21, Z+13	; 0x0d
    9ab6:	86 81       	ldd	r24, Z+6	; 0x06
    9ab8:	97 81       	ldd	r25, Z+7	; 0x07
    9aba:	a0 85       	ldd	r26, Z+8	; 0x08
    9abc:	b1 85       	ldd	r27, Z+9	; 0x09
    9abe:	28 1b       	sub	r18, r24
    9ac0:	39 0b       	sbc	r19, r25
    9ac2:	4a 0b       	sbc	r20, r26
    9ac4:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    9ac6:	c3 01       	movw	r24, r6
    9ac8:	a0 e0       	ldi	r26, 0x00	; 0
    9aca:	b0 e0       	ldi	r27, 0x00	; 0
    9acc:	28 17       	cp	r18, r24
    9ace:	39 07       	cpc	r19, r25
    9ad0:	4a 07       	cpc	r20, r26
    9ad2:	5b 07       	cpc	r21, r27
    9ad4:	08 f4       	brcc	.+2      	; 0x9ad8 <f_read+0x7c>
    9ad6:	39 01       	movw	r6, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    9ad8:	81 2f       	mov	r24, r17
    9ada:	90 2f       	mov	r25, r16
    9adc:	9c 01       	movw	r18, r24
    9ade:	29 01       	movw	r4, r18
    9ae0:	5e c1       	rjmp	.+700    	; 0x9d9e <f_read+0x342>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    9ae2:	ab 81       	ldd	r26, Y+3	; 0x03
    9ae4:	bc 81       	ldd	r27, Y+4	; 0x04
    9ae6:	16 96       	adiw	r26, 0x06	; 6
    9ae8:	2d 91       	ld	r18, X+
    9aea:	3d 91       	ld	r19, X+
    9aec:	4d 91       	ld	r20, X+
    9aee:	5c 91       	ld	r21, X
    9af0:	19 97       	sbiw	r26, 0x09	; 9
    9af2:	da 01       	movw	r26, r20
    9af4:	c9 01       	movw	r24, r18
    9af6:	91 70       	andi	r25, 0x01	; 1
    9af8:	a0 70       	andi	r26, 0x00	; 0
    9afa:	b0 70       	andi	r27, 0x00	; 0
    9afc:	00 97       	sbiw	r24, 0x00	; 0
    9afe:	a1 05       	cpc	r26, r1
    9b00:	b1 05       	cpc	r27, r1
    9b02:	09 f0       	breq	.+2      	; 0x9b06 <f_read+0xaa>
    9b04:	ef c0       	rjmp	.+478    	; 0x9ce4 <f_read+0x288>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    9b06:	ab 81       	ldd	r26, Y+3	; 0x03
    9b08:	bc 81       	ldd	r27, Y+4	; 0x04
    9b0a:	ed 91       	ld	r30, X+
    9b0c:	fc 91       	ld	r31, X
    9b0e:	11 97       	sbiw	r26, 0x01	; 1
    9b10:	15 96       	adiw	r26, 0x05	; 5
    9b12:	9c 91       	ld	r25, X
    9b14:	15 97       	sbiw	r26, 0x05	; 5
    9b16:	82 81       	ldd	r24, Z+2	; 0x02
    9b18:	98 17       	cp	r25, r24
    9b1a:	e8 f1       	brcs	.+122    	; 0x9b96 <f_read+0x13a>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    9b1c:	21 15       	cp	r18, r1
    9b1e:	31 05       	cpc	r19, r1
    9b20:	41 05       	cpc	r20, r1
    9b22:	51 05       	cpc	r21, r1
    9b24:	39 f4       	brne	.+14     	; 0x9b34 <f_read+0xd8>
    9b26:	1e 96       	adiw	r26, 0x0e	; 14
    9b28:	6d 91       	ld	r22, X+
    9b2a:	7d 91       	ld	r23, X+
    9b2c:	8d 91       	ld	r24, X+
    9b2e:	9c 91       	ld	r25, X
    9b30:	51 97       	sbiw	r26, 0x11	; 17
    9b32:	0b c0       	rjmp	.+22     	; 0x9b4a <f_read+0xee>
    9b34:	ab 81       	ldd	r26, Y+3	; 0x03
    9b36:	bc 81       	ldd	r27, Y+4	; 0x04
    9b38:	52 96       	adiw	r26, 0x12	; 18
    9b3a:	4d 91       	ld	r20, X+
    9b3c:	5d 91       	ld	r21, X+
    9b3e:	6d 91       	ld	r22, X+
    9b40:	7c 91       	ld	r23, X
    9b42:	55 97       	sbiw	r26, 0x15	; 21
    9b44:	cf 01       	movw	r24, r30
    9b46:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    9b4a:	62 30       	cpi	r22, 0x02	; 2
    9b4c:	71 05       	cpc	r23, r1
    9b4e:	81 05       	cpc	r24, r1
    9b50:	91 05       	cpc	r25, r1
    9b52:	48 f4       	brcc	.+18     	; 0x9b66 <f_read+0x10a>
    9b54:	eb 81       	ldd	r30, Y+3	; 0x03
    9b56:	fc 81       	ldd	r31, Y+4	; 0x04
    9b58:	84 81       	ldd	r24, Z+4	; 0x04
    9b5a:	80 68       	ori	r24, 0x80	; 128
    9b5c:	84 83       	std	Z+4, r24	; 0x04
    9b5e:	82 e0       	ldi	r24, 0x02	; 2
    9b60:	88 2e       	mov	r8, r24
    9b62:	91 2c       	mov	r9, r1
    9b64:	20 c1       	rjmp	.+576    	; 0x9da6 <f_read+0x34a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    9b66:	6f 3f       	cpi	r22, 0xFF	; 255
    9b68:	ff ef       	ldi	r31, 0xFF	; 255
    9b6a:	7f 07       	cpc	r23, r31
    9b6c:	ff ef       	ldi	r31, 0xFF	; 255
    9b6e:	8f 07       	cpc	r24, r31
    9b70:	ff ef       	ldi	r31, 0xFF	; 255
    9b72:	9f 07       	cpc	r25, r31
    9b74:	49 f4       	brne	.+18     	; 0x9b88 <f_read+0x12c>
    9b76:	ab 81       	ldd	r26, Y+3	; 0x03
    9b78:	bc 81       	ldd	r27, Y+4	; 0x04
    9b7a:	14 96       	adiw	r26, 0x04	; 4
    9b7c:	8c 91       	ld	r24, X
    9b7e:	14 97       	sbiw	r26, 0x04	; 4
    9b80:	80 68       	ori	r24, 0x80	; 128
    9b82:	14 96       	adiw	r26, 0x04	; 4
    9b84:	8c 93       	st	X, r24
    9b86:	c7 c0       	rjmp	.+398    	; 0x9d16 <f_read+0x2ba>
				fp->curr_clust = clst;				/* Update current cluster */
    9b88:	eb 81       	ldd	r30, Y+3	; 0x03
    9b8a:	fc 81       	ldd	r31, Y+4	; 0x04
    9b8c:	62 8b       	std	Z+18, r22	; 0x12
    9b8e:	73 8b       	std	Z+19, r23	; 0x13
    9b90:	84 8b       	std	Z+20, r24	; 0x14
    9b92:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    9b94:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    9b96:	ab 81       	ldd	r26, Y+3	; 0x03
    9b98:	bc 81       	ldd	r27, Y+4	; 0x04
    9b9a:	0d 91       	ld	r16, X+
    9b9c:	1c 91       	ld	r17, X
    9b9e:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    9ba0:	52 96       	adiw	r26, 0x12	; 18
    9ba2:	2d 91       	ld	r18, X+
    9ba4:	3d 91       	ld	r19, X+
    9ba6:	4d 91       	ld	r20, X+
    9ba8:	5c 91       	ld	r21, X
    9baa:	55 97       	sbiw	r26, 0x15	; 21
    9bac:	22 50       	subi	r18, 0x02	; 2
    9bae:	30 40       	sbci	r19, 0x00	; 0
    9bb0:	40 40       	sbci	r20, 0x00	; 0
    9bb2:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    9bb4:	f8 01       	movw	r30, r16
    9bb6:	86 8d       	ldd	r24, Z+30	; 0x1e
    9bb8:	97 8d       	ldd	r25, Z+31	; 0x1f
    9bba:	a0 a1       	ldd	r26, Z+32	; 0x20
    9bbc:	b1 a1       	ldd	r27, Z+33	; 0x21
    9bbe:	02 97       	sbiw	r24, 0x02	; 2
    9bc0:	a1 09       	sbc	r26, r1
    9bc2:	b1 09       	sbc	r27, r1
    9bc4:	28 17       	cp	r18, r24
    9bc6:	39 07       	cpc	r19, r25
    9bc8:	4a 07       	cpc	r20, r26
    9bca:	5b 07       	cpc	r21, r27
    9bcc:	b8 f4       	brcc	.+46     	; 0x9bfc <f_read+0x1a0>
	return clst * fs->csize + fs->database;
    9bce:	32 80       	ldd	r3, Z+2	; 0x02
    9bd0:	63 2d       	mov	r22, r3
    9bd2:	70 e0       	ldi	r23, 0x00	; 0
    9bd4:	80 e0       	ldi	r24, 0x00	; 0
    9bd6:	90 e0       	ldi	r25, 0x00	; 0
    9bd8:	0e 94 25 57 	call	0xae4a	; 0xae4a <__mulsi3>
    9bdc:	9b 01       	movw	r18, r22
    9bde:	ac 01       	movw	r20, r24
    9be0:	f8 01       	movw	r30, r16
    9be2:	82 a5       	ldd	r24, Z+42	; 0x2a
    9be4:	93 a5       	ldd	r25, Z+43	; 0x2b
    9be6:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9be8:	b5 a5       	ldd	r27, Z+45	; 0x2d
    9bea:	28 0f       	add	r18, r24
    9bec:	39 1f       	adc	r19, r25
    9bee:	4a 1f       	adc	r20, r26
    9bf0:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    9bf2:	21 15       	cp	r18, r1
    9bf4:	31 05       	cpc	r19, r1
    9bf6:	41 05       	cpc	r20, r1
    9bf8:	51 05       	cpc	r21, r1
    9bfa:	49 f4       	brne	.+18     	; 0x9c0e <f_read+0x1b2>
    9bfc:	ab 81       	ldd	r26, Y+3	; 0x03
    9bfe:	bc 81       	ldd	r27, Y+4	; 0x04
    9c00:	14 96       	adiw	r26, 0x04	; 4
    9c02:	8c 91       	ld	r24, X
    9c04:	14 97       	sbiw	r26, 0x04	; 4
    9c06:	80 68       	ori	r24, 0x80	; 128
    9c08:	14 96       	adiw	r26, 0x04	; 4
    9c0a:	8c 93       	st	X, r24
    9c0c:	a8 cf       	rjmp	.-176    	; 0x9b5e <f_read+0x102>
			sect += fp->csect;
    9c0e:	eb 81       	ldd	r30, Y+3	; 0x03
    9c10:	fc 81       	ldd	r31, Y+4	; 0x04
    9c12:	85 81       	ldd	r24, Z+5	; 0x05
    9c14:	69 01       	movw	r12, r18
    9c16:	7a 01       	movw	r14, r20
    9c18:	c8 0e       	add	r12, r24
    9c1a:	d1 1c       	adc	r13, r1
    9c1c:	e1 1c       	adc	r14, r1
    9c1e:	f1 1c       	adc	r15, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    9c20:	53 01       	movw	r10, r6
    9c22:	ab 2c       	mov	r10, r11
    9c24:	bb 24       	eor	r11, r11
    9c26:	a6 94       	lsr	r10
			if (cc) {								/* Read maximum contiguous sectors directly */
    9c28:	a1 14       	cp	r10, r1
    9c2a:	b1 04       	cpc	r11, r1
    9c2c:	09 f4       	brne	.+2      	; 0x9c30 <f_read+0x1d4>
    9c2e:	52 c0       	rjmp	.+164    	; 0x9cd4 <f_read+0x278>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    9c30:	28 2f       	mov	r18, r24
    9c32:	30 e0       	ldi	r19, 0x00	; 0
    9c34:	c5 01       	movw	r24, r10
    9c36:	82 0f       	add	r24, r18
    9c38:	93 1f       	adc	r25, r19
    9c3a:	63 2d       	mov	r22, r3
    9c3c:	70 e0       	ldi	r23, 0x00	; 0
    9c3e:	68 17       	cp	r22, r24
    9c40:	79 07       	cpc	r23, r25
    9c42:	18 f4       	brcc	.+6      	; 0x9c4a <f_read+0x1ee>
					cc = fp->fs->csize - fp->csect;
    9c44:	5b 01       	movw	r10, r22
    9c46:	a2 1a       	sub	r10, r18
    9c48:	b3 0a       	sbc	r11, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    9c4a:	d8 01       	movw	r26, r16
    9c4c:	11 96       	adiw	r26, 0x01	; 1
    9c4e:	8c 91       	ld	r24, X
    9c50:	b2 01       	movw	r22, r4
    9c52:	a7 01       	movw	r20, r14
    9c54:	96 01       	movw	r18, r12
    9c56:	0a 2d       	mov	r16, r10
    9c58:	0e 94 92 50 	call	0xa124	; 0xa124 <disk_read>
    9c5c:	89 2b       	or	r24, r25
    9c5e:	09 f0       	breq	.+2      	; 0x9c62 <f_read+0x206>
    9c60:	55 c0       	rjmp	.+170    	; 0x9d0c <f_read+0x2b0>
					ABORT(fp->fs, FR_DISK_ERR);
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
    9c62:	ab 81       	ldd	r26, Y+3	; 0x03
    9c64:	bc 81       	ldd	r27, Y+4	; 0x04
    9c66:	6d 91       	ld	r22, X+
    9c68:	7c 91       	ld	r23, X
    9c6a:	fb 01       	movw	r30, r22
    9c6c:	84 81       	ldd	r24, Z+4	; 0x04
    9c6e:	88 23       	and	r24, r24
    9c70:	21 f1       	breq	.+72     	; 0x9cba <f_read+0x25e>
    9c72:	26 a5       	ldd	r18, Z+46	; 0x2e
    9c74:	37 a5       	ldd	r19, Z+47	; 0x2f
    9c76:	40 a9       	ldd	r20, Z+48	; 0x30
    9c78:	51 a9       	ldd	r21, Z+49	; 0x31
    9c7a:	2c 19       	sub	r18, r12
    9c7c:	3d 09       	sbc	r19, r13
    9c7e:	4e 09       	sbc	r20, r14
    9c80:	5f 09       	sbc	r21, r15
    9c82:	c5 01       	movw	r24, r10
    9c84:	a0 e0       	ldi	r26, 0x00	; 0
    9c86:	b0 e0       	ldi	r27, 0x00	; 0
    9c88:	28 17       	cp	r18, r24
    9c8a:	39 07       	cpc	r19, r25
    9c8c:	4a 07       	cpc	r20, r26
    9c8e:	5b 07       	cpc	r21, r27
    9c90:	a0 f4       	brcc	.+40     	; 0x9cba <f_read+0x25e>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    9c92:	a9 e0       	ldi	r26, 0x09	; 9
    9c94:	22 0f       	add	r18, r18
    9c96:	33 1f       	adc	r19, r19
    9c98:	44 1f       	adc	r20, r20
    9c9a:	55 1f       	adc	r21, r21
    9c9c:	aa 95       	dec	r26
    9c9e:	d1 f7       	brne	.-12     	; 0x9c94 <f_read+0x238>
    9ca0:	d2 01       	movw	r26, r4
    9ca2:	a2 0f       	add	r26, r18
    9ca4:	b3 1f       	adc	r27, r19
	const char *s = (const char *)src;
    9ca6:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = *s++;
    9ca8:	9b 01       	movw	r18, r22
    9caa:	2e 5c       	subi	r18, 0xCE	; 206
    9cac:	3d 4f       	sbci	r19, 0xFD	; 253
    9cae:	02 c0       	rjmp	.+4      	; 0x9cb4 <f_read+0x258>
    9cb0:	81 91       	ld	r24, Z+
    9cb2:	8d 93       	st	X+, r24
    9cb4:	e2 17       	cp	r30, r18
    9cb6:	f3 07       	cpc	r31, r19
    9cb8:	d9 f7       	brne	.-10     	; 0x9cb0 <f_read+0x254>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    9cba:	ab 81       	ldd	r26, Y+3	; 0x03
    9cbc:	bc 81       	ldd	r27, Y+4	; 0x04
    9cbe:	15 96       	adiw	r26, 0x05	; 5
    9cc0:	8c 91       	ld	r24, X
    9cc2:	15 97       	sbiw	r26, 0x05	; 5
    9cc4:	8a 0d       	add	r24, r10
    9cc6:	15 96       	adiw	r26, 0x05	; 5
    9cc8:	8c 93       	st	X, r24
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    9cca:	b5 01       	movw	r22, r10
    9ccc:	76 2f       	mov	r23, r22
    9cce:	66 27       	eor	r22, r22
    9cd0:	77 0f       	add	r23, r23
    9cd2:	48 c0       	rjmp	.+144    	; 0x9d64 <f_read+0x308>
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    9cd4:	eb 81       	ldd	r30, Y+3	; 0x03
    9cd6:	fc 81       	ldd	r31, Y+4	; 0x04
    9cd8:	c6 8a       	std	Z+22, r12	; 0x16
    9cda:	d7 8a       	std	Z+23, r13	; 0x17
    9cdc:	e0 8e       	std	Z+24, r14	; 0x18
    9cde:	f1 8e       	std	Z+25, r15	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    9ce0:	8f 5f       	subi	r24, 0xFF	; 255
    9ce2:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    9ce4:	ab 81       	ldd	r26, Y+3	; 0x03
    9ce6:	bc 81       	ldd	r27, Y+4	; 0x04
    9ce8:	16 96       	adiw	r26, 0x06	; 6
    9cea:	cd 90       	ld	r12, X+
    9cec:	dd 90       	ld	r13, X+
    9cee:	ed 90       	ld	r14, X+
    9cf0:	fc 90       	ld	r15, X
    9cf2:	19 97       	sbiw	r26, 0x09	; 9
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    9cf4:	56 96       	adiw	r26, 0x16	; 22
    9cf6:	4d 91       	ld	r20, X+
    9cf8:	5d 91       	ld	r21, X+
    9cfa:	6d 91       	ld	r22, X+
    9cfc:	7c 91       	ld	r23, X
    9cfe:	59 97       	sbiw	r26, 0x19	; 25
    9d00:	8d 91       	ld	r24, X+
    9d02:	9c 91       	ld	r25, X
    9d04:	0e 94 10 38 	call	0x7020	; 0x7020 <move_window>
    9d08:	89 2b       	or	r24, r25
    9d0a:	49 f0       	breq	.+18     	; 0x9d1e <f_read+0x2c2>
			ABORT(fp->fs, FR_DISK_ERR);
    9d0c:	eb 81       	ldd	r30, Y+3	; 0x03
    9d0e:	fc 81       	ldd	r31, Y+4	; 0x04
    9d10:	84 81       	ldd	r24, Z+4	; 0x04
    9d12:	80 68       	ori	r24, 0x80	; 128
    9d14:	84 83       	std	Z+4, r24	; 0x04
    9d16:	81 e0       	ldi	r24, 0x01	; 1
    9d18:	88 2e       	mov	r8, r24
    9d1a:	91 2c       	mov	r9, r1
    9d1c:	44 c0       	rjmp	.+136    	; 0x9da6 <f_read+0x34a>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    9d1e:	c6 01       	movw	r24, r12
    9d20:	91 70       	andi	r25, 0x01	; 1
    9d22:	20 e0       	ldi	r18, 0x00	; 0
    9d24:	32 e0       	ldi	r19, 0x02	; 2
    9d26:	28 1b       	sub	r18, r24
    9d28:	39 0b       	sbc	r19, r25
    9d2a:	b3 01       	movw	r22, r6
    9d2c:	26 15       	cp	r18, r6
    9d2e:	37 05       	cpc	r19, r7
    9d30:	08 f4       	brcc	.+2      	; 0x9d34 <f_read+0x2d8>
    9d32:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    9d34:	a2 01       	movw	r20, r4
	const char *s = (const char *)src;
    9d36:	ab 81       	ldd	r26, Y+3	; 0x03
    9d38:	bc 81       	ldd	r27, Y+4	; 0x04
    9d3a:	16 96       	adiw	r26, 0x06	; 6
    9d3c:	8d 91       	ld	r24, X+
    9d3e:	9c 91       	ld	r25, X
    9d40:	17 97       	sbiw	r26, 0x07	; 7
    9d42:	91 70       	andi	r25, 0x01	; 1
    9d44:	c2 96       	adiw	r24, 0x32	; 50
    9d46:	ed 91       	ld	r30, X+
    9d48:	fc 91       	ld	r31, X
    9d4a:	e8 0f       	add	r30, r24
    9d4c:	f9 1f       	adc	r31, r25
	while (cnt--) *d++ = *s++;
    9d4e:	9f 01       	movw	r18, r30
    9d50:	26 0f       	add	r18, r22
    9d52:	37 1f       	adc	r19, r23
    9d54:	04 c0       	rjmp	.+8      	; 0x9d5e <f_read+0x302>
    9d56:	81 91       	ld	r24, Z+
    9d58:	da 01       	movw	r26, r20
    9d5a:	8d 93       	st	X+, r24
    9d5c:	ad 01       	movw	r20, r26
    9d5e:	e2 17       	cp	r30, r18
    9d60:	f3 07       	cpc	r31, r19
    9d62:	c9 f7       	brne	.-14     	; 0x9d56 <f_read+0x2fa>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    9d64:	46 0e       	add	r4, r22
    9d66:	57 1e       	adc	r5, r23
    9d68:	cb 01       	movw	r24, r22
    9d6a:	a0 e0       	ldi	r26, 0x00	; 0
    9d6c:	b0 e0       	ldi	r27, 0x00	; 0
    9d6e:	eb 81       	ldd	r30, Y+3	; 0x03
    9d70:	fc 81       	ldd	r31, Y+4	; 0x04
    9d72:	26 81       	ldd	r18, Z+6	; 0x06
    9d74:	37 81       	ldd	r19, Z+7	; 0x07
    9d76:	40 85       	ldd	r20, Z+8	; 0x08
    9d78:	51 85       	ldd	r21, Z+9	; 0x09
    9d7a:	28 0f       	add	r18, r24
    9d7c:	39 1f       	adc	r19, r25
    9d7e:	4a 1f       	adc	r20, r26
    9d80:	5b 1f       	adc	r21, r27
    9d82:	26 83       	std	Z+6, r18	; 0x06
    9d84:	37 83       	std	Z+7, r19	; 0x07
    9d86:	40 87       	std	Z+8, r20	; 0x08
    9d88:	51 87       	std	Z+9, r21	; 0x09
    9d8a:	e9 81       	ldd	r30, Y+1	; 0x01
    9d8c:	fa 81       	ldd	r31, Y+2	; 0x02
    9d8e:	80 81       	ld	r24, Z
    9d90:	91 81       	ldd	r25, Z+1	; 0x01
    9d92:	86 0f       	add	r24, r22
    9d94:	97 1f       	adc	r25, r23
    9d96:	80 83       	st	Z, r24
    9d98:	91 83       	std	Z+1, r25	; 0x01
    9d9a:	66 1a       	sub	r6, r22
    9d9c:	77 0a       	sbc	r7, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    9d9e:	61 14       	cp	r6, r1
    9da0:	71 04       	cpc	r7, r1
    9da2:	09 f0       	breq	.+2      	; 0x9da6 <f_read+0x34a>
    9da4:	9e ce       	rjmp	.-708    	; 0x9ae2 <f_read+0x86>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    9da6:	c4 01       	movw	r24, r8
    9da8:	24 96       	adiw	r28, 0x04	; 4
    9daa:	e1 e1       	ldi	r30, 0x11	; 17
    9dac:	0c 94 c5 57 	jmp	0xaf8a	; 0xaf8a <__epilogue_restores__+0x2>

00009db0 <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    9db0:	a2 e0       	ldi	r26, 0x02	; 2
    9db2:	b0 e0       	ldi	r27, 0x00	; 0
    9db4:	ee ed       	ldi	r30, 0xDE	; 222
    9db6:	fe e4       	ldi	r31, 0x4E	; 78
    9db8:	0c 94 ac 57 	jmp	0xaf58	; 0xaf58 <__prologue_saves__+0x8>
    9dbc:	6c 01       	movw	r12, r24
    9dbe:	5b 01       	movw	r10, r22
    9dc0:	4a 01       	movw	r8, r20
    9dc2:	8c 01       	movw	r16, r24
    9dc4:	ee 24       	eor	r14, r14
    9dc6:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    9dc8:	08 94       	sec
    9dca:	a1 08       	sbc	r10, r1
    9dcc:	b1 08       	sbc	r11, r1
		f_read(fil, p, 1, &rc);
    9dce:	3e 01       	movw	r6, r28
    9dd0:	08 94       	sec
    9dd2:	61 1c       	adc	r6, r1
    9dd4:	71 1c       	adc	r7, r1
    9dd6:	16 c0       	rjmp	.+44     	; 0x9e04 <f_gets+0x54>
    9dd8:	c4 01       	movw	r24, r8
    9dda:	b8 01       	movw	r22, r16
    9ddc:	41 e0       	ldi	r20, 0x01	; 1
    9dde:	50 e0       	ldi	r21, 0x00	; 0
    9de0:	93 01       	movw	r18, r6
    9de2:	0e 94 2e 4d 	call	0x9a5c	; 0x9a5c <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    9de6:	89 81       	ldd	r24, Y+1	; 0x01
    9de8:	9a 81       	ldd	r25, Y+2	; 0x02
    9dea:	01 97       	sbiw	r24, 0x01	; 1
    9dec:	71 f4       	brne	.+28     	; 0x9e0a <f_gets+0x5a>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
    9dee:	f8 01       	movw	r30, r16
    9df0:	80 81       	ld	r24, Z
    9df2:	8d 30       	cpi	r24, 0x0D	; 13
    9df4:	39 f0       	breq	.+14     	; 0x9e04 <f_gets+0x54>
#endif
		i++;
    9df6:	08 94       	sec
    9df8:	e1 1c       	adc	r14, r1
    9dfa:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    9dfc:	0f 5f       	subi	r16, 0xFF	; 255
    9dfe:	1f 4f       	sbci	r17, 0xFF	; 255
    9e00:	8a 30       	cpi	r24, 0x0A	; 10
    9e02:	19 f0       	breq	.+6      	; 0x9e0a <f_gets+0x5a>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    9e04:	ea 14       	cp	r14, r10
    9e06:	fb 04       	cpc	r15, r11
    9e08:	3c f3       	brlt	.-50     	; 0x9dd8 <f_gets+0x28>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    9e0a:	f8 01       	movw	r30, r16
    9e0c:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    9e0e:	e1 14       	cp	r14, r1
    9e10:	f1 04       	cpc	r15, r1
    9e12:	11 f4       	brne	.+4      	; 0x9e18 <f_gets+0x68>
    9e14:	cc 24       	eor	r12, r12
    9e16:	dd 24       	eor	r13, r13
}
    9e18:	c6 01       	movw	r24, r12
    9e1a:	22 96       	adiw	r28, 0x02	; 2
    9e1c:	ee e0       	ldi	r30, 0x0E	; 14
    9e1e:	0c 94 c8 57 	jmp	0xaf90	; 0xaf90 <__epilogue_restores__+0x8>

00009e22 <wait_ready>:
BYTE wait_ready (void)
{
  BYTE res;


  Timer2 = 50;  /* Wait for ready in timeout of 500ms */
    9e22:	82 e3       	ldi	r24, 0x32	; 50
    9e24:	80 93 6e 25 	sts	0x256E, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9e28:	8f ef       	ldi	r24, 0xFF	; 255
    9e2a:	e0 ec       	ldi	r30, 0xC0	; 192
    9e2c:	fa e0       	ldi	r31, 0x0A	; 10
    9e2e:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9e30:	80 91 c2 0a 	lds	r24, 0x0AC2
    9e34:	87 ff       	sbrs	r24, 7
    9e36:	fc cf       	rjmp	.-8      	; 0x9e30 <wait_ready+0xe>
  return SPIE.DATA;
    9e38:	80 91 c3 0a 	lds	r24, 0x0AC3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9e3c:	e0 ec       	ldi	r30, 0xC0	; 192
    9e3e:	fa e0       	ldi	r31, 0x0A	; 10
    9e40:	2f ef       	ldi	r18, 0xFF	; 255
    9e42:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9e44:	80 91 c2 0a 	lds	r24, 0x0AC2
    9e48:	87 ff       	sbrs	r24, 7
    9e4a:	fc cf       	rjmp	.-8      	; 0x9e44 <wait_ready+0x22>
  return SPIE.DATA;
    9e4c:	90 91 c3 0a 	lds	r25, 0x0AC3

  Timer2 = 50;  /* Wait for ready in timeout of 500ms */
  rcvr_spi();
  do
    res = rcvr_spi();
  while ((res != 0xFF) && Timer2);
    9e50:	9f 3f       	cpi	r25, 0xFF	; 255
    9e52:	21 f0       	breq	.+8      	; 0x9e5c <wait_ready+0x3a>
    9e54:	80 91 6e 25 	lds	r24, 0x256E
    9e58:	88 23       	and	r24, r24
    9e5a:	99 f7       	brne	.-26     	; 0x9e42 <wait_ready+0x20>

  return res;
}
    9e5c:	89 2f       	mov	r24, r25
    9e5e:	08 95       	ret

00009e60 <power_off>:
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
}

static
void power_off (void)
{
    9e60:	ff 92       	push	r15
    9e62:	0f 93       	push	r16
    9e64:	1f 93       	push	r17
  SELECT();        /* Wait for card ready */
    9e66:	00 e8       	ldi	r16, 0x80	; 128
    9e68:	16 e0       	ldi	r17, 0x06	; 6
    9e6a:	80 e1       	ldi	r24, 0x10	; 16
    9e6c:	f8 2e       	mov	r15, r24
    9e6e:	f8 01       	movw	r30, r16
    9e70:	f6 82       	std	Z+6, r15	; 0x06
  wait_ready();
    9e72:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <wait_ready>
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    9e76:	f8 01       	movw	r30, r16
    9e78:	f5 82       	std	Z+5, r15	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9e7a:	8f ef       	ldi	r24, 0xFF	; 255
    9e7c:	e0 ec       	ldi	r30, 0xC0	; 192
    9e7e:	fa e0       	ldi	r31, 0x0A	; 10
    9e80:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9e82:	80 91 c2 0a 	lds	r24, 0x0AC2
    9e86:	87 ff       	sbrs	r24, 7
    9e88:	fc cf       	rjmp	.-8      	; 0x9e82 <power_off+0x22>
  return SPIE.DATA;
    9e8a:	80 91 c3 0a 	lds	r24, 0x0AC3
void power_off (void)
{
  SELECT();        /* Wait for card ready */
  wait_ready();
  release_spi();
  Stat |= STA_NOINIT;    /* Set STA_NOINIT */
    9e8e:	80 91 d9 24 	lds	r24, 0x24D9
    9e92:	81 60       	ori	r24, 0x01	; 1
    9e94:	80 93 d9 24 	sts	0x24D9, r24
}
    9e98:	1f 91       	pop	r17
    9e9a:	0f 91       	pop	r16
    9e9c:	ff 90       	pop	r15
    9e9e:	08 95       	ret

00009ea0 <rcvr_datablock>:
static
BOOL rcvr_datablock (
  BYTE *buff,      /* Data buffer to store received data */
  UINT btr      /* Byte count (must be multiple of 4) */
)
{
    9ea0:	fc 01       	movw	r30, r24
  BYTE token;


  Timer1 = 20;
    9ea2:	84 e1       	ldi	r24, 0x14	; 20
    9ea4:	80 93 6d 25 	sts	0x256D, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9ea8:	a0 ec       	ldi	r26, 0xC0	; 192
    9eaa:	ba e0       	ldi	r27, 0x0A	; 10
    9eac:	9f ef       	ldi	r25, 0xFF	; 255
    9eae:	13 96       	adiw	r26, 0x03	; 3
    9eb0:	9c 93       	st	X, r25
    9eb2:	13 97       	sbiw	r26, 0x03	; 3
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9eb4:	80 91 c2 0a 	lds	r24, 0x0AC2
    9eb8:	87 ff       	sbrs	r24, 7
    9eba:	fc cf       	rjmp	.-8      	; 0x9eb4 <rcvr_datablock+0x14>
  return SPIE.DATA;
    9ebc:	80 91 c3 0a 	lds	r24, 0x0AC3


  Timer1 = 20;
  do {              /* Wait for data packet in timeout of 200ms */
    token = rcvr_spi();
  } while ((token == 0xFF) && Timer1);
    9ec0:	8f 3f       	cpi	r24, 0xFF	; 255
    9ec2:	29 f4       	brne	.+10     	; 0x9ece <rcvr_datablock+0x2e>
    9ec4:	80 91 6d 25 	lds	r24, 0x256D
    9ec8:	88 23       	and	r24, r24
    9eca:	89 f7       	brne	.-30     	; 0x9eae <rcvr_datablock+0xe>
    9ecc:	4a c0       	rjmp	.+148    	; 0x9f62 <rcvr_datablock+0xc2>
  if(token != 0xFE) return FALSE;  /* If not valid data token, retutn with error */
    9ece:	8e 3f       	cpi	r24, 0xFE	; 254
    9ed0:	09 f0       	breq	.+2      	; 0x9ed4 <rcvr_datablock+0x34>
    9ed2:	47 c0       	rjmp	.+142    	; 0x9f62 <rcvr_datablock+0xc2>

  do {              /* Receive the data block into buffer */
    rcvr_spi_m(buff++);
    9ed4:	a0 ec       	ldi	r26, 0xC0	; 192
    9ed6:	ba e0       	ldi	r27, 0x0A	; 10
    9ed8:	9f ef       	ldi	r25, 0xFF	; 255
    9eda:	13 96       	adiw	r26, 0x03	; 3
    9edc:	9c 93       	st	X, r25
    9ede:	13 97       	sbiw	r26, 0x03	; 3
    9ee0:	80 91 c2 0a 	lds	r24, 0x0AC2
    9ee4:	87 ff       	sbrs	r24, 7
    9ee6:	fc cf       	rjmp	.-8      	; 0x9ee0 <rcvr_datablock+0x40>
    9ee8:	80 91 c3 0a 	lds	r24, 0x0AC3
    9eec:	80 83       	st	Z, r24
    rcvr_spi_m(buff++);
    9eee:	13 96       	adiw	r26, 0x03	; 3
    9ef0:	9c 93       	st	X, r25
    9ef2:	13 97       	sbiw	r26, 0x03	; 3
    9ef4:	80 91 c2 0a 	lds	r24, 0x0AC2
    9ef8:	87 ff       	sbrs	r24, 7
    9efa:	fc cf       	rjmp	.-8      	; 0x9ef4 <rcvr_datablock+0x54>
    9efc:	80 91 c3 0a 	lds	r24, 0x0AC3
    9f00:	81 83       	std	Z+1, r24	; 0x01
    rcvr_spi_m(buff++);
    9f02:	13 96       	adiw	r26, 0x03	; 3
    9f04:	9c 93       	st	X, r25
    9f06:	13 97       	sbiw	r26, 0x03	; 3
    9f08:	80 91 c2 0a 	lds	r24, 0x0AC2
    9f0c:	87 ff       	sbrs	r24, 7
    9f0e:	fc cf       	rjmp	.-8      	; 0x9f08 <rcvr_datablock+0x68>
    9f10:	80 91 c3 0a 	lds	r24, 0x0AC3
    9f14:	82 83       	std	Z+2, r24	; 0x02
    rcvr_spi_m(buff++);
    9f16:	13 96       	adiw	r26, 0x03	; 3
    9f18:	9c 93       	st	X, r25
    9f1a:	13 97       	sbiw	r26, 0x03	; 3
    9f1c:	80 91 c2 0a 	lds	r24, 0x0AC2
    9f20:	87 ff       	sbrs	r24, 7
    9f22:	fc cf       	rjmp	.-8      	; 0x9f1c <rcvr_datablock+0x7c>
    9f24:	80 91 c3 0a 	lds	r24, 0x0AC3
    9f28:	83 83       	std	Z+3, r24	; 0x03
  } while (btr -= 4);
    9f2a:	64 50       	subi	r22, 0x04	; 4
    9f2c:	70 40       	sbci	r23, 0x00	; 0
    9f2e:	11 f0       	breq	.+4      	; 0x9f34 <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
  BYTE *buff,      /* Data buffer to store received data */
  UINT btr      /* Byte count (must be multiple of 4) */
)
{
    9f30:	34 96       	adiw	r30, 0x04	; 4
    9f32:	d3 cf       	rjmp	.-90     	; 0x9eda <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9f34:	8f ef       	ldi	r24, 0xFF	; 255
    9f36:	e0 ec       	ldi	r30, 0xC0	; 192
    9f38:	fa e0       	ldi	r31, 0x0A	; 10
    9f3a:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9f3c:	80 91 c2 0a 	lds	r24, 0x0AC2
    9f40:	87 ff       	sbrs	r24, 7
    9f42:	fc cf       	rjmp	.-8      	; 0x9f3c <rcvr_datablock+0x9c>
  return SPIE.DATA;
    9f44:	80 91 c3 0a 	lds	r24, 0x0AC3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9f48:	8f ef       	ldi	r24, 0xFF	; 255
    9f4a:	e0 ec       	ldi	r30, 0xC0	; 192
    9f4c:	fa e0       	ldi	r31, 0x0A	; 10
    9f4e:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9f50:	80 91 c2 0a 	lds	r24, 0x0AC2
    9f54:	87 ff       	sbrs	r24, 7
    9f56:	fc cf       	rjmp	.-8      	; 0x9f50 <rcvr_datablock+0xb0>
  return SPIE.DATA;
    9f58:	80 91 c3 0a 	lds	r24, 0x0AC3
    9f5c:	21 e0       	ldi	r18, 0x01	; 1
    9f5e:	30 e0       	ldi	r19, 0x00	; 0
    9f60:	02 c0       	rjmp	.+4      	; 0x9f66 <rcvr_datablock+0xc6>
    rcvr_spi_m(buff++);
  } while (btr -= 4);
  rcvr_spi();            /* Discard CRC */
  rcvr_spi();

  return TRUE;          /* Return with success */
    9f62:	20 e0       	ldi	r18, 0x00	; 0
    9f64:	30 e0       	ldi	r19, 0x00	; 0
}
    9f66:	c9 01       	movw	r24, r18
    9f68:	08 95       	ret

00009f6a <xmit_datablock>:
static
BOOL xmit_datablock (
  const BYTE *buff,  /* 512 byte data block to be transmitted */
  BYTE token      /* Data/Stop token */
)
{
    9f6a:	1f 93       	push	r17
    9f6c:	cf 93       	push	r28
    9f6e:	df 93       	push	r29
    9f70:	ec 01       	movw	r28, r24
    9f72:	16 2f       	mov	r17, r22
  BYTE resp, wc;


  if (wait_ready() != 0xFF) return FALSE;
    9f74:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <wait_ready>
    9f78:	8f 3f       	cpi	r24, 0xFF	; 255
    9f7a:	19 f0       	breq	.+6      	; 0x9f82 <xmit_datablock+0x18>
    9f7c:	20 e0       	ldi	r18, 0x00	; 0
    9f7e:	30 e0       	ldi	r19, 0x00	; 0
    9f80:	42 c0       	rjmp	.+132    	; 0xa006 <xmit_datablock+0x9c>

  xmit_spi(token);          /* Xmit data token */
    9f82:	e0 ec       	ldi	r30, 0xC0	; 192
    9f84:	fa e0       	ldi	r31, 0x0A	; 10
    9f86:	13 83       	std	Z+3, r17	; 0x03
    9f88:	80 91 c2 0a 	lds	r24, 0x0AC2
    9f8c:	87 ff       	sbrs	r24, 7
    9f8e:	fc cf       	rjmp	.-8      	; 0x9f88 <xmit_datablock+0x1e>
  if (token != 0xFD) {  /* Is data token */
    9f90:	1d 3f       	cpi	r17, 0xFD	; 253
    9f92:	19 f4       	brne	.+6      	; 0x9f9a <xmit_datablock+0x30>
    9f94:	21 e0       	ldi	r18, 0x01	; 1
    9f96:	30 e0       	ldi	r19, 0x00	; 0
    9f98:	36 c0       	rjmp	.+108    	; 0xa006 <xmit_datablock+0x9c>
    9f9a:	90 e0       	ldi	r25, 0x00	; 0
    wc = 0;
    do {              /* Xmit the 512 byte data block to MMC */
      xmit_spi(*buff++);
    9f9c:	e0 ec       	ldi	r30, 0xC0	; 192
    9f9e:	fa e0       	ldi	r31, 0x0A	; 10
    9fa0:	88 81       	ld	r24, Y
    9fa2:	83 83       	std	Z+3, r24	; 0x03
    9fa4:	80 91 c2 0a 	lds	r24, 0x0AC2
    9fa8:	87 ff       	sbrs	r24, 7
    9faa:	fc cf       	rjmp	.-8      	; 0x9fa4 <xmit_datablock+0x3a>
      xmit_spi(*buff++);
    9fac:	89 81       	ldd	r24, Y+1	; 0x01
    9fae:	83 83       	std	Z+3, r24	; 0x03
    9fb0:	80 91 c2 0a 	lds	r24, 0x0AC2
    9fb4:	87 ff       	sbrs	r24, 7
    9fb6:	fc cf       	rjmp	.-8      	; 0x9fb0 <xmit_datablock+0x46>
    } while (--wc);
    9fb8:	91 50       	subi	r25, 0x01	; 1
    9fba:	11 f0       	breq	.+4      	; 0x9fc0 <xmit_datablock+0x56>
static
BOOL xmit_datablock (
  const BYTE *buff,  /* 512 byte data block to be transmitted */
  BYTE token      /* Data/Stop token */
)
{
    9fbc:	22 96       	adiw	r28, 0x02	; 2
    9fbe:	f0 cf       	rjmp	.-32     	; 0x9fa0 <xmit_datablock+0x36>
    wc = 0;
    do {              /* Xmit the 512 byte data block to MMC */
      xmit_spi(*buff++);
      xmit_spi(*buff++);
    } while (--wc);
    xmit_spi(0xFF);          /* CRC (Dummy) */
    9fc0:	8f ef       	ldi	r24, 0xFF	; 255
    9fc2:	e0 ec       	ldi	r30, 0xC0	; 192
    9fc4:	fa e0       	ldi	r31, 0x0A	; 10
    9fc6:	83 83       	std	Z+3, r24	; 0x03
    9fc8:	80 91 c2 0a 	lds	r24, 0x0AC2
    9fcc:	87 ff       	sbrs	r24, 7
    9fce:	fc cf       	rjmp	.-8      	; 0x9fc8 <xmit_datablock+0x5e>
    xmit_spi(0xFF);
    9fd0:	8f ef       	ldi	r24, 0xFF	; 255
    9fd2:	e0 ec       	ldi	r30, 0xC0	; 192
    9fd4:	fa e0       	ldi	r31, 0x0A	; 10
    9fd6:	83 83       	std	Z+3, r24	; 0x03
    9fd8:	80 91 c2 0a 	lds	r24, 0x0AC2
    9fdc:	87 ff       	sbrs	r24, 7
    9fde:	fc cf       	rjmp	.-8      	; 0x9fd8 <xmit_datablock+0x6e>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9fe0:	8f ef       	ldi	r24, 0xFF	; 255
    9fe2:	e0 ec       	ldi	r30, 0xC0	; 192
    9fe4:	fa e0       	ldi	r31, 0x0A	; 10
    9fe6:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9fe8:	80 91 c2 0a 	lds	r24, 0x0AC2
    9fec:	87 ff       	sbrs	r24, 7
    9fee:	fc cf       	rjmp	.-8      	; 0x9fe8 <xmit_datablock+0x7e>
  return SPIE.DATA;
    9ff0:	80 91 c3 0a 	lds	r24, 0x0AC3
    9ff4:	90 e0       	ldi	r25, 0x00	; 0
    9ff6:	8f 71       	andi	r24, 0x1F	; 31
    9ff8:	85 30       	cpi	r24, 0x05	; 5
    9ffa:	09 f0       	breq	.+2      	; 0x9ffe <xmit_datablock+0x94>
    9ffc:	91 e0       	ldi	r25, 0x01	; 1
    9ffe:	81 e0       	ldi	r24, 0x01	; 1
    a000:	98 27       	eor	r25, r24
    a002:	29 2f       	mov	r18, r25
    a004:	30 e0       	ldi	r19, 0x00	; 0
    if ((resp & 0x1F) != 0x05)    /* If not accepted, return with error */
      return FALSE;
  }

  return TRUE;
}
    a006:	c9 01       	movw	r24, r18
    a008:	df 91       	pop	r29
    a00a:	cf 91       	pop	r28
    a00c:	1f 91       	pop	r17
    a00e:	08 95       	ret

0000a010 <send_cmd>:
static
BYTE send_cmd (
  BYTE cmd,    /* Command byte */
  DWORD arg    /* Argument */
)
{
    a010:	df 92       	push	r13
    a012:	ef 92       	push	r14
    a014:	ff 92       	push	r15
    a016:	0f 93       	push	r16
    a018:	1f 93       	push	r17
    a01a:	d8 2e       	mov	r13, r24
    a01c:	7a 01       	movw	r14, r20
    a01e:	8b 01       	movw	r16, r22
  BYTE n, res;


  if (cmd & 0x80) {  /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    a020:	87 ff       	sbrs	r24, 7
    a022:	0c c0       	rjmp	.+24     	; 0xa03c <send_cmd+0x2c>
    cmd &= 0x7F;
    res = send_cmd(CMD55, 0);
    a024:	87 e7       	ldi	r24, 0x77	; 119
    a026:	40 e0       	ldi	r20, 0x00	; 0
    a028:	50 e0       	ldi	r21, 0x00	; 0
    a02a:	60 e0       	ldi	r22, 0x00	; 0
    a02c:	70 e0       	ldi	r23, 0x00	; 0
    a02e:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    if (res > 1) return res;
    a032:	82 30       	cpi	r24, 0x02	; 2
    a034:	08 f0       	brcs	.+2      	; 0xa038 <send_cmd+0x28>
    a036:	69 c0       	rjmp	.+210    	; 0xa10a <send_cmd+0xfa>
{
  BYTE n, res;


  if (cmd & 0x80) {  /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    cmd &= 0x7F;
    a038:	8f e7       	ldi	r24, 0x7F	; 127
    a03a:	d8 22       	and	r13, r24
    res = send_cmd(CMD55, 0);
    if (res > 1) return res;
  }

  /* Select the card and wait for ready */
  DESELECT();
    a03c:	e0 e8       	ldi	r30, 0x80	; 128
    a03e:	f6 e0       	ldi	r31, 0x06	; 6
    a040:	80 e1       	ldi	r24, 0x10	; 16
    a042:	85 83       	std	Z+5, r24	; 0x05
  SELECT();
    a044:	86 83       	std	Z+6, r24	; 0x06
  if (wait_ready() != 0xFF) return 0xFF;
    a046:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <wait_ready>
    a04a:	8f 3f       	cpi	r24, 0xFF	; 255
    a04c:	11 f0       	breq	.+4      	; 0xa052 <send_cmd+0x42>
    a04e:	8f ef       	ldi	r24, 0xFF	; 255
    a050:	5c c0       	rjmp	.+184    	; 0xa10a <send_cmd+0xfa>

  /* Send command packet */
  xmit_spi(cmd);            /* Start + Command index */
    a052:	e0 ec       	ldi	r30, 0xC0	; 192
    a054:	fa e0       	ldi	r31, 0x0A	; 10
    a056:	d3 82       	std	Z+3, r13	; 0x03
    a058:	80 91 c2 0a 	lds	r24, 0x0AC2
    a05c:	87 ff       	sbrs	r24, 7
    a05e:	fc cf       	rjmp	.-8      	; 0xa058 <send_cmd+0x48>
  xmit_spi((BYTE)(arg >> 24));    /* Argument[31..24] */
    a060:	81 2f       	mov	r24, r17
    a062:	99 27       	eor	r25, r25
    a064:	aa 27       	eor	r26, r26
    a066:	bb 27       	eor	r27, r27
    a068:	e0 ec       	ldi	r30, 0xC0	; 192
    a06a:	fa e0       	ldi	r31, 0x0A	; 10
    a06c:	83 83       	std	Z+3, r24	; 0x03
    a06e:	80 91 c2 0a 	lds	r24, 0x0AC2
    a072:	87 ff       	sbrs	r24, 7
    a074:	fc cf       	rjmp	.-8      	; 0xa06e <send_cmd+0x5e>
  xmit_spi((BYTE)(arg >> 16));    /* Argument[23..16] */
    a076:	c8 01       	movw	r24, r16
    a078:	aa 27       	eor	r26, r26
    a07a:	bb 27       	eor	r27, r27
    a07c:	e0 ec       	ldi	r30, 0xC0	; 192
    a07e:	fa e0       	ldi	r31, 0x0A	; 10
    a080:	83 83       	std	Z+3, r24	; 0x03
    a082:	80 91 c2 0a 	lds	r24, 0x0AC2
    a086:	87 ff       	sbrs	r24, 7
    a088:	fc cf       	rjmp	.-8      	; 0xa082 <send_cmd+0x72>
  xmit_spi((BYTE)(arg >> 8));      /* Argument[15..8] */
    a08a:	bb 27       	eor	r27, r27
    a08c:	a1 2f       	mov	r26, r17
    a08e:	90 2f       	mov	r25, r16
    a090:	8f 2d       	mov	r24, r15
    a092:	e0 ec       	ldi	r30, 0xC0	; 192
    a094:	fa e0       	ldi	r31, 0x0A	; 10
    a096:	83 83       	std	Z+3, r24	; 0x03
    a098:	80 91 c2 0a 	lds	r24, 0x0AC2
    a09c:	87 ff       	sbrs	r24, 7
    a09e:	fc cf       	rjmp	.-8      	; 0xa098 <send_cmd+0x88>
  xmit_spi((BYTE)arg);        /* Argument[7..0] */
    a0a0:	e0 ec       	ldi	r30, 0xC0	; 192
    a0a2:	fa e0       	ldi	r31, 0x0A	; 10
    a0a4:	e3 82       	std	Z+3, r14	; 0x03
    a0a6:	80 91 c2 0a 	lds	r24, 0x0AC2
    a0aa:	87 ff       	sbrs	r24, 7
    a0ac:	fc cf       	rjmp	.-8      	; 0xa0a6 <send_cmd+0x96>
  n = 0x01;              /* Dummy CRC + Stop */
  if (cmd == CMD0) n = 0x95;      /* Valid CRC for CMD0(0) */
    a0ae:	80 e4       	ldi	r24, 0x40	; 64
    a0b0:	d8 16       	cp	r13, r24
    a0b2:	11 f4       	brne	.+4      	; 0xa0b8 <send_cmd+0xa8>
    a0b4:	85 e9       	ldi	r24, 0x95	; 149
    a0b6:	06 c0       	rjmp	.+12     	; 0xa0c4 <send_cmd+0xb4>
  if (cmd == CMD8) n = 0x87;      /* Valid CRC for CMD8(0x1AA) */
    a0b8:	88 e4       	ldi	r24, 0x48	; 72
    a0ba:	d8 16       	cp	r13, r24
    a0bc:	11 f4       	brne	.+4      	; 0xa0c2 <send_cmd+0xb2>
    a0be:	87 e8       	ldi	r24, 0x87	; 135
    a0c0:	01 c0       	rjmp	.+2      	; 0xa0c4 <send_cmd+0xb4>
    a0c2:	81 e0       	ldi	r24, 0x01	; 1
  xmit_spi(n);
    a0c4:	e0 ec       	ldi	r30, 0xC0	; 192
    a0c6:	fa e0       	ldi	r31, 0x0A	; 10
    a0c8:	83 83       	std	Z+3, r24	; 0x03
    a0ca:	80 91 c2 0a 	lds	r24, 0x0AC2
    a0ce:	87 ff       	sbrs	r24, 7
    a0d0:	fc cf       	rjmp	.-8      	; 0xa0ca <send_cmd+0xba>

  /* Receive command response */
  if (cmd == CMD12) rcvr_spi();    /* Skip a stuff byte when stop reading */
    a0d2:	8c e4       	ldi	r24, 0x4C	; 76
    a0d4:	d8 16       	cp	r13, r24
    a0d6:	51 f4       	brne	.+20     	; 0xa0ec <send_cmd+0xdc>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a0d8:	8f ef       	ldi	r24, 0xFF	; 255
    a0da:	e0 ec       	ldi	r30, 0xC0	; 192
    a0dc:	fa e0       	ldi	r31, 0x0A	; 10
    a0de:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a0e0:	80 91 c2 0a 	lds	r24, 0x0AC2
    a0e4:	87 ff       	sbrs	r24, 7
    a0e6:	fc cf       	rjmp	.-8      	; 0xa0e0 <send_cmd+0xd0>
  return SPIE.DATA;
    a0e8:	80 91 c3 0a 	lds	r24, 0x0AC3
    a0ec:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a0ee:	e0 ec       	ldi	r30, 0xC0	; 192
    a0f0:	fa e0       	ldi	r31, 0x0A	; 10
    a0f2:	2f ef       	ldi	r18, 0xFF	; 255
    a0f4:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a0f6:	80 91 c2 0a 	lds	r24, 0x0AC2
    a0fa:	87 ff       	sbrs	r24, 7
    a0fc:	fc cf       	rjmp	.-8      	; 0xa0f6 <send_cmd+0xe6>
  return SPIE.DATA;
    a0fe:	80 91 c3 0a 	lds	r24, 0x0AC3
  /* Receive command response */
  if (cmd == CMD12) rcvr_spi();    /* Skip a stuff byte when stop reading */
  n = 10;                /* Wait for a valid response in timeout of 10 attempts */
  do
    res = rcvr_spi();
  while ((res & 0x80) && --n);
    a102:	87 ff       	sbrs	r24, 7
    a104:	02 c0       	rjmp	.+4      	; 0xa10a <send_cmd+0xfa>
    a106:	91 50       	subi	r25, 0x01	; 1
    a108:	a9 f7       	brne	.-22     	; 0xa0f4 <send_cmd+0xe4>

  return res;      /* Return with the response value */
}
    a10a:	1f 91       	pop	r17
    a10c:	0f 91       	pop	r16
    a10e:	ff 90       	pop	r15
    a110:	ef 90       	pop	r14
    a112:	df 90       	pop	r13
    a114:	08 95       	ret

0000a116 <disk_status>:

DSTATUS disk_status (
  BYTE drv    /* Physical drive nmuber (0) */
)
{
  if (drv) return STA_NOINIT;    /* Supports only single drive */
    a116:	88 23       	and	r24, r24
    a118:	11 f0       	breq	.+4      	; 0xa11e <disk_status+0x8>
    a11a:	81 e0       	ldi	r24, 0x01	; 1
    a11c:	08 95       	ret
  return Stat;
    a11e:	80 91 d9 24 	lds	r24, 0x24D9
}
    a122:	08 95       	ret

0000a124 <disk_read>:
  BYTE drv,      /* Physical drive nmuber (0) */
  BYTE *buff,      /* Pointer to the data buffer to store read data */
  DWORD sector,    /* Start sector number (LBA) */
  BYTE count      /* Sector count (1..255) */
)
{
    a124:	0f 93       	push	r16
    a126:	cf 93       	push	r28
    a128:	df 93       	push	r29
    a12a:	eb 01       	movw	r28, r22
  if (drv || !count) return RES_PARERR;
    a12c:	88 23       	and	r24, r24
    a12e:	09 f0       	breq	.+2      	; 0xa132 <disk_read+0xe>
    a130:	57 c0       	rjmp	.+174    	; 0xa1e0 <disk_read+0xbc>
    a132:	00 23       	and	r16, r16
    a134:	09 f4       	brne	.+2      	; 0xa138 <disk_read+0x14>
    a136:	54 c0       	rjmp	.+168    	; 0xa1e0 <disk_read+0xbc>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
    a138:	80 91 d9 24 	lds	r24, 0x24D9
    a13c:	80 ff       	sbrs	r24, 0
    a13e:	03 c0       	rjmp	.+6      	; 0xa146 <disk_read+0x22>
    a140:	23 e0       	ldi	r18, 0x03	; 3
    a142:	30 e0       	ldi	r19, 0x00	; 0
    a144:	4f c0       	rjmp	.+158    	; 0xa1e4 <disk_read+0xc0>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */
    a146:	80 91 6f 25 	lds	r24, 0x256F
    a14a:	83 fd       	sbrc	r24, 3
    a14c:	07 c0       	rjmp	.+14     	; 0xa15c <disk_read+0x38>
    a14e:	69 e0       	ldi	r22, 0x09	; 9
    a150:	22 0f       	add	r18, r18
    a152:	33 1f       	adc	r19, r19
    a154:	44 1f       	adc	r20, r20
    a156:	55 1f       	adc	r21, r21
    a158:	6a 95       	dec	r22
    a15a:	d1 f7       	brne	.-12     	; 0xa150 <disk_read+0x2c>

  if (count == 1) {  /* Single block read */
    a15c:	01 30       	cpi	r16, 0x01	; 1
    a15e:	89 f4       	brne	.+34     	; 0xa182 <disk_read+0x5e>
    if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
    a160:	81 e5       	ldi	r24, 0x51	; 81
    a162:	ba 01       	movw	r22, r20
    a164:	a9 01       	movw	r20, r18
    a166:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    a16a:	88 23       	and	r24, r24
    a16c:	21 f5       	brne	.+72     	; 0xa1b6 <disk_read+0x92>
    a16e:	ce 01       	movw	r24, r28
    a170:	60 e0       	ldi	r22, 0x00	; 0
    a172:	72 e0       	ldi	r23, 0x02	; 2
    a174:	0e 94 50 4f 	call	0x9ea0	; 0x9ea0 <rcvr_datablock>
    a178:	00 e0       	ldi	r16, 0x00	; 0
    a17a:	89 2b       	or	r24, r25
    a17c:	e1 f4       	brne	.+56     	; 0xa1b6 <disk_read+0x92>
    a17e:	01 e0       	ldi	r16, 0x01	; 1
    a180:	1a c0       	rjmp	.+52     	; 0xa1b6 <disk_read+0x92>
      && rcvr_datablock(buff, 512))
      count = 0;
  }
  else {        /* Multiple block read */
    if (send_cmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
    a182:	82 e5       	ldi	r24, 0x52	; 82
    a184:	ba 01       	movw	r22, r20
    a186:	a9 01       	movw	r20, r18
    a188:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    a18c:	88 23       	and	r24, r24
    a18e:	99 f4       	brne	.+38     	; 0xa1b6 <disk_read+0x92>
      do {
        if (!rcvr_datablock(buff, 512)) break;
    a190:	ce 01       	movw	r24, r28
    a192:	60 e0       	ldi	r22, 0x00	; 0
    a194:	72 e0       	ldi	r23, 0x02	; 2
    a196:	0e 94 50 4f 	call	0x9ea0	; 0x9ea0 <rcvr_datablock>
    a19a:	89 2b       	or	r24, r25
    a19c:	29 f0       	breq	.+10     	; 0xa1a8 <disk_read+0x84>
        buff += 512;
      } while (--count);
    a19e:	01 50       	subi	r16, 0x01	; 1
    a1a0:	19 f0       	breq	.+6      	; 0xa1a8 <disk_read+0x84>
  }
  else {        /* Multiple block read */
    if (send_cmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
      do {
        if (!rcvr_datablock(buff, 512)) break;
        buff += 512;
    a1a2:	c0 50       	subi	r28, 0x00	; 0
    a1a4:	de 4f       	sbci	r29, 0xFE	; 254
    a1a6:	f4 cf       	rjmp	.-24     	; 0xa190 <disk_read+0x6c>
      } while (--count);
      send_cmd(CMD12, 0);        /* STOP_TRANSMISSION */
    a1a8:	8c e4       	ldi	r24, 0x4C	; 76
    a1aa:	40 e0       	ldi	r20, 0x00	; 0
    a1ac:	50 e0       	ldi	r21, 0x00	; 0
    a1ae:	60 e0       	ldi	r22, 0x00	; 0
    a1b0:	70 e0       	ldi	r23, 0x00	; 0
    a1b2:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a1b6:	80 e1       	ldi	r24, 0x10	; 16
    a1b8:	e0 e8       	ldi	r30, 0x80	; 128
    a1ba:	f6 e0       	ldi	r31, 0x06	; 6
    a1bc:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a1be:	8f ef       	ldi	r24, 0xFF	; 255
    a1c0:	e0 ec       	ldi	r30, 0xC0	; 192
    a1c2:	fa e0       	ldi	r31, 0x0A	; 10
    a1c4:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a1c6:	80 91 c2 0a 	lds	r24, 0x0AC2
    a1ca:	87 ff       	sbrs	r24, 7
    a1cc:	fc cf       	rjmp	.-8      	; 0xa1c6 <disk_read+0xa2>
  return SPIE.DATA;
    a1ce:	80 91 c3 0a 	lds	r24, 0x0AC3
      send_cmd(CMD12, 0);        /* STOP_TRANSMISSION */
    }
  }
  release_spi();

  return count ? RES_ERROR : RES_OK;
    a1d2:	20 e0       	ldi	r18, 0x00	; 0
    a1d4:	30 e0       	ldi	r19, 0x00	; 0
    a1d6:	00 23       	and	r16, r16
    a1d8:	29 f0       	breq	.+10     	; 0xa1e4 <disk_read+0xc0>
    a1da:	21 e0       	ldi	r18, 0x01	; 1
    a1dc:	30 e0       	ldi	r19, 0x00	; 0
    a1de:	02 c0       	rjmp	.+4      	; 0xa1e4 <disk_read+0xc0>
    a1e0:	24 e0       	ldi	r18, 0x04	; 4
    a1e2:	30 e0       	ldi	r19, 0x00	; 0
}
    a1e4:	c9 01       	movw	r24, r18
    a1e6:	df 91       	pop	r29
    a1e8:	cf 91       	pop	r28
    a1ea:	0f 91       	pop	r16
    a1ec:	08 95       	ret

0000a1ee <disk_write>:
  BYTE drv,      /* Physical drive nmuber (0) */
  const BYTE *buff,  /* Pointer to the data to be written */
  DWORD sector,    /* Start sector number (LBA) */
  BYTE count      /* Sector count (1..255) */
)
{
    a1ee:	cf 92       	push	r12
    a1f0:	df 92       	push	r13
    a1f2:	ef 92       	push	r14
    a1f4:	ff 92       	push	r15
    a1f6:	0f 93       	push	r16
    a1f8:	cf 93       	push	r28
    a1fa:	df 93       	push	r29
    a1fc:	eb 01       	movw	r28, r22
    a1fe:	69 01       	movw	r12, r18
    a200:	7a 01       	movw	r14, r20
  if (drv || !count) return RES_PARERR;
    a202:	88 23       	and	r24, r24
    a204:	09 f0       	breq	.+2      	; 0xa208 <disk_write+0x1a>
    a206:	66 c0       	rjmp	.+204    	; 0xa2d4 <disk_write+0xe6>
    a208:	00 23       	and	r16, r16
    a20a:	09 f4       	brne	.+2      	; 0xa20e <disk_write+0x20>
    a20c:	63 c0       	rjmp	.+198    	; 0xa2d4 <disk_write+0xe6>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
    a20e:	80 91 d9 24 	lds	r24, 0x24D9
    a212:	80 ff       	sbrs	r24, 0
    a214:	03 c0       	rjmp	.+6      	; 0xa21c <disk_write+0x2e>
    a216:	23 e0       	ldi	r18, 0x03	; 3
    a218:	30 e0       	ldi	r19, 0x00	; 0
    a21a:	5e c0       	rjmp	.+188    	; 0xa2d8 <disk_write+0xea>
  if (Stat & STA_PROTECT) return RES_WRPRT;
    a21c:	80 91 d9 24 	lds	r24, 0x24D9
    a220:	82 ff       	sbrs	r24, 2
    a222:	03 c0       	rjmp	.+6      	; 0xa22a <disk_write+0x3c>
    a224:	22 e0       	ldi	r18, 0x02	; 2
    a226:	30 e0       	ldi	r19, 0x00	; 0
    a228:	57 c0       	rjmp	.+174    	; 0xa2d8 <disk_write+0xea>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */
    a22a:	80 91 6f 25 	lds	r24, 0x256F
    a22e:	90 e0       	ldi	r25, 0x00	; 0
    a230:	83 fd       	sbrc	r24, 3
    a232:	07 c0       	rjmp	.+14     	; 0xa242 <disk_write+0x54>
    a234:	79 e0       	ldi	r23, 0x09	; 9
    a236:	cc 0c       	add	r12, r12
    a238:	dd 1c       	adc	r13, r13
    a23a:	ee 1c       	adc	r14, r14
    a23c:	ff 1c       	adc	r15, r15
    a23e:	7a 95       	dec	r23
    a240:	d1 f7       	brne	.-12     	; 0xa236 <disk_write+0x48>

  if (count == 1) {  /* Single block write */
    a242:	01 30       	cpi	r16, 0x01	; 1
    a244:	69 f4       	brne	.+26     	; 0xa260 <disk_write+0x72>
    if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
    a246:	88 e5       	ldi	r24, 0x58	; 88
    a248:	b7 01       	movw	r22, r14
    a24a:	a6 01       	movw	r20, r12
    a24c:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    a250:	88 23       	and	r24, r24
    a252:	59 f5       	brne	.+86     	; 0xa2aa <disk_write+0xbc>
    a254:	ce 01       	movw	r24, r28
    a256:	6e ef       	ldi	r22, 0xFE	; 254
    a258:	0e 94 b5 4f 	call	0x9f6a	; 0x9f6a <xmit_datablock>
    a25c:	00 e0       	ldi	r16, 0x00	; 0
    a25e:	22 c0       	rjmp	.+68     	; 0xa2a4 <disk_write+0xb6>
      && xmit_datablock(buff, 0xFE))
      count = 0;
  }
  else {        /* Multiple block write */
    if (CardType & CT_SDC) send_cmd(ACMD23, count);
    a260:	86 70       	andi	r24, 0x06	; 6
    a262:	90 70       	andi	r25, 0x00	; 0
    a264:	89 2b       	or	r24, r25
    a266:	39 f0       	breq	.+14     	; 0xa276 <disk_write+0x88>
    a268:	40 2f       	mov	r20, r16
    a26a:	50 e0       	ldi	r21, 0x00	; 0
    a26c:	60 e0       	ldi	r22, 0x00	; 0
    a26e:	70 e0       	ldi	r23, 0x00	; 0
    a270:	87 ed       	ldi	r24, 0xD7	; 215
    a272:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    if (send_cmd(CMD25, sector) == 0) {  /* WRITE_MULTIPLE_BLOCK */
    a276:	89 e5       	ldi	r24, 0x59	; 89
    a278:	b7 01       	movw	r22, r14
    a27a:	a6 01       	movw	r20, r12
    a27c:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    a280:	88 23       	and	r24, r24
    a282:	99 f4       	brne	.+38     	; 0xa2aa <disk_write+0xbc>
      do {
        if (!xmit_datablock(buff, 0xFC)) break;
    a284:	ce 01       	movw	r24, r28
    a286:	6c ef       	ldi	r22, 0xFC	; 252
    a288:	0e 94 b5 4f 	call	0x9f6a	; 0x9f6a <xmit_datablock>
    a28c:	89 2b       	or	r24, r25
    a28e:	29 f0       	breq	.+10     	; 0xa29a <disk_write+0xac>
        buff += 512;
      } while (--count);
    a290:	01 50       	subi	r16, 0x01	; 1
    a292:	19 f0       	breq	.+6      	; 0xa29a <disk_write+0xac>
  else {        /* Multiple block write */
    if (CardType & CT_SDC) send_cmd(ACMD23, count);
    if (send_cmd(CMD25, sector) == 0) {  /* WRITE_MULTIPLE_BLOCK */
      do {
        if (!xmit_datablock(buff, 0xFC)) break;
        buff += 512;
    a294:	c0 50       	subi	r28, 0x00	; 0
    a296:	de 4f       	sbci	r29, 0xFE	; 254
    a298:	f5 cf       	rjmp	.-22     	; 0xa284 <disk_write+0x96>
      } while (--count);
      if (!xmit_datablock(0, 0xFD))  /* STOP_TRAN token */
    a29a:	80 e0       	ldi	r24, 0x00	; 0
    a29c:	90 e0       	ldi	r25, 0x00	; 0
    a29e:	6d ef       	ldi	r22, 0xFD	; 253
    a2a0:	0e 94 b5 4f 	call	0x9f6a	; 0x9f6a <xmit_datablock>
    a2a4:	89 2b       	or	r24, r25
    a2a6:	09 f4       	brne	.+2      	; 0xa2aa <disk_write+0xbc>
    a2a8:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a2aa:	80 e1       	ldi	r24, 0x10	; 16
    a2ac:	e0 e8       	ldi	r30, 0x80	; 128
    a2ae:	f6 e0       	ldi	r31, 0x06	; 6
    a2b0:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a2b2:	8f ef       	ldi	r24, 0xFF	; 255
    a2b4:	e0 ec       	ldi	r30, 0xC0	; 192
    a2b6:	fa e0       	ldi	r31, 0x0A	; 10
    a2b8:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a2ba:	80 91 c2 0a 	lds	r24, 0x0AC2
    a2be:	87 ff       	sbrs	r24, 7
    a2c0:	fc cf       	rjmp	.-8      	; 0xa2ba <disk_write+0xcc>
  return SPIE.DATA;
    a2c2:	80 91 c3 0a 	lds	r24, 0x0AC3
        count = 1;
    }
  }
  release_spi();

  return count ? RES_ERROR : RES_OK;
    a2c6:	20 e0       	ldi	r18, 0x00	; 0
    a2c8:	30 e0       	ldi	r19, 0x00	; 0
    a2ca:	00 23       	and	r16, r16
    a2cc:	29 f0       	breq	.+10     	; 0xa2d8 <disk_write+0xea>
    a2ce:	21 e0       	ldi	r18, 0x01	; 1
    a2d0:	30 e0       	ldi	r19, 0x00	; 0
    a2d2:	02 c0       	rjmp	.+4      	; 0xa2d8 <disk_write+0xea>
    a2d4:	24 e0       	ldi	r18, 0x04	; 4
    a2d6:	30 e0       	ldi	r19, 0x00	; 0
}
    a2d8:	c9 01       	movw	r24, r18
    a2da:	df 91       	pop	r29
    a2dc:	cf 91       	pop	r28
    a2de:	0f 91       	pop	r16
    a2e0:	ff 90       	pop	r15
    a2e2:	ef 90       	pop	r14
    a2e4:	df 90       	pop	r13
    a2e6:	cf 90       	pop	r12
    a2e8:	08 95       	ret

0000a2ea <disk_ioctl>:
DRESULT disk_ioctl (
  BYTE drv,    /* Physical drive nmuber (0) */
  BYTE ctrl,    /* Control code */
  void *buff    /* Buffer to send/receive control data */
)
{
    a2ea:	a0 e1       	ldi	r26, 0x10	; 16
    a2ec:	b0 e0       	ldi	r27, 0x00	; 0
    a2ee:	eb e7       	ldi	r30, 0x7B	; 123
    a2f0:	f1 e5       	ldi	r31, 0x51	; 81
    a2f2:	0c 94 b5 57 	jmp	0xaf6a	; 0xaf6a <__prologue_saves__+0x1a>
    a2f6:	8a 01       	movw	r16, r20
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;


  if (drv) return RES_PARERR;
    a2f8:	88 23       	and	r24, r24
    a2fa:	09 f0       	breq	.+2      	; 0xa2fe <disk_ioctl+0x14>
    a2fc:	a2 c1       	rjmp	.+836    	; 0xa642 <disk_ioctl+0x358>

  res = RES_ERROR;

  if (ctrl == CTRL_POWER) {
    a2fe:	64 30       	cpi	r22, 0x04	; 4
    a300:	f1 f4       	brne	.+60     	; 0xa33e <disk_ioctl+0x54>
    switch (*ptr) {
    a302:	fa 01       	movw	r30, r20
    a304:	80 81       	ld	r24, Z
    a306:	81 30       	cpi	r24, 0x01	; 1
    a308:	49 f0       	breq	.+18     	; 0xa31c <disk_ioctl+0x32>
    a30a:	81 30       	cpi	r24, 0x01	; 1
    a30c:	20 f0       	brcs	.+8      	; 0xa316 <disk_ioctl+0x2c>
    a30e:	82 30       	cpi	r24, 0x02	; 2
    a310:	09 f0       	breq	.+2      	; 0xa314 <disk_ioctl+0x2a>
    a312:	97 c1       	rjmp	.+814    	; 0xa642 <disk_ioctl+0x358>
    a314:	0e c0       	rjmp	.+28     	; 0xa332 <disk_ioctl+0x48>
    case 0:    /* Sub control code == 0 (POWER_OFF) */
      if (chk_power())
        power_off();    /* Power off */
    a316:	0e 94 30 4f 	call	0x9e60	; 0x9e60 <power_off>
    a31a:	0e c0       	rjmp	.+28     	; 0xa338 <disk_ioctl+0x4e>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
  for (Timer1 = 3; Timer1; );  /* Wait for 30ms */
    a31c:	83 e0       	ldi	r24, 0x03	; 3
    a31e:	80 93 6d 25 	sts	0x256D, r24
    a322:	80 91 6d 25 	lds	r24, 0x256D
    a326:	88 23       	and	r24, r24
    a328:	e1 f7       	brne	.-8      	; 0xa322 <disk_ioctl+0x38>
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
    a32a:	83 e5       	ldi	r24, 0x53	; 83
    a32c:	80 93 c0 0a 	sts	0x0AC0, r24
    a330:	03 c0       	rjmp	.+6      	; 0xa338 <disk_ioctl+0x4e>
    case 1:    /* Sub control code == 1 (POWER_ON) */
      power_on();        /* Power on */
      res = RES_OK;
      break;
    case 2:    /* Sub control code == 2 (POWER_GET) */
      *(ptr+1) = (BYTE)chk_power();
    a332:	81 e0       	ldi	r24, 0x01	; 1
    a334:	fa 01       	movw	r30, r20
    a336:	81 83       	std	Z+1, r24	; 0x01
    a338:	20 e0       	ldi	r18, 0x00	; 0
    a33a:	30 e0       	ldi	r19, 0x00	; 0
    a33c:	84 c1       	rjmp	.+776    	; 0xa646 <disk_ioctl+0x35c>
    default :
      res = RES_PARERR;
    }
  }
  else {
    if (Stat & STA_NOINIT) return RES_NOTRDY;
    a33e:	80 91 d9 24 	lds	r24, 0x24D9
    a342:	80 ff       	sbrs	r24, 0
    a344:	03 c0       	rjmp	.+6      	; 0xa34c <disk_ioctl+0x62>
    a346:	23 e0       	ldi	r18, 0x03	; 3
    a348:	30 e0       	ldi	r19, 0x00	; 0
    a34a:	7d c1       	rjmp	.+762    	; 0xa646 <disk_ioctl+0x35c>

    switch (ctrl) {
    a34c:	e6 2f       	mov	r30, r22
    a34e:	f0 e0       	ldi	r31, 0x00	; 0
    a350:	ef 30       	cpi	r30, 0x0F	; 15
    a352:	f1 05       	cpc	r31, r1
    a354:	20 f4       	brcc	.+8      	; 0xa35e <disk_ioctl+0x74>
    a356:	ed 5f       	subi	r30, 0xFD	; 253
    a358:	fe 4f       	sbci	r31, 0xFE	; 254
    a35a:	0c 94 df 57 	jmp	0xafbe	; 0xafbe <__tablejump2__>
    a35e:	24 e0       	ldi	r18, 0x04	; 4
    a360:	30 e0       	ldi	r19, 0x00	; 0
    a362:	60 c1       	rjmp	.+704    	; 0xa624 <disk_ioctl+0x33a>
    case CTRL_SYNC :    /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
      SELECT();
    a364:	80 e1       	ldi	r24, 0x10	; 16
    a366:	e0 e8       	ldi	r30, 0x80	; 128
    a368:	f6 e0       	ldi	r31, 0x06	; 6
    a36a:	86 83       	std	Z+6, r24	; 0x06
      if (wait_ready() == 0xFF)
    a36c:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <wait_ready>
    a370:	20 e0       	ldi	r18, 0x00	; 0
    a372:	30 e0       	ldi	r19, 0x00	; 0
    a374:	8f 3f       	cpi	r24, 0xFF	; 255
    a376:	09 f0       	breq	.+2      	; 0xa37a <disk_ioctl+0x90>
    a378:	53 c1       	rjmp	.+678    	; 0xa620 <disk_ioctl+0x336>
    a37a:	54 c1       	rjmp	.+680    	; 0xa624 <disk_ioctl+0x33a>
        res = RES_OK;
      break;

    case GET_SECTOR_COUNT :  /* Get number of sectors on the disk (DWORD) */
      if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    a37c:	89 e4       	ldi	r24, 0x49	; 73
    a37e:	40 e0       	ldi	r20, 0x00	; 0
    a380:	50 e0       	ldi	r21, 0x00	; 0
    a382:	60 e0       	ldi	r22, 0x00	; 0
    a384:	70 e0       	ldi	r23, 0x00	; 0
    a386:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    a38a:	88 23       	and	r24, r24
    a38c:	09 f0       	breq	.+2      	; 0xa390 <disk_ioctl+0xa6>
    a38e:	48 c1       	rjmp	.+656    	; 0xa620 <disk_ioctl+0x336>
    a390:	ce 01       	movw	r24, r28
    a392:	01 96       	adiw	r24, 0x01	; 1
    a394:	60 e1       	ldi	r22, 0x10	; 16
    a396:	70 e0       	ldi	r23, 0x00	; 0
    a398:	0e 94 50 4f 	call	0x9ea0	; 0x9ea0 <rcvr_datablock>
    a39c:	89 2b       	or	r24, r25
    a39e:	09 f4       	brne	.+2      	; 0xa3a2 <disk_ioctl+0xb8>
    a3a0:	3f c1       	rjmp	.+638    	; 0xa620 <disk_ioctl+0x336>
        if ((csd[0] >> 6) == 1) {  /* SDC ver 2.00 */
    a3a2:	89 81       	ldd	r24, Y+1	; 0x01
    a3a4:	82 95       	swap	r24
    a3a6:	86 95       	lsr	r24
    a3a8:	86 95       	lsr	r24
    a3aa:	83 70       	andi	r24, 0x03	; 3
    a3ac:	7a 85       	ldd	r23, Y+10	; 0x0a
    a3ae:	49 85       	ldd	r20, Y+9	; 0x09
    a3b0:	81 30       	cpi	r24, 0x01	; 1
    a3b2:	89 f4       	brne	.+34     	; 0xa3d6 <disk_ioctl+0xec>
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
          *(DWORD*)buff = (DWORD)csize << 10;
    a3b4:	87 2f       	mov	r24, r23
    a3b6:	90 e0       	ldi	r25, 0x00	; 0
    a3b8:	01 96       	adiw	r24, 0x01	; 1
    a3ba:	34 2f       	mov	r19, r20
    a3bc:	20 e0       	ldi	r18, 0x00	; 0
    a3be:	82 0f       	add	r24, r18
    a3c0:	93 1f       	adc	r25, r19
    a3c2:	a0 e0       	ldi	r26, 0x00	; 0
    a3c4:	b0 e0       	ldi	r27, 0x00	; 0
    a3c6:	2a e0       	ldi	r18, 0x0A	; 10
    a3c8:	88 0f       	add	r24, r24
    a3ca:	99 1f       	adc	r25, r25
    a3cc:	aa 1f       	adc	r26, r26
    a3ce:	bb 1f       	adc	r27, r27
    a3d0:	2a 95       	dec	r18
    a3d2:	d1 f7       	brne	.-12     	; 0xa3c8 <disk_ioctl+0xde>
    a3d4:	cd c0       	rjmp	.+410    	; 0xa570 <disk_ioctl+0x286>
        } else {          /* SDC ver 1.XX or MMC*/
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
          *(DWORD*)buff = (DWORD)csize << (n - 9);
    a3d6:	42 95       	swap	r20
    a3d8:	46 95       	lsr	r20
    a3da:	46 95       	lsr	r20
    a3dc:	43 70       	andi	r20, 0x03	; 3
    a3de:	28 85       	ldd	r18, Y+8	; 0x08
    a3e0:	30 e0       	ldi	r19, 0x00	; 0
    a3e2:	22 0f       	add	r18, r18
    a3e4:	33 1f       	adc	r19, r19
    a3e6:	22 0f       	add	r18, r18
    a3e8:	33 1f       	adc	r19, r19
    a3ea:	24 0f       	add	r18, r20
    a3ec:	31 1d       	adc	r19, r1
    a3ee:	2f 5f       	subi	r18, 0xFF	; 255
    a3f0:	3f 4f       	sbci	r19, 0xFF	; 255
    a3f2:	8f 81       	ldd	r24, Y+7	; 0x07
    a3f4:	90 e0       	ldi	r25, 0x00	; 0
    a3f6:	83 70       	andi	r24, 0x03	; 3
    a3f8:	90 70       	andi	r25, 0x00	; 0
    a3fa:	98 2f       	mov	r25, r24
    a3fc:	88 27       	eor	r24, r24
    a3fe:	99 0f       	add	r25, r25
    a400:	99 0f       	add	r25, r25
    a402:	28 0f       	add	r18, r24
    a404:	39 1f       	adc	r19, r25
    a406:	40 e0       	ldi	r20, 0x00	; 0
    a408:	50 e0       	ldi	r21, 0x00	; 0
    a40a:	8e 81       	ldd	r24, Y+6	; 0x06
    a40c:	8f 70       	andi	r24, 0x0F	; 15
    a40e:	6b 85       	ldd	r22, Y+11	; 0x0b
    a410:	66 1f       	adc	r22, r22
    a412:	66 27       	eor	r22, r22
    a414:	66 1f       	adc	r22, r22
    a416:	86 0f       	add	r24, r22
    a418:	8e 5f       	subi	r24, 0xFE	; 254
    a41a:	73 70       	andi	r23, 0x03	; 3
    a41c:	77 0f       	add	r23, r23
    a41e:	87 0f       	add	r24, r23
    a420:	90 e0       	ldi	r25, 0x00	; 0
    a422:	09 97       	sbiw	r24, 0x09	; 9
    a424:	04 c0       	rjmp	.+8      	; 0xa42e <disk_ioctl+0x144>
    a426:	22 0f       	add	r18, r18
    a428:	33 1f       	adc	r19, r19
    a42a:	44 1f       	adc	r20, r20
    a42c:	55 1f       	adc	r21, r21
    a42e:	8a 95       	dec	r24
    a430:	d2 f7       	brpl	.-12     	; 0xa426 <disk_ioctl+0x13c>
    a432:	f8 01       	movw	r30, r16
    a434:	20 83       	st	Z, r18
    a436:	31 83       	std	Z+1, r19	; 0x01
    a438:	42 83       	std	Z+2, r20	; 0x02
    a43a:	53 83       	std	Z+3, r21	; 0x03
    a43c:	9e c0       	rjmp	.+316    	; 0xa57a <disk_ioctl+0x290>
        res = RES_OK;
      }
      break;

    case GET_SECTOR_SIZE :  /* Get R/W sector size (WORD) */
      *(WORD*)buff = 512;
    a43e:	80 e0       	ldi	r24, 0x00	; 0
    a440:	92 e0       	ldi	r25, 0x02	; 2
    a442:	fa 01       	movw	r30, r20
    a444:	80 83       	st	Z, r24
    a446:	91 83       	std	Z+1, r25	; 0x01
    a448:	98 c0       	rjmp	.+304    	; 0xa57a <disk_ioctl+0x290>
      res = RES_OK;
      break;

    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
    a44a:	80 91 6f 25 	lds	r24, 0x256F
    a44e:	f8 2e       	mov	r15, r24
    a450:	82 ff       	sbrs	r24, 2
    a452:	39 c0       	rjmp	.+114    	; 0xa4c6 <disk_ioctl+0x1dc>
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
    a454:	8d ec       	ldi	r24, 0xCD	; 205
    a456:	40 e0       	ldi	r20, 0x00	; 0
    a458:	50 e0       	ldi	r21, 0x00	; 0
    a45a:	60 e0       	ldi	r22, 0x00	; 0
    a45c:	70 e0       	ldi	r23, 0x00	; 0
    a45e:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    a462:	88 23       	and	r24, r24
    a464:	09 f0       	breq	.+2      	; 0xa468 <disk_ioctl+0x17e>
    a466:	dc c0       	rjmp	.+440    	; 0xa620 <disk_ioctl+0x336>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a468:	8f ef       	ldi	r24, 0xFF	; 255
    a46a:	e0 ec       	ldi	r30, 0xC0	; 192
    a46c:	fa e0       	ldi	r31, 0x0A	; 10
    a46e:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a470:	80 91 c2 0a 	lds	r24, 0x0AC2
    a474:	87 ff       	sbrs	r24, 7
    a476:	fc cf       	rjmp	.-8      	; 0xa470 <disk_ioctl+0x186>
  return SPIE.DATA;
    a478:	80 91 c3 0a 	lds	r24, 0x0AC3

    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
          rcvr_spi();
          if (rcvr_datablock(csd, 16)) {        /* Read partial block */
    a47c:	ce 01       	movw	r24, r28
    a47e:	01 96       	adiw	r24, 0x01	; 1
    a480:	60 e1       	ldi	r22, 0x10	; 16
    a482:	70 e0       	ldi	r23, 0x00	; 0
    a484:	0e 94 50 4f 	call	0x9ea0	; 0x9ea0 <rcvr_datablock>
    a488:	89 2b       	or	r24, r25
    a48a:	09 f4       	brne	.+2      	; 0xa48e <disk_ioctl+0x1a4>
    a48c:	c9 c0       	rjmp	.+402    	; 0xa620 <disk_ioctl+0x336>
    a48e:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a490:	e0 ec       	ldi	r30, 0xC0	; 192
    a492:	fa e0       	ldi	r31, 0x0A	; 10
    a494:	2f ef       	ldi	r18, 0xFF	; 255
    a496:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a498:	80 91 c2 0a 	lds	r24, 0x0AC2
    a49c:	87 ff       	sbrs	r24, 7
    a49e:	fc cf       	rjmp	.-8      	; 0xa498 <disk_ioctl+0x1ae>
  return SPIE.DATA;
    a4a0:	80 91 c3 0a 	lds	r24, 0x0AC3
    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
          rcvr_spi();
          if (rcvr_datablock(csd, 16)) {        /* Read partial block */
            for (n = 64 - 16; n; n--) rcvr_spi();  /* Purge trailing data */
    a4a4:	91 50       	subi	r25, 0x01	; 1
    a4a6:	b9 f7       	brne	.-18     	; 0xa496 <disk_ioctl+0x1ac>
            *(DWORD*)buff = 16UL << (csd[10] >> 4);
    a4a8:	2b 85       	ldd	r18, Y+11	; 0x0b
    a4aa:	22 95       	swap	r18
    a4ac:	2f 70       	andi	r18, 0x0F	; 15
    a4ae:	80 e1       	ldi	r24, 0x10	; 16
    a4b0:	90 e0       	ldi	r25, 0x00	; 0
    a4b2:	a0 e0       	ldi	r26, 0x00	; 0
    a4b4:	b0 e0       	ldi	r27, 0x00	; 0
    a4b6:	04 c0       	rjmp	.+8      	; 0xa4c0 <disk_ioctl+0x1d6>
    a4b8:	88 0f       	add	r24, r24
    a4ba:	99 1f       	adc	r25, r25
    a4bc:	aa 1f       	adc	r26, r26
    a4be:	bb 1f       	adc	r27, r27
    a4c0:	2a 95       	dec	r18
    a4c2:	d2 f7       	brpl	.-12     	; 0xa4b8 <disk_ioctl+0x1ce>
    a4c4:	55 c0       	rjmp	.+170    	; 0xa570 <disk_ioctl+0x286>
            res = RES_OK;
          }
        }
      } else {          /* SDC ver 1.XX or MMC */
        if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
    a4c6:	89 e4       	ldi	r24, 0x49	; 73
    a4c8:	40 e0       	ldi	r20, 0x00	; 0
    a4ca:	50 e0       	ldi	r21, 0x00	; 0
    a4cc:	60 e0       	ldi	r22, 0x00	; 0
    a4ce:	70 e0       	ldi	r23, 0x00	; 0
    a4d0:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    a4d4:	88 23       	and	r24, r24
    a4d6:	09 f0       	breq	.+2      	; 0xa4da <disk_ioctl+0x1f0>
    a4d8:	a3 c0       	rjmp	.+326    	; 0xa620 <disk_ioctl+0x336>
    a4da:	ce 01       	movw	r24, r28
    a4dc:	01 96       	adiw	r24, 0x01	; 1
    a4de:	60 e1       	ldi	r22, 0x10	; 16
    a4e0:	70 e0       	ldi	r23, 0x00	; 0
    a4e2:	0e 94 50 4f 	call	0x9ea0	; 0x9ea0 <rcvr_datablock>
    a4e6:	89 2b       	or	r24, r25
    a4e8:	09 f4       	brne	.+2      	; 0xa4ec <disk_ioctl+0x202>
    a4ea:	9a c0       	rjmp	.+308    	; 0xa620 <disk_ioctl+0x336>
    a4ec:	4b 85       	ldd	r20, Y+11	; 0x0b
    a4ee:	8c 85       	ldd	r24, Y+12	; 0x0c
          if (CardType & CT_SD1) {  /* SDC ver 1.XX */
    a4f0:	f1 fe       	sbrs	r15, 1
    a4f2:	1b c0       	rjmp	.+54     	; 0xa52a <disk_ioctl+0x240>
            *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    a4f4:	88 1f       	adc	r24, r24
    a4f6:	88 27       	eor	r24, r24
    a4f8:	88 1f       	adc	r24, r24
    a4fa:	90 e0       	ldi	r25, 0x00	; 0
    a4fc:	01 96       	adiw	r24, 0x01	; 1
    a4fe:	24 2f       	mov	r18, r20
    a500:	30 e0       	ldi	r19, 0x00	; 0
    a502:	2f 73       	andi	r18, 0x3F	; 63
    a504:	30 70       	andi	r19, 0x00	; 0
    a506:	22 0f       	add	r18, r18
    a508:	33 1f       	adc	r19, r19
    a50a:	82 0f       	add	r24, r18
    a50c:	93 1f       	adc	r25, r19
    a50e:	2e 85       	ldd	r18, Y+14	; 0x0e
    a510:	22 95       	swap	r18
    a512:	26 95       	lsr	r18
    a514:	26 95       	lsr	r18
    a516:	23 70       	andi	r18, 0x03	; 3
    a518:	30 e0       	ldi	r19, 0x00	; 0
    a51a:	21 50       	subi	r18, 0x01	; 1
    a51c:	30 40       	sbci	r19, 0x00	; 0
    a51e:	02 c0       	rjmp	.+4      	; 0xa524 <disk_ioctl+0x23a>
    a520:	88 0f       	add	r24, r24
    a522:	99 1f       	adc	r25, r25
    a524:	2a 95       	dec	r18
    a526:	e2 f7       	brpl	.-8      	; 0xa520 <disk_ioctl+0x236>
    a528:	21 c0       	rjmp	.+66     	; 0xa56c <disk_ioctl+0x282>
          } else {          /* MMC */
            *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    a52a:	28 2f       	mov	r18, r24
    a52c:	30 e0       	ldi	r19, 0x00	; 0
    a52e:	23 70       	andi	r18, 0x03	; 3
    a530:	30 70       	andi	r19, 0x00	; 0
    a532:	f3 e0       	ldi	r31, 0x03	; 3
    a534:	22 0f       	add	r18, r18
    a536:	33 1f       	adc	r19, r19
    a538:	fa 95       	dec	r31
    a53a:	e1 f7       	brne	.-8      	; 0xa534 <disk_ioctl+0x24a>
    a53c:	82 95       	swap	r24
    a53e:	86 95       	lsr	r24
    a540:	87 70       	andi	r24, 0x07	; 7
    a542:	28 0f       	add	r18, r24
    a544:	31 1d       	adc	r19, r1
    a546:	2f 5f       	subi	r18, 0xFF	; 255
    a548:	3f 4f       	sbci	r19, 0xFF	; 255
    a54a:	84 2f       	mov	r24, r20
    a54c:	90 e0       	ldi	r25, 0x00	; 0
    a54e:	8c 77       	andi	r24, 0x7C	; 124
    a550:	90 70       	andi	r25, 0x00	; 0
    a552:	95 95       	asr	r25
    a554:	87 95       	ror	r24
    a556:	95 95       	asr	r25
    a558:	87 95       	ror	r24
    a55a:	01 96       	adiw	r24, 0x01	; 1
    a55c:	ac 01       	movw	r20, r24
    a55e:	24 9f       	mul	r18, r20
    a560:	c0 01       	movw	r24, r0
    a562:	25 9f       	mul	r18, r21
    a564:	90 0d       	add	r25, r0
    a566:	34 9f       	mul	r19, r20
    a568:	90 0d       	add	r25, r0
    a56a:	11 24       	eor	r1, r1
    a56c:	a0 e0       	ldi	r26, 0x00	; 0
    a56e:	b0 e0       	ldi	r27, 0x00	; 0
    a570:	f8 01       	movw	r30, r16
    a572:	80 83       	st	Z, r24
    a574:	91 83       	std	Z+1, r25	; 0x01
    a576:	a2 83       	std	Z+2, r26	; 0x02
    a578:	b3 83       	std	Z+3, r27	; 0x03
    a57a:	20 e0       	ldi	r18, 0x00	; 0
    a57c:	30 e0       	ldi	r19, 0x00	; 0
    a57e:	52 c0       	rjmp	.+164    	; 0xa624 <disk_ioctl+0x33a>
        }
      }
      break;

    case MMC_GET_TYPE :    /* Get card type flags (1 byte) */
      *ptr = CardType;
    a580:	80 91 6f 25 	lds	r24, 0x256F
    a584:	fa 01       	movw	r30, r20
    a586:	80 83       	st	Z, r24
    a588:	f8 cf       	rjmp	.-16     	; 0xa57a <disk_ioctl+0x290>
      res = RES_OK;
      break;

    case MMC_GET_CSD :    /* Receive CSD as a data block (16 bytes) */
      if (send_cmd(CMD9, 0) == 0    /* READ_CSD */
    a58a:	89 e4       	ldi	r24, 0x49	; 73
    a58c:	01 c0       	rjmp	.+2      	; 0xa590 <disk_ioctl+0x2a6>
        && rcvr_datablock(ptr, 16))
        res = RES_OK;
      break;

    case MMC_GET_CID :    /* Receive CID as a data block (16 bytes) */
      if (send_cmd(CMD10, 0) == 0    /* READ_CID */
    a58e:	8a e4       	ldi	r24, 0x4A	; 74
    a590:	40 e0       	ldi	r20, 0x00	; 0
    a592:	50 e0       	ldi	r21, 0x00	; 0
    a594:	60 e0       	ldi	r22, 0x00	; 0
    a596:	70 e0       	ldi	r23, 0x00	; 0
    a598:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    a59c:	88 23       	and	r24, r24
    a59e:	09 f0       	breq	.+2      	; 0xa5a2 <disk_ioctl+0x2b8>
    a5a0:	3f c0       	rjmp	.+126    	; 0xa620 <disk_ioctl+0x336>
    a5a2:	c8 01       	movw	r24, r16
    a5a4:	60 e1       	ldi	r22, 0x10	; 16
    a5a6:	70 e0       	ldi	r23, 0x00	; 0
    a5a8:	35 c0       	rjmp	.+106    	; 0xa614 <disk_ioctl+0x32a>
        && rcvr_datablock(ptr, 16))
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
    a5aa:	8a e7       	ldi	r24, 0x7A	; 122
    a5ac:	40 e0       	ldi	r20, 0x00	; 0
    a5ae:	50 e0       	ldi	r21, 0x00	; 0
    a5b0:	60 e0       	ldi	r22, 0x00	; 0
    a5b2:	70 e0       	ldi	r23, 0x00	; 0
    a5b4:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    a5b8:	88 23       	and	r24, r24
    a5ba:	91 f5       	brne	.+100    	; 0xa620 <disk_ioctl+0x336>
    a5bc:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a5be:	a0 ec       	ldi	r26, 0xC0	; 192
    a5c0:	ba e0       	ldi	r27, 0x0A	; 10
    a5c2:	9f ef       	ldi	r25, 0xFF	; 255
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
        for (n = 4; n; n--) *ptr++ = rcvr_spi();
    a5c4:	98 01       	movw	r18, r16
    a5c6:	2d 5f       	subi	r18, 0xFD	; 253
    a5c8:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a5ca:	13 96       	adiw	r26, 0x03	; 3
    a5cc:	9c 93       	st	X, r25
    a5ce:	13 97       	sbiw	r26, 0x03	; 3
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a5d0:	80 91 c2 0a 	lds	r24, 0x0AC2
    a5d4:	87 ff       	sbrs	r24, 7
    a5d6:	fc cf       	rjmp	.-8      	; 0xa5d0 <disk_ioctl+0x2e6>
  return SPIE.DATA;
    a5d8:	80 91 c3 0a 	lds	r24, 0x0AC3
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
        for (n = 4; n; n--) *ptr++ = rcvr_spi();
    a5dc:	80 83       	st	Z, r24
    a5de:	e2 17       	cp	r30, r18
    a5e0:	f3 07       	cpc	r31, r19
    a5e2:	59 f2       	breq	.-106    	; 0xa57a <disk_ioctl+0x290>
    a5e4:	31 96       	adiw	r30, 0x01	; 1
    a5e6:	f1 cf       	rjmp	.-30     	; 0xa5ca <disk_ioctl+0x2e0>
        res = RES_OK;
      }
      break;

    case MMC_GET_SDSTAT :  /* Receive SD statsu as a data block (64 bytes) */
      if (send_cmd(ACMD13, 0) == 0) {  /* SD_STATUS */
    a5e8:	8d ec       	ldi	r24, 0xCD	; 205
    a5ea:	40 e0       	ldi	r20, 0x00	; 0
    a5ec:	50 e0       	ldi	r21, 0x00	; 0
    a5ee:	60 e0       	ldi	r22, 0x00	; 0
    a5f0:	70 e0       	ldi	r23, 0x00	; 0
    a5f2:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    a5f6:	88 23       	and	r24, r24
    a5f8:	99 f4       	brne	.+38     	; 0xa620 <disk_ioctl+0x336>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a5fa:	8f ef       	ldi	r24, 0xFF	; 255
    a5fc:	e0 ec       	ldi	r30, 0xC0	; 192
    a5fe:	fa e0       	ldi	r31, 0x0A	; 10
    a600:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a602:	80 91 c2 0a 	lds	r24, 0x0AC2
    a606:	87 ff       	sbrs	r24, 7
    a608:	fc cf       	rjmp	.-8      	; 0xa602 <disk_ioctl+0x318>
  return SPIE.DATA;
    a60a:	80 91 c3 0a 	lds	r24, 0x0AC3
      break;

    case MMC_GET_SDSTAT :  /* Receive SD statsu as a data block (64 bytes) */
      if (send_cmd(ACMD13, 0) == 0) {  /* SD_STATUS */
        rcvr_spi();
        if (rcvr_datablock(ptr, 64))
    a60e:	c8 01       	movw	r24, r16
    a610:	60 e4       	ldi	r22, 0x40	; 64
    a612:	70 e0       	ldi	r23, 0x00	; 0
    a614:	0e 94 50 4f 	call	0x9ea0	; 0x9ea0 <rcvr_datablock>
    a618:	20 e0       	ldi	r18, 0x00	; 0
    a61a:	30 e0       	ldi	r19, 0x00	; 0
    a61c:	89 2b       	or	r24, r25
    a61e:	11 f4       	brne	.+4      	; 0xa624 <disk_ioctl+0x33a>
    a620:	21 e0       	ldi	r18, 0x01	; 1
    a622:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a624:	80 e1       	ldi	r24, 0x10	; 16
    a626:	e0 e8       	ldi	r30, 0x80	; 128
    a628:	f6 e0       	ldi	r31, 0x06	; 6
    a62a:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a62c:	8f ef       	ldi	r24, 0xFF	; 255
    a62e:	e0 ec       	ldi	r30, 0xC0	; 192
    a630:	fa e0       	ldi	r31, 0x0A	; 10
    a632:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a634:	80 91 c2 0a 	lds	r24, 0x0AC2
    a638:	87 ff       	sbrs	r24, 7
    a63a:	fc cf       	rjmp	.-8      	; 0xa634 <disk_ioctl+0x34a>
  return SPIE.DATA;
    a63c:	80 91 c3 0a 	lds	r24, 0x0AC3
    a640:	02 c0       	rjmp	.+4      	; 0xa646 <disk_ioctl+0x35c>
    a642:	24 e0       	ldi	r18, 0x04	; 4
    a644:	30 e0       	ldi	r19, 0x00	; 0

    release_spi();
  }

  return res;
}
    a646:	c9 01       	movw	r24, r18
    a648:	60 96       	adiw	r28, 0x10	; 16
    a64a:	e5 e0       	ldi	r30, 0x05	; 5
    a64c:	0c 94 d1 57 	jmp	0xafa2	; 0xafa2 <__epilogue_restores__+0x1a>

0000a650 <disk_timerproc>:
{
  static BYTE pv;
  BYTE n, s;


  n = Timer1;            /* 100Hz decrement timer */
    a650:	80 91 6d 25 	lds	r24, 0x256D
  if (n) Timer1 = --n;
    a654:	88 23       	and	r24, r24
    a656:	19 f0       	breq	.+6      	; 0xa65e <disk_timerproc+0xe>
    a658:	81 50       	subi	r24, 0x01	; 1
    a65a:	80 93 6d 25 	sts	0x256D, r24
  n = Timer2;
    a65e:	80 91 6e 25 	lds	r24, 0x256E
  if (n) Timer2 = --n;
    a662:	88 23       	and	r24, r24
    a664:	19 f0       	breq	.+6      	; 0xa66c <disk_timerproc+0x1c>
    a666:	81 50       	subi	r24, 0x01	; 1
    a668:	80 93 6e 25 	sts	0x256E, r24

  n = pv;
    a66c:	90 91 6c 25 	lds	r25, 0x256C
  pv = SOCKPORT & (SOCKWP | SOCKINS);  /* Sample socket switch */
    a670:	80 91 e8 06 	lds	r24, 0x06E8
    a674:	83 70       	andi	r24, 0x03	; 3
    a676:	80 93 6c 25 	sts	0x256C, r24

  if (n == pv) {          /* Have contacts stabled? */
    a67a:	98 17       	cp	r25, r24
    a67c:	71 f4       	brne	.+28     	; 0xa69a <disk_timerproc+0x4a>
    s = Stat;
    a67e:	80 91 d9 24 	lds	r24, 0x24D9

    if (pv & SOCKWP)      /* WP is H (write protected) */
    a682:	90 ff       	sbrs	r25, 0
    a684:	02 c0       	rjmp	.+4      	; 0xa68a <disk_timerproc+0x3a>
      s |= STA_PROTECT;
    a686:	84 60       	ori	r24, 0x04	; 4
    a688:	01 c0       	rjmp	.+2      	; 0xa68c <disk_timerproc+0x3c>
    else            /* WP is L (write enabled) */
      s &= ~STA_PROTECT;
    a68a:	8b 7f       	andi	r24, 0xFB	; 251

    if (pv & SOCKINS)      /* INS = H (Socket empty) */
    a68c:	91 ff       	sbrs	r25, 1
    a68e:	02 c0       	rjmp	.+4      	; 0xa694 <disk_timerproc+0x44>
      s |= (STA_NODISK | STA_NOINIT);
    a690:	83 60       	ori	r24, 0x03	; 3
    a692:	01 c0       	rjmp	.+2      	; 0xa696 <disk_timerproc+0x46>
    else            /* INS = L (Card inserted) */
      s &= ~STA_NODISK;
    a694:	8d 7f       	andi	r24, 0xFD	; 253

    Stat = s;
    a696:	80 93 d9 24 	sts	0x24D9, r24
    a69a:	08 95       	ret

0000a69c <__vector_53>:
/*---------------------------------------------------------*/
/* 100Hz timer interrupt generated by TCE1                 */
/*---------------------------------------------------------*/

ISR(TCE1_OVF_vect)
{
    a69c:	1f 92       	push	r1
    a69e:	0f 92       	push	r0
    a6a0:	0f b6       	in	r0, 0x3f	; 63
    a6a2:	0f 92       	push	r0
    a6a4:	08 b6       	in	r0, 0x38	; 56
    a6a6:	0f 92       	push	r0
    a6a8:	09 b6       	in	r0, 0x39	; 57
    a6aa:	0f 92       	push	r0
    a6ac:	0b b6       	in	r0, 0x3b	; 59
    a6ae:	0f 92       	push	r0
    a6b0:	11 24       	eor	r1, r1
    a6b2:	18 be       	out	0x38, r1	; 56
    a6b4:	19 be       	out	0x39, r1	; 57
    a6b6:	1b be       	out	0x3b, r1	; 59
    a6b8:	2f 93       	push	r18
    a6ba:	3f 93       	push	r19
    a6bc:	4f 93       	push	r20
    a6be:	5f 93       	push	r21
    a6c0:	6f 93       	push	r22
    a6c2:	7f 93       	push	r23
    a6c4:	8f 93       	push	r24
    a6c6:	9f 93       	push	r25
    a6c8:	af 93       	push	r26
    a6ca:	bf 93       	push	r27
    a6cc:	ef 93       	push	r30
    a6ce:	ff 93       	push	r31
  disk_timerproc();  /* Drive timer procedure of low level disk I/O module */
    a6d0:	0e 94 28 53 	call	0xa650	; 0xa650 <disk_timerproc>
}
    a6d4:	ff 91       	pop	r31
    a6d6:	ef 91       	pop	r30
    a6d8:	bf 91       	pop	r27
    a6da:	af 91       	pop	r26
    a6dc:	9f 91       	pop	r25
    a6de:	8f 91       	pop	r24
    a6e0:	7f 91       	pop	r23
    a6e2:	6f 91       	pop	r22
    a6e4:	5f 91       	pop	r21
    a6e6:	4f 91       	pop	r20
    a6e8:	3f 91       	pop	r19
    a6ea:	2f 91       	pop	r18
    a6ec:	0f 90       	pop	r0
    a6ee:	0b be       	out	0x3b, r0	; 59
    a6f0:	0f 90       	pop	r0
    a6f2:	09 be       	out	0x39, r0	; 57
    a6f4:	0f 90       	pop	r0
    a6f6:	08 be       	out	0x38, r0	; 56
    a6f8:	0f 90       	pop	r0
    a6fa:	0f be       	out	0x3f, r0	; 63
    a6fc:	0f 90       	pop	r0
    a6fe:	1f 90       	pop	r1
    a700:	18 95       	reti

0000a702 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
  BYTE drv    /* Physical drive nmuber (0) */
)
{
    a702:	a4 e0       	ldi	r26, 0x04	; 4
    a704:	b0 e0       	ldi	r27, 0x00	; 0
    a706:	e7 e8       	ldi	r30, 0x87	; 135
    a708:	f3 e5       	ldi	r31, 0x53	; 83
    a70a:	0c 94 b4 57 	jmp	0xaf68	; 0xaf68 <__prologue_saves__+0x18>
  BYTE n, cmd, ty, ocr[4];


  if (drv) return STA_NOINIT;      /* Supports only single drive */
    a70e:	88 23       	and	r24, r24
    a710:	11 f0       	breq	.+4      	; 0xa716 <disk_initialize+0x14>
    a712:	81 e0       	ldi	r24, 0x01	; 1
    a714:	d8 c0       	rjmp	.+432    	; 0xa8c6 <disk_initialize+0x1c4>
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */
    a716:	80 91 d9 24 	lds	r24, 0x24D9
    a71a:	81 fd       	sbrc	r24, 1
    a71c:	d2 c0       	rjmp	.+420    	; 0xa8c2 <disk_initialize+0x1c0>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
  for (Timer1 = 3; Timer1; );  /* Wait for 30ms */
    a71e:	83 e0       	ldi	r24, 0x03	; 3
    a720:	80 93 6d 25 	sts	0x256D, r24
    a724:	80 91 6d 25 	lds	r24, 0x256D
    a728:	88 23       	and	r24, r24
    a72a:	e1 f7       	brne	.-8      	; 0xa724 <disk_initialize+0x22>
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
    a72c:	13 e5       	ldi	r17, 0x53	; 83
    a72e:	10 93 c0 0a 	sts	0x0AC0, r17

  if (drv) return STA_NOINIT;      /* Supports only single drive */
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */

  power_on();              /* Force socket power on */
  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc));  /* 16MHz */
    a732:	81 e4       	ldi	r24, 0x41	; 65
    a734:	90 e0       	ldi	r25, 0x00	; 0
    a736:	64 e0       	ldi	r22, 0x04	; 4
    a738:	0e 94 4e 20 	call	0x409c	; 0x409c <CCPWrite>
  FCLK_SLOW();
    a73c:	10 93 c0 0a 	sts	0x0AC0, r17
    a740:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a742:	e0 ec       	ldi	r30, 0xC0	; 192
    a744:	fa e0       	ldi	r31, 0x0A	; 10
    a746:	2f ef       	ldi	r18, 0xFF	; 255
    a748:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a74a:	80 91 c2 0a 	lds	r24, 0x0AC2
    a74e:	87 ff       	sbrs	r24, 7
    a750:	fc cf       	rjmp	.-8      	; 0xa74a <disk_initialize+0x48>
  return SPIE.DATA;
    a752:	80 91 c3 0a 	lds	r24, 0x0AC3
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */

  power_on();              /* Force socket power on */
  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc));  /* 16MHz */
  FCLK_SLOW();
  for (n = 10; n; n--) rcvr_spi();  /* 80 dummy clocks */
    a756:	91 50       	subi	r25, 0x01	; 1
    a758:	b9 f7       	brne	.-18     	; 0xa748 <disk_initialize+0x46>

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    a75a:	80 e4       	ldi	r24, 0x40	; 64
    a75c:	40 e0       	ldi	r20, 0x00	; 0
    a75e:	50 e0       	ldi	r21, 0x00	; 0
    a760:	60 e0       	ldi	r22, 0x00	; 0
    a762:	70 e0       	ldi	r23, 0x00	; 0
    a764:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    a768:	81 30       	cpi	r24, 0x01	; 1
    a76a:	09 f0       	breq	.+2      	; 0xa76e <disk_initialize+0x6c>
    a76c:	87 c0       	rjmp	.+270    	; 0xa87c <disk_initialize+0x17a>
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    a76e:	84 e6       	ldi	r24, 0x64	; 100
    a770:	80 93 6d 25 	sts	0x256D, r24
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
    a774:	88 e4       	ldi	r24, 0x48	; 72
    a776:	4a ea       	ldi	r20, 0xAA	; 170
    a778:	51 e0       	ldi	r21, 0x01	; 1
    a77a:	60 e0       	ldi	r22, 0x00	; 0
    a77c:	70 e0       	ldi	r23, 0x00	; 0
    a77e:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    a782:	81 30       	cpi	r24, 0x01	; 1
    a784:	09 f0       	breq	.+2      	; 0xa788 <disk_initialize+0x86>
    a786:	53 c0       	rjmp	.+166    	; 0xa82e <disk_initialize+0x12c>
    a788:	7e 01       	movw	r14, r28
    a78a:	08 94       	sec
    a78c:	e1 1c       	adc	r14, r1
    a78e:	f1 1c       	adc	r15, r1
    a790:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a792:	e0 ec       	ldi	r30, 0xC0	; 192
    a794:	fa e0       	ldi	r31, 0x0A	; 10
    a796:	9f ef       	ldi	r25, 0xFF	; 255

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
    a798:	9e 01       	movw	r18, r28
    a79a:	2b 5f       	subi	r18, 0xFB	; 251
    a79c:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a79e:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a7a0:	80 91 c2 0a 	lds	r24, 0x0AC2
    a7a4:	87 ff       	sbrs	r24, 7
    a7a6:	fc cf       	rjmp	.-8      	; 0xa7a0 <disk_initialize+0x9e>
  return SPIE.DATA;
    a7a8:	80 91 c3 0a 	lds	r24, 0x0AC3

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
    a7ac:	d8 01       	movw	r26, r16
    a7ae:	8d 93       	st	X+, r24
    a7b0:	8d 01       	movw	r16, r26
    a7b2:	a2 17       	cp	r26, r18
    a7b4:	b3 07       	cpc	r27, r19
    a7b6:	99 f7       	brne	.-26     	; 0xa79e <disk_initialize+0x9c>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {        /* The card can work at vdd range of 2.7-3.6V */
    a7b8:	8b 81       	ldd	r24, Y+3	; 0x03
    a7ba:	81 30       	cpi	r24, 0x01	; 1
    a7bc:	09 f0       	breq	.+2      	; 0xa7c0 <disk_initialize+0xbe>
    a7be:	5e c0       	rjmp	.+188    	; 0xa87c <disk_initialize+0x17a>
    a7c0:	8c 81       	ldd	r24, Y+4	; 0x04
    a7c2:	8a 3a       	cpi	r24, 0xAA	; 170
    a7c4:	09 f0       	breq	.+2      	; 0xa7c8 <disk_initialize+0xc6>
    a7c6:	5a c0       	rjmp	.+180    	; 0xa87c <disk_initialize+0x17a>
        while (Timer1 && send_cmd(ACMD41, 1UL << 30));  /* Wait for leaving idle state (ACMD41 with HCS bit) */
    a7c8:	80 91 6d 25 	lds	r24, 0x256D
    a7cc:	88 23       	and	r24, r24
    a7ce:	49 f0       	breq	.+18     	; 0xa7e2 <disk_initialize+0xe0>
    a7d0:	89 ee       	ldi	r24, 0xE9	; 233
    a7d2:	40 e0       	ldi	r20, 0x00	; 0
    a7d4:	50 e0       	ldi	r21, 0x00	; 0
    a7d6:	60 e0       	ldi	r22, 0x00	; 0
    a7d8:	70 e4       	ldi	r23, 0x40	; 64
    a7da:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    a7de:	88 23       	and	r24, r24
    a7e0:	99 f7       	brne	.-26     	; 0xa7c8 <disk_initialize+0xc6>
        if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit in the OCR */
    a7e2:	80 91 6d 25 	lds	r24, 0x256D
    a7e6:	88 23       	and	r24, r24
    a7e8:	09 f4       	brne	.+2      	; 0xa7ec <disk_initialize+0xea>
    a7ea:	48 c0       	rjmp	.+144    	; 0xa87c <disk_initialize+0x17a>
    a7ec:	8a e7       	ldi	r24, 0x7A	; 122
    a7ee:	40 e0       	ldi	r20, 0x00	; 0
    a7f0:	50 e0       	ldi	r21, 0x00	; 0
    a7f2:	60 e0       	ldi	r22, 0x00	; 0
    a7f4:	70 e0       	ldi	r23, 0x00	; 0
    a7f6:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    a7fa:	88 23       	and	r24, r24
    a7fc:	09 f0       	breq	.+2      	; 0xa800 <disk_initialize+0xfe>
    a7fe:	3e c0       	rjmp	.+124    	; 0xa87c <disk_initialize+0x17a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a800:	e0 ec       	ldi	r30, 0xC0	; 192
    a802:	fa e0       	ldi	r31, 0x0A	; 10
    a804:	9f ef       	ldi	r25, 0xFF	; 255
    a806:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a808:	80 91 c2 0a 	lds	r24, 0x0AC2
    a80c:	87 ff       	sbrs	r24, 7
    a80e:	fc cf       	rjmp	.-8      	; 0xa808 <disk_initialize+0x106>
  return SPIE.DATA;
    a810:	80 91 c3 0a 	lds	r24, 0x0AC3
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {        /* The card can work at vdd range of 2.7-3.6V */
        while (Timer1 && send_cmd(ACMD41, 1UL << 30));  /* Wait for leaving idle state (ACMD41 with HCS bit) */
        if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit in the OCR */
          for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    a814:	d7 01       	movw	r26, r14
    a816:	8d 93       	st	X+, r24
    a818:	7d 01       	movw	r14, r26
    a81a:	a0 17       	cp	r26, r16
    a81c:	b1 07       	cpc	r27, r17
    a81e:	99 f7       	brne	.-26     	; 0xa806 <disk_initialize+0x104>
          ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* SDv2 */
    a820:	89 81       	ldd	r24, Y+1	; 0x01
    a822:	86 fd       	sbrc	r24, 6
    a824:	02 c0       	rjmp	.+4      	; 0xa82a <disk_initialize+0x128>
    a826:	14 e0       	ldi	r17, 0x04	; 4
    a828:	2a c0       	rjmp	.+84     	; 0xa87e <disk_initialize+0x17c>
    a82a:	1c e0       	ldi	r17, 0x0C	; 12
    a82c:	28 c0       	rjmp	.+80     	; 0xa87e <disk_initialize+0x17c>
        }
      }
    } else {              /* SDSC or MMC */
      if (send_cmd(ACMD41, 0) <= 1)   {
    a82e:	89 ee       	ldi	r24, 0xE9	; 233
    a830:	40 e0       	ldi	r20, 0x00	; 0
    a832:	50 e0       	ldi	r21, 0x00	; 0
    a834:	60 e0       	ldi	r22, 0x00	; 0
    a836:	70 e0       	ldi	r23, 0x00	; 0
    a838:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    a83c:	82 30       	cpi	r24, 0x02	; 2
    a83e:	18 f0       	brcs	.+6      	; 0xa846 <disk_initialize+0x144>
    a840:	01 e4       	ldi	r16, 0x41	; 65
    a842:	11 e0       	ldi	r17, 0x01	; 1
    a844:	02 c0       	rjmp	.+4      	; 0xa84a <disk_initialize+0x148>
    a846:	09 ee       	ldi	r16, 0xE9	; 233
    a848:	12 e0       	ldi	r17, 0x02	; 2
        ty = CT_SD1; cmd = ACMD41;  /* SDv1 */
      } else {
        ty = CT_MMC; cmd = CMD1;  /* MMCv3 */
      }
      while (Timer1 && send_cmd(cmd, 0));      /* Wait for leaving idle state */
    a84a:	80 91 6d 25 	lds	r24, 0x256D
    a84e:	88 23       	and	r24, r24
    a850:	49 f0       	breq	.+18     	; 0xa864 <disk_initialize+0x162>
    a852:	80 2f       	mov	r24, r16
    a854:	40 e0       	ldi	r20, 0x00	; 0
    a856:	50 e0       	ldi	r21, 0x00	; 0
    a858:	60 e0       	ldi	r22, 0x00	; 0
    a85a:	70 e0       	ldi	r23, 0x00	; 0
    a85c:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    a860:	88 23       	and	r24, r24
    a862:	99 f7       	brne	.-26     	; 0xa84a <disk_initialize+0x148>
      if (!Timer1 || send_cmd(CMD16, 512) != 0)  /* Set R/W block length to 512 */
    a864:	80 91 6d 25 	lds	r24, 0x256D
    a868:	88 23       	and	r24, r24
    a86a:	41 f0       	breq	.+16     	; 0xa87c <disk_initialize+0x17a>
    a86c:	80 e5       	ldi	r24, 0x50	; 80
    a86e:	40 e0       	ldi	r20, 0x00	; 0
    a870:	52 e0       	ldi	r21, 0x02	; 2
    a872:	60 e0       	ldi	r22, 0x00	; 0
    a874:	70 e0       	ldi	r23, 0x00	; 0
    a876:	0e 94 08 50 	call	0xa010	; 0xa010 <send_cmd>
    a87a:	81 11       	cpse	r24, r1
    a87c:	10 e0       	ldi	r17, 0x00	; 0
        ty = 0;
    }
  }
  CardType = ty;
    a87e:	10 93 6f 25 	sts	0x256F, r17
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a882:	80 e1       	ldi	r24, 0x10	; 16
    a884:	e0 e8       	ldi	r30, 0x80	; 128
    a886:	f6 e0       	ldi	r31, 0x06	; 6
    a888:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a88a:	8f ef       	ldi	r24, 0xFF	; 255
    a88c:	e0 ec       	ldi	r30, 0xC0	; 192
    a88e:	fa e0       	ldi	r31, 0x0A	; 10
    a890:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a892:	80 91 c2 0a 	lds	r24, 0x0AC2
    a896:	87 ff       	sbrs	r24, 7
    a898:	fc cf       	rjmp	.-8      	; 0xa892 <disk_initialize+0x190>
  return SPIE.DATA;
    a89a:	80 91 c3 0a 	lds	r24, 0x0AC3
    }
  }
  CardType = ty;
  release_spi();

  if (ty) {      /* Initialization succeded */
    a89e:	11 23       	and	r17, r17
    a8a0:	49 f0       	breq	.+18     	; 0xa8b4 <disk_initialize+0x1b2>
    Stat &= ~STA_NOINIT;    /* Clear STA_NOINIT */
    a8a2:	80 91 d9 24 	lds	r24, 0x24D9
    a8a6:	8e 7f       	andi	r24, 0xFE	; 254
    a8a8:	80 93 d9 24 	sts	0x24D9, r24
    FCLK_FAST();
    a8ac:	80 ed       	ldi	r24, 0xD0	; 208
    a8ae:	80 93 c0 0a 	sts	0x0AC0, r24
    a8b2:	02 c0       	rjmp	.+4      	; 0xa8b8 <disk_initialize+0x1b6>
  } else {      /* Initialization failed */
    power_off();
    a8b4:	0e 94 30 4f 	call	0x9e60	; 0x9e60 <power_off>
  }

  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc));  /* 32MHz */
    a8b8:	81 e4       	ldi	r24, 0x41	; 65
    a8ba:	90 e0       	ldi	r25, 0x00	; 0
    a8bc:	60 e0       	ldi	r22, 0x00	; 0
    a8be:	0e 94 4e 20 	call	0x409c	; 0x409c <CCPWrite>
  return Stat;
    a8c2:	80 91 d9 24 	lds	r24, 0x24D9
}
    a8c6:	24 96       	adiw	r28, 0x04	; 4
    a8c8:	e6 e0       	ldi	r30, 0x06	; 6
    a8ca:	0c 94 d0 57 	jmp	0xafa0	; 0xafa0 <__epilogue_restores__+0x18>

0000a8ce <rtc_gettime>:
#include <string.h>
#include "rtc.h"


BOOL rtc_gettime (RTCLK *rtc)
{
    a8ce:	fc 01       	movw	r30, r24
	rtc->sec = 30;
    a8d0:	8e e1       	ldi	r24, 0x1E	; 30
    a8d2:	87 83       	std	Z+7, r24	; 0x07
	rtc->min = 59;
    a8d4:	8b e3       	ldi	r24, 0x3B	; 59
    a8d6:	86 83       	std	Z+6, r24	; 0x06
	rtc->hour = 11;
    a8d8:	8b e0       	ldi	r24, 0x0B	; 11
    a8da:	85 83       	std	Z+5, r24	; 0x05
	rtc->mday = 3;
    a8dc:	83 e0       	ldi	r24, 0x03	; 3
    a8de:	83 83       	std	Z+3, r24	; 0x03
	rtc->month = 9;
    a8e0:	89 e0       	ldi	r24, 0x09	; 9
    a8e2:	82 83       	std	Z+2, r24	; 0x02
	rtc->year = 2009;
    a8e4:	89 ed       	ldi	r24, 0xD9	; 217
    a8e6:	97 e0       	ldi	r25, 0x07	; 7
    a8e8:	80 83       	st	Z, r24
    a8ea:	91 83       	std	Z+1, r25	; 0x01

	return TRUE;
}
    a8ec:	81 e0       	ldi	r24, 0x01	; 1
    a8ee:	90 e0       	ldi	r25, 0x00	; 0
    a8f0:	08 95       	ret

0000a8f2 <rtc_settime>:
	buf[4] = rtc->mday / 10 * 16 + rtc->mday % 10;
	buf[5] = rtc->month / 10 * 16 + rtc->month % 10;
	buf[6] = (rtc->year - 2000) / 10 * 16 + (rtc->year - 2000) % 10;

	return TRUE;
}
    a8f2:	81 e0       	ldi	r24, 0x01	; 1
    a8f4:	90 e0       	ldi	r25, 0x00	; 0
    a8f6:	08 95       	ret

0000a8f8 <rtc_init>:

BOOL rtc_init (void)
{
	return TRUE;
}
    a8f8:	81 e0       	ldi	r24, 0x01	; 1
    a8fa:	90 e0       	ldi	r25, 0x00	; 0
    a8fc:	08 95       	ret

0000a8fe <get_fattime>:
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
    a8fe:	6f e6       	ldi	r22, 0x6F	; 111
    a900:	7f e5       	ldi	r23, 0x5F	; 95
    a902:	83 e2       	ldi	r24, 0x23	; 35
    a904:	9b e3       	ldi	r25, 0x3B	; 59
    a906:	08 95       	ret

0000a908 <__vector_108>:

volatile uint32_t ticks=0;


ISR(TCF0_OVF_vect)			/*signal Handler for timer ovf 0 */
{
    a908:	1f 92       	push	r1
    a90a:	0f 92       	push	r0
    a90c:	0f b6       	in	r0, 0x3f	; 63
    a90e:	0f 92       	push	r0
    a910:	08 b6       	in	r0, 0x38	; 56
    a912:	0f 92       	push	r0
    a914:	09 b6       	in	r0, 0x39	; 57
    a916:	0f 92       	push	r0
    a918:	11 24       	eor	r1, r1
    a91a:	18 be       	out	0x38, r1	; 56
    a91c:	19 be       	out	0x39, r1	; 57
    a91e:	8f 93       	push	r24
    a920:	9f 93       	push	r25
    a922:	af 93       	push	r26
    a924:	bf 93       	push	r27
	ticks++;
    a926:	80 91 70 25 	lds	r24, 0x2570
    a92a:	90 91 71 25 	lds	r25, 0x2571
    a92e:	a0 91 72 25 	lds	r26, 0x2572
    a932:	b0 91 73 25 	lds	r27, 0x2573
    a936:	01 96       	adiw	r24, 0x01	; 1
    a938:	a1 1d       	adc	r26, r1
    a93a:	b1 1d       	adc	r27, r1
    a93c:	80 93 70 25 	sts	0x2570, r24
    a940:	90 93 71 25 	sts	0x2571, r25
    a944:	a0 93 72 25 	sts	0x2572, r26
    a948:	b0 93 73 25 	sts	0x2573, r27
}
    a94c:	bf 91       	pop	r27
    a94e:	af 91       	pop	r26
    a950:	9f 91       	pop	r25
    a952:	8f 91       	pop	r24
    a954:	0f 90       	pop	r0
    a956:	09 be       	out	0x39, r0	; 57
    a958:	0f 90       	pop	r0
    a95a:	08 be       	out	0x38, r0	; 56
    a95c:	0f 90       	pop	r0
    a95e:	0f be       	out	0x3f, r0	; 63
    a960:	0f 90       	pop	r0
    a962:	1f 90       	pop	r1
    a964:	18 95       	reti

0000a966 <timer_init>:


void timer_init(void)
{	
	ticks=0;
    a966:	10 92 70 25 	sts	0x2570, r1
    a96a:	10 92 71 25 	sts	0x2571, r1
    a96e:	10 92 72 25 	sts	0x2572, r1
    a972:	10 92 73 25 	sts	0x2573, r1
  TCF0.CTRLA = 0x04;      // Prescaler: clk/8
    a976:	e0 e0       	ldi	r30, 0x00	; 0
    a978:	fb e0       	ldi	r31, 0x0B	; 11
    a97a:	84 e0       	ldi	r24, 0x04	; 4
    a97c:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    a97e:	8f e9       	ldi	r24, 0x9F	; 159
    a980:	9f e0       	ldi	r25, 0x0F	; 15
    a982:	86 a3       	std	Z+38, r24	; 0x26
    a984:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    a986:	82 e0       	ldi	r24, 0x02	; 2
    a988:	86 83       	std	Z+6, r24	; 0x06
}
    a98a:	08 95       	ret

0000a98c <Wait>:

void Wait(uint16_t delay)
{
    a98c:	ef 92       	push	r14
    a98e:	ff 92       	push	r15
    a990:	0f 93       	push	r16
    a992:	1f 93       	push	r17
	uint32_t temp=ticks;
    a994:	e0 90 70 25 	lds	r14, 0x2570
    a998:	f0 90 71 25 	lds	r15, 0x2571
    a99c:	00 91 72 25 	lds	r16, 0x2572
    a9a0:	10 91 73 25 	lds	r17, 0x2573

	while(ticks - temp < delay);
    a9a4:	9c 01       	movw	r18, r24
    a9a6:	40 e0       	ldi	r20, 0x00	; 0
    a9a8:	50 e0       	ldi	r21, 0x00	; 0
    a9aa:	80 91 70 25 	lds	r24, 0x2570
    a9ae:	90 91 71 25 	lds	r25, 0x2571
    a9b2:	a0 91 72 25 	lds	r26, 0x2572
    a9b6:	b0 91 73 25 	lds	r27, 0x2573
    a9ba:	8e 19       	sub	r24, r14
    a9bc:	9f 09       	sbc	r25, r15
    a9be:	a0 0b       	sbc	r26, r16
    a9c0:	b1 0b       	sbc	r27, r17
    a9c2:	82 17       	cp	r24, r18
    a9c4:	93 07       	cpc	r25, r19
    a9c6:	a4 07       	cpc	r26, r20
    a9c8:	b5 07       	cpc	r27, r21
    a9ca:	78 f3       	brcs	.-34     	; 0xa9aa <Wait+0x1e>
}
    a9cc:	1f 91       	pop	r17
    a9ce:	0f 91       	pop	r16
    a9d0:	ff 90       	pop	r15
    a9d2:	ef 90       	pop	r14
    a9d4:	08 95       	ret

0000a9d6 <timer_fine_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 64
// with prescaler = 64, counts happen every 32E6/64, so 1 counts are 2 us
// full count is (2^16)*(64)/(32E6) = 128 ms

TCF1.CTRLA = 0x05;     /*Prescaler = 64*/
    a9d6:	e0 e4       	ldi	r30, 0x40	; 64
    a9d8:	fb e0       	ldi	r31, 0x0B	; 11
    a9da:	85 e0       	ldi	r24, 0x05	; 5
    a9dc:	80 83       	st	Z, r24
TCF1.CNT = 0; //reset TCF1 
    a9de:	10 a2       	std	Z+32, r1	; 0x20
    a9e0:	11 a2       	std	Z+33, r1	; 0x21
}
    a9e2:	08 95       	ret

0000a9e4 <timer_fine_toc>:

uint16_t timer_fine_toc(void)
{
// read and return the 16 bit timer
	uint16_t del_t;
	del_t = TCF1.CNT * 2;
    a9e4:	e0 e4       	ldi	r30, 0x40	; 64
    a9e6:	fb e0       	ldi	r31, 0x0B	; 11
    a9e8:	20 a1       	ldd	r18, Z+32	; 0x20
    a9ea:	31 a1       	ldd	r19, Z+33	; 0x21
    a9ec:	22 0f       	add	r18, r18
    a9ee:	33 1f       	adc	r19, r19
	return del_t;
}	
    a9f0:	c9 01       	movw	r24, r18
    a9f2:	08 95       	ret

0000a9f4 <timer_coarse_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 8
// with prescaler = 8, and per = 4000, overflow happens every 1ms

	
	ticks=0;
    a9f4:	10 92 70 25 	sts	0x2570, r1
    a9f8:	10 92 71 25 	sts	0x2571, r1
    a9fc:	10 92 72 25 	sts	0x2572, r1
    aa00:	10 92 73 25 	sts	0x2573, r1

  TCF0.CTRLA = 0x04;      // Prescaler: 8
    aa04:	e0 e0       	ldi	r30, 0x00	; 0
    aa06:	fb e0       	ldi	r31, 0x0B	; 11
    aa08:	84 e0       	ldi	r24, 0x04	; 4
    aa0a:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    aa0c:	8f e9       	ldi	r24, 0x9F	; 159
    aa0e:	9f e0       	ldi	r25, 0x0F	; 15
    aa10:	86 a3       	std	Z+38, r24	; 0x26
    aa12:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    aa14:	82 e0       	ldi	r24, 0x02	; 2
    aa16:	86 83       	std	Z+6, r24	; 0x06
  TCF0.CNT = 0;            //reset TCF0
    aa18:	10 a2       	std	Z+32, r1	; 0x20
    aa1a:	11 a2       	std	Z+33, r1	; 0x21
}
    aa1c:	08 95       	ret

0000aa1e <timer_coarse_toc>:
uint32_t timer_coarse_toc(void)
{
// read and return the ticks counter
// to convert this value to ms - divide by 
	unsigned long del_t;	
	del_t = (uint32_t)ticks;
    aa1e:	20 91 70 25 	lds	r18, 0x2570
    aa22:	30 91 71 25 	lds	r19, 0x2571
    aa26:	40 91 72 25 	lds	r20, 0x2572
    aa2a:	50 91 73 25 	lds	r21, 0x2573
	return del_t;
}	
    aa2e:	b9 01       	movw	r22, r18
    aa30:	ca 01       	movw	r24, r20
    aa32:	08 95       	ret

0000aa34 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    aa34:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    aa36:	e0 ec       	ldi	r30, 0xC0	; 192
    aa38:	f1 e0       	ldi	r31, 0x01	; 1
    aa3a:	80 91 cf 01 	lds	r24, 0x01CF
    aa3e:	87 fd       	sbrc	r24, 7
    aa40:	fa cf       	rjmp	.-12     	; 0xaa36 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    aa42:	26 2f       	mov	r18, r22
    aa44:	30 e0       	ldi	r19, 0x00	; 0
    aa46:	2f 71       	andi	r18, 0x1F	; 31
    aa48:	30 70       	andi	r19, 0x00	; 0
    aa4a:	89 2f       	mov	r24, r25
    aa4c:	90 e0       	ldi	r25, 0x00	; 0
    aa4e:	45 e0       	ldi	r20, 0x05	; 5
    aa50:	88 0f       	add	r24, r24
    aa52:	99 1f       	adc	r25, r25
    aa54:	4a 95       	dec	r20
    aa56:	e1 f7       	brne	.-8      	; 0xaa50 <EEPROM_ReadByte+0x1c>
    aa58:	28 2b       	or	r18, r24
    aa5a:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    aa5c:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    aa60:	83 2f       	mov	r24, r19
    aa62:	8f 71       	andi	r24, 0x1F	; 31
    aa64:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    aa66:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    aa68:	86 e0       	ldi	r24, 0x06	; 6
    aa6a:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    aa6c:	eb ec       	ldi	r30, 0xCB	; 203
    aa6e:	f1 e0       	ldi	r31, 0x01	; 1
    aa70:	21 e0       	ldi	r18, 0x01	; 1
    aa72:	30 e0       	ldi	r19, 0x00	; 0
    aa74:	88 ed       	ldi	r24, 0xD8	; 216
    aa76:	90 e0       	ldi	r25, 0x00	; 0
    aa78:	84 bf       	out	0x34, r24	; 52
    aa7a:	20 83       	st	Z, r18

	/* Issue EEPROM Read command. */
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();

	return NVM.DATA0;
    aa7c:	80 91 c4 01 	lds	r24, 0x01C4
}
    aa80:	08 95       	ret

0000aa82 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    aa82:	80 91 cf 01 	lds	r24, 0x01CF
    aa86:	87 fd       	sbrc	r24, 7
    aa88:	fc cf       	rjmp	.-8      	; 0xaa82 <EEPROM_WaitForNVM>
}
    aa8a:	08 95       	ret

0000aa8c <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    aa8c:	80 91 cf 01 	lds	r24, 0x01CF
    aa90:	87 fd       	sbrc	r24, 7
    aa92:	fc cf       	rjmp	.-8      	; 0xaa8c <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    aa94:	80 91 cf 01 	lds	r24, 0x01CF
    aa98:	81 ff       	sbrs	r24, 1
    aa9a:	0c c0       	rjmp	.+24     	; 0xaab4 <EEPROM_FlushBuffer+0x28>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    aa9c:	86 e3       	ldi	r24, 0x36	; 54
    aa9e:	e0 ec       	ldi	r30, 0xC0	; 192
    aaa0:	f1 e0       	ldi	r31, 0x01	; 1
    aaa2:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    aaa4:	eb ec       	ldi	r30, 0xCB	; 203
    aaa6:	f1 e0       	ldi	r31, 0x01	; 1
    aaa8:	21 e0       	ldi	r18, 0x01	; 1
    aaaa:	30 e0       	ldi	r19, 0x00	; 0
    aaac:	88 ed       	ldi	r24, 0xD8	; 216
    aaae:	90 e0       	ldi	r25, 0x00	; 0
    aab0:	84 bf       	out	0x34, r24	; 52
    aab2:	20 83       	st	Z, r18
    aab4:	08 95       	ret

0000aab6 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    aab6:	df 92       	push	r13
    aab8:	ef 92       	push	r14
    aaba:	ff 92       	push	r15
    aabc:	0f 93       	push	r16
    aabe:	1f 93       	push	r17
    aac0:	e8 2e       	mov	r14, r24
    aac2:	06 2f       	mov	r16, r22
    aac4:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    aac6:	0e 94 46 55 	call	0xaa8c	; 0xaa8c <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    aaca:	e0 ec       	ldi	r30, 0xC0	; 192
    aacc:	f1 e0       	ldi	r31, 0x01	; 1
    aace:	83 e3       	ldi	r24, 0x33	; 51
    aad0:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    aad2:	10 e0       	ldi	r17, 0x00	; 0
    aad4:	0f 71       	andi	r16, 0x1F	; 31
    aad6:	10 70       	andi	r17, 0x00	; 0
    aad8:	ff 24       	eor	r15, r15
    aada:	55 e0       	ldi	r21, 0x05	; 5
    aadc:	ee 0c       	add	r14, r14
    aade:	ff 1c       	adc	r15, r15
    aae0:	5a 95       	dec	r21
    aae2:	e1 f7       	brne	.-8      	; 0xaadc <EEPROM_WriteByte+0x26>
    aae4:	0e 29       	or	r16, r14
    aae6:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    aae8:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    aaea:	81 2f       	mov	r24, r17
    aaec:	8f 71       	andi	r24, 0x1F	; 31
    aaee:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    aaf0:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    aaf2:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    aaf4:	85 e3       	ldi	r24, 0x35	; 53
    aaf6:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    aaf8:	eb ec       	ldi	r30, 0xCB	; 203
    aafa:	f1 e0       	ldi	r31, 0x01	; 1
    aafc:	21 e0       	ldi	r18, 0x01	; 1
    aafe:	30 e0       	ldi	r19, 0x00	; 0
    ab00:	88 ed       	ldi	r24, 0xD8	; 216
    ab02:	90 e0       	ldi	r25, 0x00	; 0
    ab04:	84 bf       	out	0x34, r24	; 52
    ab06:	20 83       	st	Z, r18
	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    ab08:	1f 91       	pop	r17
    ab0a:	0f 91       	pop	r16
    ab0c:	ff 90       	pop	r15
    ab0e:	ef 90       	pop	r14
    ab10:	df 90       	pop	r13
    ab12:	08 95       	ret

0000ab14 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    ab14:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ab16:	e0 ec       	ldi	r30, 0xC0	; 192
    ab18:	f1 e0       	ldi	r31, 0x01	; 1
    ab1a:	80 91 cf 01 	lds	r24, 0x01CF
    ab1e:	87 fd       	sbrc	r24, 7
    ab20:	fa cf       	rjmp	.-12     	; 0xab16 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    ab22:	83 e3       	ldi	r24, 0x33	; 51
    ab24:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    ab26:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    ab2a:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    ab2c:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    ab2e:	64 83       	std	Z+4, r22	; 0x04
}
    ab30:	08 95       	ret

0000ab32 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    ab32:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ab34:	e0 ec       	ldi	r30, 0xC0	; 192
    ab36:	f1 e0       	ldi	r31, 0x01	; 1
    ab38:	80 91 cf 01 	lds	r24, 0x01CF
    ab3c:	87 fd       	sbrc	r24, 7
    ab3e:	fa cf       	rjmp	.-12     	; 0xab34 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    ab40:	83 e3       	ldi	r24, 0x33	; 51
    ab42:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    ab44:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    ab46:	12 82       	std	Z+2, r1	; 0x02
    ab48:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		NVM.ADDR0 = i;
    ab4a:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    ab4e:	8d 91       	ld	r24, X+
    ab50:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    ab52:	9f 5f       	subi	r25, 0xFF	; 255
    ab54:	90 32       	cpi	r25, 0x20	; 32
    ab56:	c9 f7       	brne	.-14     	; 0xab4a <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    ab58:	08 95       	ret

0000ab5a <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    ab5a:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ab5c:	e0 ec       	ldi	r30, 0xC0	; 192
    ab5e:	f1 e0       	ldi	r31, 0x01	; 1
    ab60:	80 91 cf 01 	lds	r24, 0x01CF
    ab64:	87 fd       	sbrc	r24, 7
    ab66:	fa cf       	rjmp	.-12     	; 0xab5c <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    ab68:	89 2f       	mov	r24, r25
    ab6a:	90 e0       	ldi	r25, 0x00	; 0
    ab6c:	65 e0       	ldi	r22, 0x05	; 5
    ab6e:	88 0f       	add	r24, r24
    ab70:	99 1f       	adc	r25, r25
    ab72:	6a 95       	dec	r22
    ab74:	e1 f7       	brne	.-8      	; 0xab6e <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    ab76:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    ab7a:	89 2f       	mov	r24, r25
    ab7c:	8f 71       	andi	r24, 0x1F	; 31
    ab7e:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    ab80:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    ab82:	85 e3       	ldi	r24, 0x35	; 53
    ab84:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    ab86:	eb ec       	ldi	r30, 0xCB	; 203
    ab88:	f1 e0       	ldi	r31, 0x01	; 1
    ab8a:	21 e0       	ldi	r18, 0x01	; 1
    ab8c:	30 e0       	ldi	r19, 0x00	; 0
    ab8e:	88 ed       	ldi	r24, 0xD8	; 216
    ab90:	90 e0       	ldi	r25, 0x00	; 0
    ab92:	84 bf       	out	0x34, r24	; 52
    ab94:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC();
}
    ab96:	08 95       	ret

0000ab98 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    ab98:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ab9a:	e0 ec       	ldi	r30, 0xC0	; 192
    ab9c:	f1 e0       	ldi	r31, 0x01	; 1
    ab9e:	80 91 cf 01 	lds	r24, 0x01CF
    aba2:	87 fd       	sbrc	r24, 7
    aba4:	fa cf       	rjmp	.-12     	; 0xab9a <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    aba6:	89 2f       	mov	r24, r25
    aba8:	90 e0       	ldi	r25, 0x00	; 0
    abaa:	75 e0       	ldi	r23, 0x05	; 5
    abac:	88 0f       	add	r24, r24
    abae:	99 1f       	adc	r25, r25
    abb0:	7a 95       	dec	r23
    abb2:	e1 f7       	brne	.-8      	; 0xabac <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    abb4:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    abb8:	89 2f       	mov	r24, r25
    abba:	8f 71       	andi	r24, 0x1F	; 31
    abbc:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    abbe:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    abc0:	82 e3       	ldi	r24, 0x32	; 50
    abc2:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    abc4:	eb ec       	ldi	r30, 0xCB	; 203
    abc6:	f1 e0       	ldi	r31, 0x01	; 1
    abc8:	21 e0       	ldi	r18, 0x01	; 1
    abca:	30 e0       	ldi	r19, 0x00	; 0
    abcc:	88 ed       	ldi	r24, 0xD8	; 216
    abce:	90 e0       	ldi	r25, 0x00	; 0
    abd0:	84 bf       	out	0x34, r24	; 52
    abd2:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Erase command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    abd4:	08 95       	ret

0000abd6 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    abd6:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    abd8:	e0 ec       	ldi	r30, 0xC0	; 192
    abda:	f1 e0       	ldi	r31, 0x01	; 1
    abdc:	80 91 cf 01 	lds	r24, 0x01CF
    abe0:	87 fd       	sbrc	r24, 7
    abe2:	fa cf       	rjmp	.-12     	; 0xabd8 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    abe4:	89 2f       	mov	r24, r25
    abe6:	90 e0       	ldi	r25, 0x00	; 0
    abe8:	a5 e0       	ldi	r26, 0x05	; 5
    abea:	88 0f       	add	r24, r24
    abec:	99 1f       	adc	r25, r25
    abee:	aa 95       	dec	r26
    abf0:	e1 f7       	brne	.-8      	; 0xabea <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    abf2:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    abf6:	89 2f       	mov	r24, r25
    abf8:	8f 71       	andi	r24, 0x1F	; 31
    abfa:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    abfc:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
        NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    abfe:	84 e3       	ldi	r24, 0x34	; 52
    ac00:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    ac02:	eb ec       	ldi	r30, 0xCB	; 203
    ac04:	f1 e0       	ldi	r31, 0x01	; 1
    ac06:	21 e0       	ldi	r18, 0x01	; 1
    ac08:	30 e0       	ldi	r19, 0x00	; 0
    ac0a:	88 ed       	ldi	r24, 0xD8	; 216
    ac0c:	90 e0       	ldi	r25, 0x00	; 0
    ac0e:	84 bf       	out	0x34, r24	; 52
    ac10:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Split Write command. */
        NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    ac12:	08 95       	ret

0000ac14 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ac14:	80 91 cf 01 	lds	r24, 0x01CF
    ac18:	87 fd       	sbrc	r24, 7
    ac1a:	fc cf       	rjmp	.-8      	; 0xac14 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    ac1c:	80 e3       	ldi	r24, 0x30	; 48
    ac1e:	e0 ec       	ldi	r30, 0xC0	; 192
    ac20:	f1 e0       	ldi	r31, 0x01	; 1
    ac22:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    ac24:	eb ec       	ldi	r30, 0xCB	; 203
    ac26:	f1 e0       	ldi	r31, 0x01	; 1
    ac28:	21 e0       	ldi	r18, 0x01	; 1
    ac2a:	30 e0       	ldi	r19, 0x00	; 0
    ac2c:	88 ed       	ldi	r24, 0xD8	; 216
    ac2e:	90 e0       	ldi	r25, 0x00	; 0
    ac30:	84 bf       	out	0x34, r24	; 52
    ac32:	20 83       	st	Z, r18
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
        NVM_EXEC_WRAPPER();
}
    ac34:	08 95       	ret

0000ac36 <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    ac36:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    ac38:	19 f4       	brne	.+6      	; 0xac40 <xputc+0xa>
	ldi	r24, 13		;
    ac3a:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    ac3c:	01 d0       	rcall	.+2      	; 0xac40 <xputc+0xa>
	ldi	r24, 10		;/
    ac3e:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    ac40:	ff 93       	push	r31
	push	ZL
    ac42:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    ac44:	e0 91 74 25 	lds	r30, 0x2574
	lds	ZH, xfunc_out+1	;/
    ac48:	f0 91 75 25 	lds	r31, 0x2575
	icall
    ac4c:	09 95       	icall
	pop	ZL
    ac4e:	ef 91       	pop	r30
	pop	ZH
    ac50:	ff 91       	pop	r31
	ret
    ac52:	08 95       	ret

0000ac54 <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    ac54:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    ac56:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    ac58:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    ac5a:	11 f0       	breq	.+4      	; 0xac60 <xputs+0xc>
	rcall	xputc
    ac5c:	ec df       	rcall	.-40     	; 0xac36 <xputc>
	rjmp	1b
    ac5e:	fb cf       	rjmp	.-10     	; 0xac56 <xputs+0x2>
2:	ret
    ac60:	08 95       	ret

0000ac62 <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    ac62:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    ac64:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    ac66:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    ac68:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    ac6a:	0c c0       	rjmp	.+24     	; 0xac84 <xitoa+0x22>
	neg	r20		;
    ac6c:	41 95       	neg	r20
	sbrs	r25, 7		;
    ac6e:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    ac70:	09 c0       	rjmp	.+18     	; 0xac84 <xitoa+0x22>
	ldi	r30, '-'	;
    ac72:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    ac74:	60 95       	com	r22
	com	r23		;
    ac76:	70 95       	com	r23
	com	r24		;
    ac78:	80 95       	com	r24
	com	r25		;
    ac7a:	90 95       	com	r25
	adc	r22, r1		;
    ac7c:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    ac7e:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    ac80:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    ac82:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    ac84:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    ac86:	02 c0       	rjmp	.+4      	; 0xac8c <xitoa+0x2a>
	neg	r18		;
    ac88:	21 95       	neg	r18
	ldi	r19, '0'	;/
    ac8a:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    ac8c:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    ac8e:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    ac90:	66 0f       	add	r22, r22
	rol	r23		;
    ac92:	77 1f       	adc	r23, r23
	rol	r24		;
    ac94:	88 1f       	adc	r24, r24
	rol	r25		;
    ac96:	99 1f       	adc	r25, r25
	rol	r26		;
    ac98:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    ac9a:	a4 17       	cp	r26, r20
	brcs	3f		;
    ac9c:	10 f0       	brcs	.+4      	; 0xaca2 <xitoa+0x40>
	sub	r26, r20	;
    ac9e:	a4 1b       	sub	r26, r20
	inc	r22		;
    aca0:	63 95       	inc	r22
3:	dec	r21		;
    aca2:	5a 95       	dec	r21
	brne	2b		;/
    aca4:	a9 f7       	brne	.-22     	; 0xac90 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    aca6:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    aca8:	08 f0       	brcs	.+2      	; 0xacac <xitoa+0x4a>
	subi	r26, -7		;
    acaa:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    acac:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    acae:	af 93       	push	r26
	inc	r31		;/
    acb0:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    acb2:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    acb4:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    acb6:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    acb8:	91 05       	cpc	r25, r1
	brne	1b		;/
    acba:	41 f7       	brne	.-48     	; 0xac8c <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    acbc:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    acbe:	11 f4       	brne	.+4      	; 0xacc4 <xitoa+0x62>
	push	r30		;
    acc0:	ef 93       	push	r30
	inc	r31		;/
    acc2:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    acc4:	f2 17       	cp	r31, r18
	brcc	6f		;
    acc6:	18 f4       	brcc	.+6      	; 0xacce <xitoa+0x6c>
	push	r19		;
    acc8:	3f 93       	push	r19
	inc	r31		;
    acca:	f3 95       	inc	r31
	rjmp	5b		;/
    accc:	fb cf       	rjmp	.-10     	; 0xacc4 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    acce:	8f 91       	pop	r24
	rcall	xputc		;
    acd0:	b2 df       	rcall	.-156    	; 0xac36 <xputc>
	dec	r31		;
    acd2:	fa 95       	dec	r31
	brne	6b		;/
    acd4:	e1 f7       	brne	.-8      	; 0xacce <xitoa+0x6c>

	ret
    acd6:	08 95       	ret

0000acd8 <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    acd8:	df 93       	push	r29
	push	YL
    acda:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    acdc:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    acde:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
    ace0:	26 96       	adiw	r28, 0x06	; 6
#else
	adiw	YL, 5		;Y = pointer to arguments
#endif
	ld	ZL, Y+		;Z = pointer to format string
    ace2:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    ace4:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    ace6:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    ace8:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    acea:	21 f0       	breq	.+8      	; 0xacf4 <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    acec:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    acee:	29 f0       	breq	.+10     	; 0xacfa <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    acf0:	a2 df       	rcall	.-188    	; 0xac36 <xputc>
	rjmp	0b		;/
    acf2:	f9 cf       	rjmp	.-14     	; 0xace6 <xprintf+0xe>
90:	pop	YL
    acf4:	cf 91       	pop	r28
	pop	YH
    acf6:	df 91       	pop	r29
	ret
    acf8:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    acfa:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    acfc:	e8 94       	clt
	_LPMI	r21		;Get flags
    acfe:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    ad00:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    ad02:	b1 f3       	breq	.-20     	; 0xacf0 <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    ad04:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    ad06:	11 f4       	brne	.+4      	; 0xad0c <xprintf+0x34>
	set			;/
    ad08:	68 94       	set
22:	_LPMI	r21		;Get width
    ad0a:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    ad0c:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    ad0e:	48 f4       	brcc	.+18     	; 0xad22 <xprintf+0x4a>
	subi	r21, '0'	;
    ad10:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    ad12:	80 f3       	brcs	.-32     	; 0xacf4 <xprintf+0x1c>
	lsl	r18		;
    ad14:	22 0f       	add	r18, r18
	mov	r0, r18		;
    ad16:	02 2e       	mov	r0, r18
	lsl	r18		;
    ad18:	22 0f       	add	r18, r18
	lsl	r18		;
    ad1a:	22 0f       	add	r18, r18
	add	r18, r0		;
    ad1c:	20 0d       	add	r18, r0
	add	r18, r21	;
    ad1e:	25 0f       	add	r18, r21
	rjmp	22b		;/
    ad20:	f4 cf       	rjmp	.-24     	; 0xad0a <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    ad22:	0e f4       	brtc	.+2      	; 0xad26 <xprintf+0x4e>
	neg	r18		;
    ad24:	21 95       	neg	r18
25:	ld	r24, Y+		;
    ad26:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    ad28:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    ad2a:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    ad2c:	09 f3       	breq	.-62     	; 0xacf0 <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    ad2e:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    ad30:	29 f1       	breq	.+74     	; 0xad7c <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    ad32:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    ad34:	59 f1       	breq	.+86     	; 0xad8c <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    ad36:	bc 01       	movw	r22, r24
	clr	r24		;
    ad38:	88 27       	eor	r24, r24
	clr	r25		;
    ad3a:	99 27       	eor	r25, r25
	clt			;/
    ad3c:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    ad3e:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    ad40:	21 f4       	brne	.+8      	; 0xad4a <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    ad42:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    ad44:	99 91       	ld	r25, Y+
	set			;
    ad46:	68 94       	set
	_LPMI	r21		;/
    ad48:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    ad4a:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    ad4c:	39 f4       	brne	.+14     	; 0xad5c <xprintf+0x84>
	ldi	r20, -10	;
    ad4e:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    ad50:	7e f0       	brts	.+30     	; 0xad70 <xprintf+0x98>
	sbrs	r23, 7		;
    ad52:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    ad54:	0d c0       	rjmp	.+26     	; 0xad70 <xprintf+0x98>
	ldi	r24, -1		;
    ad56:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    ad58:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    ad5a:	0a c0       	rjmp	.+20     	; 0xad70 <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    ad5c:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    ad5e:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    ad60:	39 f0       	breq	.+14     	; 0xad70 <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    ad62:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    ad64:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    ad66:	21 f0       	breq	.+8      	; 0xad70 <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    ad68:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    ad6a:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    ad6c:	09 f0       	breq	.+2      	; 0xad70 <xprintf+0x98>
	rjmp	90b		;abort
    ad6e:	c2 cf       	rjmp	.-124    	; 0xacf4 <xprintf+0x1c>
40:	push	ZH		;Output the value
    ad70:	ff 93       	push	r31
	push	ZL		;
    ad72:	ef 93       	push	r30
	rcall	xitoa		;
    ad74:	76 df       	rcall	.-276    	; 0xac62 <xitoa>
42:	pop	ZL		;
    ad76:	ef 91       	pop	r30
	pop	ZH		;
    ad78:	ff 91       	pop	r31
	rjmp	0b		;/
    ad7a:	b5 cf       	rjmp	.-150    	; 0xace6 <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    ad7c:	ff 93       	push	r31
	push	ZL
    ad7e:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    ad80:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    ad82:	81 91       	ld	r24, Z+
	cpi	r24, 0
    ad84:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    ad86:	b9 f3       	breq	.-18     	; 0xad76 <xprintf+0x9e>
	rcall	xputc
    ad88:	56 df       	rcall	.-340    	; 0xac36 <xputc>
	rjmp	51b
    ad8a:	fb cf       	rjmp	.-10     	; 0xad82 <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    ad8c:	ff 93       	push	r31
	push	ZL
    ad8e:	ef 93       	push	r30
	rcall	xputs
    ad90:	61 df       	rcall	.-318    	; 0xac54 <xputs>
	rjmp	42b
    ad92:	f1 cf       	rjmp	.-30     	; 0xad76 <xprintf+0x9e>

0000ad94 <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    ad94:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    ad96:	dc 01       	movw	r26, r24
	ld	ZL, X+
    ad98:	ed 91       	ld	r30, X+
	ld	ZH, X+
    ad9a:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    ad9c:	22 27       	eor	r18, r18
	clr	r19		;
    ad9e:	33 27       	eor	r19, r19
	clr	r20		;
    ada0:	44 27       	eor	r20, r20
	clr	r21		;/
    ada2:	55 27       	eor	r21, r21
	clt			;T = 0;
    ada4:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    ada6:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    ada8:	01 c0       	rjmp	.+2      	; 0xadac <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    adaa:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    adac:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    adae:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    adb0:	e1 f3       	breq	.-8      	; 0xadaa <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    adb2:	a8 f1       	brcs	.+106    	; 0xae1e <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    adb4:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    adb6:	11 f4       	brne	.+4      	; 0xadbc <xatoi+0x28>
	set			; continue;
    adb8:	68 94       	set
	rjmp	40b		;}
    adba:	f7 cf       	rjmp	.-18     	; 0xadaa <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    adbc:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    adbe:	78 f5       	brcc	.+94     	; 0xae1e <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    adc0:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    adc2:	68 f1       	brcs	.+90     	; 0xae1e <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    adc4:	71 f4       	brne	.+28     	; 0xade2 <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    adc6:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    adc8:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    adca:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    adcc:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    adce:	48 f1       	brcs	.+82     	; 0xae22 <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    add0:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    add2:	11 f4       	brne	.+4      	; 0xadd8 <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    add4:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    add6:	03 c0       	rjmp	.+6      	; 0xadde <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    add8:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    adda:	19 f4       	brne	.+6      	; 0xade2 <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    addc:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    adde:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    ade0:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    ade2:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    ade4:	f0 f0       	brcs	.+60     	; 0xae22 <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    ade6:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    ade8:	08 f0       	brcs	.+2      	; 0xadec <xatoi+0x58>
	subi	r22, 0x20	;/
    adea:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    adec:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    adee:	b8 f0       	brcs	.+46     	; 0xae1e <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    adf0:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    adf2:	18 f0       	brcs	.+6      	; 0xadfa <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    adf4:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    adf6:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    adf8:	90 f0       	brcs	.+36     	; 0xae1e <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    adfa:	69 17       	cp	r22, r25
	brcc	70f		;/
    adfc:	80 f4       	brcc	.+32     	; 0xae1e <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    adfe:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    ae00:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    ae02:	08 f4       	brcc	.+2      	; 0xae06 <xatoi+0x72>
	add	r23, r25	;
    ae04:	79 0f       	add	r23, r25
62:	lsr	r23		;
    ae06:	76 95       	lsr	r23
	ror	r21		;
    ae08:	57 95       	ror	r21
	ror	r20		;
    ae0a:	47 95       	ror	r20
	ror	r19		;
    ae0c:	37 95       	ror	r19
	ror	r18		;
    ae0e:	27 95       	ror	r18
	dec	r24		;
    ae10:	8a 95       	dec	r24
	brne	61b		;/
    ae12:	b9 f7       	brne	.-18     	; 0xae02 <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    ae14:	26 0f       	add	r18, r22
	adc	r19, r24	;
    ae16:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    ae18:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    ae1a:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    ae1c:	e0 cf       	rjmp	.-64     	; 0xadde <xatoi+0x4a>

70:	ldi	r24, 0
    ae1e:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    ae20:	01 c0       	rjmp	.+2      	; 0xae24 <xatoi+0x90>
80:	ldi	r24, 1
    ae22:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    ae24:	4e f4       	brtc	.+18     	; 0xae38 <xatoi+0xa4>
	clr	r22
    ae26:	66 27       	eor	r22, r22
	com	r18
    ae28:	20 95       	com	r18
	com	r19
    ae2a:	30 95       	com	r19
	com	r20
    ae2c:	40 95       	com	r20
	com	r21
    ae2e:	50 95       	com	r21
	adc	r18, r22
    ae30:	26 1f       	adc	r18, r22
	adc	r19, r22
    ae32:	36 1f       	adc	r19, r22
	adc	r20, r22
    ae34:	46 1f       	adc	r20, r22
	adc	r21, r22
    ae36:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    ae38:	fe 93       	st	-X, r31
	st	-X, ZL
    ae3a:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    ae3c:	d0 01       	movw	r26, r0
	st	X+, r18
    ae3e:	2d 93       	st	X+, r18
	st	X+, r19
    ae40:	3d 93       	st	X+, r19
	st	X+, r20
    ae42:	4d 93       	st	X+, r20
	st	X+, r21
    ae44:	5d 93       	st	X+, r21
	clr	r1
    ae46:	11 24       	eor	r1, r1
	ret
    ae48:	08 95       	ret

0000ae4a <__mulsi3>:
    ae4a:	62 9f       	mul	r22, r18
    ae4c:	d0 01       	movw	r26, r0
    ae4e:	73 9f       	mul	r23, r19
    ae50:	f0 01       	movw	r30, r0
    ae52:	82 9f       	mul	r24, r18
    ae54:	e0 0d       	add	r30, r0
    ae56:	f1 1d       	adc	r31, r1
    ae58:	64 9f       	mul	r22, r20
    ae5a:	e0 0d       	add	r30, r0
    ae5c:	f1 1d       	adc	r31, r1
    ae5e:	92 9f       	mul	r25, r18
    ae60:	f0 0d       	add	r31, r0
    ae62:	83 9f       	mul	r24, r19
    ae64:	f0 0d       	add	r31, r0
    ae66:	74 9f       	mul	r23, r20
    ae68:	f0 0d       	add	r31, r0
    ae6a:	65 9f       	mul	r22, r21
    ae6c:	f0 0d       	add	r31, r0
    ae6e:	99 27       	eor	r25, r25
    ae70:	72 9f       	mul	r23, r18
    ae72:	b0 0d       	add	r27, r0
    ae74:	e1 1d       	adc	r30, r1
    ae76:	f9 1f       	adc	r31, r25
    ae78:	63 9f       	mul	r22, r19
    ae7a:	b0 0d       	add	r27, r0
    ae7c:	e1 1d       	adc	r30, r1
    ae7e:	f9 1f       	adc	r31, r25
    ae80:	bd 01       	movw	r22, r26
    ae82:	cf 01       	movw	r24, r30
    ae84:	11 24       	eor	r1, r1
    ae86:	08 95       	ret

0000ae88 <__udivmodhi4>:
    ae88:	aa 1b       	sub	r26, r26
    ae8a:	bb 1b       	sub	r27, r27
    ae8c:	51 e1       	ldi	r21, 0x11	; 17
    ae8e:	07 c0       	rjmp	.+14     	; 0xae9e <__udivmodhi4_ep>

0000ae90 <__udivmodhi4_loop>:
    ae90:	aa 1f       	adc	r26, r26
    ae92:	bb 1f       	adc	r27, r27
    ae94:	a6 17       	cp	r26, r22
    ae96:	b7 07       	cpc	r27, r23
    ae98:	10 f0       	brcs	.+4      	; 0xae9e <__udivmodhi4_ep>
    ae9a:	a6 1b       	sub	r26, r22
    ae9c:	b7 0b       	sbc	r27, r23

0000ae9e <__udivmodhi4_ep>:
    ae9e:	88 1f       	adc	r24, r24
    aea0:	99 1f       	adc	r25, r25
    aea2:	5a 95       	dec	r21
    aea4:	a9 f7       	brne	.-22     	; 0xae90 <__udivmodhi4_loop>
    aea6:	80 95       	com	r24
    aea8:	90 95       	com	r25
    aeaa:	bc 01       	movw	r22, r24
    aeac:	cd 01       	movw	r24, r26
    aeae:	08 95       	ret

0000aeb0 <__divmodhi4>:
    aeb0:	97 fb       	bst	r25, 7
    aeb2:	09 2e       	mov	r0, r25
    aeb4:	07 26       	eor	r0, r23
    aeb6:	0a d0       	rcall	.+20     	; 0xaecc <__divmodhi4_neg1>
    aeb8:	77 fd       	sbrc	r23, 7
    aeba:	04 d0       	rcall	.+8      	; 0xaec4 <__divmodhi4_neg2>
    aebc:	e5 df       	rcall	.-54     	; 0xae88 <__udivmodhi4>
    aebe:	06 d0       	rcall	.+12     	; 0xaecc <__divmodhi4_neg1>
    aec0:	00 20       	and	r0, r0
    aec2:	1a f4       	brpl	.+6      	; 0xaeca <__divmodhi4_exit>

0000aec4 <__divmodhi4_neg2>:
    aec4:	70 95       	com	r23
    aec6:	61 95       	neg	r22
    aec8:	7f 4f       	sbci	r23, 0xFF	; 255

0000aeca <__divmodhi4_exit>:
    aeca:	08 95       	ret

0000aecc <__divmodhi4_neg1>:
    aecc:	f6 f7       	brtc	.-4      	; 0xaeca <__divmodhi4_exit>
    aece:	90 95       	com	r25
    aed0:	81 95       	neg	r24
    aed2:	9f 4f       	sbci	r25, 0xFF	; 255
    aed4:	08 95       	ret

0000aed6 <__udivmodsi4>:
    aed6:	a1 e2       	ldi	r26, 0x21	; 33
    aed8:	1a 2e       	mov	r1, r26
    aeda:	aa 1b       	sub	r26, r26
    aedc:	bb 1b       	sub	r27, r27
    aede:	fd 01       	movw	r30, r26
    aee0:	0d c0       	rjmp	.+26     	; 0xaefc <__udivmodsi4_ep>

0000aee2 <__udivmodsi4_loop>:
    aee2:	aa 1f       	adc	r26, r26
    aee4:	bb 1f       	adc	r27, r27
    aee6:	ee 1f       	adc	r30, r30
    aee8:	ff 1f       	adc	r31, r31
    aeea:	a2 17       	cp	r26, r18
    aeec:	b3 07       	cpc	r27, r19
    aeee:	e4 07       	cpc	r30, r20
    aef0:	f5 07       	cpc	r31, r21
    aef2:	20 f0       	brcs	.+8      	; 0xaefc <__udivmodsi4_ep>
    aef4:	a2 1b       	sub	r26, r18
    aef6:	b3 0b       	sbc	r27, r19
    aef8:	e4 0b       	sbc	r30, r20
    aefa:	f5 0b       	sbc	r31, r21

0000aefc <__udivmodsi4_ep>:
    aefc:	66 1f       	adc	r22, r22
    aefe:	77 1f       	adc	r23, r23
    af00:	88 1f       	adc	r24, r24
    af02:	99 1f       	adc	r25, r25
    af04:	1a 94       	dec	r1
    af06:	69 f7       	brne	.-38     	; 0xaee2 <__udivmodsi4_loop>
    af08:	60 95       	com	r22
    af0a:	70 95       	com	r23
    af0c:	80 95       	com	r24
    af0e:	90 95       	com	r25
    af10:	9b 01       	movw	r18, r22
    af12:	ac 01       	movw	r20, r24
    af14:	bd 01       	movw	r22, r26
    af16:	cf 01       	movw	r24, r30
    af18:	08 95       	ret

0000af1a <__divmodsi4>:
    af1a:	97 fb       	bst	r25, 7
    af1c:	09 2e       	mov	r0, r25
    af1e:	05 26       	eor	r0, r21
    af20:	0e d0       	rcall	.+28     	; 0xaf3e <__divmodsi4_neg1>
    af22:	57 fd       	sbrc	r21, 7
    af24:	04 d0       	rcall	.+8      	; 0xaf2e <__divmodsi4_neg2>
    af26:	d7 df       	rcall	.-82     	; 0xaed6 <__udivmodsi4>
    af28:	0a d0       	rcall	.+20     	; 0xaf3e <__divmodsi4_neg1>
    af2a:	00 1c       	adc	r0, r0
    af2c:	38 f4       	brcc	.+14     	; 0xaf3c <__divmodsi4_exit>

0000af2e <__divmodsi4_neg2>:
    af2e:	50 95       	com	r21
    af30:	40 95       	com	r20
    af32:	30 95       	com	r19
    af34:	21 95       	neg	r18
    af36:	3f 4f       	sbci	r19, 0xFF	; 255
    af38:	4f 4f       	sbci	r20, 0xFF	; 255
    af3a:	5f 4f       	sbci	r21, 0xFF	; 255

0000af3c <__divmodsi4_exit>:
    af3c:	08 95       	ret

0000af3e <__divmodsi4_neg1>:
    af3e:	f6 f7       	brtc	.-4      	; 0xaf3c <__divmodsi4_exit>
    af40:	90 95       	com	r25
    af42:	80 95       	com	r24
    af44:	70 95       	com	r23
    af46:	61 95       	neg	r22
    af48:	7f 4f       	sbci	r23, 0xFF	; 255
    af4a:	8f 4f       	sbci	r24, 0xFF	; 255
    af4c:	9f 4f       	sbci	r25, 0xFF	; 255
    af4e:	08 95       	ret

0000af50 <__prologue_saves__>:
    af50:	2f 92       	push	r2
    af52:	3f 92       	push	r3
    af54:	4f 92       	push	r4
    af56:	5f 92       	push	r5
    af58:	6f 92       	push	r6
    af5a:	7f 92       	push	r7
    af5c:	8f 92       	push	r8
    af5e:	9f 92       	push	r9
    af60:	af 92       	push	r10
    af62:	bf 92       	push	r11
    af64:	cf 92       	push	r12
    af66:	df 92       	push	r13
    af68:	ef 92       	push	r14
    af6a:	ff 92       	push	r15
    af6c:	0f 93       	push	r16
    af6e:	1f 93       	push	r17
    af70:	cf 93       	push	r28
    af72:	df 93       	push	r29
    af74:	cd b7       	in	r28, 0x3d	; 61
    af76:	de b7       	in	r29, 0x3e	; 62
    af78:	ca 1b       	sub	r28, r26
    af7a:	db 0b       	sbc	r29, r27
    af7c:	0f b6       	in	r0, 0x3f	; 63
    af7e:	f8 94       	cli
    af80:	de bf       	out	0x3e, r29	; 62
    af82:	0f be       	out	0x3f, r0	; 63
    af84:	cd bf       	out	0x3d, r28	; 61
    af86:	19 94       	eijmp

0000af88 <__epilogue_restores__>:
    af88:	2a 88       	ldd	r2, Y+18	; 0x12
    af8a:	39 88       	ldd	r3, Y+17	; 0x11
    af8c:	48 88       	ldd	r4, Y+16	; 0x10
    af8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    af90:	6e 84       	ldd	r6, Y+14	; 0x0e
    af92:	7d 84       	ldd	r7, Y+13	; 0x0d
    af94:	8c 84       	ldd	r8, Y+12	; 0x0c
    af96:	9b 84       	ldd	r9, Y+11	; 0x0b
    af98:	aa 84       	ldd	r10, Y+10	; 0x0a
    af9a:	b9 84       	ldd	r11, Y+9	; 0x09
    af9c:	c8 84       	ldd	r12, Y+8	; 0x08
    af9e:	df 80       	ldd	r13, Y+7	; 0x07
    afa0:	ee 80       	ldd	r14, Y+6	; 0x06
    afa2:	fd 80       	ldd	r15, Y+5	; 0x05
    afa4:	0c 81       	ldd	r16, Y+4	; 0x04
    afa6:	1b 81       	ldd	r17, Y+3	; 0x03
    afa8:	aa 81       	ldd	r26, Y+2	; 0x02
    afaa:	b9 81       	ldd	r27, Y+1	; 0x01
    afac:	ce 0f       	add	r28, r30
    afae:	d1 1d       	adc	r29, r1
    afb0:	0f b6       	in	r0, 0x3f	; 63
    afb2:	f8 94       	cli
    afb4:	de bf       	out	0x3e, r29	; 62
    afb6:	0f be       	out	0x3f, r0	; 63
    afb8:	cd bf       	out	0x3d, r28	; 61
    afba:	ed 01       	movw	r28, r26
    afbc:	08 95       	ret

0000afbe <__tablejump2__>:
    afbe:	ee 0f       	add	r30, r30
    afc0:	ff 1f       	adc	r31, r31

0000afc2 <__tablejump__>:
    afc2:	05 90       	lpm	r0, Z+
    afc4:	f4 91       	lpm	r31, Z+
    afc6:	e0 2d       	mov	r30, r0
    afc8:	19 94       	eijmp

0000afca <malloc>:
    afca:	cf 93       	push	r28
    afcc:	df 93       	push	r29
    afce:	bc 01       	movw	r22, r24
    afd0:	82 30       	cpi	r24, 0x02	; 2
    afd2:	91 05       	cpc	r25, r1
    afd4:	10 f4       	brcc	.+4      	; 0xafda <malloc+0x10>
    afd6:	62 e0       	ldi	r22, 0x02	; 2
    afd8:	70 e0       	ldi	r23, 0x00	; 0
    afda:	a0 91 f9 2b 	lds	r26, 0x2BF9
    afde:	b0 91 fa 2b 	lds	r27, 0x2BFA
    afe2:	ed 01       	movw	r28, r26
    afe4:	e0 e0       	ldi	r30, 0x00	; 0
    afe6:	f0 e0       	ldi	r31, 0x00	; 0
    afe8:	40 e0       	ldi	r20, 0x00	; 0
    afea:	50 e0       	ldi	r21, 0x00	; 0
    afec:	21 c0       	rjmp	.+66     	; 0xb030 <malloc+0x66>
    afee:	88 81       	ld	r24, Y
    aff0:	99 81       	ldd	r25, Y+1	; 0x01
    aff2:	86 17       	cp	r24, r22
    aff4:	97 07       	cpc	r25, r23
    aff6:	69 f4       	brne	.+26     	; 0xb012 <malloc+0x48>
    aff8:	8a 81       	ldd	r24, Y+2	; 0x02
    affa:	9b 81       	ldd	r25, Y+3	; 0x03
    affc:	30 97       	sbiw	r30, 0x00	; 0
    affe:	19 f0       	breq	.+6      	; 0xb006 <malloc+0x3c>
    b000:	82 83       	std	Z+2, r24	; 0x02
    b002:	93 83       	std	Z+3, r25	; 0x03
    b004:	04 c0       	rjmp	.+8      	; 0xb00e <malloc+0x44>
    b006:	80 93 f9 2b 	sts	0x2BF9, r24
    b00a:	90 93 fa 2b 	sts	0x2BFA, r25
    b00e:	fe 01       	movw	r30, r28
    b010:	34 c0       	rjmp	.+104    	; 0xb07a <malloc+0xb0>
    b012:	68 17       	cp	r22, r24
    b014:	79 07       	cpc	r23, r25
    b016:	38 f4       	brcc	.+14     	; 0xb026 <malloc+0x5c>
    b018:	41 15       	cp	r20, r1
    b01a:	51 05       	cpc	r21, r1
    b01c:	19 f0       	breq	.+6      	; 0xb024 <malloc+0x5a>
    b01e:	84 17       	cp	r24, r20
    b020:	95 07       	cpc	r25, r21
    b022:	08 f4       	brcc	.+2      	; 0xb026 <malloc+0x5c>
    b024:	ac 01       	movw	r20, r24
    b026:	fe 01       	movw	r30, r28
    b028:	8a 81       	ldd	r24, Y+2	; 0x02
    b02a:	9b 81       	ldd	r25, Y+3	; 0x03
    b02c:	9c 01       	movw	r18, r24
    b02e:	e9 01       	movw	r28, r18
    b030:	20 97       	sbiw	r28, 0x00	; 0
    b032:	e9 f6       	brne	.-70     	; 0xafee <malloc+0x24>
    b034:	41 15       	cp	r20, r1
    b036:	51 05       	cpc	r21, r1
    b038:	a9 f1       	breq	.+106    	; 0xb0a4 <malloc+0xda>
    b03a:	ca 01       	movw	r24, r20
    b03c:	86 1b       	sub	r24, r22
    b03e:	97 0b       	sbc	r25, r23
    b040:	04 97       	sbiw	r24, 0x04	; 4
    b042:	08 f4       	brcc	.+2      	; 0xb046 <malloc+0x7c>
    b044:	ba 01       	movw	r22, r20
    b046:	e0 e0       	ldi	r30, 0x00	; 0
    b048:	f0 e0       	ldi	r31, 0x00	; 0
    b04a:	2a c0       	rjmp	.+84     	; 0xb0a0 <malloc+0xd6>
    b04c:	8d 91       	ld	r24, X+
    b04e:	9c 91       	ld	r25, X
    b050:	11 97       	sbiw	r26, 0x01	; 1
    b052:	84 17       	cp	r24, r20
    b054:	95 07       	cpc	r25, r21
    b056:	f9 f4       	brne	.+62     	; 0xb096 <malloc+0xcc>
    b058:	64 17       	cp	r22, r20
    b05a:	75 07       	cpc	r23, r21
    b05c:	81 f4       	brne	.+32     	; 0xb07e <malloc+0xb4>
    b05e:	12 96       	adiw	r26, 0x02	; 2
    b060:	8d 91       	ld	r24, X+
    b062:	9c 91       	ld	r25, X
    b064:	13 97       	sbiw	r26, 0x03	; 3
    b066:	30 97       	sbiw	r30, 0x00	; 0
    b068:	19 f0       	breq	.+6      	; 0xb070 <malloc+0xa6>
    b06a:	82 83       	std	Z+2, r24	; 0x02
    b06c:	93 83       	std	Z+3, r25	; 0x03
    b06e:	04 c0       	rjmp	.+8      	; 0xb078 <malloc+0xae>
    b070:	80 93 f9 2b 	sts	0x2BF9, r24
    b074:	90 93 fa 2b 	sts	0x2BFA, r25
    b078:	fd 01       	movw	r30, r26
    b07a:	32 96       	adiw	r30, 0x02	; 2
    b07c:	4f c0       	rjmp	.+158    	; 0xb11c <malloc+0x152>
    b07e:	ca 01       	movw	r24, r20
    b080:	86 1b       	sub	r24, r22
    b082:	97 0b       	sbc	r25, r23
    b084:	fd 01       	movw	r30, r26
    b086:	e8 0f       	add	r30, r24
    b088:	f9 1f       	adc	r31, r25
    b08a:	61 93       	st	Z+, r22
    b08c:	71 93       	st	Z+, r23
    b08e:	02 97       	sbiw	r24, 0x02	; 2
    b090:	8d 93       	st	X+, r24
    b092:	9c 93       	st	X, r25
    b094:	43 c0       	rjmp	.+134    	; 0xb11c <malloc+0x152>
    b096:	fd 01       	movw	r30, r26
    b098:	82 81       	ldd	r24, Z+2	; 0x02
    b09a:	93 81       	ldd	r25, Z+3	; 0x03
    b09c:	9c 01       	movw	r18, r24
    b09e:	d9 01       	movw	r26, r18
    b0a0:	10 97       	sbiw	r26, 0x00	; 0
    b0a2:	a1 f6       	brne	.-88     	; 0xb04c <malloc+0x82>
    b0a4:	80 91 f7 2b 	lds	r24, 0x2BF7
    b0a8:	90 91 f8 2b 	lds	r25, 0x2BF8
    b0ac:	89 2b       	or	r24, r25
    b0ae:	41 f4       	brne	.+16     	; 0xb0c0 <malloc+0xf6>
    b0b0:	80 91 dc 24 	lds	r24, 0x24DC
    b0b4:	90 91 dd 24 	lds	r25, 0x24DD
    b0b8:	80 93 f7 2b 	sts	0x2BF7, r24
    b0bc:	90 93 f8 2b 	sts	0x2BF8, r25
    b0c0:	40 91 de 24 	lds	r20, 0x24DE
    b0c4:	50 91 df 24 	lds	r21, 0x24DF
    b0c8:	41 15       	cp	r20, r1
    b0ca:	51 05       	cpc	r21, r1
    b0cc:	41 f4       	brne	.+16     	; 0xb0de <malloc+0x114>
    b0ce:	4d b7       	in	r20, 0x3d	; 61
    b0d0:	5e b7       	in	r21, 0x3e	; 62
    b0d2:	80 91 da 24 	lds	r24, 0x24DA
    b0d6:	90 91 db 24 	lds	r25, 0x24DB
    b0da:	48 1b       	sub	r20, r24
    b0dc:	59 0b       	sbc	r21, r25
    b0de:	20 91 f7 2b 	lds	r18, 0x2BF7
    b0e2:	30 91 f8 2b 	lds	r19, 0x2BF8
    b0e6:	24 17       	cp	r18, r20
    b0e8:	35 07       	cpc	r19, r21
    b0ea:	b0 f4       	brcc	.+44     	; 0xb118 <malloc+0x14e>
    b0ec:	ca 01       	movw	r24, r20
    b0ee:	82 1b       	sub	r24, r18
    b0f0:	93 0b       	sbc	r25, r19
    b0f2:	86 17       	cp	r24, r22
    b0f4:	97 07       	cpc	r25, r23
    b0f6:	80 f0       	brcs	.+32     	; 0xb118 <malloc+0x14e>
    b0f8:	ab 01       	movw	r20, r22
    b0fa:	4e 5f       	subi	r20, 0xFE	; 254
    b0fc:	5f 4f       	sbci	r21, 0xFF	; 255
    b0fe:	84 17       	cp	r24, r20
    b100:	95 07       	cpc	r25, r21
    b102:	50 f0       	brcs	.+20     	; 0xb118 <malloc+0x14e>
    b104:	42 0f       	add	r20, r18
    b106:	53 1f       	adc	r21, r19
    b108:	40 93 f7 2b 	sts	0x2BF7, r20
    b10c:	50 93 f8 2b 	sts	0x2BF8, r21
    b110:	f9 01       	movw	r30, r18
    b112:	61 93       	st	Z+, r22
    b114:	71 93       	st	Z+, r23
    b116:	02 c0       	rjmp	.+4      	; 0xb11c <malloc+0x152>
    b118:	e0 e0       	ldi	r30, 0x00	; 0
    b11a:	f0 e0       	ldi	r31, 0x00	; 0
    b11c:	cf 01       	movw	r24, r30
    b11e:	df 91       	pop	r29
    b120:	cf 91       	pop	r28
    b122:	08 95       	ret

0000b124 <free>:
    b124:	cf 93       	push	r28
    b126:	df 93       	push	r29
    b128:	00 97       	sbiw	r24, 0x00	; 0
    b12a:	09 f4       	brne	.+2      	; 0xb12e <free+0xa>
    b12c:	50 c0       	rjmp	.+160    	; 0xb1ce <free+0xaa>
    b12e:	ec 01       	movw	r28, r24
    b130:	22 97       	sbiw	r28, 0x02	; 2
    b132:	1a 82       	std	Y+2, r1	; 0x02
    b134:	1b 82       	std	Y+3, r1	; 0x03
    b136:	a0 91 f9 2b 	lds	r26, 0x2BF9
    b13a:	b0 91 fa 2b 	lds	r27, 0x2BFA
    b13e:	10 97       	sbiw	r26, 0x00	; 0
    b140:	09 f1       	breq	.+66     	; 0xb184 <free+0x60>
    b142:	40 e0       	ldi	r20, 0x00	; 0
    b144:	50 e0       	ldi	r21, 0x00	; 0
    b146:	ac 17       	cp	r26, r28
    b148:	bd 07       	cpc	r27, r29
    b14a:	08 f1       	brcs	.+66     	; 0xb18e <free+0x6a>
    b14c:	aa 83       	std	Y+2, r26	; 0x02
    b14e:	bb 83       	std	Y+3, r27	; 0x03
    b150:	fe 01       	movw	r30, r28
    b152:	21 91       	ld	r18, Z+
    b154:	31 91       	ld	r19, Z+
    b156:	e2 0f       	add	r30, r18
    b158:	f3 1f       	adc	r31, r19
    b15a:	ae 17       	cp	r26, r30
    b15c:	bf 07       	cpc	r27, r31
    b15e:	79 f4       	brne	.+30     	; 0xb17e <free+0x5a>
    b160:	8d 91       	ld	r24, X+
    b162:	9c 91       	ld	r25, X
    b164:	11 97       	sbiw	r26, 0x01	; 1
    b166:	28 0f       	add	r18, r24
    b168:	39 1f       	adc	r19, r25
    b16a:	2e 5f       	subi	r18, 0xFE	; 254
    b16c:	3f 4f       	sbci	r19, 0xFF	; 255
    b16e:	28 83       	st	Y, r18
    b170:	39 83       	std	Y+1, r19	; 0x01
    b172:	12 96       	adiw	r26, 0x02	; 2
    b174:	8d 91       	ld	r24, X+
    b176:	9c 91       	ld	r25, X
    b178:	13 97       	sbiw	r26, 0x03	; 3
    b17a:	8a 83       	std	Y+2, r24	; 0x02
    b17c:	9b 83       	std	Y+3, r25	; 0x03
    b17e:	41 15       	cp	r20, r1
    b180:	51 05       	cpc	r21, r1
    b182:	71 f4       	brne	.+28     	; 0xb1a0 <free+0x7c>
    b184:	c0 93 f9 2b 	sts	0x2BF9, r28
    b188:	d0 93 fa 2b 	sts	0x2BFA, r29
    b18c:	20 c0       	rjmp	.+64     	; 0xb1ce <free+0xaa>
    b18e:	12 96       	adiw	r26, 0x02	; 2
    b190:	8d 91       	ld	r24, X+
    b192:	9c 91       	ld	r25, X
    b194:	13 97       	sbiw	r26, 0x03	; 3
    b196:	ad 01       	movw	r20, r26
    b198:	00 97       	sbiw	r24, 0x00	; 0
    b19a:	11 f0       	breq	.+4      	; 0xb1a0 <free+0x7c>
    b19c:	dc 01       	movw	r26, r24
    b19e:	d3 cf       	rjmp	.-90     	; 0xb146 <free+0x22>
    b1a0:	fa 01       	movw	r30, r20
    b1a2:	c2 83       	std	Z+2, r28	; 0x02
    b1a4:	d3 83       	std	Z+3, r29	; 0x03
    b1a6:	21 91       	ld	r18, Z+
    b1a8:	31 91       	ld	r19, Z+
    b1aa:	e2 0f       	add	r30, r18
    b1ac:	f3 1f       	adc	r31, r19
    b1ae:	ce 17       	cp	r28, r30
    b1b0:	df 07       	cpc	r29, r31
    b1b2:	69 f4       	brne	.+26     	; 0xb1ce <free+0xaa>
    b1b4:	88 81       	ld	r24, Y
    b1b6:	99 81       	ldd	r25, Y+1	; 0x01
    b1b8:	28 0f       	add	r18, r24
    b1ba:	39 1f       	adc	r19, r25
    b1bc:	2e 5f       	subi	r18, 0xFE	; 254
    b1be:	3f 4f       	sbci	r19, 0xFF	; 255
    b1c0:	fa 01       	movw	r30, r20
    b1c2:	20 83       	st	Z, r18
    b1c4:	31 83       	std	Z+1, r19	; 0x01
    b1c6:	8a 81       	ldd	r24, Y+2	; 0x02
    b1c8:	9b 81       	ldd	r25, Y+3	; 0x03
    b1ca:	82 83       	std	Z+2, r24	; 0x02
    b1cc:	93 83       	std	Z+3, r25	; 0x03
    b1ce:	df 91       	pop	r29
    b1d0:	cf 91       	pop	r28
    b1d2:	08 95       	ret

0000b1d4 <strtoul>:
    b1d4:	3f 92       	push	r3
    b1d6:	4f 92       	push	r4
    b1d8:	5f 92       	push	r5
    b1da:	6f 92       	push	r6
    b1dc:	7f 92       	push	r7
    b1de:	8f 92       	push	r8
    b1e0:	9f 92       	push	r9
    b1e2:	af 92       	push	r10
    b1e4:	bf 92       	push	r11
    b1e6:	cf 92       	push	r12
    b1e8:	df 92       	push	r13
    b1ea:	ef 92       	push	r14
    b1ec:	ff 92       	push	r15
    b1ee:	0f 93       	push	r16
    b1f0:	1f 93       	push	r17
    b1f2:	cf 93       	push	r28
    b1f4:	df 93       	push	r29
    b1f6:	ec 01       	movw	r28, r24
    b1f8:	2b 01       	movw	r4, r22
    b1fa:	6a 01       	movw	r12, r20
    b1fc:	61 15       	cp	r22, r1
    b1fe:	71 05       	cpc	r23, r1
    b200:	19 f0       	breq	.+6      	; 0xb208 <strtoul+0x34>
    b202:	fb 01       	movw	r30, r22
    b204:	80 83       	st	Z, r24
    b206:	91 83       	std	Z+1, r25	; 0x01
    b208:	c1 14       	cp	r12, r1
    b20a:	d1 04       	cpc	r13, r1
    b20c:	49 f0       	breq	.+18     	; 0xb220 <strtoul+0x4c>
    b20e:	c6 01       	movw	r24, r12
    b210:	02 97       	sbiw	r24, 0x02	; 2
    b212:	83 97       	sbiw	r24, 0x23	; 35
    b214:	28 f0       	brcs	.+10     	; 0xb220 <strtoul+0x4c>
    b216:	20 e0       	ldi	r18, 0x00	; 0
    b218:	30 e0       	ldi	r19, 0x00	; 0
    b21a:	40 e0       	ldi	r20, 0x00	; 0
    b21c:	50 e0       	ldi	r21, 0x00	; 0
    b21e:	dc c0       	rjmp	.+440    	; 0xb3d8 <strtoul+0x204>
    b220:	a9 90       	ld	r10, Y+
    b222:	8a 2d       	mov	r24, r10
    b224:	90 e0       	ldi	r25, 0x00	; 0
    b226:	0e 94 00 5a 	call	0xb400	; 0xb400 <isspace>
    b22a:	89 2b       	or	r24, r25
    b22c:	c9 f7       	brne	.-14     	; 0xb220 <strtoul+0x4c>
    b22e:	fd e2       	ldi	r31, 0x2D	; 45
    b230:	af 16       	cp	r10, r31
    b232:	21 f4       	brne	.+8      	; 0xb23c <strtoul+0x68>
    b234:	a9 90       	ld	r10, Y+
    b236:	33 24       	eor	r3, r3
    b238:	33 94       	inc	r3
    b23a:	05 c0       	rjmp	.+10     	; 0xb246 <strtoul+0x72>
    b23c:	8b e2       	ldi	r24, 0x2B	; 43
    b23e:	a8 16       	cp	r10, r24
    b240:	09 f4       	brne	.+2      	; 0xb244 <strtoul+0x70>
    b242:	a9 90       	ld	r10, Y+
    b244:	33 24       	eor	r3, r3
    b246:	c1 14       	cp	r12, r1
    b248:	d1 04       	cpc	r13, r1
    b24a:	21 f0       	breq	.+8      	; 0xb254 <strtoul+0x80>
    b24c:	e0 e1       	ldi	r30, 0x10	; 16
    b24e:	ce 16       	cp	r12, r30
    b250:	d1 04       	cpc	r13, r1
    b252:	11 f5       	brne	.+68     	; 0xb298 <strtoul+0xc4>
    b254:	f0 e3       	ldi	r31, 0x30	; 48
    b256:	af 16       	cp	r10, r31
    b258:	69 f4       	brne	.+26     	; 0xb274 <strtoul+0xa0>
    b25a:	88 81       	ld	r24, Y
    b25c:	88 37       	cpi	r24, 0x78	; 120
    b25e:	11 f0       	breq	.+4      	; 0xb264 <strtoul+0x90>
    b260:	88 35       	cpi	r24, 0x58	; 88
    b262:	41 f4       	brne	.+16     	; 0xb274 <strtoul+0xa0>
    b264:	a9 80       	ldd	r10, Y+1	; 0x01
    b266:	22 96       	adiw	r28, 0x02	; 2
    b268:	82 e0       	ldi	r24, 0x02	; 2
    b26a:	38 2a       	or	r3, r24
    b26c:	20 e1       	ldi	r18, 0x10	; 16
    b26e:	c2 2e       	mov	r12, r18
    b270:	d1 2c       	mov	r13, r1
    b272:	12 c0       	rjmp	.+36     	; 0xb298 <strtoul+0xc4>
    b274:	c1 14       	cp	r12, r1
    b276:	d1 04       	cpc	r13, r1
    b278:	79 f4       	brne	.+30     	; 0xb298 <strtoul+0xc4>
    b27a:	e0 e3       	ldi	r30, 0x30	; 48
    b27c:	ae 16       	cp	r10, r30
    b27e:	59 f1       	breq	.+86     	; 0xb2d6 <strtoul+0x102>
    b280:	99 e9       	ldi	r25, 0x99	; 153
    b282:	e9 2e       	mov	r14, r25
    b284:	99 e9       	ldi	r25, 0x99	; 153
    b286:	f9 2e       	mov	r15, r25
    b288:	99 e9       	ldi	r25, 0x99	; 153
    b28a:	09 2f       	mov	r16, r25
    b28c:	99 e1       	ldi	r25, 0x19	; 25
    b28e:	19 2f       	mov	r17, r25
    b290:	8a e0       	ldi	r24, 0x0A	; 10
    b292:	c8 2e       	mov	r12, r24
    b294:	d1 2c       	mov	r13, r1
    b296:	3a c0       	rjmp	.+116    	; 0xb30c <strtoul+0x138>
    b298:	fa e0       	ldi	r31, 0x0A	; 10
    b29a:	cf 16       	cp	r12, r31
    b29c:	d1 04       	cpc	r13, r1
    b29e:	91 f0       	breq	.+36     	; 0xb2c4 <strtoul+0xf0>
    b2a0:	80 e1       	ldi	r24, 0x10	; 16
    b2a2:	c8 16       	cp	r12, r24
    b2a4:	d1 04       	cpc	r13, r1
    b2a6:	29 f0       	breq	.+10     	; 0xb2b2 <strtoul+0xde>
    b2a8:	e8 e0       	ldi	r30, 0x08	; 8
    b2aa:	ce 16       	cp	r12, r30
    b2ac:	d1 04       	cpc	r13, r1
    b2ae:	f9 f4       	brne	.+62     	; 0xb2ee <strtoul+0x11a>
    b2b0:	15 c0       	rjmp	.+42     	; 0xb2dc <strtoul+0x108>
    b2b2:	bf ef       	ldi	r27, 0xFF	; 255
    b2b4:	eb 2e       	mov	r14, r27
    b2b6:	bf ef       	ldi	r27, 0xFF	; 255
    b2b8:	fb 2e       	mov	r15, r27
    b2ba:	bf ef       	ldi	r27, 0xFF	; 255
    b2bc:	0b 2f       	mov	r16, r27
    b2be:	bf e0       	ldi	r27, 0x0F	; 15
    b2c0:	1b 2f       	mov	r17, r27
    b2c2:	24 c0       	rjmp	.+72     	; 0xb30c <strtoul+0x138>
    b2c4:	a9 e9       	ldi	r26, 0x99	; 153
    b2c6:	ea 2e       	mov	r14, r26
    b2c8:	a9 e9       	ldi	r26, 0x99	; 153
    b2ca:	fa 2e       	mov	r15, r26
    b2cc:	a9 e9       	ldi	r26, 0x99	; 153
    b2ce:	0a 2f       	mov	r16, r26
    b2d0:	a9 e1       	ldi	r26, 0x19	; 25
    b2d2:	1a 2f       	mov	r17, r26
    b2d4:	1b c0       	rjmp	.+54     	; 0xb30c <strtoul+0x138>
    b2d6:	f8 e0       	ldi	r31, 0x08	; 8
    b2d8:	cf 2e       	mov	r12, r31
    b2da:	d1 2c       	mov	r13, r1
    b2dc:	ef ef       	ldi	r30, 0xFF	; 255
    b2de:	ee 2e       	mov	r14, r30
    b2e0:	ef ef       	ldi	r30, 0xFF	; 255
    b2e2:	fe 2e       	mov	r15, r30
    b2e4:	ef ef       	ldi	r30, 0xFF	; 255
    b2e6:	0e 2f       	mov	r16, r30
    b2e8:	ef e1       	ldi	r30, 0x1F	; 31
    b2ea:	1e 2f       	mov	r17, r30
    b2ec:	0f c0       	rjmp	.+30     	; 0xb30c <strtoul+0x138>
    b2ee:	96 01       	movw	r18, r12
    b2f0:	44 27       	eor	r20, r20
    b2f2:	37 fd       	sbrc	r19, 7
    b2f4:	40 95       	com	r20
    b2f6:	54 2f       	mov	r21, r20
    b2f8:	6f ef       	ldi	r22, 0xFF	; 255
    b2fa:	7f ef       	ldi	r23, 0xFF	; 255
    b2fc:	8f ef       	ldi	r24, 0xFF	; 255
    b2fe:	9f ef       	ldi	r25, 0xFF	; 255
    b300:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    b304:	c9 01       	movw	r24, r18
    b306:	da 01       	movw	r26, r20
    b308:	7c 01       	movw	r14, r24
    b30a:	8d 01       	movw	r16, r26
    b30c:	20 e0       	ldi	r18, 0x00	; 0
    b30e:	30 e0       	ldi	r19, 0x00	; 0
    b310:	40 e0       	ldi	r20, 0x00	; 0
    b312:	50 e0       	ldi	r21, 0x00	; 0
    b314:	60 e0       	ldi	r22, 0x00	; 0
    b316:	36 01       	movw	r6, r12
    b318:	88 24       	eor	r8, r8
    b31a:	77 fc       	sbrc	r7, 7
    b31c:	80 94       	com	r8
    b31e:	98 2c       	mov	r9, r8
    b320:	70 ed       	ldi	r23, 0xD0	; 208
    b322:	b7 2e       	mov	r11, r23
    b324:	ba 0c       	add	r11, r10
    b326:	f9 e0       	ldi	r31, 0x09	; 9
    b328:	fb 15       	cp	r31, r11
    b32a:	70 f4       	brcc	.+28     	; 0xb348 <strtoul+0x174>
    b32c:	8a 2d       	mov	r24, r10
    b32e:	81 54       	subi	r24, 0x41	; 65
    b330:	8a 31       	cpi	r24, 0x1A	; 26
    b332:	18 f4       	brcc	.+6      	; 0xb33a <strtoul+0x166>
    b334:	99 ec       	ldi	r25, 0xC9	; 201
    b336:	b9 2e       	mov	r11, r25
    b338:	06 c0       	rjmp	.+12     	; 0xb346 <strtoul+0x172>
    b33a:	8a 2d       	mov	r24, r10
    b33c:	81 56       	subi	r24, 0x61	; 97
    b33e:	8a 31       	cpi	r24, 0x1A	; 26
    b340:	48 f5       	brcc	.+82     	; 0xb394 <strtoul+0x1c0>
    b342:	89 ea       	ldi	r24, 0xA9	; 169
    b344:	b8 2e       	mov	r11, r24
    b346:	ba 0c       	add	r11, r10
    b348:	8b 2d       	mov	r24, r11
    b34a:	90 e0       	ldi	r25, 0x00	; 0
    b34c:	8c 15       	cp	r24, r12
    b34e:	9d 05       	cpc	r25, r13
    b350:	0c f5       	brge	.+66     	; 0xb394 <strtoul+0x1c0>
    b352:	6f 3f       	cpi	r22, 0xFF	; 255
    b354:	e9 f0       	breq	.+58     	; 0xb390 <strtoul+0x1bc>
    b356:	e2 16       	cp	r14, r18
    b358:	f3 06       	cpc	r15, r19
    b35a:	04 07       	cpc	r16, r20
    b35c:	15 07       	cpc	r17, r21
    b35e:	b8 f0       	brcs	.+46     	; 0xb38e <strtoul+0x1ba>
    b360:	ca 01       	movw	r24, r20
    b362:	b9 01       	movw	r22, r18
    b364:	a4 01       	movw	r20, r8
    b366:	93 01       	movw	r18, r6
    b368:	0e 94 25 57 	call	0xae4a	; 0xae4a <__mulsi3>
    b36c:	9b 01       	movw	r18, r22
    b36e:	ac 01       	movw	r20, r24
    b370:	8b 2d       	mov	r24, r11
    b372:	90 e0       	ldi	r25, 0x00	; 0
    b374:	a0 e0       	ldi	r26, 0x00	; 0
    b376:	b0 e0       	ldi	r27, 0x00	; 0
    b378:	28 0f       	add	r18, r24
    b37a:	39 1f       	adc	r19, r25
    b37c:	4a 1f       	adc	r20, r26
    b37e:	5b 1f       	adc	r21, r27
    b380:	28 17       	cp	r18, r24
    b382:	39 07       	cpc	r19, r25
    b384:	4a 07       	cpc	r20, r26
    b386:	5b 07       	cpc	r21, r27
    b388:	10 f0       	brcs	.+4      	; 0xb38e <strtoul+0x1ba>
    b38a:	61 e0       	ldi	r22, 0x01	; 1
    b38c:	01 c0       	rjmp	.+2      	; 0xb390 <strtoul+0x1bc>
    b38e:	6f ef       	ldi	r22, 0xFF	; 255
    b390:	a9 90       	ld	r10, Y+
    b392:	c6 cf       	rjmp	.-116    	; 0xb320 <strtoul+0x14c>
    b394:	41 14       	cp	r4, r1
    b396:	51 04       	cpc	r5, r1
    b398:	51 f0       	breq	.+20     	; 0xb3ae <strtoul+0x1da>
    b39a:	66 23       	and	r22, r22
    b39c:	11 f0       	breq	.+4      	; 0xb3a2 <strtoul+0x1ce>
    b39e:	21 97       	sbiw	r28, 0x01	; 1
    b3a0:	03 c0       	rjmp	.+6      	; 0xb3a8 <strtoul+0x1d4>
    b3a2:	31 fe       	sbrs	r3, 1
    b3a4:	04 c0       	rjmp	.+8      	; 0xb3ae <strtoul+0x1da>
    b3a6:	22 97       	sbiw	r28, 0x02	; 2
    b3a8:	f2 01       	movw	r30, r4
    b3aa:	c0 83       	st	Z, r28
    b3ac:	d1 83       	std	Z+1, r29	; 0x01
    b3ae:	30 fe       	sbrs	r3, 0
    b3b0:	07 c0       	rjmp	.+14     	; 0xb3c0 <strtoul+0x1ec>
    b3b2:	50 95       	com	r21
    b3b4:	40 95       	com	r20
    b3b6:	30 95       	com	r19
    b3b8:	21 95       	neg	r18
    b3ba:	3f 4f       	sbci	r19, 0xFF	; 255
    b3bc:	4f 4f       	sbci	r20, 0xFF	; 255
    b3be:	5f 4f       	sbci	r21, 0xFF	; 255
    b3c0:	67 ff       	sbrs	r22, 7
    b3c2:	0a c0       	rjmp	.+20     	; 0xb3d8 <strtoul+0x204>
    b3c4:	82 e2       	ldi	r24, 0x22	; 34
    b3c6:	90 e0       	ldi	r25, 0x00	; 0
    b3c8:	80 93 fb 2b 	sts	0x2BFB, r24
    b3cc:	90 93 fc 2b 	sts	0x2BFC, r25
    b3d0:	2f ef       	ldi	r18, 0xFF	; 255
    b3d2:	3f ef       	ldi	r19, 0xFF	; 255
    b3d4:	4f ef       	ldi	r20, 0xFF	; 255
    b3d6:	5f ef       	ldi	r21, 0xFF	; 255
    b3d8:	b9 01       	movw	r22, r18
    b3da:	ca 01       	movw	r24, r20
    b3dc:	df 91       	pop	r29
    b3de:	cf 91       	pop	r28
    b3e0:	1f 91       	pop	r17
    b3e2:	0f 91       	pop	r16
    b3e4:	ff 90       	pop	r15
    b3e6:	ef 90       	pop	r14
    b3e8:	df 90       	pop	r13
    b3ea:	cf 90       	pop	r12
    b3ec:	bf 90       	pop	r11
    b3ee:	af 90       	pop	r10
    b3f0:	9f 90       	pop	r9
    b3f2:	8f 90       	pop	r8
    b3f4:	7f 90       	pop	r7
    b3f6:	6f 90       	pop	r6
    b3f8:	5f 90       	pop	r5
    b3fa:	4f 90       	pop	r4
    b3fc:	3f 90       	pop	r3
    b3fe:	08 95       	ret

0000b400 <isspace>:
    b400:	91 11       	cpse	r25, r1
    b402:	64 c2       	rjmp	.+1224   	; 0xb8cc <__ctype_isfalse>
    b404:	80 32       	cpi	r24, 0x20	; 32
    b406:	19 f0       	breq	.+6      	; 0xb40e <isspace+0xe>
    b408:	89 50       	subi	r24, 0x09	; 9
    b40a:	85 50       	subi	r24, 0x05	; 5
    b40c:	d0 f7       	brcc	.-12     	; 0xb402 <isspace+0x2>
    b40e:	08 95       	ret

0000b410 <sprintf>:
    b410:	0f 93       	push	r16
    b412:	1f 93       	push	r17
    b414:	df 93       	push	r29
    b416:	cf 93       	push	r28
    b418:	cd b7       	in	r28, 0x3d	; 61
    b41a:	de b7       	in	r29, 0x3e	; 62
    b41c:	2e 97       	sbiw	r28, 0x0e	; 14
    b41e:	cd bf       	out	0x3d, r28	; 61
    b420:	de bf       	out	0x3e, r29	; 62
    b422:	0e 89       	ldd	r16, Y+22	; 0x16
    b424:	1f 89       	ldd	r17, Y+23	; 0x17
    b426:	86 e0       	ldi	r24, 0x06	; 6
    b428:	8c 83       	std	Y+4, r24	; 0x04
    b42a:	09 83       	std	Y+1, r16	; 0x01
    b42c:	1a 83       	std	Y+2, r17	; 0x02
    b42e:	8f ef       	ldi	r24, 0xFF	; 255
    b430:	9f e7       	ldi	r25, 0x7F	; 127
    b432:	8d 83       	std	Y+5, r24	; 0x05
    b434:	9e 83       	std	Y+6, r25	; 0x06
    b436:	9e 01       	movw	r18, r28
    b438:	26 5e       	subi	r18, 0xE6	; 230
    b43a:	3f 4f       	sbci	r19, 0xFF	; 255
    b43c:	ce 01       	movw	r24, r28
    b43e:	01 96       	adiw	r24, 0x01	; 1
    b440:	68 8d       	ldd	r22, Y+24	; 0x18
    b442:	79 8d       	ldd	r23, Y+25	; 0x19
    b444:	a9 01       	movw	r20, r18
    b446:	0e 94 33 5a 	call	0xb466	; 0xb466 <vfprintf>
    b44a:	2f 81       	ldd	r18, Y+7	; 0x07
    b44c:	38 85       	ldd	r19, Y+8	; 0x08
    b44e:	02 0f       	add	r16, r18
    b450:	13 1f       	adc	r17, r19
    b452:	f8 01       	movw	r30, r16
    b454:	10 82       	st	Z, r1
    b456:	2e 96       	adiw	r28, 0x0e	; 14
    b458:	cd bf       	out	0x3d, r28	; 61
    b45a:	de bf       	out	0x3e, r29	; 62
    b45c:	cf 91       	pop	r28
    b45e:	df 91       	pop	r29
    b460:	1f 91       	pop	r17
    b462:	0f 91       	pop	r16
    b464:	08 95       	ret

0000b466 <vfprintf>:
    b466:	2f 92       	push	r2
    b468:	3f 92       	push	r3
    b46a:	4f 92       	push	r4
    b46c:	5f 92       	push	r5
    b46e:	6f 92       	push	r6
    b470:	7f 92       	push	r7
    b472:	8f 92       	push	r8
    b474:	9f 92       	push	r9
    b476:	af 92       	push	r10
    b478:	bf 92       	push	r11
    b47a:	cf 92       	push	r12
    b47c:	df 92       	push	r13
    b47e:	ef 92       	push	r14
    b480:	ff 92       	push	r15
    b482:	0f 93       	push	r16
    b484:	1f 93       	push	r17
    b486:	df 93       	push	r29
    b488:	cf 93       	push	r28
    b48a:	cd b7       	in	r28, 0x3d	; 61
    b48c:	de b7       	in	r29, 0x3e	; 62
    b48e:	2b 97       	sbiw	r28, 0x0b	; 11
    b490:	cd bf       	out	0x3d, r28	; 61
    b492:	de bf       	out	0x3e, r29	; 62
    b494:	3c 01       	movw	r6, r24
    b496:	2b 01       	movw	r4, r22
    b498:	5a 01       	movw	r10, r20
    b49a:	fc 01       	movw	r30, r24
    b49c:	16 82       	std	Z+6, r1	; 0x06
    b49e:	17 82       	std	Z+7, r1	; 0x07
    b4a0:	83 81       	ldd	r24, Z+3	; 0x03
    b4a2:	81 fd       	sbrc	r24, 1
    b4a4:	03 c0       	rjmp	.+6      	; 0xb4ac <vfprintf+0x46>
    b4a6:	6f ef       	ldi	r22, 0xFF	; 255
    b4a8:	7f ef       	ldi	r23, 0xFF	; 255
    b4aa:	c6 c1       	rjmp	.+908    	; 0xb838 <vfprintf+0x3d2>
    b4ac:	9a e0       	ldi	r25, 0x0A	; 10
    b4ae:	89 2e       	mov	r8, r25
    b4b0:	1e 01       	movw	r2, r28
    b4b2:	08 94       	sec
    b4b4:	21 1c       	adc	r2, r1
    b4b6:	31 1c       	adc	r3, r1
    b4b8:	f3 01       	movw	r30, r6
    b4ba:	23 81       	ldd	r18, Z+3	; 0x03
    b4bc:	f2 01       	movw	r30, r4
    b4be:	23 fd       	sbrc	r18, 3
    b4c0:	85 91       	lpm	r24, Z+
    b4c2:	23 ff       	sbrs	r18, 3
    b4c4:	81 91       	ld	r24, Z+
    b4c6:	2f 01       	movw	r4, r30
    b4c8:	88 23       	and	r24, r24
    b4ca:	09 f4       	brne	.+2      	; 0xb4ce <vfprintf+0x68>
    b4cc:	b2 c1       	rjmp	.+868    	; 0xb832 <vfprintf+0x3cc>
    b4ce:	85 32       	cpi	r24, 0x25	; 37
    b4d0:	39 f4       	brne	.+14     	; 0xb4e0 <vfprintf+0x7a>
    b4d2:	23 fd       	sbrc	r18, 3
    b4d4:	85 91       	lpm	r24, Z+
    b4d6:	23 ff       	sbrs	r18, 3
    b4d8:	81 91       	ld	r24, Z+
    b4da:	2f 01       	movw	r4, r30
    b4dc:	85 32       	cpi	r24, 0x25	; 37
    b4de:	29 f4       	brne	.+10     	; 0xb4ea <vfprintf+0x84>
    b4e0:	90 e0       	ldi	r25, 0x00	; 0
    b4e2:	b3 01       	movw	r22, r6
    b4e4:	0e 94 7f 5c 	call	0xb8fe	; 0xb8fe <fputc>
    b4e8:	e7 cf       	rjmp	.-50     	; 0xb4b8 <vfprintf+0x52>
    b4ea:	98 2f       	mov	r25, r24
    b4ec:	ff 24       	eor	r15, r15
    b4ee:	ee 24       	eor	r14, r14
    b4f0:	99 24       	eor	r9, r9
    b4f2:	ff e1       	ldi	r31, 0x1F	; 31
    b4f4:	ff 15       	cp	r31, r15
    b4f6:	d0 f0       	brcs	.+52     	; 0xb52c <vfprintf+0xc6>
    b4f8:	9b 32       	cpi	r25, 0x2B	; 43
    b4fa:	69 f0       	breq	.+26     	; 0xb516 <vfprintf+0xb0>
    b4fc:	9c 32       	cpi	r25, 0x2C	; 44
    b4fe:	28 f4       	brcc	.+10     	; 0xb50a <vfprintf+0xa4>
    b500:	90 32       	cpi	r25, 0x20	; 32
    b502:	59 f0       	breq	.+22     	; 0xb51a <vfprintf+0xb4>
    b504:	93 32       	cpi	r25, 0x23	; 35
    b506:	91 f4       	brne	.+36     	; 0xb52c <vfprintf+0xc6>
    b508:	0e c0       	rjmp	.+28     	; 0xb526 <vfprintf+0xc0>
    b50a:	9d 32       	cpi	r25, 0x2D	; 45
    b50c:	49 f0       	breq	.+18     	; 0xb520 <vfprintf+0xba>
    b50e:	90 33       	cpi	r25, 0x30	; 48
    b510:	69 f4       	brne	.+26     	; 0xb52c <vfprintf+0xc6>
    b512:	41 e0       	ldi	r20, 0x01	; 1
    b514:	24 c0       	rjmp	.+72     	; 0xb55e <vfprintf+0xf8>
    b516:	52 e0       	ldi	r21, 0x02	; 2
    b518:	f5 2a       	or	r15, r21
    b51a:	84 e0       	ldi	r24, 0x04	; 4
    b51c:	f8 2a       	or	r15, r24
    b51e:	28 c0       	rjmp	.+80     	; 0xb570 <vfprintf+0x10a>
    b520:	98 e0       	ldi	r25, 0x08	; 8
    b522:	f9 2a       	or	r15, r25
    b524:	25 c0       	rjmp	.+74     	; 0xb570 <vfprintf+0x10a>
    b526:	e0 e1       	ldi	r30, 0x10	; 16
    b528:	fe 2a       	or	r15, r30
    b52a:	22 c0       	rjmp	.+68     	; 0xb570 <vfprintf+0x10a>
    b52c:	f7 fc       	sbrc	r15, 7
    b52e:	29 c0       	rjmp	.+82     	; 0xb582 <vfprintf+0x11c>
    b530:	89 2f       	mov	r24, r25
    b532:	80 53       	subi	r24, 0x30	; 48
    b534:	8a 30       	cpi	r24, 0x0A	; 10
    b536:	70 f4       	brcc	.+28     	; 0xb554 <vfprintf+0xee>
    b538:	f6 fe       	sbrs	r15, 6
    b53a:	05 c0       	rjmp	.+10     	; 0xb546 <vfprintf+0xe0>
    b53c:	98 9c       	mul	r9, r8
    b53e:	90 2c       	mov	r9, r0
    b540:	11 24       	eor	r1, r1
    b542:	98 0e       	add	r9, r24
    b544:	15 c0       	rjmp	.+42     	; 0xb570 <vfprintf+0x10a>
    b546:	e8 9c       	mul	r14, r8
    b548:	e0 2c       	mov	r14, r0
    b54a:	11 24       	eor	r1, r1
    b54c:	e8 0e       	add	r14, r24
    b54e:	f0 e2       	ldi	r31, 0x20	; 32
    b550:	ff 2a       	or	r15, r31
    b552:	0e c0       	rjmp	.+28     	; 0xb570 <vfprintf+0x10a>
    b554:	9e 32       	cpi	r25, 0x2E	; 46
    b556:	29 f4       	brne	.+10     	; 0xb562 <vfprintf+0xfc>
    b558:	f6 fc       	sbrc	r15, 6
    b55a:	6b c1       	rjmp	.+726    	; 0xb832 <vfprintf+0x3cc>
    b55c:	40 e4       	ldi	r20, 0x40	; 64
    b55e:	f4 2a       	or	r15, r20
    b560:	07 c0       	rjmp	.+14     	; 0xb570 <vfprintf+0x10a>
    b562:	9c 36       	cpi	r25, 0x6C	; 108
    b564:	19 f4       	brne	.+6      	; 0xb56c <vfprintf+0x106>
    b566:	50 e8       	ldi	r21, 0x80	; 128
    b568:	f5 2a       	or	r15, r21
    b56a:	02 c0       	rjmp	.+4      	; 0xb570 <vfprintf+0x10a>
    b56c:	98 36       	cpi	r25, 0x68	; 104
    b56e:	49 f4       	brne	.+18     	; 0xb582 <vfprintf+0x11c>
    b570:	f2 01       	movw	r30, r4
    b572:	23 fd       	sbrc	r18, 3
    b574:	95 91       	lpm	r25, Z+
    b576:	23 ff       	sbrs	r18, 3
    b578:	91 91       	ld	r25, Z+
    b57a:	2f 01       	movw	r4, r30
    b57c:	99 23       	and	r25, r25
    b57e:	09 f0       	breq	.+2      	; 0xb582 <vfprintf+0x11c>
    b580:	b8 cf       	rjmp	.-144    	; 0xb4f2 <vfprintf+0x8c>
    b582:	89 2f       	mov	r24, r25
    b584:	85 54       	subi	r24, 0x45	; 69
    b586:	83 30       	cpi	r24, 0x03	; 3
    b588:	18 f0       	brcs	.+6      	; 0xb590 <vfprintf+0x12a>
    b58a:	80 52       	subi	r24, 0x20	; 32
    b58c:	83 30       	cpi	r24, 0x03	; 3
    b58e:	38 f4       	brcc	.+14     	; 0xb59e <vfprintf+0x138>
    b590:	44 e0       	ldi	r20, 0x04	; 4
    b592:	50 e0       	ldi	r21, 0x00	; 0
    b594:	a4 0e       	add	r10, r20
    b596:	b5 1e       	adc	r11, r21
    b598:	5f e3       	ldi	r21, 0x3F	; 63
    b59a:	59 83       	std	Y+1, r21	; 0x01
    b59c:	0f c0       	rjmp	.+30     	; 0xb5bc <vfprintf+0x156>
    b59e:	93 36       	cpi	r25, 0x63	; 99
    b5a0:	31 f0       	breq	.+12     	; 0xb5ae <vfprintf+0x148>
    b5a2:	93 37       	cpi	r25, 0x73	; 115
    b5a4:	79 f0       	breq	.+30     	; 0xb5c4 <vfprintf+0x15e>
    b5a6:	93 35       	cpi	r25, 0x53	; 83
    b5a8:	09 f0       	breq	.+2      	; 0xb5ac <vfprintf+0x146>
    b5aa:	56 c0       	rjmp	.+172    	; 0xb658 <vfprintf+0x1f2>
    b5ac:	20 c0       	rjmp	.+64     	; 0xb5ee <vfprintf+0x188>
    b5ae:	f5 01       	movw	r30, r10
    b5b0:	80 81       	ld	r24, Z
    b5b2:	89 83       	std	Y+1, r24	; 0x01
    b5b4:	42 e0       	ldi	r20, 0x02	; 2
    b5b6:	50 e0       	ldi	r21, 0x00	; 0
    b5b8:	a4 0e       	add	r10, r20
    b5ba:	b5 1e       	adc	r11, r21
    b5bc:	61 01       	movw	r12, r2
    b5be:	01 e0       	ldi	r16, 0x01	; 1
    b5c0:	10 e0       	ldi	r17, 0x00	; 0
    b5c2:	12 c0       	rjmp	.+36     	; 0xb5e8 <vfprintf+0x182>
    b5c4:	f5 01       	movw	r30, r10
    b5c6:	c0 80       	ld	r12, Z
    b5c8:	d1 80       	ldd	r13, Z+1	; 0x01
    b5ca:	f6 fc       	sbrc	r15, 6
    b5cc:	03 c0       	rjmp	.+6      	; 0xb5d4 <vfprintf+0x16e>
    b5ce:	6f ef       	ldi	r22, 0xFF	; 255
    b5d0:	7f ef       	ldi	r23, 0xFF	; 255
    b5d2:	02 c0       	rjmp	.+4      	; 0xb5d8 <vfprintf+0x172>
    b5d4:	69 2d       	mov	r22, r9
    b5d6:	70 e0       	ldi	r23, 0x00	; 0
    b5d8:	42 e0       	ldi	r20, 0x02	; 2
    b5da:	50 e0       	ldi	r21, 0x00	; 0
    b5dc:	a4 0e       	add	r10, r20
    b5de:	b5 1e       	adc	r11, r21
    b5e0:	c6 01       	movw	r24, r12
    b5e2:	0e 94 74 5c 	call	0xb8e8	; 0xb8e8 <strnlen>
    b5e6:	8c 01       	movw	r16, r24
    b5e8:	5f e7       	ldi	r21, 0x7F	; 127
    b5ea:	f5 22       	and	r15, r21
    b5ec:	14 c0       	rjmp	.+40     	; 0xb616 <vfprintf+0x1b0>
    b5ee:	f5 01       	movw	r30, r10
    b5f0:	c0 80       	ld	r12, Z
    b5f2:	d1 80       	ldd	r13, Z+1	; 0x01
    b5f4:	f6 fc       	sbrc	r15, 6
    b5f6:	03 c0       	rjmp	.+6      	; 0xb5fe <vfprintf+0x198>
    b5f8:	6f ef       	ldi	r22, 0xFF	; 255
    b5fa:	7f ef       	ldi	r23, 0xFF	; 255
    b5fc:	02 c0       	rjmp	.+4      	; 0xb602 <vfprintf+0x19c>
    b5fe:	69 2d       	mov	r22, r9
    b600:	70 e0       	ldi	r23, 0x00	; 0
    b602:	42 e0       	ldi	r20, 0x02	; 2
    b604:	50 e0       	ldi	r21, 0x00	; 0
    b606:	a4 0e       	add	r10, r20
    b608:	b5 1e       	adc	r11, r21
    b60a:	c6 01       	movw	r24, r12
    b60c:	0e 94 69 5c 	call	0xb8d2	; 0xb8d2 <strnlen_P>
    b610:	8c 01       	movw	r16, r24
    b612:	50 e8       	ldi	r21, 0x80	; 128
    b614:	f5 2a       	or	r15, r21
    b616:	f3 fe       	sbrs	r15, 3
    b618:	07 c0       	rjmp	.+14     	; 0xb628 <vfprintf+0x1c2>
    b61a:	1a c0       	rjmp	.+52     	; 0xb650 <vfprintf+0x1ea>
    b61c:	80 e2       	ldi	r24, 0x20	; 32
    b61e:	90 e0       	ldi	r25, 0x00	; 0
    b620:	b3 01       	movw	r22, r6
    b622:	0e 94 7f 5c 	call	0xb8fe	; 0xb8fe <fputc>
    b626:	ea 94       	dec	r14
    b628:	8e 2d       	mov	r24, r14
    b62a:	90 e0       	ldi	r25, 0x00	; 0
    b62c:	08 17       	cp	r16, r24
    b62e:	19 07       	cpc	r17, r25
    b630:	a8 f3       	brcs	.-22     	; 0xb61c <vfprintf+0x1b6>
    b632:	0e c0       	rjmp	.+28     	; 0xb650 <vfprintf+0x1ea>
    b634:	f6 01       	movw	r30, r12
    b636:	f7 fc       	sbrc	r15, 7
    b638:	85 91       	lpm	r24, Z+
    b63a:	f7 fe       	sbrs	r15, 7
    b63c:	81 91       	ld	r24, Z+
    b63e:	6f 01       	movw	r12, r30
    b640:	90 e0       	ldi	r25, 0x00	; 0
    b642:	b3 01       	movw	r22, r6
    b644:	0e 94 7f 5c 	call	0xb8fe	; 0xb8fe <fputc>
    b648:	e1 10       	cpse	r14, r1
    b64a:	ea 94       	dec	r14
    b64c:	01 50       	subi	r16, 0x01	; 1
    b64e:	10 40       	sbci	r17, 0x00	; 0
    b650:	01 15       	cp	r16, r1
    b652:	11 05       	cpc	r17, r1
    b654:	79 f7       	brne	.-34     	; 0xb634 <vfprintf+0x1ce>
    b656:	ea c0       	rjmp	.+468    	; 0xb82c <vfprintf+0x3c6>
    b658:	94 36       	cpi	r25, 0x64	; 100
    b65a:	11 f0       	breq	.+4      	; 0xb660 <vfprintf+0x1fa>
    b65c:	99 36       	cpi	r25, 0x69	; 105
    b65e:	69 f5       	brne	.+90     	; 0xb6ba <vfprintf+0x254>
    b660:	f7 fe       	sbrs	r15, 7
    b662:	08 c0       	rjmp	.+16     	; 0xb674 <vfprintf+0x20e>
    b664:	f5 01       	movw	r30, r10
    b666:	20 81       	ld	r18, Z
    b668:	31 81       	ldd	r19, Z+1	; 0x01
    b66a:	42 81       	ldd	r20, Z+2	; 0x02
    b66c:	53 81       	ldd	r21, Z+3	; 0x03
    b66e:	84 e0       	ldi	r24, 0x04	; 4
    b670:	90 e0       	ldi	r25, 0x00	; 0
    b672:	0a c0       	rjmp	.+20     	; 0xb688 <vfprintf+0x222>
    b674:	f5 01       	movw	r30, r10
    b676:	80 81       	ld	r24, Z
    b678:	91 81       	ldd	r25, Z+1	; 0x01
    b67a:	9c 01       	movw	r18, r24
    b67c:	44 27       	eor	r20, r20
    b67e:	37 fd       	sbrc	r19, 7
    b680:	40 95       	com	r20
    b682:	54 2f       	mov	r21, r20
    b684:	82 e0       	ldi	r24, 0x02	; 2
    b686:	90 e0       	ldi	r25, 0x00	; 0
    b688:	a8 0e       	add	r10, r24
    b68a:	b9 1e       	adc	r11, r25
    b68c:	9f e6       	ldi	r25, 0x6F	; 111
    b68e:	f9 22       	and	r15, r25
    b690:	57 ff       	sbrs	r21, 7
    b692:	09 c0       	rjmp	.+18     	; 0xb6a6 <vfprintf+0x240>
    b694:	50 95       	com	r21
    b696:	40 95       	com	r20
    b698:	30 95       	com	r19
    b69a:	21 95       	neg	r18
    b69c:	3f 4f       	sbci	r19, 0xFF	; 255
    b69e:	4f 4f       	sbci	r20, 0xFF	; 255
    b6a0:	5f 4f       	sbci	r21, 0xFF	; 255
    b6a2:	e0 e8       	ldi	r30, 0x80	; 128
    b6a4:	fe 2a       	or	r15, r30
    b6a6:	ca 01       	movw	r24, r20
    b6a8:	b9 01       	movw	r22, r18
    b6aa:	a1 01       	movw	r20, r2
    b6ac:	2a e0       	ldi	r18, 0x0A	; 10
    b6ae:	30 e0       	ldi	r19, 0x00	; 0
    b6b0:	0e 94 ab 5c 	call	0xb956	; 0xb956 <__ultoa_invert>
    b6b4:	d8 2e       	mov	r13, r24
    b6b6:	d2 18       	sub	r13, r2
    b6b8:	40 c0       	rjmp	.+128    	; 0xb73a <vfprintf+0x2d4>
    b6ba:	95 37       	cpi	r25, 0x75	; 117
    b6bc:	29 f4       	brne	.+10     	; 0xb6c8 <vfprintf+0x262>
    b6be:	1f 2d       	mov	r17, r15
    b6c0:	1f 7e       	andi	r17, 0xEF	; 239
    b6c2:	2a e0       	ldi	r18, 0x0A	; 10
    b6c4:	30 e0       	ldi	r19, 0x00	; 0
    b6c6:	1d c0       	rjmp	.+58     	; 0xb702 <vfprintf+0x29c>
    b6c8:	1f 2d       	mov	r17, r15
    b6ca:	19 7f       	andi	r17, 0xF9	; 249
    b6cc:	9f 36       	cpi	r25, 0x6F	; 111
    b6ce:	61 f0       	breq	.+24     	; 0xb6e8 <vfprintf+0x282>
    b6d0:	90 37       	cpi	r25, 0x70	; 112
    b6d2:	20 f4       	brcc	.+8      	; 0xb6dc <vfprintf+0x276>
    b6d4:	98 35       	cpi	r25, 0x58	; 88
    b6d6:	09 f0       	breq	.+2      	; 0xb6da <vfprintf+0x274>
    b6d8:	ac c0       	rjmp	.+344    	; 0xb832 <vfprintf+0x3cc>
    b6da:	0f c0       	rjmp	.+30     	; 0xb6fa <vfprintf+0x294>
    b6dc:	90 37       	cpi	r25, 0x70	; 112
    b6de:	39 f0       	breq	.+14     	; 0xb6ee <vfprintf+0x288>
    b6e0:	98 37       	cpi	r25, 0x78	; 120
    b6e2:	09 f0       	breq	.+2      	; 0xb6e6 <vfprintf+0x280>
    b6e4:	a6 c0       	rjmp	.+332    	; 0xb832 <vfprintf+0x3cc>
    b6e6:	04 c0       	rjmp	.+8      	; 0xb6f0 <vfprintf+0x28a>
    b6e8:	28 e0       	ldi	r18, 0x08	; 8
    b6ea:	30 e0       	ldi	r19, 0x00	; 0
    b6ec:	0a c0       	rjmp	.+20     	; 0xb702 <vfprintf+0x29c>
    b6ee:	10 61       	ori	r17, 0x10	; 16
    b6f0:	14 fd       	sbrc	r17, 4
    b6f2:	14 60       	ori	r17, 0x04	; 4
    b6f4:	20 e1       	ldi	r18, 0x10	; 16
    b6f6:	30 e0       	ldi	r19, 0x00	; 0
    b6f8:	04 c0       	rjmp	.+8      	; 0xb702 <vfprintf+0x29c>
    b6fa:	14 fd       	sbrc	r17, 4
    b6fc:	16 60       	ori	r17, 0x06	; 6
    b6fe:	20 e1       	ldi	r18, 0x10	; 16
    b700:	32 e0       	ldi	r19, 0x02	; 2
    b702:	17 ff       	sbrs	r17, 7
    b704:	08 c0       	rjmp	.+16     	; 0xb716 <vfprintf+0x2b0>
    b706:	f5 01       	movw	r30, r10
    b708:	60 81       	ld	r22, Z
    b70a:	71 81       	ldd	r23, Z+1	; 0x01
    b70c:	82 81       	ldd	r24, Z+2	; 0x02
    b70e:	93 81       	ldd	r25, Z+3	; 0x03
    b710:	44 e0       	ldi	r20, 0x04	; 4
    b712:	50 e0       	ldi	r21, 0x00	; 0
    b714:	08 c0       	rjmp	.+16     	; 0xb726 <vfprintf+0x2c0>
    b716:	f5 01       	movw	r30, r10
    b718:	80 81       	ld	r24, Z
    b71a:	91 81       	ldd	r25, Z+1	; 0x01
    b71c:	bc 01       	movw	r22, r24
    b71e:	80 e0       	ldi	r24, 0x00	; 0
    b720:	90 e0       	ldi	r25, 0x00	; 0
    b722:	42 e0       	ldi	r20, 0x02	; 2
    b724:	50 e0       	ldi	r21, 0x00	; 0
    b726:	a4 0e       	add	r10, r20
    b728:	b5 1e       	adc	r11, r21
    b72a:	a1 01       	movw	r20, r2
    b72c:	0e 94 ab 5c 	call	0xb956	; 0xb956 <__ultoa_invert>
    b730:	d8 2e       	mov	r13, r24
    b732:	d2 18       	sub	r13, r2
    b734:	8f e7       	ldi	r24, 0x7F	; 127
    b736:	f8 2e       	mov	r15, r24
    b738:	f1 22       	and	r15, r17
    b73a:	f6 fe       	sbrs	r15, 6
    b73c:	0b c0       	rjmp	.+22     	; 0xb754 <vfprintf+0x2ee>
    b73e:	5e ef       	ldi	r21, 0xFE	; 254
    b740:	f5 22       	and	r15, r21
    b742:	d9 14       	cp	r13, r9
    b744:	38 f4       	brcc	.+14     	; 0xb754 <vfprintf+0x2ee>
    b746:	f4 fe       	sbrs	r15, 4
    b748:	07 c0       	rjmp	.+14     	; 0xb758 <vfprintf+0x2f2>
    b74a:	f2 fc       	sbrc	r15, 2
    b74c:	05 c0       	rjmp	.+10     	; 0xb758 <vfprintf+0x2f2>
    b74e:	8f ee       	ldi	r24, 0xEF	; 239
    b750:	f8 22       	and	r15, r24
    b752:	02 c0       	rjmp	.+4      	; 0xb758 <vfprintf+0x2f2>
    b754:	1d 2d       	mov	r17, r13
    b756:	01 c0       	rjmp	.+2      	; 0xb75a <vfprintf+0x2f4>
    b758:	19 2d       	mov	r17, r9
    b75a:	f4 fe       	sbrs	r15, 4
    b75c:	0d c0       	rjmp	.+26     	; 0xb778 <vfprintf+0x312>
    b75e:	fe 01       	movw	r30, r28
    b760:	ed 0d       	add	r30, r13
    b762:	f1 1d       	adc	r31, r1
    b764:	80 81       	ld	r24, Z
    b766:	80 33       	cpi	r24, 0x30	; 48
    b768:	19 f4       	brne	.+6      	; 0xb770 <vfprintf+0x30a>
    b76a:	99 ee       	ldi	r25, 0xE9	; 233
    b76c:	f9 22       	and	r15, r25
    b76e:	08 c0       	rjmp	.+16     	; 0xb780 <vfprintf+0x31a>
    b770:	1f 5f       	subi	r17, 0xFF	; 255
    b772:	f2 fe       	sbrs	r15, 2
    b774:	05 c0       	rjmp	.+10     	; 0xb780 <vfprintf+0x31a>
    b776:	03 c0       	rjmp	.+6      	; 0xb77e <vfprintf+0x318>
    b778:	8f 2d       	mov	r24, r15
    b77a:	86 78       	andi	r24, 0x86	; 134
    b77c:	09 f0       	breq	.+2      	; 0xb780 <vfprintf+0x31a>
    b77e:	1f 5f       	subi	r17, 0xFF	; 255
    b780:	0f 2d       	mov	r16, r15
    b782:	f3 fc       	sbrc	r15, 3
    b784:	14 c0       	rjmp	.+40     	; 0xb7ae <vfprintf+0x348>
    b786:	f0 fe       	sbrs	r15, 0
    b788:	0f c0       	rjmp	.+30     	; 0xb7a8 <vfprintf+0x342>
    b78a:	1e 15       	cp	r17, r14
    b78c:	10 f0       	brcs	.+4      	; 0xb792 <vfprintf+0x32c>
    b78e:	9d 2c       	mov	r9, r13
    b790:	0b c0       	rjmp	.+22     	; 0xb7a8 <vfprintf+0x342>
    b792:	9d 2c       	mov	r9, r13
    b794:	9e 0c       	add	r9, r14
    b796:	91 1a       	sub	r9, r17
    b798:	1e 2d       	mov	r17, r14
    b79a:	06 c0       	rjmp	.+12     	; 0xb7a8 <vfprintf+0x342>
    b79c:	80 e2       	ldi	r24, 0x20	; 32
    b79e:	90 e0       	ldi	r25, 0x00	; 0
    b7a0:	b3 01       	movw	r22, r6
    b7a2:	0e 94 7f 5c 	call	0xb8fe	; 0xb8fe <fputc>
    b7a6:	1f 5f       	subi	r17, 0xFF	; 255
    b7a8:	1e 15       	cp	r17, r14
    b7aa:	c0 f3       	brcs	.-16     	; 0xb79c <vfprintf+0x336>
    b7ac:	04 c0       	rjmp	.+8      	; 0xb7b6 <vfprintf+0x350>
    b7ae:	1e 15       	cp	r17, r14
    b7b0:	10 f4       	brcc	.+4      	; 0xb7b6 <vfprintf+0x350>
    b7b2:	e1 1a       	sub	r14, r17
    b7b4:	01 c0       	rjmp	.+2      	; 0xb7b8 <vfprintf+0x352>
    b7b6:	ee 24       	eor	r14, r14
    b7b8:	04 ff       	sbrs	r16, 4
    b7ba:	0f c0       	rjmp	.+30     	; 0xb7da <vfprintf+0x374>
    b7bc:	80 e3       	ldi	r24, 0x30	; 48
    b7be:	90 e0       	ldi	r25, 0x00	; 0
    b7c0:	b3 01       	movw	r22, r6
    b7c2:	0e 94 7f 5c 	call	0xb8fe	; 0xb8fe <fputc>
    b7c6:	02 ff       	sbrs	r16, 2
    b7c8:	1d c0       	rjmp	.+58     	; 0xb804 <vfprintf+0x39e>
    b7ca:	01 fd       	sbrc	r16, 1
    b7cc:	03 c0       	rjmp	.+6      	; 0xb7d4 <vfprintf+0x36e>
    b7ce:	88 e7       	ldi	r24, 0x78	; 120
    b7d0:	90 e0       	ldi	r25, 0x00	; 0
    b7d2:	0e c0       	rjmp	.+28     	; 0xb7f0 <vfprintf+0x38a>
    b7d4:	88 e5       	ldi	r24, 0x58	; 88
    b7d6:	90 e0       	ldi	r25, 0x00	; 0
    b7d8:	0b c0       	rjmp	.+22     	; 0xb7f0 <vfprintf+0x38a>
    b7da:	80 2f       	mov	r24, r16
    b7dc:	86 78       	andi	r24, 0x86	; 134
    b7de:	91 f0       	breq	.+36     	; 0xb804 <vfprintf+0x39e>
    b7e0:	01 ff       	sbrs	r16, 1
    b7e2:	02 c0       	rjmp	.+4      	; 0xb7e8 <vfprintf+0x382>
    b7e4:	8b e2       	ldi	r24, 0x2B	; 43
    b7e6:	01 c0       	rjmp	.+2      	; 0xb7ea <vfprintf+0x384>
    b7e8:	80 e2       	ldi	r24, 0x20	; 32
    b7ea:	f7 fc       	sbrc	r15, 7
    b7ec:	8d e2       	ldi	r24, 0x2D	; 45
    b7ee:	90 e0       	ldi	r25, 0x00	; 0
    b7f0:	b3 01       	movw	r22, r6
    b7f2:	0e 94 7f 5c 	call	0xb8fe	; 0xb8fe <fputc>
    b7f6:	06 c0       	rjmp	.+12     	; 0xb804 <vfprintf+0x39e>
    b7f8:	80 e3       	ldi	r24, 0x30	; 48
    b7fa:	90 e0       	ldi	r25, 0x00	; 0
    b7fc:	b3 01       	movw	r22, r6
    b7fe:	0e 94 7f 5c 	call	0xb8fe	; 0xb8fe <fputc>
    b802:	9a 94       	dec	r9
    b804:	d9 14       	cp	r13, r9
    b806:	c0 f3       	brcs	.-16     	; 0xb7f8 <vfprintf+0x392>
    b808:	da 94       	dec	r13
    b80a:	f1 01       	movw	r30, r2
    b80c:	ed 0d       	add	r30, r13
    b80e:	f1 1d       	adc	r31, r1
    b810:	80 81       	ld	r24, Z
    b812:	90 e0       	ldi	r25, 0x00	; 0
    b814:	b3 01       	movw	r22, r6
    b816:	0e 94 7f 5c 	call	0xb8fe	; 0xb8fe <fputc>
    b81a:	dd 20       	and	r13, r13
    b81c:	a9 f7       	brne	.-22     	; 0xb808 <vfprintf+0x3a2>
    b81e:	06 c0       	rjmp	.+12     	; 0xb82c <vfprintf+0x3c6>
    b820:	80 e2       	ldi	r24, 0x20	; 32
    b822:	90 e0       	ldi	r25, 0x00	; 0
    b824:	b3 01       	movw	r22, r6
    b826:	0e 94 7f 5c 	call	0xb8fe	; 0xb8fe <fputc>
    b82a:	ea 94       	dec	r14
    b82c:	ee 20       	and	r14, r14
    b82e:	c1 f7       	brne	.-16     	; 0xb820 <vfprintf+0x3ba>
    b830:	43 ce       	rjmp	.-890    	; 0xb4b8 <vfprintf+0x52>
    b832:	f3 01       	movw	r30, r6
    b834:	66 81       	ldd	r22, Z+6	; 0x06
    b836:	77 81       	ldd	r23, Z+7	; 0x07
    b838:	cb 01       	movw	r24, r22
    b83a:	2b 96       	adiw	r28, 0x0b	; 11
    b83c:	cd bf       	out	0x3d, r28	; 61
    b83e:	de bf       	out	0x3e, r29	; 62
    b840:	cf 91       	pop	r28
    b842:	df 91       	pop	r29
    b844:	1f 91       	pop	r17
    b846:	0f 91       	pop	r16
    b848:	ff 90       	pop	r15
    b84a:	ef 90       	pop	r14
    b84c:	df 90       	pop	r13
    b84e:	cf 90       	pop	r12
    b850:	bf 90       	pop	r11
    b852:	af 90       	pop	r10
    b854:	9f 90       	pop	r9
    b856:	8f 90       	pop	r8
    b858:	7f 90       	pop	r7
    b85a:	6f 90       	pop	r6
    b85c:	5f 90       	pop	r5
    b85e:	4f 90       	pop	r4
    b860:	3f 90       	pop	r3
    b862:	2f 90       	pop	r2
    b864:	08 95       	ret

0000b866 <__eerd_byte_x128a1>:
    b866:	03 d0       	rcall	.+6      	; 0xb86e <eeprom_mapen>
    b868:	80 81       	ld	r24, Z
    b86a:	99 27       	eor	r25, r25
    b86c:	08 95       	ret

0000b86e <eeprom_mapen>:
    b86e:	e0 ec       	ldi	r30, 0xC0	; 192
    b870:	f1 e0       	ldi	r31, 0x01	; 1
    b872:	37 85       	ldd	r19, Z+15	; 0x0f
    b874:	37 fd       	sbrc	r19, 7
    b876:	fd cf       	rjmp	.-6      	; 0xb872 <eeprom_mapen+0x4>
    b878:	34 85       	ldd	r19, Z+12	; 0x0c
    b87a:	38 60       	ori	r19, 0x08	; 8
    b87c:	34 87       	std	Z+12, r19	; 0x0c
    b87e:	fc 01       	movw	r30, r24
    b880:	e0 50       	subi	r30, 0x00	; 0
    b882:	f0 4f       	sbci	r31, 0xF0	; 240
    b884:	08 95       	ret

0000b886 <__eewr_byte_x128a1>:
    b886:	26 2f       	mov	r18, r22

0000b888 <__eewr_r18_x128a1>:
    b888:	e0 ec       	ldi	r30, 0xC0	; 192
    b88a:	f1 e0       	ldi	r31, 0x01	; 1
    b88c:	37 85       	ldd	r19, Z+15	; 0x0f
    b88e:	37 fd       	sbrc	r19, 7
    b890:	fd cf       	rjmp	.-6      	; 0xb88c <__eewr_r18_x128a1+0x4>
    b892:	34 85       	ldd	r19, Z+12	; 0x0c
    b894:	37 7f       	andi	r19, 0xF7	; 247
    b896:	34 87       	std	Z+12, r19	; 0x0c
    b898:	37 85       	ldd	r19, Z+15	; 0x0f
    b89a:	31 ff       	sbrs	r19, 1
    b89c:	09 c0       	rjmp	.+18     	; 0xb8b0 <__eewr_r18_x128a1+0x28>
    b89e:	36 e3       	ldi	r19, 0x36	; 54
    b8a0:	32 87       	std	Z+10, r19	; 0x0a
    b8a2:	38 ed       	ldi	r19, 0xD8	; 216
    b8a4:	34 bf       	out	0x34, r19	; 52
    b8a6:	31 e0       	ldi	r19, 0x01	; 1
    b8a8:	33 87       	std	Z+11, r19	; 0x0b
    b8aa:	37 85       	ldd	r19, Z+15	; 0x0f
    b8ac:	37 fd       	sbrc	r19, 7
    b8ae:	fd cf       	rjmp	.-6      	; 0xb8aa <__eewr_r18_x128a1+0x22>
    b8b0:	33 e3       	ldi	r19, 0x33	; 51
    b8b2:	32 87       	std	Z+10, r19	; 0x0a
    b8b4:	80 83       	st	Z, r24
    b8b6:	91 83       	std	Z+1, r25	; 0x01
    b8b8:	12 82       	std	Z+2, r1	; 0x02
    b8ba:	24 83       	std	Z+4, r18	; 0x04
    b8bc:	25 e3       	ldi	r18, 0x35	; 53
    b8be:	22 87       	std	Z+10, r18	; 0x0a
    b8c0:	28 ed       	ldi	r18, 0xD8	; 216
    b8c2:	31 e0       	ldi	r19, 0x01	; 1
    b8c4:	24 bf       	out	0x34, r18	; 52
    b8c6:	33 87       	std	Z+11, r19	; 0x0b
    b8c8:	01 96       	adiw	r24, 0x01	; 1
    b8ca:	08 95       	ret

0000b8cc <__ctype_isfalse>:
    b8cc:	99 27       	eor	r25, r25
    b8ce:	88 27       	eor	r24, r24

0000b8d0 <__ctype_istrue>:
    b8d0:	08 95       	ret

0000b8d2 <strnlen_P>:
    b8d2:	fc 01       	movw	r30, r24
    b8d4:	05 90       	lpm	r0, Z+
    b8d6:	61 50       	subi	r22, 0x01	; 1
    b8d8:	70 40       	sbci	r23, 0x00	; 0
    b8da:	01 10       	cpse	r0, r1
    b8dc:	d8 f7       	brcc	.-10     	; 0xb8d4 <strnlen_P+0x2>
    b8de:	80 95       	com	r24
    b8e0:	90 95       	com	r25
    b8e2:	8e 0f       	add	r24, r30
    b8e4:	9f 1f       	adc	r25, r31
    b8e6:	08 95       	ret

0000b8e8 <strnlen>:
    b8e8:	fc 01       	movw	r30, r24
    b8ea:	61 50       	subi	r22, 0x01	; 1
    b8ec:	70 40       	sbci	r23, 0x00	; 0
    b8ee:	01 90       	ld	r0, Z+
    b8f0:	01 10       	cpse	r0, r1
    b8f2:	d8 f7       	brcc	.-10     	; 0xb8ea <strnlen+0x2>
    b8f4:	80 95       	com	r24
    b8f6:	90 95       	com	r25
    b8f8:	8e 0f       	add	r24, r30
    b8fa:	9f 1f       	adc	r25, r31
    b8fc:	08 95       	ret

0000b8fe <fputc>:
    b8fe:	0f 93       	push	r16
    b900:	1f 93       	push	r17
    b902:	cf 93       	push	r28
    b904:	df 93       	push	r29
    b906:	8c 01       	movw	r16, r24
    b908:	eb 01       	movw	r28, r22
    b90a:	8b 81       	ldd	r24, Y+3	; 0x03
    b90c:	81 ff       	sbrs	r24, 1
    b90e:	1b c0       	rjmp	.+54     	; 0xb946 <fputc+0x48>
    b910:	82 ff       	sbrs	r24, 2
    b912:	0d c0       	rjmp	.+26     	; 0xb92e <fputc+0x30>
    b914:	2e 81       	ldd	r18, Y+6	; 0x06
    b916:	3f 81       	ldd	r19, Y+7	; 0x07
    b918:	8c 81       	ldd	r24, Y+4	; 0x04
    b91a:	9d 81       	ldd	r25, Y+5	; 0x05
    b91c:	28 17       	cp	r18, r24
    b91e:	39 07       	cpc	r19, r25
    b920:	64 f4       	brge	.+24     	; 0xb93a <fputc+0x3c>
    b922:	e8 81       	ld	r30, Y
    b924:	f9 81       	ldd	r31, Y+1	; 0x01
    b926:	01 93       	st	Z+, r16
    b928:	e8 83       	st	Y, r30
    b92a:	f9 83       	std	Y+1, r31	; 0x01
    b92c:	06 c0       	rjmp	.+12     	; 0xb93a <fputc+0x3c>
    b92e:	e8 85       	ldd	r30, Y+8	; 0x08
    b930:	f9 85       	ldd	r31, Y+9	; 0x09
    b932:	80 2f       	mov	r24, r16
    b934:	19 95       	eicall
    b936:	89 2b       	or	r24, r25
    b938:	31 f4       	brne	.+12     	; 0xb946 <fputc+0x48>
    b93a:	8e 81       	ldd	r24, Y+6	; 0x06
    b93c:	9f 81       	ldd	r25, Y+7	; 0x07
    b93e:	01 96       	adiw	r24, 0x01	; 1
    b940:	8e 83       	std	Y+6, r24	; 0x06
    b942:	9f 83       	std	Y+7, r25	; 0x07
    b944:	02 c0       	rjmp	.+4      	; 0xb94a <fputc+0x4c>
    b946:	0f ef       	ldi	r16, 0xFF	; 255
    b948:	1f ef       	ldi	r17, 0xFF	; 255
    b94a:	c8 01       	movw	r24, r16
    b94c:	df 91       	pop	r29
    b94e:	cf 91       	pop	r28
    b950:	1f 91       	pop	r17
    b952:	0f 91       	pop	r16
    b954:	08 95       	ret

0000b956 <__ultoa_invert>:
    b956:	fa 01       	movw	r30, r20
    b958:	aa 27       	eor	r26, r26
    b95a:	28 30       	cpi	r18, 0x08	; 8
    b95c:	51 f1       	breq	.+84     	; 0xb9b2 <__ultoa_invert+0x5c>
    b95e:	20 31       	cpi	r18, 0x10	; 16
    b960:	81 f1       	breq	.+96     	; 0xb9c2 <__ultoa_invert+0x6c>
    b962:	e8 94       	clt
    b964:	6f 93       	push	r22
    b966:	6e 7f       	andi	r22, 0xFE	; 254
    b968:	6e 5f       	subi	r22, 0xFE	; 254
    b96a:	7f 4f       	sbci	r23, 0xFF	; 255
    b96c:	8f 4f       	sbci	r24, 0xFF	; 255
    b96e:	9f 4f       	sbci	r25, 0xFF	; 255
    b970:	af 4f       	sbci	r26, 0xFF	; 255
    b972:	b1 e0       	ldi	r27, 0x01	; 1
    b974:	3e d0       	rcall	.+124    	; 0xb9f2 <__ultoa_invert+0x9c>
    b976:	b4 e0       	ldi	r27, 0x04	; 4
    b978:	3c d0       	rcall	.+120    	; 0xb9f2 <__ultoa_invert+0x9c>
    b97a:	67 0f       	add	r22, r23
    b97c:	78 1f       	adc	r23, r24
    b97e:	89 1f       	adc	r24, r25
    b980:	9a 1f       	adc	r25, r26
    b982:	a1 1d       	adc	r26, r1
    b984:	68 0f       	add	r22, r24
    b986:	79 1f       	adc	r23, r25
    b988:	8a 1f       	adc	r24, r26
    b98a:	91 1d       	adc	r25, r1
    b98c:	a1 1d       	adc	r26, r1
    b98e:	6a 0f       	add	r22, r26
    b990:	71 1d       	adc	r23, r1
    b992:	81 1d       	adc	r24, r1
    b994:	91 1d       	adc	r25, r1
    b996:	a1 1d       	adc	r26, r1
    b998:	20 d0       	rcall	.+64     	; 0xb9da <__ultoa_invert+0x84>
    b99a:	09 f4       	brne	.+2      	; 0xb99e <__ultoa_invert+0x48>
    b99c:	68 94       	set
    b99e:	3f 91       	pop	r19
    b9a0:	2a e0       	ldi	r18, 0x0A	; 10
    b9a2:	26 9f       	mul	r18, r22
    b9a4:	11 24       	eor	r1, r1
    b9a6:	30 19       	sub	r19, r0
    b9a8:	30 5d       	subi	r19, 0xD0	; 208
    b9aa:	31 93       	st	Z+, r19
    b9ac:	de f6       	brtc	.-74     	; 0xb964 <__ultoa_invert+0xe>
    b9ae:	cf 01       	movw	r24, r30
    b9b0:	08 95       	ret
    b9b2:	46 2f       	mov	r20, r22
    b9b4:	47 70       	andi	r20, 0x07	; 7
    b9b6:	40 5d       	subi	r20, 0xD0	; 208
    b9b8:	41 93       	st	Z+, r20
    b9ba:	b3 e0       	ldi	r27, 0x03	; 3
    b9bc:	0f d0       	rcall	.+30     	; 0xb9dc <__ultoa_invert+0x86>
    b9be:	c9 f7       	brne	.-14     	; 0xb9b2 <__ultoa_invert+0x5c>
    b9c0:	f6 cf       	rjmp	.-20     	; 0xb9ae <__ultoa_invert+0x58>
    b9c2:	46 2f       	mov	r20, r22
    b9c4:	4f 70       	andi	r20, 0x0F	; 15
    b9c6:	40 5d       	subi	r20, 0xD0	; 208
    b9c8:	4a 33       	cpi	r20, 0x3A	; 58
    b9ca:	18 f0       	brcs	.+6      	; 0xb9d2 <__ultoa_invert+0x7c>
    b9cc:	49 5d       	subi	r20, 0xD9	; 217
    b9ce:	31 fd       	sbrc	r19, 1
    b9d0:	40 52       	subi	r20, 0x20	; 32
    b9d2:	41 93       	st	Z+, r20
    b9d4:	02 d0       	rcall	.+4      	; 0xb9da <__ultoa_invert+0x84>
    b9d6:	a9 f7       	brne	.-22     	; 0xb9c2 <__ultoa_invert+0x6c>
    b9d8:	ea cf       	rjmp	.-44     	; 0xb9ae <__ultoa_invert+0x58>
    b9da:	b4 e0       	ldi	r27, 0x04	; 4
    b9dc:	a6 95       	lsr	r26
    b9de:	97 95       	ror	r25
    b9e0:	87 95       	ror	r24
    b9e2:	77 95       	ror	r23
    b9e4:	67 95       	ror	r22
    b9e6:	ba 95       	dec	r27
    b9e8:	c9 f7       	brne	.-14     	; 0xb9dc <__ultoa_invert+0x86>
    b9ea:	00 97       	sbiw	r24, 0x00	; 0
    b9ec:	61 05       	cpc	r22, r1
    b9ee:	71 05       	cpc	r23, r1
    b9f0:	08 95       	ret
    b9f2:	9b 01       	movw	r18, r22
    b9f4:	ac 01       	movw	r20, r24
    b9f6:	0a 2e       	mov	r0, r26
    b9f8:	06 94       	lsr	r0
    b9fa:	57 95       	ror	r21
    b9fc:	47 95       	ror	r20
    b9fe:	37 95       	ror	r19
    ba00:	27 95       	ror	r18
    ba02:	ba 95       	dec	r27
    ba04:	c9 f7       	brne	.-14     	; 0xb9f8 <__ultoa_invert+0xa2>
    ba06:	62 0f       	add	r22, r18
    ba08:	73 1f       	adc	r23, r19
    ba0a:	84 1f       	adc	r24, r20
    ba0c:	95 1f       	adc	r25, r21
    ba0e:	a0 1d       	adc	r26, r0
    ba10:	08 95       	ret

0000ba12 <_exit>:
    ba12:	f8 94       	cli

0000ba14 <__stop_program>:
    ba14:	ff cf       	rjmp	.-2      	; 0xba14 <__stop_program>
